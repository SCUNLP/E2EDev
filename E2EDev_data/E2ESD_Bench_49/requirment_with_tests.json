{
    "summary": {
        "overview": "The Student Grade Book application allows users to add students with their respective grades and view the list of students. It provides a form for inputting student details and dynamically updates the student list upon form submission.",
        "predefined_options": "The application sets predefined options for the grade input field, allowing values between 0 and 100 to ensure valid grade entries.",
        "external_resources": "The application uses external resources such as stylesheets (styles.css) and JavaScript files (script.js) to enhance the UI and functionality.",
        "external_js_libraries": "No external JavaScript libraries are explicitly mentioned in the provided code."
    },
    "finegrained_rewith_test": {
        "1": {
            "requirement": {
                "description": "The web application should provide a 'Student Grade Book' interface where users can add student details. The interface must include a form with a 'Student Name' input field (data-testid: 'student-name') and a 'Grade (0-100)' input field (data-testid: 'student-grade'), both of which are required. The grade input should accept numeric values between 0 and 100, inclusive. A submit button labeled 'Add Student' (data-testid: 'add-student-button') should be present to submit the form. Upon clicking the 'Add Student' button, if the inputs are valid, the student's name and grade should be appended to a list (data-testid: 'student-list') as a new list item with a unique data-id attribute. The form fields should then be reset to empty. If the grade is outside the 0-100 range, the system should prevent submission, display an error message indicating the valid range, and retain the entered values in the input fields. The system should handle normal cases, edge cases (minimum and maximum grades), and error scenarios (invalid grades) as described."
            },
            "test_cases": [
                {
                    "test_case": [
                        "Feature: Student Grade Book Management\n  The system should allow users to add student details to a list and reset the form fields upon submission.\n\n\n  Scenario: [Normal] Add a student with valid name and grade\n    Given the \"Student Grade Book\" page is loaded\n    And the \"Student Name\" input field with data-testid \"student-name\" is present\n    And the \"Grade (0-100)\" input field with data-testid \"student-grade\" is present\n    And the \"Add Student\" button with data-testid \"add-student-button\" is present\n    When the user enters \"John Doe\" into the \"Student Name\" input field with data-testid \"student-name\"\n    And the user enters \"85\" into the \"Grade (0-100)\" input field with data-testid \"student-grade\"\n    And the user clicks the \"Add Student\" button with data-testid \"add-student-button\"\n    Then the student list with data-testid \"student-list\" should contain an item with text \"John Doe: 85\"\n    And the \"Student Name\" input field with data-testid \"student-name\" should be empty\n    And the \"Grade (0-100)\" input field with data-testid \"student-grade\" should be empty\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the \"Student Grade Book\" page is loaded')\ndef step_given_page_loaded(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)\n\n@given('the \"Student Name\" input field with data-testid \"student-name\" is present')\ndef step_given_student_name_field_present(context):\n    WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='student-name']\"))\n    )\n    time.sleep(1)\n\n@given('the \"Grade (0-100)\" input field with data-testid \"student-grade\" is present')\ndef step_given_student_grade_field_present(context):\n    WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='student-grade']\"))\n    )\n    time.sleep(1)\n\n@given('the \"Add Student\" button with data-testid \"add-student-button\" is present')\ndef step_given_add_student_button_present(context):\n    WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='add-student-button']\"))\n    )\n    time.sleep(1)\n\n@when('the user enters \"John Doe\" into the \"Student Name\" input field with data-testid \"student-name\"')\ndef step_when_enter_student_name(context):\n    student_name_field = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='student-name']\")\n    student_name_field.send_keys(\"John Doe\")\n    time.sleep(1)\n\n@when('the user enters \"85\" into the \"Grade (0-100)\" input field with data-testid \"student-grade\"')\ndef step_when_enter_student_grade(context):\n    student_grade_field = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='student-grade']\")\n    student_grade_field.send_keys(\"85\")\n    time.sleep(1)\n\n@when('the user clicks the \"Add Student\" button with data-testid \"add-student-button\"')\ndef step_when_click_add_student_button(context):\n    add_student_button = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='add-student-button']\")\n    add_student_button.click()\n    time.sleep(1)\n\n@then('the student list with data-testid \"student-list\" should contain an item with text \"John Doe: 85\"')\ndef step_then_student_list_contains_item(context):\n    student_list = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='student-list']\")\n    WebDriverWait(context.driver, 10).until(\n        lambda driver: \"John Doe: 85\" in student_list.text\n    )\n    assert \"John Doe: 85\" in student_list.text, \"Expected 'John Doe: 85' in student list\"\n    time.sleep(1)\n\n@then('the \"Student Name\" input field with data-testid \"student-name\" should be empty')\ndef step_then_student_name_field_empty(context):\n    student_name_field = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='student-name']\")\n    assert student_name_field.get_attribute('value') == \"\", \"Expected 'Student Name' field to be empty\"\n    time.sleep(1)\n\n@then('the \"Grade (0-100)\" input field with data-testid \"student-grade\" should be empty')\ndef step_then_student_grade_field_empty(context):\n    student_grade_field = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='student-grade']\")\n    assert student_grade_field.get_attribute('value') == \"\", \"Expected 'Grade (0-100)' field to be empty\"\n    time.sleep(1)\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: Student Grade Book Management\n  The system should allow users to add student details to a list and reset the form fields upon submission.\n\n\n  Scenario: [Edge] Add a student with minimum grade\n    Given the \"Student Grade Book\" page is loaded\n    And the \"Student Name\" input field with data-testid \"student-name\" is present\n    And the \"Grade (0-100)\" input field with data-testid \"student-grade\" is present\n    And the \"Add Student\" button with data-testid \"add-student-button\" is present\n    When the user enters \"Jane Smith\" into the \"Student Name\" input field with data-testid \"student-name\"\n    And the user enters \"0\" into the \"Grade (0-100)\" input field with data-testid \"student-grade\"\n    And the user clicks the \"Add Student\" button with data-testid \"add-student-button\"\n    Then the student list with data-testid \"student-list\" should contain an item with text \"Jane Smith: 0\"\n    And the \"Student Name\" input field with data-testid \"student-name\" should be empty\n    And the \"Grade (0-100)\" input field with data-testid \"student-grade\" should be empty\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the \"Student Grade Book\" page is loaded')\ndef step_impl(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)\n\n@given('the \"Student Name\" input field with data-testid \"student-name\" is present')\ndef step_impl(context):\n    WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='student-name']\"))\n    )\n    time.sleep(1)\n\n@given('the \"Grade (0-100)\" input field with data-testid \"student-grade\" is present')\ndef step_impl(context):\n    WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='student-grade']\"))\n    )\n    time.sleep(1)\n\n@given('the \"Add Student\" button with data-testid \"add-student-button\" is present')\ndef step_impl(context):\n    WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='add-student-button']\"))\n    )\n    time.sleep(1)\n\n@when('the user enters \"Jane Smith\" into the \"Student Name\" input field with data-testid \"student-name\"')\ndef step_impl(context):\n    name_input = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='student-name']\")\n    name_input.clear()\n    name_input.send_keys(\"Jane Smith\")\n    time.sleep(1)\n\n@when('the user enters \"0\" into the \"Grade (0-100)\" input field with data-testid \"student-grade\"')\ndef step_impl(context):\n    grade_input = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='student-grade']\")\n    grade_input.clear()\n    grade_input.send_keys(\"0\")\n    time.sleep(1)\n\n@when('the user clicks the \"Add Student\" button with data-testid \"add-student-button\"')\ndef step_impl(context):\n    add_button = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='add-student-button']\")\n    add_button.click()\n    time.sleep(1)\n\n@then('the student list with data-testid \"student-list\" should contain an item with text \"Jane Smith: 0\"')\ndef step_impl(context):\n    student_list = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='student-list']\")\n    student_items = student_list.find_elements(By.TAG_NAME, \"li\")\n    assert any(\"Jane Smith: 0\" in item.text for item in student_items), \"Student 'Jane Smith: 0' not found in list\"\n    time.sleep(1)\n\n@then('the \"Student Name\" input field with data-testid \"student-name\" should be empty')\ndef step_impl(context):\n    name_input = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='student-name']\")\n    assert name_input.get_attribute(\"value\") == \"\", \"Student Name input is not empty\"\n    time.sleep(1)\n\n@then('the \"Grade (0-100)\" input field with data-testid \"student-grade\" should be empty')\ndef step_impl(context):\n    grade_input = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='student-grade']\")\n    assert grade_input.get_attribute(\"value\") == \"\", \"Grade input is not empty\"\n    time.sleep(1)\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: Student Grade Book Management\n  The system should allow users to add student details to a list and reset the form fields upon submission.\n\n\n  Scenario: [Edge] Add a student with maximum grade\n    Given the \"Student Grade Book\" page is loaded\n    And the \"Student Name\" input field with data-testid \"student-name\" is present\n    And the \"Grade (0-100)\" input field with data-testid \"student-grade\" is present\n    And the \"Add Student\" button with data-testid \"add-student-button\" is present\n    When the user enters \"Alice Johnson\" into the \"Student Name\" input field with data-testid \"student-name\"\n    And the user enters \"100\" into the \"Grade (0-100)\" input field with data-testid \"student-grade\"\n    And the user clicks the \"Add Student\" button with data-testid \"add-student-button\"\n    Then the student list with data-testid \"student-list\" should contain an item with text \"Alice Johnson: 100\"\n    And the \"Student Name\" input field with data-testid \"student-name\" should be empty\n    And the \"Grade (0-100)\" input field with data-testid \"student-grade\" should be empty\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the \"Student Grade Book\" page is loaded')\ndef step_impl(context):\n    context.driver = webdriver.Chrome()  # Initialize the WebDriver\n    context.driver.get(f\"file://index.html\")  # Load the test page\n    context.driver.maximize_window()\n    time.sleep(1)  # Allow the page to load completely\n\n@given('the \"Student Name\" input field with data-testid \"student-name\" is present')\ndef step_impl(context):\n    WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='student-name']\"))\n    )\n\n@given('the \"Grade (0-100)\" input field with data-testid \"student-grade\" is present')\ndef step_impl(context):\n    WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='student-grade']\"))\n    )\n\n@given('the \"Add Student\" button with data-testid \"add-student-button\" is present')\ndef step_impl(context):\n    WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='add-student-button']\"))\n    )\n\n@when('the user enters \"Alice Johnson\" into the \"Student Name\" input field with data-testid \"student-name\"')\ndef step_impl(context):\n    name_input = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='student-name']\"))\n    )\n    name_input.clear()\n    name_input.send_keys(\"Alice Johnson\")\n    time.sleep(1)\n\n@when('the user enters \"100\" into the \"Grade (0-100)\" input field with data-testid \"student-grade\"')\ndef step_impl(context):\n    grade_input = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='student-grade']\"))\n    )\n    grade_input.clear()\n    grade_input.send_keys(\"100\")\n    time.sleep(1)\n\n@when('the user clicks the \"Add Student\" button with data-testid \"add-student-button\"')\ndef step_impl(context):\n    add_button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='add-student-button']\"))\n    )\n    add_button.click()\n    time.sleep(1)\n\n@then('the student list with data-testid \"student-list\" should contain an item with text \"Alice Johnson: 100\"')\ndef step_impl(context):\n    student_list = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='student-list']\"))\n    )\n    student_items = student_list.find_elements(By.TAG_NAME, \"li\")\n    assert any(\"Alice Johnson: 100\" in item.text for item in student_items), \\\n        \"Expected 'Alice Johnson: 100' in the student list, but it was not found.\"\n\n@then('the \"Student Name\" input field with data-testid \"student-name\" should be empty')\ndef step_impl(context):\n    name_input = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='student-name']\"))\n    )\n    assert name_input.get_attribute(\"value\") == \"\", \\\n        \"Expected 'Student Name' input field to be empty, but it was not.\"\n\n@then('the \"Grade (0-100)\" input field with data-testid \"student-grade\" should be empty')\ndef step_impl(context):\n    grade_input = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='student-grade']\"))\n    )\n    assert grade_input.get_attribute(\"value\") == \"\", \\\n        \"Expected 'Grade (0-100)' input field to be empty, but it was not.\"\n\n# Teardown to close the browser after the test\ndef after_scenario(context, scenario):\n    if hasattr(context, 'driver'):\n        context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: Student Grade Book Management\n  The system should allow users to add student details to a list and reset the form fields upon submission.\n\n\n  Scenario: [Error] Attempt to add a student with an invalid grade\n    Given the \"Student Grade Book\" page is loaded\n    And the \"Student Name\" input field with data-testid \"student-name\" is present\n    And the \"Grade (0-100)\" input field with data-testid \"student-grade\" is present\n    And the \"Add Student\" button with data-testid \"add-student-button\" is present\n    When the user enters \"Bob Brown\" into the \"Student Name\" input field with data-testid \"student-name\"\n    And the user enters \"105\" into the \"Grade (0-100)\" input field with data-testid \"student-grade\"\n    And the user clicks the \"Add Student\" button with data-testid \"add-student-button\"\n    Then the student list with data-testid \"student-list\" should not contain an item with text \"Bob Brown: 105\"\n    And the \"Student Name\" input field with data-testid \"student-name\" should retain the value \"Bob Brown\"\n    And the \"Grade (0-100)\" input field with data-testid \"student-grade\" should retain the value \"105\""
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the \"Student Grade Book\" page is loaded')\ndef step_given_page_loaded(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)\n\n@given('the \"Student Name\" input field with data-testid \"student-name\" is present')\ndef step_given_student_name_field_present(context):\n    WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='student-name']\"))\n    )\n    time.sleep(1)\n\n@given('the \"Grade (0-100)\" input field with data-testid \"student-grade\" is present')\ndef step_given_student_grade_field_present(context):\n    WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='student-grade']\"))\n    )\n    time.sleep(1)\n\n@given('the \"Add Student\" button with data-testid \"add-student-button\" is present')\ndef step_given_add_student_button_present(context):\n    WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='add-student-button']\"))\n    )\n    time.sleep(1)\n\n@when('the user enters \"Bob Brown\" into the \"Student Name\" input field with data-testid \"student-name\"')\ndef step_when_enter_student_name(context):\n    name_field = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='student-name']\")\n    name_field.clear()\n    name_field.send_keys(\"Bob Brown\")\n    time.sleep(1)\n\n@when('the user enters \"105\" into the \"Grade (0-100)\" input field with data-testid \"student-grade\"')\ndef step_when_enter_student_grade(context):\n    grade_field = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='student-grade']\")\n    grade_field.clear()\n    grade_field.send_keys(\"105\")\n    time.sleep(1)\n\n@when('the user clicks the \"Add Student\" button with data-testid \"add-student-button\"')\ndef step_when_click_add_student_button(context):\n    add_button = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='add-student-button']\")\n    WebDriverWait(context.driver, 10).until(EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='add-student-button']\")))\n    add_button.click()\n    time.sleep(1)\n\n@then('the student list with data-testid \"student-list\" should not contain an item with text \"Bob Brown: 105\"')\ndef step_then_student_list_should_not_contain_item(context):\n    student_list = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='student-list']\")\n    assert \"Bob Brown: 105\" not in student_list.text, \"Student list contains invalid entry\"\n\n@then('an error message should be displayed indicating the grade must be between 0 and 100')\ndef step_then_error_message_displayed(context):\n    # Assuming error message is displayed in an element with data-testid 'error-message'\n    error_message = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='error-message']\")\n    assert error_message.is_displayed(), \"Error message is not displayed\"\n    assert \"grade must be between 0 and 100\" in error_message.text.lower(), \"Incorrect error message\"\n\n@then('the \"Student Name\" input field with data-testid \"student-name\" should retain the value \"Bob Brown\"')\ndef step_then_student_name_field_retains_value(context):\n    name_field = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='student-name']\")\n    assert name_field.get_attribute(\"value\") == \"Bob Brown\", \"Student Name field did not retain value\"\n\n@then('the \"Grade (0-100)\" input field with data-testid \"student-grade\" should retain the value \"105\"')\ndef step_then_student_grade_field_retains_value(context):\n    grade_field = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='student-grade']\")\n    assert grade_field.get_attribute(\"value\") == \"105\", \"Grade field did not retain value\"\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                }
            ]
        },
        "2": {
            "requirement": {
                "description": "The system must validate form submissions on the 'Student Grade Book' page to ensure data integrity. Specifically: 1) The 'Student Name' input field (identified by data-testid='student-name') must not be empty. 2) The 'Grade (0-100)' input field (identified by data-testid='student-grade') must contain a numeric value within the inclusive range of 0 to 100. If either condition is violated, the form submission should be blocked, and no new student entry should be added to the student list (identified by data-testid='student-list'). Upon successful validation, the form submission should add a new list item to the student list, displaying the student's name and grade in the format 'Name: Grade'. Each list item must have a unique data-id attribute in the format 'student-item-{index}', where {index} is the 1-based position of the student in the list. The form (identified by data-testid='student-form') should reset after a successful submission. The system must handle edge cases, including grades at the boundaries (0 and 100), and prevent submission for grades below 0 or above 100. All interactions should be performed using the specified data-testid attributes for consistency and testability."
            },
            "test_cases": [
                {
                    "test_case": [
                        "Feature: Form Submission Validation\n  The system should prevent form submission if the 'Student Name' input field is empty or the 'Grade (0-100)' input field contains a value outside the range of 0 to 100.\n\n\n  Scenario: [Normal] Successful form submission with valid inputs\n    Given the \"Student Grade Book\" page is loaded\n    And the user enters \"John Doe\" into the student name field with data-testid \"student-name\"\n    And the user enters \"85\" into the grade field with data-testid \"student-grade\"\n    When the user clicks the \"Add Student\" button with data-testid \"add-student-button\"\n    Then the student list with data-testid \"student-list\" should contain an item with text \"John Doe: 85\"\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the \"Student Grade Book\" page is loaded')\ndef step_given_page_loaded(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)\n\n@given('the user enters \"{student_name}\" into the student name field with data-testid \"student-name\"')\ndef step_given_enter_student_name(context, student_name):\n    name_field = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='student-name']\"))\n    )\n    name_field.clear()\n    name_field.send_keys(student_name)\n    time.sleep(1)\n\n@given('the user enters \"{grade}\" into the grade field with data-testid \"student-grade\"')\ndef step_given_enter_grade(context, grade):\n    grade_field = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='student-grade']\"))\n    )\n    grade_field.clear()\n    grade_field.send_keys(grade)\n    time.sleep(1)\n\n@when('the user clicks the \"Add Student\" button with data-testid \"add-student-button\"')\ndef step_when_click_add_student(context):\n    add_button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='add-student-button']\"))\n    )\n    add_button.click()\n    time.sleep(1)\n\n@then('the student list with data-testid \"student-list\" should contain an item with text \"{expected_text}\"')\ndef step_then_verify_student_list(context, expected_text):\n    student_list = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='student-list']\"))\n    )\n    student_items = student_list.find_elements(By.TAG_NAME, \"li\")\n    assert any(expected_text.lower() in item.text.lower() for item in student_items), f\"Expected '{expected_text}' in student list items\"\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: Form Submission Validation\n  The system should prevent form submission if the 'Student Name' input field is empty or the 'Grade (0-100)' input field contains a value outside the range of 0 to 100.\n\n\n  Scenario: [Edge] Form submission with empty student name\n    Given the \"Student Grade Book\" page is loaded\n    And the user leaves the student name field with data-testid \"student-name\" empty\n    And the user enters \"75\" into the grade field with data-testid \"student-grade\"\n    When the user clicks the \"Add Student\" button with data-testid \"add-student-button\"\n    Then the student list with data-testid \"student-list\" should not contain any new items\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the \"Student Grade Book\" page is loaded')\ndef step_given_page_is_loaded(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)\n\n@given('the user leaves the student name field with data-testid \"student-name\" empty')\ndef step_given_student_name_empty(context):\n    student_name_input = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='student-name']\"))\n    )\n    student_name_input.clear()\n    time.sleep(1)\n\n@given('the user enters \"75\" into the grade field with data-testid \"student-grade\"')\ndef step_given_enter_grade(context):\n    student_grade_input = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='student-grade']\"))\n    )\n    student_grade_input.clear()\n    student_grade_input.send_keys(\"75\")\n    time.sleep(1)\n\n@when('the user clicks the \"Add Student\" button with data-testid \"add-student-button\"')\ndef step_when_click_add_student(context):\n    add_student_button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='add-student-button']\"))\n    )\n    add_student_button.click()\n    time.sleep(1)\n\n@then('the student list with data-testid \"student-list\" should not contain any new items')\ndef step_then_check_student_list(context):\n    student_list = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='student-list']\"))\n    )\n    list_items = student_list.find_elements(By.TAG_NAME, \"li\")\n    assert len(list_items) == 0, f\"Expected no items in the student list, but found {len(list_items)}\"\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: Form Submission Validation\n  The system should prevent form submission if the 'Student Name' input field is empty or the 'Grade (0-100)' input field contains a value outside the range of 0 to 100.\n\n\n  Scenario: [Edge] Form submission with grade value at lower boundary\n    Given the \"Student Grade Book\" page is loaded\n    And the user enters \"Jane Doe\" into the student name field with data-testid \"student-name\"\n    And the user enters \"0\" into the grade field with data-testid \"student-grade\"\n    When the user clicks the \"Add Student\" button with data-testid \"add-student-button\"\n    Then the student list with data-testid \"student-list\" should contain an item with text \"Jane Doe: 0\"\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the \"Student Grade Book\" page is loaded')\ndef step_given_page_loaded(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)\n\n@given('the user enters \"{student_name}\" into the student name field with data-testid \"student-name\"')\ndef step_given_enter_student_name(context, student_name):\n    name_field = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='student-name']\"))\n    )\n    name_field.clear()\n    name_field.send_keys(student_name)\n    time.sleep(1)\n\n@given('the user enters \"{grade}\" into the grade field with data-testid \"student-grade\"')\ndef step_given_enter_grade(context, grade):\n    grade_field = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='student-grade']\"))\n    )\n    grade_field.clear()\n    grade_field.send_keys(grade)\n    time.sleep(1)\n\n@when('the user clicks the \"Add Student\" button with data-testid \"add-student-button\"')\ndef step_when_click_add_student(context):\n    add_button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='add-student-button']\"))\n    )\n    add_button.click()\n    time.sleep(1)\n\n@then('the student list with data-testid \"student-list\" should contain an item with text \"{expected_text}\"')\ndef step_then_verify_student_list(context, expected_text):\n    student_list = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='student-list']\"))\n    )\n    student_items = student_list.find_elements(By.TAG_NAME, \"li\")\n    assert any(expected_text.lower() in item.text.lower() for item in student_items), f\"Expected '{expected_text}' in student list items\"\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: Form Submission Validation\n  The system should prevent form submission if the 'Student Name' input field is empty or the 'Grade (0-100)' input field contains a value outside the range of 0 to 100.\n\n\n  Scenario: [Edge] Form submission with grade value at upper boundary\n    Given the \"Student Grade Book\" page is loaded\n    And the user enters \"Alice Smith\" into the student name field with data-testid \"student-name\"\n    And the user enters \"100\" into the grade field with data-testid \"student-grade\"\n    When the user clicks the \"Add Student\" button with data-testid \"add-student-button\"\n    Then the student list with data-testid \"student-list\" should contain an item with text \"Alice Smith: 100\"\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the \"Student Grade Book\" page is loaded')\ndef step_impl(context):\n    # Initialize the WebDriver and load the test page\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    context.driver.maximize_window()\n    time.sleep(1)  # Allow the page to load completely\n\n@given('the user enters \"Alice Smith\" into the student name field with data-testid \"student-name\"')\ndef step_impl(context):\n    # Locate the student name input field and enter the name\n    name_field = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='student-name']\"))\n    )\n    name_field.clear()\n    name_field.send_keys(\"Alice Smith\")\n    time.sleep(1)\n\n@given('the user enters \"100\" into the grade field with data-testid \"student-grade\"')\ndef step_impl(context):\n    # Locate the grade input field and enter the grade\n    grade_field = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='student-grade']\"))\n    )\n    grade_field.clear()\n    grade_field.send_keys(\"100\")\n    time.sleep(1)\n\n@when('the user clicks the \"Add Student\" button with data-testid \"add-student-button\"')\ndef step_impl(context):\n    # Locate the Add Student button and click it\n    add_button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='add-student-button']\"))\n    )\n    add_button.click()\n    time.sleep(1)\n\n@then('the student list with data-testid \"student-list\" should contain an item with text \"Alice Smith: 100\"')\ndef step_impl(context):\n    # Verify that the student list contains the expected item\n    student_list = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='student-list']\"))\n    )\n    student_items = student_list.find_elements(By.TAG_NAME, \"li\")\n    expected_text = \"Alice Smith: 100\"\n    assert any(expected_text in item.text for item in student_items), \\\n        f\"Expected '{expected_text}' in the student list, but it was not found.\"\n\n    # Close the browser after the test\n    context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: Form Submission Validation\n  The system should prevent form submission if the 'Student Name' input field is empty or the 'Grade (0-100)' input field contains a value outside the range of 0 to 100.\n\n\n  Scenario: [Error] Form submission with grade value below range\n    Given the \"Student Grade Book\" page is loaded\n    And the user enters \"Bob Brown\" into the student name field with data-testid \"student-name\"\n    And the user enters \"-5\" into the grade field with data-testid \"student-grade\"\n    When the user clicks the \"Add Student\" button with data-testid \"add-student-button\"\n    Then the student list with data-testid \"student-list\" should not contain any new items\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the \"Student Grade Book\" page is loaded')\ndef step_impl(context):\n    # Initialize the WebDriver and load the test page\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    context.driver.maximize_window()\n    time.sleep(1)  # Allow the page to fully load\n\n@given('the user enters \"Bob Brown\" into the student name field with data-testid \"student-name\"')\ndef step_impl(context):\n    # Locate the student name input field and enter the name\n    name_field = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='student-name']\"))\n    )\n    name_field.clear()\n    name_field.send_keys(\"Bob Brown\")\n    time.sleep(1)\n\n@given('the user enters \"-5\" into the grade field with data-testid \"student-grade\"')\ndef step_impl(context):\n    # Locate the grade input field and enter the grade\n    grade_field = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='student-grade']\"))\n    )\n    grade_field.clear()\n    grade_field.send_keys(\"-5\")\n    time.sleep(1)\n\n@when('the user clicks the \"Add Student\" button with data-testid \"add-student-button\"')\ndef step_impl(context):\n    # Locate the Add Student button and click it\n    add_button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='add-student-button']\"))\n    )\n    add_button.click()\n    time.sleep(1)\n\n@then('the student list with data-testid \"student-list\" should not contain any new items')\ndef step_impl(context):\n    # Verify that the student list does not contain any new items\n    student_list = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='student-list']\"))\n    )\n    student_items = student_list.find_elements(By.TAG_NAME, \"li\")\n    assert len(student_items) == 0, f\"Expected no items in the student list, but found {len(student_items)}\"\n    time.sleep(1)\n\n# Teardown to close the browser after the test\ndef after_scenario(context, scenario):\n    if hasattr(context, 'driver'):\n        context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: Form Submission Validation\n  The system should prevent form submission if the 'Student Name' input field is empty or the 'Grade (0-100)' input field contains a value outside the range of 0 to 100.\n\n\n  Scenario: [Error] Form submission with grade value above range\n    Given the \"Student Grade Book\" page is loaded\n    And the user enters \"Charlie Green\" into the student name field with data-testid \"student-name\"\n    And the user enters \"105\" into the grade field with data-testid \"student-grade\"\n    When the user clicks the \"Add Student\" button with data-testid \"add-student-button\"\n    Then the student list with data-testid \"student-list\" should not contain any new items"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the \"Student Grade Book\" page is loaded')\ndef step_given_page_is_loaded(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)\n\n@given('the user enters \"Charlie Green\" into the student name field with data-testid \"student-name\"')\ndef step_given_enter_student_name(context):\n    student_name_input = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='student-name']\"))\n    )\n    student_name_input.clear()\n    student_name_input.send_keys(\"Charlie Green\")\n    time.sleep(1)\n\n@given('the user enters \"105\" into the grade field with data-testid \"student-grade\"')\ndef step_given_enter_grade(context):\n    student_grade_input = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='student-grade']\"))\n    )\n    student_grade_input.clear()\n    student_grade_input.send_keys(\"105\")\n    time.sleep(1)\n\n@when('the user clicks the \"Add Student\" button with data-testid \"add-student-button\"')\ndef step_when_click_add_student_button(context):\n    add_student_button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='add-student-button']\"))\n    )\n    add_student_button.click()\n    time.sleep(1)\n\n@then('the student list with data-testid \"student-list\" should not contain any new items')\ndef step_then_check_student_list(context):\n    student_list = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='student-list']\"))\n    )\n    student_items = student_list.find_elements(By.TAG_NAME, \"li\")\n    # Check that the student list is empty, indicating no new items were added\n    assert len(student_items) == 0, f\"Expected no new items, but found {len(student_items)}\"\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                }
            ]
        },
        "5": {
            "requirement": {
                "description": "The web application 'Student Grade Book' must allow users to add students with their respective grades using a form. The form consists of an input field for the student's name (data-testid: 'student-name') and an input field for the student's grade (data-testid: 'student-grade'), which accepts numeric values between 0 and 100 inclusive. Upon clicking the 'Add Student' button (data-testid: 'add-student-button'), the system should validate the inputs. If the inputs are valid, the student's name and grade should be added to the student list (data-testid: 'student-list'), displayed as a list item with a unique data-id attribute. After successfully adding a student, the input fields should be cleared to allow for new entries. If the grade input is invalid (e.g., not within the 0-100 range), the student should not be added to the list, and the input fields should retain their values for correction. The system should ensure consistent use of data-testid attributes for accessing and manipulating DOM elements."
            },
            "test_cases": [
                {
                    "test_case": [
                        "Feature: Clear input fields after adding a student\n  The system should clear the input fields in the form after successfully adding a student to the list to prepare for new entries.\n\n\n  Scenario: [Normal] Successfully add a student and clear input fields\n    Given the \"Student Grade Book\" page is loaded\n    And the user enters \"John Doe\" into the student name field with data-testid \"student-name\"\n    And the user enters \"85\" into the student grade field with data-testid \"student-grade\"\n    When the user clicks the \"Add Student\" button with data-testid \"add-student-button\"\n    Then the student list with data-testid \"student-list\" should contain \"John Doe: 85\"\n    And the student name field with data-testid \"student-name\" should be empty\n    And the student grade field with data-testid \"student-grade\" should be empty\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the \"Student Grade Book\" page is loaded')\ndef step_given_page_is_loaded(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)\n\n@given('the user enters \"{student_name}\" into the student name field with data-testid \"student-name\"')\ndef step_given_enter_student_name(context, student_name):\n    name_field = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='student-name']\"))\n    )\n    name_field.clear()\n    name_field.send_keys(student_name)\n    time.sleep(1)\n\n@given('the user enters \"{student_grade}\" into the student grade field with data-testid \"student-grade\"')\ndef step_given_enter_student_grade(context, student_grade):\n    grade_field = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='student-grade']\"))\n    )\n    grade_field.clear()\n    grade_field.send_keys(student_grade)\n    time.sleep(1)\n\n@when('the user clicks the \"Add Student\" button with data-testid \"add-student-button\"')\ndef step_when_click_add_student_button(context):\n    add_button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='add-student-button']\"))\n    )\n    add_button.click()\n    time.sleep(1)\n\n@then('the student list with data-testid \"student-list\" should contain \"{student_entry}\"')\ndef step_then_student_list_contains(context, student_entry):\n    student_list = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='student-list']\"))\n    )\n    assert student_entry in student_list.text, f\"Expected '{student_entry}' in student list, but got '{student_list.text}'\"\n    time.sleep(1)\n\n@then('the student name field with data-testid \"student-name\" should be empty')\ndef step_then_student_name_field_empty(context):\n    name_field = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='student-name']\")\n    assert name_field.get_attribute('value') == '', \"Expected student name field to be empty\"\n    time.sleep(1)\n\n@then('the student grade field with data-testid \"student-grade\" should be empty')\ndef step_then_student_grade_field_empty(context):\n    grade_field = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='student-grade']\")\n    assert grade_field.get_attribute('value') == '', \"Expected student grade field to be empty\"\n    time.sleep(1)\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: Clear input fields after adding a student\n  The system should clear the input fields in the form after successfully adding a student to the list to prepare for new entries.\n\n\n  Scenario: [Edge] Add a student with minimum grade and clear input fields\n    Given the \"Student Grade Book\" page is loaded\n    And the user enters \"Jane Smith\" into the student name field with data-testid \"student-name\"\n    And the user enters \"0\" into the student grade field with data-testid \"student-grade\"\n    When the user clicks the \"Add Student\" button with data-testid \"add-student-button\"\n    Then the student list with data-testid \"student-list\" should contain \"Jane Smith: 0\"\n    And the student name field with data-testid \"student-name\" should be empty\n    And the student grade field with data-testid \"student-grade\" should be empty\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the \"Student Grade Book\" page is loaded')\ndef step_given_page_loaded(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)\n\n@given('the user enters \"{student_name}\" into the student name field with data-testid \"student-name\"')\ndef step_given_enter_student_name(context, student_name):\n    name_field = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='student-name']\"))\n    )\n    name_field.clear()\n    name_field.send_keys(student_name)\n    time.sleep(1)\n\n@given('the user enters \"{student_grade}\" into the student grade field with data-testid \"student-grade\"')\ndef step_given_enter_student_grade(context, student_grade):\n    grade_field = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='student-grade']\"))\n    )\n    grade_field.clear()\n    grade_field.send_keys(student_grade)\n    time.sleep(1)\n\n@when('the user clicks the \"Add Student\" button with data-testid \"add-student-button\"')\ndef step_when_click_add_student_button(context):\n    add_button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='add-student-button']\"))\n    )\n    add_button.click()\n    time.sleep(1)\n\n@then('the student list with data-testid \"student-list\" should contain \"{student_entry}\"')\ndef step_then_student_list_contains(context, student_entry):\n    student_list = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='student-list']\"))\n    )\n    assert student_entry in student_list.text, f\"Expected '{student_entry}' in '{student_list.text}'\"\n\n@then('the student name field with data-testid \"student-name\" should be empty')\ndef step_then_name_field_empty(context):\n    name_field = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='student-name']\"))\n    )\n    assert name_field.get_attribute('value') == '', \"Expected student name field to be empty\"\n\n@then('the student grade field with data-testid \"student-grade\" should be empty')\ndef step_then_grade_field_empty(context):\n    grade_field = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='student-grade']\"))\n    )\n    assert grade_field.get_attribute('value') == '', \"Expected student grade field to be empty\"\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: Clear input fields after adding a student\n  The system should clear the input fields in the form after successfully adding a student to the list to prepare for new entries.\n\n\n  Scenario: [Edge] Add a student with maximum grade and clear input fields\n    Given the \"Student Grade Book\" page is loaded\n    And the user enters \"Alice Johnson\" into the student name field with data-testid \"student-name\"\n    And the user enters \"100\" into the student grade field with data-testid \"student-grade\"\n    When the user clicks the \"Add Student\" button with data-testid \"add-student-button\"\n    Then the student list with data-testid \"student-list\" should contain \"Alice Johnson: 100\"\n    And the student name field with data-testid \"student-name\" should be empty\n    And the student grade field with data-testid \"student-grade\" should be empty\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the \"Student Grade Book\" page is loaded')\ndef step_given_page_loaded(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)\n\n@given('the user enters \"{student_name}\" into the student name field with data-testid \"student-name\"')\ndef step_given_enter_student_name(context, student_name):\n    name_field = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='student-name']\"))\n    )\n    name_field.clear()\n    name_field.send_keys(student_name)\n    time.sleep(1)\n\n@given('the user enters \"{student_grade}\" into the student grade field with data-testid \"student-grade\"')\ndef step_given_enter_student_grade(context, student_grade):\n    grade_field = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='student-grade']\"))\n    )\n    grade_field.clear()\n    grade_field.send_keys(student_grade)\n    time.sleep(1)\n\n@when('the user clicks the \"Add Student\" button with data-testid \"add-student-button\"')\ndef step_when_click_add_student_button(context):\n    add_button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='add-student-button']\"))\n    )\n    add_button.click()\n    time.sleep(1)\n\n@then('the student list with data-testid \"student-list\" should contain \"{student_entry}\"')\ndef step_then_student_list_contains(context, student_entry):\n    student_list = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='student-list']\"))\n    )\n    assert student_entry in student_list.text, f\"Expected '{student_entry}' in student list, but got '{student_list.text}'\"\n    time.sleep(1)\n\n@then('the student name field with data-testid \"student-name\" should be empty')\ndef step_then_student_name_field_empty(context):\n    name_field = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='student-name']\"))\n    )\n    assert name_field.get_attribute('value') == '', \"Expected student name field to be empty\"\n    time.sleep(1)\n\n@then('the student grade field with data-testid \"student-grade\" should be empty')\ndef step_then_student_grade_field_empty(context):\n    grade_field = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='student-grade']\"))\n    )\n    assert grade_field.get_attribute('value') == '', \"Expected student grade field to be empty\"\n    time.sleep(1)\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: Clear input fields after adding a student\n  The system should clear the input fields in the form after successfully adding a student to the list to prepare for new entries.\n\n\n  Scenario: [Error] Attempt to add a student with invalid grade and verify fields are not cleared\n    Given the \"Student Grade Book\" page is loaded\n    And the user enters \"Bob Brown\" into the student name field with data-testid \"student-name\"\n    And the user enters \"105\" into the student grade field with data-testid \"student-grade\"\n    When the user clicks the \"Add Student\" button with data-testid \"add-student-button\"\n    Then the student list with data-testid \"student-list\" should not contain \"Bob Brown: 105\"\n    And the student name field with data-testid \"student-name\" should contain \"Bob Brown\"\n    And the student grade field with data-testid \"student-grade\" should contain \"105\""
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the \"Student Grade Book\" page is loaded')\ndef step_given_page_loaded(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)\n\n@given('the user enters \"{student_name}\" into the student name field with data-testid \"student-name\"')\ndef step_given_enter_student_name(context, student_name):\n    name_field = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='student-name']\"))\n    )\n    name_field.clear()\n    name_field.send_keys(student_name)\n    time.sleep(1)\n\n@given('the user enters \"{student_grade}\" into the student grade field with data-testid \"student-grade\"')\ndef step_given_enter_student_grade(context, student_grade):\n    grade_field = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='student-grade']\"))\n    )\n    grade_field.clear()\n    grade_field.send_keys(student_grade)\n    time.sleep(1)\n\n@when('the user clicks the \"Add Student\" button with data-testid \"add-student-button\"')\ndef step_when_click_add_student_button(context):\n    add_button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='add-student-button']\"))\n    )\n    add_button.click()\n    time.sleep(1)\n\n@then('the student list with data-testid \"student-list\" should not contain \"{student_entry}\"')\ndef step_then_student_list_should_not_contain(context, student_entry):\n    student_list = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='student-list']\"))\n    )\n    student_items = student_list.find_elements(By.TAG_NAME, \"li\")\n    assert all(student_entry not in item.text for item in student_items), f\"Unexpected entry found: {student_entry}\"\n\n@then('the student name field with data-testid \"student-name\" should contain \"{student_name}\"')\ndef step_then_name_field_should_contain(context, student_name):\n    name_field = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='student-name']\"))\n    )\n    assert student_name in name_field.get_attribute(\"value\"), f\"Expected '{student_name}' in name field\"\n\n@then('the student grade field with data-testid \"student-grade\" should contain \"{student_grade}\"')\ndef step_then_grade_field_should_contain(context, student_grade):\n    grade_field = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='student-grade']\"))\n    )\n    assert student_grade in grade_field.get_attribute(\"value\"), f\"Expected '{student_grade}' in grade field\"\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                }
            ]
        }
    }
}