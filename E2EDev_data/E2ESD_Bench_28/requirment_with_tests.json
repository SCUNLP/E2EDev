{
    "summary": {
        "overview": "This is a web-based Tic Tac Toe game that allows two players to take turns marking tiles on a 3x3 grid. The application determines the winner based on predefined winning conditions or declares a tie if all tiles are filled without a winner. Players can reset the game at any time to start a new round.",
        "predefined_options": "The game alternates turns between Player X and Player O. The game board consists of 9 tiles, and the winning conditions are predefined as combinations of three tiles in a row, column, or diagonal.",
        "external_resources": "No external resources such as images, audio, or links are used in this application.",
        "external_js_libraries": "No external JavaScript libraries are used. The application relies on vanilla JavaScript for functionality."
    },
    "finegrained_rewith_test": {
        "1": {
            "requirement": {
                "description": "Upon loading the Tic Tac Toe webpage, the system must display the following UI elements: a title with the text 'Tic Tac Toe', a message indicating the current player's turn ('Player X's turn') within an element identified by the attribute data-testid='current-player', a 3x3 grid of tiles each uniquely identified by data-testid attributes ranging from 'tile-1' to 'tile-9', and a reset button identified by data-testid='reset-button'. All tiles must initially be empty, without any inner text or classes 'playerX' or 'playerO'."
            },
            "test_cases": [
                {
                    "test_case": [
                        "Feature: Display initial game state on page load\n  The system must display the correct UI elements when the page loads, including a 3x3 grid of tiles, a title, a message indicating the current player's turn, and a reset button.\n\n\n  Scenario: [Normal] Verify the page displays all required elements on load\n    Given the user opens the Tic Tac Toe webpage\n    Then the page should display a title with the text \"Tic Tac Toe\"\n    And the page should display a message indicating \"Player X's turn\" in the element with data-testid \"current-player\"\n    And the page should display a 3x3 grid of tiles, each with a data-testid from \"tile-1\" to \"tile-9\"\n    And the page should display a reset button with data-testid \"reset-button\"\n"
                    ],
                    "step_code": "from behave import given, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the user opens the Tic Tac Toe webpage')\ndef step_given_user_opens_webpage(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)\n\n@then('the page should display a title with the text \"Tic Tac Toe\"')\ndef step_then_display_title(context):\n    title_element = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"section.title h1\"))\n    )\n    expected_text = \"Tic Tac Toe\"\n    assert expected_text.lower() in title_element.text.lower(), f\"Expected '{expected_text}' in '{title_element.text}'\"\n    time.sleep(1)\n\n@then('the page should display a message indicating \"Player X\\'s turn\" in the element with data-testid \"current-player\"')\ndef step_then_display_current_player(context):\n    player_element = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='current-player']\"))\n    )\n    expected_text = \"Player X's turn\"\n    assert 'x' in player_element.text.lower(), f\"Expected '{expected_text}' in '{player_element.text}'\"\n    time.sleep(1)\n\n@then('the page should display a 3x3 grid of tiles, each with a data-testid from \"tile-1\" to \"tile-9\"')\ndef step_then_display_grid_of_tiles(context):\n    for i in range(1, 10):\n        tile_element = WebDriverWait(context.driver, 10).until(\n            EC.visibility_of_element_located((By.CSS_SELECTOR, f\"[data-testid='tile-{i}']\"))\n        )\n        assert tile_element.is_displayed(), f\"Tile {i} is not displayed\"\n    time.sleep(1)\n\n@then('the page should display a reset button with data-testid \"reset-button\"')\ndef step_then_display_reset_button(context):\n    reset_button = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='reset-button']\"))\n    )\n    assert reset_button.is_displayed(), \"Reset button is not displayed\"\n    time.sleep(1)\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: Display initial game state on page load\n  The system must display the correct UI elements when the page loads, including a 3x3 grid of tiles, a title, a message indicating the current player's turn, and a reset button.\n\n\n  Scenario: [Edge] Verify the page loads correctly with no pre-filled tiles\n    Given the user opens the Tic Tac Toe webpage\n    Then each tile with data-testid from \"tile-1\" to \"tile-9\" should be empty\n    And no tile should have a class of \"playerX\" or \"playerO\"\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the user opens the Tic Tac Toe webpage')\ndef step_open_tic_tac_toe_page(context):\n    # Initialize the WebDriver and navigate to the test page\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    context.driver.maximize_window()\n    time.sleep(1)  # Allow the page to fully load\n\n@then('each tile with data-testid from \"tile-1\" to \"tile-9\" should be empty')\ndef step_verify_tiles_are_empty(context):\n    # Verify that each tile is empty\n    for i in range(1, 10):\n        tile = WebDriverWait(context.driver, 10).until(\n            EC.presence_of_element_located((By.CSS_SELECTOR, f\"[data-testid='tile-{i}']\"))\n        )\n        assert tile.text.strip() == \"\", f\"Tile {i} is not empty. Found text: '{tile.text.strip()}'\"\n        time.sleep(1)\n\n@then('no tile should have a class of \"playerX\" or \"playerO\"')\ndef step_verify_tiles_have_no_player_classes(context):\n    # Verify that no tile has the class \"playerX\" or \"playerO\"\n    for i in range(1, 10):\n        tile = WebDriverWait(context.driver, 10).until(\n            EC.presence_of_element_located((By.CSS_SELECTOR, f\"[data-testid='tile-{i}']\"))\n        )\n        class_list = tile.get_attribute(\"class\").split()\n        assert \"playerX\" not in class_list, f\"Tile {i} has class 'playerX'\"\n        assert \"playerO\" not in class_list, f\"Tile {i} has class 'playerO'\"\n        time.sleep(1)\n\n# Teardown to close the browser after the test\ndef after_scenario(context, scenario):\n    if hasattr(context, 'driver'):\n        context.driver.quit()"
                }
            ]
        },
        "2": {
            "requirement": {
                "description": "When a player clicks on an empty tile, the system must display the current player's symbol ('X' or 'O') in the tile and visually indicate the player's move by adding a corresponding CSS class ('playerX' for Player X or 'playerO' for Player O). The system must validate that the tile is empty before allowing the action. If the tile is already occupied, no changes should be made to the tile's content or CSS class, and the current player should remain unchanged. The tiles are identified using the 'data-testid' attribute (e.g., 'tile-1', 'tile-2', etc.). The current player's symbol is displayed in the element with 'data-testid=\"current-player\"', and its CSS class dynamically updates to reflect the active player ('playerX' or 'playerO')."
            },
            "test_cases": [
                {
                    "test_case": [
                        "Feature: Display current player's symbol on tile click\n  The system must display the current player's symbol ('X' or 'O') in the clicked tile and visually indicate the player's move by adding a corresponding CSS class.\n\n\n  Scenario: [Normal] Player X clicks on an empty tile\n    Given the Tic Tac Toe webpage is loaded\n    And the current player is displayed as \"X\" in the element with data-testid \"current-player\"\n    When the player clicks on the tile with data-testid \"tile-1\"\n    Then the tile with data-testid \"tile-1\" should display \"X\"\n    And the tile with data-testid \"tile-1\" should have the CSS class \"playerX\"\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the Tic Tac Toe webpage is loaded')\ndef step_given_webpage_loaded(context):\n    # Initialize the WebDriver and load the test page\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    context.driver.maximize_window()\n    time.sleep(1)  # Allow the page to fully load\n\n@given('the current player is displayed as \"X\" in the element with data-testid \"current-player\"')\ndef step_given_current_player_is_x(context):\n    # Wait for the current player element to be visible and verify it displays \"X\"\n    current_player_element = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='current-player']\"))\n    )\n    assert current_player_element.text.strip() == \"X\", f\"Expected current player to be 'X', but got '{current_player_element.text.strip()}'\"\n\n@when('the player clicks on the tile with data-testid \"tile-1\"')\ndef step_when_player_clicks_tile_1(context):\n    # Wait for the tile to be clickable and perform the click action\n    tile_1 = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='tile-1']\"))\n    )\n    tile_1.click()\n    time.sleep(1)  # Allow time for the UI to update\n\n@then('the tile with data-testid \"tile-1\" should display \"X\"')\ndef step_then_tile_1_displays_x(context):\n    # Verify the tile displays \"X\"\n    tile_1 = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='tile-1']\"))\n    )\n    assert tile_1.text.strip() == \"X\", f\"Expected tile to display 'X', but got '{tile_1.text.strip()}'\"\n\n@then('the tile with data-testid \"tile-1\" should have the CSS class \"playerX\"')\ndef step_then_tile_1_has_class_playerx(context):\n    # Verify the tile has the CSS class \"playerX\"\n    tile_1 = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='tile-1']\"))\n    )\n    class_list = tile_1.get_attribute(\"class\").split()\n    assert \"playerX\" in class_list, f\"Expected tile to have class 'playerX', but got '{class_list}'\"\n\n# Teardown to close the browser after the test\ndef after_scenario(context, scenario):\n    if hasattr(context, 'driver'):\n        context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: Display current player's symbol on tile click\n  The system must display the current player's symbol ('X' or 'O') in the clicked tile and visually indicate the player's move by adding a corresponding CSS class.\n\n\nScenario: [Normal] Player O clicks on an empty tile\n    Given the Tic Tac Toe webpage is loaded\n    And the player clicks on the tile with data-testid \"tile-1\"\n    And the current player is displayed as \"O\" in the element with data-testid \"current-player\"\n    When the player clicks on the tile with data-testid \"tile-2\"\n    Then the tile with data-testid \"tile-2\" should display \"O\"\n    And the tile with data-testid \"tile-2\" should have the CSS class \"playerO\""
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given(\"the Tic Tac Toe webpage is loaded\")\ndef step_given_tic_tac_toe_webpage_loaded(context):\n    # Initialize the WebDriver and load the test page\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    context.driver.maximize_window()\n    time.sleep(1)  # Allow the page to fully load\n\n@given('the player clicks on the tile with data-testid \"tile-1\"')\ndef step_given_player_clicks_tile_1(context):\n    tile_1 = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='tile-1']\"))\n    )\n    tile_1.click()\n    time.sleep(1)  # Wait for the interaction to complete\n\n@given('the current player is displayed as \"O\" in the element with data-testid \"current-player\"')\ndef step_given_current_player_is_O(context):\n    current_player_element = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='current-player']\"))\n    )\n    current_player_text = current_player_element.text.strip()\n    assert current_player_text == \"O\", f\"Expected current player to be 'O', but got '{current_player_text}'\"\n\n@when('the player clicks on the tile with data-testid \"tile-2\"')\ndef step_when_player_clicks_tile_2(context):\n    tile_2 = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='tile-2']\"))\n    )\n    tile_2.click()\n    time.sleep(1)  # Wait for the interaction to complete\n\n@then('the tile with data-testid \"tile-2\" should display \"O\"')\ndef step_then_tile_2_displays_O(context):\n    tile_2 = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='tile-2']\"))\n    )\n    tile_2_text = tile_2.text.strip()\n    assert tile_2_text == \"O\", f\"Expected tile 2 to display 'O', but got '{tile_2_text}'\"\n\n@then('the tile with data-testid \"tile-2\" should have the CSS class \"playerO\"')\ndef step_then_tile_2_has_playerO_class(context):\n    tile_2 = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='tile-2']\"))\n    )\n    tile_2_classes = tile_2.get_attribute(\"class\").split()\n    assert \"playerO\" in tile_2_classes, f\"Expected tile 2 to have class 'playerO', but got '{tile_2_classes}'\"\n\n# Cleanup after the test\ndef after_scenario(context, scenario):\n    if hasattr(context, \"driver\"):\n        context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: Display current player's symbol on tile click\n  The system must display the current player's symbol ('X' or 'O') in the clicked tile and visually indicate the player's move by adding a corresponding CSS class.\n\n\n  Scenario: [Error] Player clicks on a tile that is already occupied\n    Given the Tic Tac Toe webpage is loaded\n    And the tile with data-testid \"tile-5\" displays \"X\"\n    And the tile with data-testid \"tile-5\" has the CSS class \"playerX\"\n    And the current player is displayed as \"O\" in the element with data-testid \"current-player\"\n    When the player clicks on the tile with data-testid \"tile-5\"\n    Then the tile with data-testid \"tile-5\" should still display \"X\"\n    And the tile with data-testid \"tile-5\" should still have the CSS class \"playerX\"\n    And the current player should still be displayed as \"O\" in the element with data-testid \"current-player\""
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the Tic Tac Toe webpage is loaded')\ndef step_impl(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    context.driver.maximize_window()\n    time.sleep(1)\n\n\n@given('the tile with data-testid \"tile-5\" displays \"X\"')\ndef step_impl(context):\n    tile = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='tile-5']\"))\n    )\n    tile.click()  # Simulate a click to set the tile to \"X\"\n    time.sleep(1)\n\n\n@given('the tile with data-testid \"tile-5\" has the CSS class \"playerX\"')\ndef step_impl(context):\n    tile = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='tile-5']\")\n    tile_class = tile.get_attribute(\"class\")\n    assert \"playerX\" in tile_class, f\"Expected 'playerX' in class list, but got {tile_class}\"\n\n@given('the current player is displayed as \"O\" in the element with data-testid \"current-player\"')\ndef step_impl(context):\n    player_display = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='current-player']\")\n    assert player_display.text == \"O\", f\"Expected current player to be 'O', but got {player_display.text}\"\n\n@when('the player clicks on the tile with data-testid \"tile-5\"')\ndef step_impl(context):\n    tile = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='tile-5']\")\n    tile.click()\n    time.sleep(1)\n\n@then('the tile with data-testid \"tile-5\" should still display \"X\"')\ndef step_impl(context):\n    tile = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='tile-5']\")\n    assert tile.text == \"X\", f\"Expected tile to display 'X', but got {tile.text}\"\n\n@then('the tile with data-testid \"tile-5\" should still have the CSS class \"playerX\"')\ndef step_impl(context):\n    tile = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='tile-5']\")\n    tile_class = tile.get_attribute(\"class\")\n    assert \"playerX\" in tile_class, f\"Expected 'playerX' in class list, but got {tile_class}\"\n\n@then('the current player should still be displayed as \"O\" in the element with data-testid \"current-player\"')\ndef step_impl(context):\n    player_display = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='current-player']\")\n    assert player_display.text == \"O\", f\"Expected current player to be 'O', but got {player_display.text}\"\n\n# Teardown to close the browser after the test\ndef after_scenario(context, scenario):\n    if hasattr(context, 'driver'):\n        context.driver.quit()"
                }
            ]
        },
        "3": {
            "requirement": {
                "description": "When a player clicks on a tile that is already occupied, the system must ignore the action and prevent any changes to the tile or game state. Specifically: 1) The tile's content (innerText) and associated class (e.g., 'playerX' or 'playerO') must remain unchanged. 2) The current player indicator (element with data-testid='current-player') must not update. 3) The game state must remain active or inactive as it was prior to the click. 4) If the game is inactive (e.g., after a win or tie), clicking on any tile must not alter the announcer's message (element with data-testid='announcer') or the game state. These behaviors must apply consistently across all tiles (elements with class 'tile' and data-testid attributes 'tile-1' through 'tile-9')."
            },
            "test_cases": [
                {
                    "test_case": [
                        "Feature: Prevent changes when clicking on an occupied tile\n  The system must ignore any action when a player clicks on a tile that is already occupied, ensuring no changes to the tile or game state.\n\n\n  Scenario: [Normal] Player clicks on an unoccupied tile\n    Given the Tic Tac Toe game is loaded\n    And the current player is \"X\"\n    When the user clicks on the tile with data-testid \"tile-1\"\n    Then the tile with data-testid \"tile-1\" should display \"X\"\n    And the current player should be \"O\"\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\ndef is_expanded(element):\n    aria = element.get_attribute(\"aria-expanded\")\n    if aria is not None:\n        return aria == \"true\"\n\n    class_list = element.get_attribute(\"class\").split()\n    if any(cls in class_list for cls in [\"expanded\", \"open\", \"show\"]):\n        return True\n\n    data_expanded = element.get_attribute(\"data-expanded\")\n    if data_expanded is not None:\n        return data_expanded == \"true\"\n\n    return element.is_displayed()\n\ndef is_collapsed(element):\n    aria = element.get_attribute(\"aria-expanded\")\n    if aria is not None and aria.lower() == \"false\":\n        return True\n\n    class_attr = element.get_attribute(\"class\") or \"\"\n    class_list = class_attr.split()\n    if \"collapsed\" in class_list:\n        return True\n\n    data_expanded = element.get_attribute(\"data-expanded\")\n    if data_expanded is not None and data_expanded.lower() == \"false\":\n        return True\n\n    style = element.get_attribute(\"style\") or \"\"\n    if \"display: none\" in style or \"visibility: hidden\" in style or \"height: 0\" in style:\n        return True\n\n    return not element.is_displayed()\n\n@given('the Tic Tac Toe game is loaded')\ndef step_given_game_is_loaded(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)\n\n@given('the current player is \"X\"')\ndef step_given_current_player_is_x(context):\n    player_display = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='current-player']\"))\n    )\n    assert player_display.text.strip() == \"X\", f\"Expected current player to be 'X', but got '{player_display.text.strip()}'\"\n    time.sleep(1)\n\n@when('the user clicks on the tile with data-testid \"tile-1\"')\ndef step_when_user_clicks_tile_1(context):\n    tile = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='tile-1']\"))\n    )\n    tile.click()\n    time.sleep(1)\n\n@then('the tile with data-testid \"tile-1\" should display \"X\"')\ndef step_then_tile_1_should_display_x(context):\n    tile = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='tile-1']\"))\n    )\n    assert tile.text.strip() == \"X\", f\"Expected tile to display 'X', but got '{tile.text.strip()}'\"\n    time.sleep(1)\n\n@then('the current player should be \"O\"')\ndef step_then_current_player_should_be_o(context):\n    player_display = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='current-player']\"))\n    )\n    assert player_display.text.strip() == \"O\", f\"Expected current player to be 'O', but got '{player_display.text.strip()}'\"\n    time.sleep(1)\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: Prevent changes when clicking on an occupied tile\n  The system must ignore any action when a player clicks on a tile that is already occupied, ensuring no changes to the tile or game state.\n\n\n  Scenario: [Normal] Player clicks on an occupied tile\n    Given the Tic Tac Toe game is loaded\n    And the tile with data-testid \"tile-1\" displays \"X\"\n    And the current player is \"O\"\n    When the user clicks on the tile with data-testid \"tile-1\"\n    Then the tile with data-testid \"tile-1\" should still display \"X\"\n    And the current player should remain \"O\"\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the Tic Tac Toe game is loaded')\ndef step_given_game_loaded(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)\n\n@given('the tile with data-testid \"tile-1\" displays \"X\"')\ndef step_given_tile_1_displays_x(context):\n    tile = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='tile-1']\"))\n    )\n    tile.click()  # Simulate the action to set \"X\" on tile-1\n    time.sleep(1)\n\n@given('the current player is \"O\"')\ndef step_given_current_player_is_o(context):\n    player_display = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='current-player']\"))\n    )\n    assert player_display.text == \"O\", f\"Expected current player to be 'O', but got '{player_display.text}'\"\n\n@when('the user clicks on the tile with data-testid \"tile-1\"')\ndef step_when_user_clicks_tile_1(context):\n    tile = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='tile-1']\"))\n    )\n    tile.click()\n    time.sleep(1)\n\n@then('the tile with data-testid \"tile-1\" should still display \"X\"')\ndef step_then_tile_1_should_still_display_x(context):\n    tile = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='tile-1']\"))\n    )\n    assert tile.text == \"X\", f\"Expected tile-1 to display 'X', but got '{tile.text}'\"\n\n@then('the current player should remain \"O\"')\ndef step_then_current_player_should_remain_o(context):\n    player_display = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='current-player']\"))\n    )\n    assert player_display.text == \"O\", f\"Expected current player to remain 'O', but got '{player_display.text}'\"\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: Prevent changes when clicking on an occupied tile\n  The system must ignore any action when a player clicks on a tile that is already occupied, ensuring no changes to the tile or game state.\n\n\n  Scenario: [Edge] Player clicks on multiple occupied tiles consecutively\n    Given the Tic Tac Toe game is loaded\n    And the tile with data-testid \"tile-1\" displays \"X\"\n    And the tile with data-testid \"tile-2\" displays \"O\"\n    And the current player is \"X\"\n    When the user clicks on the tile with data-testid \"tile-1\"\n    And the user clicks on the tile with data-testid \"tile-2\"\n    Then the tile with data-testid \"tile-1\" should still display \"X\"\n    And the tile with data-testid \"tile-2\" should still display \"O\"\n    And the current player should remain \"X\"\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the Tic Tac Toe game is loaded')\ndef step_impl(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    context.driver.maximize_window()\n    WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='current-player']\"))\n    )\n    time.sleep(1)\n\n@given('the tile with data-testid \"{tile_id}\" displays \"{value}\"')\ndef step_impl(context, tile_id, value):\n    tile = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, f\"[data-testid='{tile_id}']\"))\n    )\n    tile.click()\n    time.sleep(1)\n    tile_text = tile.text.strip()\n    assert tile_text == value, f\"Expected tile {tile_id} to display '{value}', but got '{tile_text}'\"\n\n@given('the current player is \"{player}\"')\ndef step_impl(context, player):\n    current_player = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='current-player']\"))\n    )\n    current_player_text = current_player.text.strip()\n    assert current_player_text == player, f\"Expected current player to be '{player}', but got '{current_player_text}'\"\n\n@when('the user clicks on the tile with data-testid \"{tile_id}\"')\ndef step_impl(context, tile_id):\n    tile = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, f\"[data-testid='{tile_id}']\"))\n    )\n    tile.click()\n    time.sleep(1)\n\n@then('the tile with data-testid \"{tile_id}\" should still display \"{value}\"')\ndef step_impl(context, tile_id, value):\n    tile = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, f\"[data-testid='{tile_id}']\"))\n    )\n    tile_text = tile.text.strip()\n    assert tile_text == value, f\"Expected tile {tile_id} to still display '{value}', but got '{tile_text}'\"\n\n@then('the current player should remain \"{player}\"')\ndef step_impl(context, player):\n    current_player = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='current-player']\"))\n    )\n    current_player_text = current_player.text.strip()\n    assert current_player_text == player, f\"Expected current player to remain '{player}', but got '{current_player_text}'\"\n\ndef after_scenario(context, scenario):\n    if hasattr(context, 'driver'):\n        context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: Prevent changes when clicking on an occupied tile\n  The system must ignore any action when a player clicks on a tile that is already occupied, ensuring no changes to the tile or game state.\n\n\nScenario: [Error] Player attempts to click on an occupied tile after game is won\n    Given the Tic Tac Toe game is loaded\n    And the tiles with data-testids \"tile-1\", \"tile-2\", and \"tile-3\" display \"X\", and data-testids \"tile-4\" and \"tile-5\" display \"O\"\n    And the announcer displays \"Player X Won\"\n    When the user clicks on the tile with data-testid \"tile-1\"\n    Then the tile with data-testid \"tile-1\" should still display \"X\"\n    And the announcer should still display \"Player X Won\"\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the Tic Tac Toe game is loaded')\ndef step_given_game_loaded(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)\n\n@given('the tiles with data-testids \"tile-1\", \"tile-2\", and \"tile-3\" display \"X\", and data-testids \"tile-4\" and \"tile-5\" display \"O\"')\ndef step_given_tiles_display(context):\n    tile_1 = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='tile-1']\")\n    tile_1.click()\n    tile_4 = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='tile-4']\")\n    tile_4.click()\n    tile_2 = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='tile-2']\")\n    tile_2.click()\n    tile_5 = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='tile-5']\")\n    tile_5.click()\n    tile_3 = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='tile-3']\")\n    tile_3.click()\n\n    time.sleep(1)\n\n@given('the announcer displays \"Player X Won\"')\ndef step_given_announcer_displays(context):\n    # announcer = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='announcer']\")\n    # assert \"Player X Won\" in announcer.text, f\"Expected 'Player X Won' in '{announcer.text}'\"\n    # time.sleep(1)\n    pass\n\n@given('the game is inactive')\ndef step_given_game_inactive(context):\n    announcer = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='announcer']\")\n    assert \"hide\" not in announcer.get_attribute(\"class\"), \"Expected announcer to be visible\"\n    time.sleep(1)\n\n@when('the user clicks on the tile with data-testid \"tile-1\"')\ndef step_when_user_clicks_tile(context):\n    tile = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='tile-1']\")\n    tile.click()\n    time.sleep(1)\n\n@then('the tile with data-testid \"tile-1\" should still display \"X\"')\ndef step_then_tile_still_displays(context):\n    tile = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='tile-1']\")\n    assert tile.text == \"X\", f\"Expected 'X' in '{tile.text}'\"\n    time.sleep(1)\n\n@then('the announcer should still display \"Player X Won\"')\ndef step_then_announcer_still_displays(context):\n    # announcer = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='announcer']\")\n    # assert \"Player X Won\" in announcer.text, f\"Expected 'Player X Won' in '{announcer.text}'\"\n    # time.sleep(1)\n    pass\n\n@then('the game should remain inactive')\ndef step_then_game_remains_inactive(context):\n    announcer = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='announcer']\")\n    assert \"hide\" not in announcer.get_attribute(\"class\"), \"Expected announcer to be visible\"\n    time.sleep(1)\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                }
            ]
        },
        "5": {
            "requirement": {
                "description": "When a player wins the Tic Tac Toe game, the system must display a message in the announcer section indicating the winner ('Player X Won' or 'Player O Won') and prevent further interactions with the game board. Specifically: 1) The announcer section (identified by the attribute data-testid='announcer') must display the text 'Player X Won' or 'Player O Won' based on the winning player, with the winner's symbol styled using the respective CSS class ('playerX' or 'playerO'). 2) The announcer section must have the 'hide' class removed to make it visible. 3) All tiles on the game board (identified by the class 'tile' and data-testid attributes such as 'tile-1', 'tile-2', etc.) must no longer accept user clicks or updates. This behavior must apply to all winning scenarios, including normal cases, edge cases (e.g., winning on the last move), and boundary conditions (e.g., winning with the minimum number of moves)."
            },
            "test_cases": [
                {
                    "test_case": [
                        "Feature: Display Winner Announcement and Stop Further Interactions\n  The system must display a message indicating the winner and stop further interactions with the game board when a player wins.\n\n\n  Scenario: [Normal] Player X wins the game\n    Given the Tic Tac Toe game page is loaded\n    And the tiles with data-testids \"tile-1\" and \"tile-2\" display \"X\", and \"tile-4\" and \"tile-5\" display \"O\"\n    And the current player is \"X\"\n    When the user clicks on the tile with data-testid \"tile-3\"\n    Then the announcer section should display \"Player X Won\"\n    And the announcer section should not have the class \"hide\"\n    And all tiles on the game board should no longer accept clicks\n\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\ndef is_collapsed(element):\n    aria = element.get_attribute(\"aria-expanded\")\n    if aria is not None and aria.lower() == \"false\":\n        return True\n\n    class_attr = element.get_attribute(\"class\") or \"\"\n    class_list = class_attr.split()\n    if \"collapsed\" in class_list:\n        return True\n\n    data_expanded = element.get_attribute(\"data-expanded\")\n    if data_expanded is not None and data_expanded.lower() == \"false\":\n        return True\n\n    style = element.get_attribute(\"style\") or \"\"\n    if \"display: none\" in style or \"visibility: hidden\" in style or \"height: 0\" in style:\n        return True\n\n    return not element.is_displayed()\n\n@given(\"the Tic Tac Toe game page is loaded\")\ndef step_given_game_page_loaded(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)  # Allow the page to load completely\n\n@given('the tiles with data-testids \"tile-1\" and \"tile-2\" display \"X\", and \"tile-4\" and \"tile-5\" display \"O\"')\ndef step_impl(context):\n    # 点击 tile-1\n    tile_1 = WebDriverWait(context.driver, 10).until(EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='tile-1']\")))\n    tile_1.click()\n    time.sleep(0.5)\n    # 点击 tile-4\n    tile_4 = WebDriverWait(context.driver, 10).until(EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='tile-4']\")))\n    tile_4.click()\n    time.sleep(0.5)\n    # 点击 tile-2\n    tile_2 = WebDriverWait(context.driver, 10).until(EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='tile-2']\")))\n    tile_2.click()\n    time.sleep(0.5)\n    # 点击 tile-5\n    tile_5 = WebDriverWait(context.driver, 10).until(EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='tile-5']\")))\n    tile_5.click()\n    time.sleep(0.5)\n\n@given('the current player is \"X\"')\ndef step_impl(context):\n    current_player = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='current-player']\"))\n    )\n    assert current_player.text.strip() == \"X\", f\"Expected current player to be 'X', but got '{current_player.text.strip()}'\"\n\n@when('the user clicks on the tile with data-testid \"tile-3\"')\ndef step_impl(context):\n    tile_3 = WebDriverWait(context.driver, 10).until(EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='tile-3']\")))\n    tile_3.click()\n    time.sleep(1)\n\n@then('the announcer section should display \"Player X Won\"')\ndef step_impl(context):\n    announcer = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='announcer']\"))\n    )\n    assert \"Player X Won\" in announcer.text.strip(), f\"Expected announcer to display 'Player X Won', but got '{announcer.text.strip()}'\"\n\n@then('the announcer section should not have the class \"hide\"')\ndef step_impl(context):\n    announcer = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='announcer']\"))\n    )\n    class_attr = announcer.get_attribute(\"class\")\n    assert \"hide\" not in class_attr, \"Expected announcer to be visible (not hidden)\"\n\n@then('all tiles on the game board should no longer accept clicks')\ndef step_impl(context):\n    tile = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='tile-1']\"))\n    )\n    before_text = tile.text.strip()\n    try:\n        tile.click()\n        time.sleep(0.2)\n    except:\n        # 如果不能点击，符合预期\n        return\n    after_text = tile.text.strip()\n    assert before_text == after_text, f\"Tile-0 should not change after click. Before: '{before_text}', After: '{after_text}'\"\n\n# Teardown: close browser after each scenario\ndef after_scenario(context, scenario):\n    if hasattr(context, 'driver'):\n        context.driver.quit()\n"
                },
                {
                    "test_case": [
                        "Feature: Display Winner Announcement and Stop Further Interactions\n  The system must display a message indicating the winner and stop further interactions with the game board when a player wins.\n\n\nScenario: [Normal] Player O wins the game\n    Given the Tic Tac Toe game page is loaded\n    And the tiles with data-testids \"tile-4\", \"tile-5\", and \"tile-7\" display \"X\", and \"tile-1\" and \"tile-2\" display \"O\"\n    And the current player is \"O\"\n    When the user clicks on the tile with data-testid \"tile-3\"\n    Then the announcer section should display \"Player O Won\"\n    And the announcer section should not have the class \"hide\"\n    And all tiles on the game board should no longer accept clicks"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given(\"the Tic Tac Toe game page is loaded\")\ndef step_given_game_page_loaded(context):\n    context.driver = webdriver.Chrome()  # Initialize the WebDriver\n    context.driver.get(f\"file://index.html\")\n    context.driver.maximize_window()\n    time.sleep(1)  # Allow the page to load fully\n\n@given('the tiles with data-testids \"tile-4\", \"tile-5\", and \"tile-7\" display \"X\", and \"tile-1\" and \"tile-2\" display \"O\"')\ndef step_given_tiles_display_values(context):\n    driver = context.driver\n    tile = WebDriverWait(driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, f\"[data-testid='tile-4']\"))\n    )\n    tile.click()\n    tile= WebDriverWait(driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, f\"[data-testid='tile-1']\"))\n    )\n    tile.click()\n    tile= WebDriverWait(driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, f\"[data-testid='tile-5']\"))\n    )\n    tile.click()\n    tile= WebDriverWait(driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, f\"[data-testid='tile-2']\"))\n    )\n    tile.click()\n    tile= WebDriverWait(driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, f\"[data-testid='tile-7']\"))\n    )\n    tile.click()\n    time.sleep(1)  # Allow time for the tiles to update\n\n\n\n@given('the current player is \"O\"')\ndef step_given_current_player_is_o(context):\n    driver = context.driver\n    current_player = driver.find_element(By.CSS_SELECTOR, \"[data-testid='current-player']\")\n    if current_player.text != \"O\":\n        current_player.click()\n        time.sleep(1)\n\n@when('the user clicks on the tile with data-testid \"tile-3\"')\ndef step_when_user_clicks_tile_3(context):\n    driver = context.driver\n    tile = WebDriverWait(driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='tile-3']\"))\n    )\n    tile.click()\n    time.sleep(1)\n\n@then('the announcer section should display \"Player O Won\"')\ndef step_then_announcer_displays_player_o_won(context):\n    driver = context.driver\n    announcer = WebDriverWait(driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='announcer']\"))\n    )\n    assert \"Player O Won\" in announcer.text, f\"Expected 'Player O Won', but got '{announcer.text}'\"\n\n@then('the announcer section should not have the class \"hide\"')\ndef step_then_announcer_not_hidden(context):\n    driver = context.driver\n    announcer = driver.find_element(By.CSS_SELECTOR, \"[data-testid='announcer']\")\n    class_list = announcer.get_attribute(\"class\").split()\n    assert \"hide\" not in class_list, \"Expected announcer section to not have the class 'hide'\"\n\n@then(\"all tiles on the game board should no longer accept clicks\")\ndef step_then_tiles_no_longer_accept_clicks(context):\n    tile = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='tile-1']\"))\n    )\n    before_text = tile.text.strip()\n    try:\n        tile.click()\n        time.sleep(0.2)\n    except:\n        # 如果不能点击，符合预期\n        return\n    after_text = tile.text.strip()\n    assert before_text == after_text, f\"Tile-1 should not change after click. Before: '{before_text}', After: '{after_text}'\"\n\n# Teardown to close the browser after the test\ndef after_scenario(context, scenario):\n    if hasattr(context, \"driver\"):\n        context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: Display Winner Announcement and Stop Further Interactions\n  The system must display a message indicating the winner and stop further interactions with the game board when a player wins.\n\n\nScenario: [Edge] Winning condition on the last move\n    Given the Tic Tac Toe game page is loaded\n    And the current player is \"X\"\n    And the board state is [\"X\", \"X\", \"O\", \"O\", \"X\", \"O\", \"X\", \"O\", \"\"]\n    When the user clicks on the tile with data-testid \"tile-9\"\n    Then the announcer section should display \"Player X Won\"\n    And the announcer section should not have the class \"hide\"\n    And all tiles on the game board should no longer accept clicks"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\ndef is_expanded(element):\n    aria = element.get_attribute(\"aria-expanded\")\n    if aria is not None:\n        return aria == \"true\"\n\n    class_list = element.get_attribute(\"class\").split()\n    if any(cls in class_list for cls in [\"expanded\", \"open\", \"show\"]):\n        return True\n\n    data_expanded = element.get_attribute(\"data-expanded\")\n    if data_expanded is not None:\n        return data_expanded == \"true\"\n\n    return element.is_displayed()\n\ndef is_collapsed(element):\n    aria = element.get_attribute(\"aria-expanded\")\n    if aria is not None and aria.lower() == \"false\":\n        return True\n\n    class_attr = element.get_attribute(\"class\") or \"\"\n    class_list = class_attr.split()\n    if \"collapsed\" in class_list:\n        return True\n\n    data_expanded = element.get_attribute(\"data-expanded\")\n    if data_expanded is not None and data_expanded.lower() == \"false\":\n        return True\n\n    style = element.get_attribute(\"style\") or \"\"\n    if \"display: none\" in style or \"visibility: hidden\" in style or \"height: 0\" in style:\n        return True\n\n    return not element.is_displayed()\n\n@given('the Tic Tac Toe game page is loaded')\ndef step_given_game_page_loaded(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)\n\n@given('the current player is \"{player}\"')\ndef step_given_current_player(context, player):\n    player_display = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='current-player']\"))\n    )\n    assert player_display.text == player, f\"Expected current player to be '{player}', but got '{player_display.text}'\"\n\n@given('the board state is {board_state}')\ndef step_given_board_state(context, board_state):\n    import ast\n\n    # 解析成列表\n    board = ast.literal_eval(board_state)\n\n    # 把X和O的位置分别提取出来\n    x_indices = []\n    o_indices = []\n    for idx, value in enumerate(board):\n        if value == \"X\":\n            x_indices.append(idx + 1)\n        elif value == \"O\":\n            o_indices.append(idx + 1)\n        # 空白(\"\")的不管\n\n    # 轮流合并X和O的下法\n    moves = []\n    for i, value in enumerate(x_indices):\n        if i < len(o_indices):\n            moves.append((\"X\", x_indices[i]))\n            moves.append((\"O\", o_indices[i]))\n        else:\n            moves.append((\"X\", x_indices[i]))\n\n    # 按穿插顺序执行点击\n    for player, index in moves:\n        tile = context.driver.find_element(By.CSS_SELECTOR, f\"[data-testid='tile-{index}']\")\n        tile.click()\n        time.sleep(0.1)\n    time.sleep(1)\n\n@when('the user clicks on the tile with data-testid \"{tile_id}\"')\ndef step_when_set_board_state(context, tile_id):\n    tile = context.driver.find_element(By.CSS_SELECTOR, f\"[data-testid='{tile_id}']\")\n    tile.click()\n    time.sleep(1)\n\n\n@then('the announcer section should display \"{message}\"')\ndef step_then_announcer_displays_message(context, message):\n    announcer = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='announcer']\"))\n    )\n    assert message in announcer.text, f\"Expected announcer to display '{message}', but got '{announcer.text}'\"\n\n@then('the announcer section should not have the class \"hide\"')\ndef step_then_announcer_not_hidden(context):\n    announcer = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='announcer']\")\n    assert \"hide\" not in announcer.get_attribute(\"class\"), \"Expected announcer not to have class 'hide'\"\n\n@then('all tiles on the game board should no longer accept clicks')\ndef step_impl(context):\n    tile = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='tile-1']\"))\n    )\n    before_text = tile.text.strip()\n    try:\n        tile.click()\n        time.sleep(0.2)\n    except:\n        # 如果不能点击，符合预期\n        return\n    after_text = tile.text.strip()\n    assert before_text == after_text, f\"Tile-1 should not change after click. Before: '{before_text}', After: '{after_text}'\"\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                }
            ]
        },
        "6": {
            "requirement": {
                "description": "When the game ends in a tie (i.e., all tiles are filled without any player meeting the winning conditions), the system must perform the following actions: 1) Display the message 'Tie' in the announcer section, replacing its innerText with 'Tie'. 2) Ensure the announcer section becomes visible by removing the 'hide' class from its class list. 3) Disable further interactions with the game board by preventing any additional clicks on tiles. The announcer section is identified by the attribute 'data-testid=\"announcer\"', and each tile on the game board is identified by the attribute 'data-testid' with values ranging from 'tile-1' to 'tile-9'."
            },
            "test_cases": [
                {
                    "test_case": [
                        "Feature: Display tie message and disable further interactions when the game ends in a tie\n  The system must detect when all tiles are filled without a winner, display a \"Tie\" message in the announcer section, and prevent further interactions with the game board.\n\n\nScenario: [Normal] Game ends in a tie and displays the \"Tie\" message\n  Given the Tic Tac Toe game page is loaded\n  And the board state is [\"X\", \"O\", \"X\", \"X\", \"X\", \"O\", \"O\", \"\", \"O\"]\n  And it is player X's turn\n  When the user clicks on the tile with data-testid \"tile-8\"\n  Then the announcer section should display \"Tie\"\n  And the announcer section should not have the class \"hide\"\n  And all tiles on the game board should no longer accept clicks"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the Tic Tac Toe game page is loaded')\ndef step_given_game_page_loaded(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)\n\n@given('the board state is {board_state}')\ndef step_given_board_state(context, board_state):\n    import ast\n\n    # 解析成列表\n    board = ast.literal_eval(board_state)\n\n    # 把X和O的位置分别提取出来\n    x_indices = []\n    o_indices = []\n    for idx, value in enumerate(board):\n        if value == \"X\":\n            x_indices.append(idx + 1)\n        elif value == \"O\":\n            o_indices.append(idx + 1)\n        # 空白(\"\")的不管\n\n    # 轮流合并X和O的下法\n    moves = []\n    for i, value in enumerate(x_indices):\n        if i < len(o_indices):\n            moves.append((\"X\", x_indices[i]))\n            moves.append((\"O\", o_indices[i]))\n        else:\n            moves.append((\"X\", x_indices[i]))\n\n    # 按穿插顺序执行点击\n    for player, index in moves:\n        tile = context.driver.find_element(By.CSS_SELECTOR, f\"[data-testid='tile-{index}']\")\n        tile.click()\n        time.sleep(0.1)\n    time.sleep(1)\n\n@given('it is player X\\'s turn')\ndef step_given_player_o_turn(context):\n    pass\n\n\n@when('the user clicks on the tile with data-testid \"tile-8\"')\ndef step_when_user_clicks_tile_9(context):\n    tile_9 = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='tile-8']\")\n    tile_9.click()\n    time.sleep(1)\n\n@then('the announcer section should display \"Tie\"')\ndef step_then_announcer_displays_tie(context):\n    announcer = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='announcer']\"))\n    )\n    assert \"Tie\".lower() in announcer.text.lower(), f\"Expected 'Tie' in announcer, but got '{announcer.text}'\"\n\n@then('the announcer section should not have the class \"hide\"')\ndef step_then_announcer_not_hidden(context):\n    announcer = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='announcer']\")\n    class_list = announcer.get_attribute(\"class\").split()\n    assert \"hide\" not in class_list, \"Expected announcer not to have class 'hide'\"\n\n@then('all tiles on the game board should no longer accept clicks')\ndef step_impl(context):\n    tile = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='tile-1']\"))\n    )\n    before_text = tile.text.strip()\n    try:\n        tile.click()\n        time.sleep(0.2)\n    except:\n        # 如果不能点击，符合预期\n        return\n    after_text = tile.text.strip()\n    assert before_text == after_text, f\"Tile-1 should not change after click. Before: '{before_text}', After: '{after_text}'\"\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                }
            ]
        },
        "7": {
            "requirement": {
                "description": "Upon loading the Tic Tac Toe game, the system initializes with Player X as the current player, indicated by the player display element with data-testid 'current-player'. The game board consists of nine tiles, each with a unique data-testid ranging from 'tile-1' to 'tile-9'. When a user clicks on a tile, if the tile is empty and the game is active, the system updates the tile to display the current player's symbol ('X' or 'O') and adds a corresponding class ('playerX' or 'playerO'). Subsequently, the system switches the current player, updating the player display element to reflect the new player's turn ('Player X's turn' or 'Player O's turn'). This change is visually represented by updating the inner text and class of the player display element. The system ensures that the player switch only occurs after a valid move, maintaining the integrity of the game flow."
            },
            "test_cases": [
                {
                    "test_case": [
                        "Feature: Switch Current Player After a Valid Move\n  The system must switch the current player and update the player display to indicate whose turn it is after a valid move.\n\n\n  Scenario: [Normal] Player X makes a valid move, and the turn switches to Player O\n    Given the Tic Tac Toe game is loaded\n    And the current player display shows \"Player X's turn\" with data-testid \"current-player\"\n    And the game board is empty\n    When the user clicks on the tile with data-testid \"tile-1\"\n    Then the tile with data-testid \"tile-1\" should display \"X\"\n    And the current player display should update to \"Player O's turn\" with data-testid \"current-player\"\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\ndef is_expanded(element):\n    aria = element.get_attribute(\"aria-expanded\")\n    if aria is not None:\n        return aria == \"true\"\n\n    class_list = element.get_attribute(\"class\").split()\n    if any(cls in class_list for cls in [\"expanded\", \"open\", \"show\"]):\n        return True\n\n    data_expanded = element.get_attribute(\"data-expanded\")\n    if data_expanded is not None:\n        return data_expanded == \"true\"\n\n    return element.is_displayed()\n\ndef is_collapsed(element):\n    aria = element.get_attribute(\"aria-expanded\")\n    if aria is not None and aria.lower() == \"false\":\n        return True\n\n    class_attr = element.get_attribute(\"class\") or \"\"\n    class_list = class_attr.split()\n    if \"collapsed\" in class_list:\n        return True\n\n    data_expanded = element.get_attribute(\"data-expanded\")\n    if data_expanded is not None and data_expanded.lower() == \"false\":\n        return True\n\n    style = element.get_attribute(\"style\") or \"\"\n    if \"display: none\" in style or \"visibility: hidden\" in style or \"height: 0\" in style:\n        return True\n\n    return not element.is_displayed()\n\n@given('the Tic Tac Toe game is loaded')\ndef step_given_game_is_loaded(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)\n\n@given('the current player display shows \"Player X\\'s turn\" with data-testid \"current-player\"')\ndef step_given_current_player_display(context):\n    player_display = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='current-player']\"))\n    )\n    assert \"X\" in player_display.text, f\"Expected 'X' in '{player_display.text}'\"\n    time.sleep(1)\n\n@given('the game board is empty')\ndef step_given_game_board_is_empty(context):\n    for i in range(1, 10):\n        tile = context.driver.find_element(By.CSS_SELECTOR, f\"[data-testid='tile-{i}']\")\n        assert tile.text == '', f\"Expected tile-{i} to be empty, but found '{tile.text}'\"\n    time.sleep(1)\n\n@when('the user clicks on the tile with data-testid \"tile-1\"')\ndef step_when_user_clicks_tile(context):\n    tile = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='tile-1']\"))\n    )\n    tile.click()\n    time.sleep(1)\n\n@then('the tile with data-testid \"tile-1\" should display \"X\"')\ndef step_then_tile_should_display_x(context):\n    tile = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='tile-1']\")\n    assert tile.text == 'X', f\"Expected tile-1 to display 'X', but found '{tile.text}'\"\n    time.sleep(1)\n\n@then('the current player display should update to \"Player O\\'s turn\" with data-testid \"current-player\"')\ndef step_then_current_player_display_updates(context):\n    player_display = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='current-player']\")\n    assert \"O\" in player_display.text, f\"Expected 'O' in '{player_display.text}'\"\n    time.sleep(1)\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: Switch Current Player After a Valid Move\n  The system must switch the current player and update the player display to indicate whose turn it is after a valid move.\n\n\nScenario: [Normal] Player O makes a valid move, and the turn switches to Player X\n    Given the Tic Tac Toe game is loaded\n    And the tile with data-testid \"tile-1\" displays \"X\"\n    And the current player display shows \"Player O's turn\" with data-testid \"current-player\"  \n    When the user clicks on the tile with data-testid \"tile-2\"\n    Then the tile with data-testid \"tile-2\" should display \"O\"\n    And the current player display should update to \"Player X's turn\" with data-testid \"current-player\""
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the Tic Tac Toe game is loaded')\ndef step_given_game_is_loaded(context):\n    context.driver = webdriver.Chrome()  # Initialize the WebDriver\n    context.driver.get(f\"file://index.html\")\n    context.driver.maximize_window()\n    WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='current-player']\"))\n    )\n    time.sleep(1)  # Allow the page to fully load\n\n@given('the tile with data-testid \"tile-1\" displays \"X\"')\ndef step_given_tile_1_displays_x(context):\n    tile_1 = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='tile-1']\"))\n    )\n    tile_1.click()  # Simulate Player X clicking on tile-1\n    time.sleep(1)\n    assert tile_1.text == \"X\", f\"Expected 'X' on tile-1, but found '{tile_1.text}'\"\n\n@given('the current player display shows \"Player O\\'s turn\" with data-testid \"current-player\"')\ndef step_given_current_player_is_o(context):\n    current_player_display = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='current-player']\"))\n    )\n    assert current_player_display.text.strip() == \"O\", f\"Expected 'O', but found '{current_player_display.text.strip()}'\"\n\n@when('the user clicks on the tile with data-testid \"tile-2\"')\ndef step_when_user_clicks_tile_2(context):\n    tile_2 = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='tile-2']\"))\n    )\n    tile_2.click()\n    time.sleep(1)\n\n@then('the tile with data-testid \"tile-2\" should display \"O\"')\ndef step_then_tile_2_displays_o(context):\n    tile_2 = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='tile-2']\"))\n    )\n    assert tile_2.text == \"O\", f\"Expected 'O' on tile-2, but found '{tile_2.text}'\"\n\n@then('the current player display should update to \"Player X\\'s turn\" with data-testid \"current-player\"')\ndef step_then_current_player_is_x(context):\n    current_player_display = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='current-player']\"))\n    )\n    assert current_player_display.text.strip() == \"X\", f\"Expected 'X', but found '{current_player_display.text.strip()}'\"\n\n# Teardown to close the browser after the test\ndef after_scenario(context, scenario):\n    if hasattr(context, 'driver'):\n        context.driver.quit()"
                }
            ]
        },
        "8": {
            "requirement": {
                "description": "When the reset button (with data-testid 'reset-button') is clicked, the system must perform the following actions: clear all tiles (elements with data-testid 'tile-1' to 'tile-9'), reset the internal game board state to all empty values, hide the announcer section (element with data-testid 'announcer'), and set the current player to 'X' in the element with data-testid 'current-player' if it was previously 'O'. This functionality should work correctly in various scenarios, including when some tiles are marked, when the game is in progress, when a win has been announced, when a tie has been announced, and when no tiles have been marked."
            },
            "test_cases": [
                {
                    "test_case": [
                        "Feature: Resetting the Tic Tac Toe game\n  The reset button must clear all tiles, reset the internal game board state, hide the announcer section, and set the current player to 'X' if it was previously 'O'.\n\n\nScenario: [Normal] Reset the game when the current player is 'X'\n    Given the Tic Tac Toe game is loaded\n    And some tiles have been marked (e.g., tile with data-testid \"tile-1\" contains \"X\" and tile with data-testid \"tile-2\" contains \"O\")\n    When the user clicks the reset button with data-testid \"reset-button\"\n    Then all tiles (e.g., elements with data-testid \"tile-1\" to \"tile-2”) should be empty\n    And the current player should remain \"X\" in the element with data-testid \"current-player\""
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given(\"the Tic Tac Toe game is loaded\")\ndef step_given_game_loaded(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='current-player']\"))\n    )\n    time.sleep(1)\n\n@given('some tiles have been marked (e.g., tile with data-testid \"tile-1\" contains \"X\" and tile with data-testid \"tile-2\" contains \"O\")')\ndef step_given_tiles_marked(context):\n    tile_1 = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='tile-1']\"))\n    )\n    tile_1.click()\n    time.sleep(1)\n\n    tile_2 = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='tile-2']\"))\n    )\n    tile_2.click()\n    time.sleep(1)\n\n@when('the user clicks the reset button with data-testid \"reset-button\"')\ndef step_when_user_clicks_reset(context):\n    reset_button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='reset-button']\"))\n    )\n    reset_button.click()\n    time.sleep(1)\n\n@then('all tiles (e.g., elements with data-testid \"tile-1\" to \"tile-2”) should be empty')\ndef step_then_tiles_should_be_empty(context):\n    for i in range(1, 10):\n        tile = WebDriverWait(context.driver, 10).until(\n            EC.presence_of_element_located((By.CSS_SELECTOR, f\"[data-testid='tile-{i}']\"))\n        )\n        assert tile.text.strip() == \"\", f\"Tile {i} is not empty: {tile.text}\"\n\n@then('the current player should remain \"X\" in the element with data-testid \"current-player\"')\ndef step_then_current_player_should_remain_x(context):\n    current_player = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='current-player']\"))\n    )\n    assert current_player.text.strip() == \"X\", f\"Current player is not 'X': {current_player.text}\"\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: Resetting the Tic Tac Toe game\n  The reset button must clear all tiles, reset the internal game board state, hide the announcer section, and set the current player to 'X' if it was previously 'O'.\n\n\nScenario: [Normal] Reset the game when the current player is 'O'\n  Given the Tic Tac Toe game page is loaded\n  And some tiles have been marked (e.g., the tile with data-testid \"tile-4\" contains \"X\")\n  And the current player is displayed as \"O\" in the element with data-testid \"current-player\"\n  When the user clicks the reset button with data-testid \"reset-button\"\n  Then all tiles should be empty\n  And the current player should be set to \"X\" in the element with data-testid \"current-player\""
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the Tic Tac Toe game page is loaded')\ndef step_given_game_page_loaded(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)\n\n@given('some tiles have been marked (e.g., the tile with data-testid \"tile-4\" contains \"X\")')\ndef step_given_tiles_marked(context):\n    tile = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='tile-4']\"))\n    )\n    tile.click()\n    time.sleep(1)\n\n@given('the current player is displayed as \"O\" in the element with data-testid \"current-player\"')\ndef step_given_current_player_o(context):\n    player_display = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='current-player']\"))\n    )\n    if player_display.text.strip() != \"O\":\n        # Simulate a click to change the player to \"O\"\n        tile = WebDriverWait(context.driver, 10).until(\n            EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='tile-1']\"))\n        )\n        tile.click()\n        time.sleep(1)\n\n@when('the user clicks the reset button with data-testid \"reset-button\"')\ndef step_when_user_clicks_reset(context):\n    reset_button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='reset-button']\"))\n    )\n    reset_button.click()\n    time.sleep(1)\n\n@then('all tiles should be empty')\ndef step_then_all_tiles_empty(context):\n    for i in range(1, 10):\n        tile = context.driver.find_element(By.CSS_SELECTOR, f\"[data-testid='tile-{i}']\")\n        assert tile.text.strip() == \"\", f\"Tile {i} is not empty\"\n\n@then('the current player should be set to \"X\" in the element with data-testid \"current-player\"')\ndef step_then_current_player_x(context):\n    player_display = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='current-player']\")\n    assert player_display.text.strip() == \"X\", f\"Expected current player to be 'X', but got '{player_display.text.strip()}'\"\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: Resetting the Tic Tac Toe game\n  The reset button must clear all tiles, reset the internal game board state, hide the announcer section, and set the current player to 'X' if it was previously 'O'.\n\n\nScenario: [Edge] Reset the game after a win has been announced\n  Given the Tic Tac Toe game page is loaded\n  And the board state is [\"X\", \"X\", \"O\", \"O\", \"X\", \"O\", \"X\", \"O\", \"X\"]\n  And the announcer section with data-testid \"announcer\" displays \"Player X Won\"\n  When the user clicks the reset button with data-testid \"reset-button\"\n  Then all tiles (e.g., elements with data-testid \"tile-1\" to \"tile-9\") should be empty\n  And the announcer section with data-testid \"announcer\" should be hidden\n  And the current player should remain \"X\" in the element with data-testid \"current-player\""
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the Tic Tac Toe game page is loaded')\ndef step_given_game_page_loaded(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)\n\n@given('the board state is {board_state}')\ndef step_given_board_state(context, board_state):\n    import ast\n\n    # 解析成列表\n    board = ast.literal_eval(board_state)\n\n    # 把X和O的位置分别提取出来\n    x_indices = []\n    o_indices = []\n    for idx, value in enumerate(board):\n        if value == \"X\":\n            x_indices.append(idx + 1)\n        elif value == \"O\":\n            o_indices.append(idx + 1)\n        # 空白(\"\")的不管\n\n    # 轮流合并X和O的下法\n    moves = []\n    for i, value in enumerate(x_indices):\n        if i < len(o_indices):\n            moves.append((\"X\", x_indices[i]))\n            moves.append((\"O\", o_indices[i]))\n        else:\n            moves.append((\"X\", x_indices[i]))\n\n    # 按穿插顺序执行点击\n    for player, index in moves:\n        tile = context.driver.find_element(By.CSS_SELECTOR, f\"[data-testid='tile-{index}']\")\n        tile.click()\n        time.sleep(0.1)\n    time.sleep(1)\n\n@given('the announcer section with data-testid \"announcer\" displays \"Player X Won\"')\ndef step_given_announcer_displays_winner(context):\n    pass\n\n@when('the user clicks the reset button with data-testid \"reset-button\"')\ndef step_when_user_clicks_reset(context):\n    reset_button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='reset-button']\"))\n    )\n    reset_button.click()\n    time.sleep(1)\n\n@then('all tiles (e.g., elements with data-testid \"tile-1\" to \"tile-9\") should be empty')\ndef step_then_tiles_should_be_empty(context):\n    tiles = context.driver.find_elements(By.CSS_SELECTOR, \"[data-testid^='tile-']\")\n    for tile in tiles:\n        assert tile.text == '', f\"Expected tile to be empty, but got '{tile.text}'\"\n    time.sleep(1)\n\n@then('the announcer section with data-testid \"announcer\" should be hidden')\ndef step_then_announcer_should_be_hidden(context):\n    announcer = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='announcer']\")\n    assert announcer.is_displayed() == False, \"Expected announcer to be hidden\"\n    time.sleep(1)\n\n@then('the current player should remain \"X\" in the element with data-testid \"current-player\"')\ndef step_then_current_player_should_remain_x(context):\n    current_player = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='current-player']\")\n    assert current_player.text == 'X', f\"Expected current player to be 'X', but got '{current_player.text}'\"\n    time.sleep(1)\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: Resetting the Tic Tac Toe game\n  The reset button must clear all tiles, reset the internal game board state, hide the announcer section, and set the current player to 'X' if it was previously 'O'.\n\n\nScenario: [Edge] Reset the game after a tie has been announced\n  Given the Tic Tac Toe game page is loaded\n  And the board state is [\"X\", \"X\", \"O\", \"O\", \"X\", \"X\", \"X\", \"O\", \"O\"]\n  And the announcer section with data-testid \"announcer\" displays \"Tie\"\n  When the user clicks the reset button with data-testid \"reset-button\"\n  Then all tiles (e.g., elements with data-testid \"tile-1\" to \"tile-9\") should be empty\n  And the announcer section with data-testid \"announcer\" should be hidden\n  And the current player should be set to \"X\" in the element with data-testid \"current-player\""
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\ndef is_collapsed(element):\n    aria = element.get_attribute(\"aria-expanded\")\n    if aria is not None and aria.lower() == \"false\":\n        return True\n\n    class_attr = element.get_attribute(\"class\") or \"\"\n    class_list = class_attr.split()\n    if \"collapsed\" in class_list:\n        return True\n\n    data_expanded = element.get_attribute(\"data-expanded\")\n    if data_expanded is not None and data_expanded.lower() == \"false\":\n        return True\n\n    style = element.get_attribute(\"style\") or \"\"\n    if \"display: none\" in style or \"visibility: hidden\" in style or \"height: 0\" in style:\n        return True\n\n    return not element.is_displayed()\n\n@given('the Tic Tac Toe game page is loaded')\ndef step_impl(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)\n\n@given('the board state is {board_state}')\ndef step_given_board_state(context, board_state):\n    import ast\n\n    # 解析成列表\n    board = ast.literal_eval(board_state)\n\n    # 把X和O的位置分别提取出来\n    x_indices = []\n    o_indices = []\n    for idx, value in enumerate(board):\n        if value == \"X\":\n            x_indices.append(idx + 1)\n        elif value == \"O\":\n            o_indices.append(idx + 1)\n        # 空白(\"\")的不管\n\n    # 轮流合并X和O的下法\n    moves = []\n    for i, value in enumerate(x_indices):\n        if i < len(o_indices):\n            moves.append((\"X\", x_indices[i]))\n            moves.append((\"O\", o_indices[i]))\n        else:\n            moves.append((\"X\", x_indices[i]))\n\n    # 按穿插顺序执行点击\n    for player, index in moves:\n        tile = context.driver.find_element(By.CSS_SELECTOR, f\"[data-testid='tile-{index}']\")\n        tile.click()\n        time.sleep(0.1)\n    time.sleep(1)\n\n@given('the announcer section with data-testid \"announcer\" displays \"Tie\"')\ndef step_impl(context):\n    pass\n\n@when('the user clicks the reset button with data-testid \"reset-button\"')\ndef step_impl(context):\n    reset_button = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='reset-button']\")\n    reset_button.click()\n    time.sleep(1)\n\n@then('all tiles (e.g., elements with data-testid \"tile-1\" to \"tile-9\") should be empty')\ndef step_impl(context):\n    tiles = context.driver.find_elements(By.CSS_SELECTOR, \".tile\")\n    for tile in tiles:\n        assert tile.text == \"\", f\"Expected tile to be empty, but got '{tile.text}'\"\n    time.sleep(1)\n\n@then('the announcer section with data-testid \"announcer\" should be hidden')\ndef step_impl(context):\n    announcer = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='announcer']\")\n    assert is_collapsed(announcer), \"Expected announcer to be hidden\"\n    time.sleep(1)\n\n@then('the current player should be set to \"X\" in the element with data-testid \"current-player\"')\ndef step_impl(context):\n    current_player = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='current-player']\")\n    assert current_player.text == \"X\", f\"Expected current player to be 'X', but got '{current_player.text}'\"\n    time.sleep(1)\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: Resetting the Tic Tac Toe game\n  The reset button must clear all tiles, reset the internal game board state, hide the announcer section, and set the current player to 'X' if it was previously 'O'.\n\n\nScenario: [Error] Reset the game when no tiles have been marked\n    Given the Tic Tac Toe game is loaded\n    When the user clicks the reset button with data-testid \"reset-button\"\n    Then all tiles (e.g., elements with data-testid \"tile-1\" to \"tile-9\") should remain empty\n    And the internal game board state should remain reset to all empty values\n    And the announcer section with data-testid \"announcer\" should remain hidden\n    And the current player should remain \"X\" in the element with data-testid \"current-player\""
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the Tic Tac Toe game is loaded')\ndef step_given_game_is_loaded(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)  # Allow time for the page to load\n\n@when('the user clicks the reset button with data-testid \"reset-button\"')\ndef step_when_user_clicks_reset_button(context):\n    reset_button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='reset-button']\"))\n    )\n    reset_button.click()\n    time.sleep(1)  # Allow time for the reset action to complete\n\n@then('all tiles (e.g., elements with data-testid \"tile-1\" to \"tile-9\") should remain empty')\ndef step_then_tiles_should_remain_empty(context):\n    for i in range(1, 10):\n        tile = context.driver.find_element(By.CSS_SELECTOR, f\"[data-testid='tile-{i}']\")\n        assert tile.text.strip() == \"\", f\"Tile {i} is not empty\"\n\n@then('the internal game board state should remain reset to all empty values')\ndef step_then_game_board_should_be_reset(context):\n    # This step assumes internal state verification is possible via UI or other means\n    # Since we can't directly access JavaScript variables, we assume the UI reflects the state\n    for i in range(1, 10):\n        tile = context.driver.find_element(By.CSS_SELECTOR, f\"[data-testid='tile-{i}']\")\n        assert tile.text.strip() == \"\", f\"Tile {i} is not empty\"\n\n@then('the announcer section with data-testid \"announcer\" should remain hidden')\ndef step_then_announcer_should_be_hidden(context):\n    announcer = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='announcer']\")\n    assert announcer.is_displayed() is False, \"Announcer is not hidden\"\n\n@then('the current player should remain \"X\" in the element with data-testid \"current-player\"')\ndef step_then_current_player_should_be_x(context):\n    current_player = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='current-player']\")\n    assert current_player.text.strip() == \"X\", f\"Current player is not 'X', but '{current_player.text.strip()}'\"\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                }
            ]
        }
    }
}