{
    "summary": {
        "overview": "The application allows users to interact with an image area by double-clicking to 'like' it. Each double-click creates a visual heart icon at the click location and increments a like counter displayed on the page.",
        "predefined_options": "The image used for the like interaction is located at: 'https://images.unsplash.com/photo-1597540103960-2a6528f09ae9?ixid=MXwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHw%3D&ixlib=rb-1.2.1&auto=format&fit=crop&w=321&q=80'.",
        "external_resources": "The application uses Font Awesome for heart icons, sourced from 'https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.1/css/all.min.css'.",
        "external_js_libraries": "No external JavaScript libraries are used in this application."
    },
    "finegrained_rewith_test": {
        "1": {
            "requirement": {
                "description": "When the user double-clicks on the image area (div with data-testid 'image-container' and class 'loveMe'), the system should display a heart icon at the exact click location within the image area. The heart icon should be an <i> element with classes 'fas' and 'fa-heart'. The heart icon should be positioned using the click's relative coordinates within the image area, calculated based on the user's click event and the image area's offset. The heart icon should automatically disappear after 1 second. Additionally, the like count displayed in the <span> element with data-testid 'times' should increment by 1 for each successful double-click. The system should handle edge cases such as double-clicks near the boundaries of the image area and rapid consecutive double-clicks, ensuring accurate positioning and proper like count updates. Single clicks or double-clicks outside the image area should not trigger the heart icon display or affect the like count."
            },
            "test_cases": [
                {
                    "test_case": [
                        "Feature: Double-click Heart Icon Display\n  The system should display a heart icon at the click location within the image area when the user double-clicks on the image area.\n\n\nScenario: [Normal] Display heart icon on double-click\n    Given the webpage is loaded\n    And the image area with data-testid \"image-container\" is visible\n    When the user double-clicks on the image area with data-testid \"image-container\"\n    Then a heart icon with class \"fas fa-heart\" should appear at the click location within the image area"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\ndef is_visible(element):\n    return element.is_displayed()\n\n@given(\"the webpage is loaded\")\ndef step_given_webpage_loaded(context):\n    # Initialize the Selenium WebDriver\n    context.driver = webdriver.Chrome()\n    # Load the test page dynamically\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)  # Allow time for the page to load\n\n@given('the image area with data-testid \"image-container\" is visible')\ndef step_given_image_area_visible(context):\n    # Wait for the image area to be visible\n    image_container = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='image-container']\"))\n    )\n    assert is_visible(image_container), \"Image area is not visible\"\n    context.image_container = image_container\n\n@when('the user double-clicks on the image area with data-testid \"image-container\"')\ndef step_when_user_double_clicks_image_area(context):\n    # Perform a double-click action on the image area\n    from selenium.webdriver import ActionChains\n    action = ActionChains(context.driver)\n    action.double_click(context.image_container).perform()\n    time.sleep(1)  # Allow time for the heart icon to appear\n\n@then('a heart icon with class \"fas fa-heart\" should appear at the click location within the image area')\ndef step_then_heart_icon_appears(context):\n    # Verify that the heart icon appears within the image area\n    heart_icon = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \".fas.fa-heart\"))\n    )\n    assert is_visible(heart_icon), \"Heart icon is not visible\"\n    time.sleep(1)  # Allow time for verification\n\n# Cleanup after tests\ndef after_scenario(context, scenario):\n    # Close the browser driver\n    context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: Double-click Heart Icon Display\n  The system should display a heart icon at the click location within the image area when the user double-clicks on the image area.\n\n\nScenario: [Edge] Double-click near the edge of the image area\n    Given the webpage is loaded\n    And the image area with data-testid \"image-container\" is visible\n    When the user double-clicks near the edge of the image area with data-testid \"image-container\"\n    Then a heart icon with class \"fas fa-heart\" should appear at the click location near the edge within the image area"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the webpage is loaded')\ndef step_impl(context):\n    # Initialize the WebDriver and load the test page\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    context.driver.maximize_window()\n    time.sleep(1)  # Allow the page to load completely\n\n@given('the image area with data-testid \"image-container\" is visible')\ndef step_impl(context):\n    # Wait for the image container to be visible\n    WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='image-container']\"))\n    )\n    image_container = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='image-container']\")\n    assert image_container.is_displayed(), \"Image container is not visible\"\n\n@when('the user double-clicks near the edge of the image area with data-testid \"image-container\"')\ndef step_impl(context):\n    # Locate the image container\n    image_container = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='image-container']\")\n    \n    # Simulate a double-click near the edge of the image container\n    from selenium.webdriver.common.action_chains import ActionChains\n    action = ActionChains(context.driver)\n\n    action.move_to_element_with_offset(image_container, 5, 5).double_click().perform()\n    time.sleep(1)  # Allow time for the heart icon to appear\n\n@then('a heart icon with class \"fas fa-heart\" should appear at the click location near the edge within the image area')\ndef step_impl(context):\n    # Verify that a heart icon appears at the click location\n    WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \".fas.fa-heart\"))\n    )\n    heart_icon = context.driver.find_element(By.CSS_SELECTOR, \".fas.fa-heart\")\n    assert heart_icon.is_displayed(), \"Heart icon is not visible at the click location\"\n    time.sleep(1)  # Allow time for visual verification\n\n# Teardown to close the browser after the test\ndef after_scenario(context, scenario):\n    if hasattr(context, 'driver'):\n        context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: Double-click Heart Icon Display\n  The system should display a heart icon at the click location within the image area when the user double-clicks on the image area.\n\n\n  Scenario: [Edge] Rapid consecutive double-clicks\n    Given the webpage is loaded\n    And the image area with data-testid \"image-container\" is visible\n    When the user performs rapid consecutive double-clicks on the image area with data-testid \"image-container\"\n    Then multiple heart icons with class \"fas fa-heart\" should appear at each click location within the image area\n    And the like count with data-testid \"times\" should increment accordingly\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given(\"the webpage is loaded\")\ndef step_given_webpage_is_loaded(context):\n    # Initialize the WebDriver and load the test page\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    context.driver.maximize_window()\n    time.sleep(1)  # Allow the page to load completely\n\n@given('the image area with data-testid \"image-container\" is visible')\ndef step_given_image_area_is_visible(context):\n    # Wait for the image container to be visible\n    WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='image-container']\"))\n    )\n    image_container = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='image-container']\")\n    assert image_container.is_displayed(), \"Image container is not visible\"\n\n@when('the user performs rapid consecutive double-clicks on the image area with data-testid \"image-container\"')\ndef step_when_user_double_clicks(context):\n    from selenium.webdriver.common.action_chains import ActionChains\n\n    # Locate the image container\n    image_container = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='image-container']\")\n\n    # Perform rapid consecutive double-clicks\n    action = ActionChains(context.driver)\n    for _ in range(3):  # Perform 3 rapid double-clicks\n        action.double_click(image_container).perform()\n        time.sleep(0.5)  # Short delay between double-clicks\n\n@then('multiple heart icons with class \"fas fa-heart\" should appear at each click location within the image area')\ndef step_then_heart_icons_appear(context):\n    # Wait for at least one heart icon to appear\n    WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \".fas.fa-heart\"))\n    )\n\n    # Verify multiple heart icons are present\n    heart_icons = context.driver.find_elements(By.CSS_SELECTOR, \".fas.fa-heart\")\n    assert len(heart_icons) > 1, \"Expected multiple heart icons, but found less\"\n\n@then('the like count with data-testid \"times\" should increment accordingly')\ndef step_then_like_count_increments(context):\n    # Locate the like count element\n    like_count_element = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='times']\")\n\n    # Verify the like count has incremented\n    like_count = int(like_count_element.text)\n    assert like_count >= 3, f\"Expected like count to be at least 3, but got {like_count}\"\n\n# Teardown to close the browser after the test\ndef after_scenario(context, scenario):\n    if hasattr(context, \"driver\"):\n        context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: Double-click Heart Icon Display\n  The system should display a heart icon at the click location within the image area when the user double-clicks on the image area.\n\n\n  Scenario: [Error] Single click on the image area\n    Given the webpage is loaded\n    And the image area with data-testid \"image-container\" is visible\n    When the user single-clicks on the image area with data-testid \"image-container\"\n    Then no heart icon should appear within the image area\n    And the like count with data-testid \"times\" should remain unchanged\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given(\"the webpage is loaded\")\ndef step_given_webpage_loaded(context):\n    # Initialize the WebDriver and load the test page\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)  # Allow the page to load completely\n\n@given('the image area with data-testid \"image-container\" is visible')\ndef step_given_image_area_visible(context):\n    # Wait for the image area to be visible\n    WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='image-container']\"))\n    )\n    image_container = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='image-container']\")\n    assert image_container.is_displayed(), \"Image area is not visible\"\n\n@when('the user single-clicks on the image area with data-testid \"image-container\"')\ndef step_when_user_single_clicks_image_area(context):\n    # Perform a single click on the image area\n    image_container = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='image-container']\")\n    image_container.click()\n    time.sleep(1)  # Allow time for any potential UI updates\n\n@then(\"no heart icon should appear within the image area\")\ndef step_then_no_heart_icon_appears(context):\n    # Check that no heart icon is present within the image area\n    image_container = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='image-container']\")\n    heart_icons = image_container.find_elements(By.CSS_SELECTOR, \".fa-heart\")\n    assert len(heart_icons) == 0, f\"Unexpected heart icons found: {len(heart_icons)}\"\n\n@then('the like count with data-testid \"times\" should remain unchanged')\ndef step_then_like_count_remains_unchanged(context):\n    # Verify that the like count remains unchanged\n    like_count_element = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='times']\")\n    like_count = int(like_count_element.text.strip())\n    assert like_count == 0, f\"Like count is not unchanged; found: {like_count}\"\n\n# Cleanup after tests\ndef after_scenario(context, scenario):\n    if hasattr(context, 'driver'):\n        context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: Double-click Heart Icon Display\n  The system should display a heart icon at the click location within the image area when the user double-clicks on the image area.\n\n\n  Scenario: [Error] Double-click outside the image area\n    Given the webpage is loaded\n    And the image area with data-testid \"image-container\" is visible\n    When the user double-clicks outside the image area\n    Then no heart icon should appear within the image area\n    And the like count with data-testid \"times\" should remain unchanged"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given(\"the webpage is loaded\")\ndef step_given_webpage_is_loaded(context):\n    # Initialize the WebDriver and load the test page\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    context.driver.maximize_window()\n    time.sleep(1)  # Allow the page to load completely\n\n@given('the image area with data-testid \"image-container\" is visible')\ndef step_given_image_area_is_visible(context):\n    # Wait for the image container to be visible\n    WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='image-container']\"))\n    )\n    image_container = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='image-container']\")\n    assert image_container.is_displayed(), \"Image container is not visible\"\n\n@when(\"the user double-clicks outside the image area\")\ndef step_when_user_double_clicks_outside_image_area(context):\n    # Perform a double-click outside the image container\n    image_container = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='image-container']\")\n    body = context.driver.find_element(By.TAG_NAME, \"body\")\n    # Double-click outside the image container (e.g., at the top-left corner of the page)\n    webdriver.ActionChains(context.driver).move_to_element_with_offset(body, 10, 10).double_click().perform()\n    time.sleep(1)  # Allow time for any potential changes to occur\n\n@then(\"no heart icon should appear within the image area\")\ndef step_then_no_heart_icon_should_appear(context):\n    # Verify that no heart icon is present within the image container\n    image_container = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='image-container']\")\n    hearts = image_container.find_elements(By.CSS_SELECTOR, \".fa-heart\")\n    assert len(hearts) == 0, f\"Expected no heart icons, but found {len(hearts)}\"\n\n@then('the like count with data-testid \"times\" should remain unchanged')\ndef step_then_like_count_should_remain_unchanged(context):\n    # Verify that the like count remains unchanged\n    like_count = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='times']\").text\n    assert like_count == \"0\", f\"Expected like count to remain '0', but got '{like_count}'\"\n\ndef after_scenario(context, scenario):\n    # Close the browser after each scenario\n    if hasattr(context, \"driver\"):\n        context.driver.quit()"
                }
            ]
        },
        "3": {
            "requirement": {
                "description": "When a user double-clicks on the image container (identified by the attribute data-testid='image-container'), a heart icon (an <i> element with classes 'fas' and 'fa-heart') should be dynamically created at the exact location of the double-click within the container. The heart icon should visually appear inside the container and be removed from the DOM exactly 1 second after its creation. If multiple double-clicks occur in rapid succession, multiple heart icons should be created, each at the respective double-click location, and each should be removed from the DOM exactly 1 second after its creation. The double-click detection should account for a maximum interval of 800 milliseconds between two consecutive clicks to qualify as a double-click. This functionality should not interfere with the incrementing of the like count displayed in the element with data-testid='times'."
            },
            "test_cases": [
                {
                    "test_case": [
                        "Feature: Heart icon removal after double-click\n  The heart icon created upon a double-click on the image area should be removed automatically after 1 second.\n\n\n  Scenario: [Normal] Heart icon is removed after 1 second of double-click\n    Given the webpage is loaded\n      And the image container with data-testid \"image-container\" is visible\n    When the user double-clicks on the image container\n    Then a heart icon with class \"fa-heart\" should appear inside the image container\n      And the heart icon should be removed from the image container after 1 second\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given(\"the webpage is loaded\")\ndef step_impl_webpage_loaded(context):\n    # Initialize the WebDriver and load the test page\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    context.driver.maximize_window()\n    time.sleep(1)  # Allow the page to load completely\n\n@given('the image container with data-testid \"image-container\" is visible')\ndef step_impl_image_container_visible(context):\n    # Wait for the image container to be visible\n    WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='image-container']\"))\n    )\n    context.image_container = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='image-container']\")\n    assert context.image_container.is_displayed(), \"Image container is not visible\"\n\n@when(\"the user double-clicks on the image container\")\ndef step_impl_user_double_clicks(context):\n    # Perform a double-click action on the image container\n    from selenium.webdriver.common.action_chains import ActionChains\n    action = ActionChains(context.driver)\n    action.double_click(context.image_container).perform()\n    time.sleep(1)  # Allow time for the heart icon to appear\n\n@then('a heart icon with class \"fa-heart\" should appear inside the image container')\ndef step_impl_heart_icon_appears(context):\n    # Wait for the heart icon to appear inside the image container\n    WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \".fa-heart\"))\n    )\n    heart_icon = context.driver.find_element(By.CSS_SELECTOR, \".fa-heart\")\n    assert heart_icon.is_displayed(), \"Heart icon did not appear inside the image container\"\n\n@then(\"the heart icon should be removed from the image container after 1 second\")\ndef step_impl_heart_icon_removed(context):\n    # Wait for 1 second and check that the heart icon is removed\n    time.sleep(1.5)  # Wait slightly longer than 1 second to ensure the heart icon is removed\n    heart_icons = context.driver.find_elements(By.CSS_SELECTOR, \".fa-heart\")\n    assert len(heart_icons) == 0, \"Heart icon was not removed from the image container\"\n\n# Teardown to close the browser after the test\ndef after_scenario(context, scenario):\n    if hasattr(context, \"driver\"):\n        context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: Heart icon removal after double-click\n  The heart icon created upon a double-click on the image area should be removed automatically after 1 second.\n\n\n  Scenario: [Edge] Multiple heart icons are removed after 1 second when double-clicked rapidly\n    Given the webpage is loaded\n      And the image container with data-testid \"image-container\" is visible\n    When the user double-clicks on the image container multiple times rapidly\n    Then multiple heart icons with class \"fa-heart\" should appear inside the image container\n      And each heart icon should be removed from the image container exactly 1 second after its creation\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nfrom selenium.webdriver.common.action_chains import ActionChains\nimport time\n\n# Placeholder for dynamic file path handling\nfile_path = \"index.html\"\n\n# Background: Initialize the browser and load the test page\n@given(\"the webpage is loaded\")\ndef step_given_webpage_is_loaded(context):\n    context.driver = webdriver.Chrome()  # Initialize the WebDriver\n    context.driver.get(f\"file://index.html\")  # Load the test page\n    context.driver.maximize_window()  # Maximize the browser window\n    time.sleep(1)  # Allow the page to load completely\n\n@given('the image container with data-testid \"image-container\" is visible')\ndef step_given_image_container_is_visible(context):\n    # Wait for the image container to be visible\n    image_container = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='image-container']\"))\n    )\n    assert image_container.is_displayed(), \"Image container is not visible\"\n    context.image_container = image_container  # Store the image container in context\n\n@when(\"the user double-clicks on the image container multiple times rapidly\")\ndef step_when_user_double_clicks(context):\n    image_container = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='image-container']\")\n\n    # Create ActionChains instance\n    action = ActionChains(context.driver)\n\n    for _ in range(3):  # Simulate 3 rapid double-clicks\n        action.move_to_element(image_container).double_click().perform()  # Perform double-click on the image container\n        time.sleep(0.1)\n\n@then('multiple heart icons with class \"fa-heart\" should appear inside the image container')\ndef step_then_heart_icons_appear(context):\n    # Wait for heart icons to appear inside the image container\n    heart_icons = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_all_elements_located((By.CSS_SELECTOR, \".fa-heart\"))\n    )\n    assert len(heart_icons) > 0, \"No heart icons appeared inside the image container\"\n    context.heart_icons_count = len(heart_icons)  # Store the count of heart icons\n\n@then(\"each heart icon should be removed from the image container exactly 1 second after its creation\")\ndef step_then_heart_icons_removed(context):\n    # Verify that each heart icon is removed after 1 second\n    time.sleep(1.5)  # Wait for 1.5 seconds to ensure removal\n    heart_icons = context.driver.find_elements(By.CSS_SELECTOR, \".fa-heart\")\n    assert len(heart_icons) == 0, (\n        f\"Heart icons were not removed after 1 second. \"\n        f\"Expected 0, but found {len(heart_icons)} remaining.\"\n    )\n\n# Teardown: Close the browser after the test\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                }
            ]
        },
        "5": {
            "requirement": {
                "description": "The application must display an instruction text element with the attribute data-testid='instruction-text' that informs the user to double-click on the image to like it. The text must include the phrase 'Double click on the image' and visually display a heart icon using the Font Awesome 'fas fa-heart' classes for emphasis. This instruction text must be visible immediately upon page load and should not change dynamically during user interactions."
            },
            "test_cases": [
                {
                    "test_case": [
                        "Feature: Instruction Text for Double-Click to Like\n  The instruction text should inform the user to double-click on the image to like it, with a heart icon displayed for emphasis.\n\n\nScenario: [Normal] Verify the instruction text is displayed correctly\n    Given the webpage is loaded\n    Then the instruction text with data-testid \"instruction-text\" should be visible\n    And the instruction text should include \"Double click on the image\""
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n# Background: Load the webpage\n@given(\"the webpage is loaded\")\ndef step_given_webpage_is_loaded(context):\n    # Initialize the Selenium WebDriver\n    context.driver = webdriver.Chrome()\n    # Load the test page dynamically\n    context.driver.get(f\"file://index.html\")\n    # Maximize the browser window for better visibility\n    context.driver.maximize_window()\n    time.sleep(1)  # Allow the page to load completely\n\n# Scenario: Verify the instruction text is displayed correctly\n@then('the instruction text with data-testid \"instruction-text\" should be visible')\ndef step_then_instruction_text_visible(context):\n    try:\n        # Wait for the instruction text element to be visible\n        instruction_text = WebDriverWait(context.driver, 10).until(\n            EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='instruction-text']\"))\n        )\n        # Assert that the element is displayed\n        assert instruction_text.is_displayed(), \"Instruction text is not visible\"\n    except Exception as e:\n        raise AssertionError(f\"Failed to verify visibility of instruction text: {e}\")\n\n@then('the instruction text should include \"Double click on the image\"')\ndef step_then_instruction_text_includes(context):\n    try:\n        # Locate the instruction text element\n        instruction_text = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='instruction-text']\")\n        # Assert that the text includes the expected content\n        expected_text = \"Double click on the image\"\n        assert expected_text.lower() in instruction_text.text.lower(), f\"Expected '{expected_text}' in '{instruction_text.text}'\"\n    except Exception as e:\n        raise AssertionError(f\"Failed to verify instruction text content: {e}\")\n\n# Teardown: Close the browser driver after the test\ndef after_scenario(context, scenario):\n    if hasattr(context, 'driver'):\n        context.driver.quit()"
                }
            ]
        }
    }
}