{
  "1": {
    "requirement": {
      "description": "The user must be able to enter a subject name into the 'Subject' input field, which accepts valid text input, including edge cases such as long subject names and special characters. The input field must be visible and located using the attribute 'data-testid=subject'. The entered value should be displayed in the input field without truncation or alteration. The requirement explicitly includes the following scenarios: \n\n1. Normal Case: The user enters a valid subject name, such as 'Mathematics'. The input field should display the exact entered value.\n\n2. Edge Case: The user enters a very long subject name, such as 'Advanced Theoretical Physics and Quantum Mechanics'. The input field should display the entire value without truncation.\n\n3. Edge Case: The user enters a subject name containing special characters, such as 'Art & Design: 101!'. The input field should display the exact entered value, including all special characters.\n\nThe input field must be validated to ensure it is not empty before submission, and any invalid input should trigger an appropriate alert message. The field is located in the DOM with the attribute 'data-testid=subject', and its placeholder text is 'Enter Subject'.",
      "related_elements": [
        "(\"By.CSS_SELECTOR\", \"[data-testid='subject']\", \"Input field for the subject (used to verify displayed value)",
        "(\"By.CSS_SELECTOR\", \"[data-testid='subject']\", \"Input field for entering the subject name\")",
        "(\"By.CSS_SELECTOR\", \"[data-testid='subject']\", \"Input field for verifying the displayed value 'Mathematics'\")",
        "(\"By.CSS_SELECTOR\", \"[data-testid='subject']\", \"Input field for entering 'Mathematics'\")",
        "(\"By.CSS_SELECTOR\", \"[data-testid='subject']\", \"Input field for the subject\")"
      ]
    },
    "concise_requirement": "User can enter a subject name in the 'Subject' input field.",
    "test_cases": [
      {
        "test_case": [
          "Feature: User can enter a subject name in the \"Subject\" input field\n  The user should be able to input a subject name into the \"Subject\" input field, and the field should accept valid text input.\n\n\n  Scenario: [Normal] User enters a valid subject name\n    Given the \"Timetable Generator\" page is loaded\n    And the \"Subject\" input field with data-testid \"subject\" is visible\n    When the user enters \"Mathematics\" into the \"Subject\" input field with data-testid \"subject\"\n    Then the \"Subject\" input field with data-testid \"subject\" should display the value \"Mathematics\"\n"
        ],
        "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"/Users/lingyao/PycharmProjects/E2ESD_data_construct/data/Ourdatas/LJY_TEST_NEW2/E2ESD_Bench_18/index.html\"\n\n# Background: Initialize the browser and load the test page\n@given('the \"Timetable Generator\" page is loaded')\ndef step_given_timetable_generator_page_is_loaded(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file:///Users/lingyao/PycharmProjects/E2ESD_data_construct/data/Ourdatas/LJY_TEST_NEW2/E2ESD_Bench_18/index.html\")\n    time.sleep(1)  # Allow the page to load completely\n\n@given('the \"Subject\" input field with data-testid \"subject\" is visible')\ndef step_given_subject_input_field_is_visible(context):\n    WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='subject']\"))\n    )\n    subject_field = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='subject']\")\n    assert subject_field.is_displayed(), \"Subject input field is not visible\"\n\n@when('the user enters \"Mathematics\" into the \"Subject\" input field with data-testid \"subject\"')\ndef step_when_user_enters_subject(context):\n    subject_field = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='subject']\")\n    subject_field.clear()  # Clear any existing text\n    subject_field.send_keys(\"Mathematics\")\n    time.sleep(1)  # Allow time for the input action to complete\n\n@then('the \"Subject\" input field with data-testid \"subject\" should display the value \"Mathematics\"')\ndef step_then_subject_field_should_display_value(context):\n    subject_field = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='subject']\")\n    displayed_value = subject_field.get_attribute(\"value\")\n    assert displayed_value == \"Mathematics\", f\"Expected 'Mathematics', but got '{displayed_value}'\"\n\n# Cleanup: Close the browser after the test\ndef after_scenario(context, scenario):\n    if hasattr(context, 'driver'):\n        context.driver.quit()"
      },
      {
        "test_case": [
          "Feature: User can enter a subject name in the \"Subject\" input field\n  The user should be able to input a subject name into the \"Subject\" input field, and the field should accept valid text input.\n\n\n  Scenario: [Edge] User enters a very long subject name\n    Given the \"Timetable Generator\" page is loaded\n    And the \"Subject\" input field with data-testid \"subject\" is visible\n    When the user enters \"Advanced Theoretical Physics and Quantum Mechanics\" into the \"Subject\" input field with data-testid \"subject\"\n    Then the \"Subject\" input field with data-testid \"subject\" should display the value \"Advanced Theoretical Physics and Quantum Mechanics\"\n"
        ],
        "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"/Users/lingyao/PycharmProjects/E2ESD_data_construct/data/Ourdatas/LJY_TEST_NEW2/E2ESD_Bench_18/index.html\"\n\n@given('the \"Timetable Generator\" page is loaded')\ndef step_impl(context):\n    # Initialize the WebDriver and load the test page\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file:///Users/lingyao/PycharmProjects/E2ESD_data_construct/data/Ourdatas/LJY_TEST_NEW2/E2ESD_Bench_18/index.html\")\n    context.driver.maximize_window()\n    time.sleep(1)  # Allow the page to load completely\n\n@given('the \"Subject\" input field with data-testid \"subject\" is visible')\ndef step_impl(context):\n    # Wait for the \"Subject\" input field to be visible\n    WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='subject']\"))\n    )\n    time.sleep(1)\n\n@when('the user enters \"Advanced Theoretical Physics and Quantum Mechanics\" into the \"Subject\" input field with data-testid \"subject\"')\ndef step_impl(context):\n    # Locate the \"Subject\" input field and enter the text\n    subject_input = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='subject']\")\n    subject_input.clear()  # Clear any pre-existing text\n    subject_input.send_keys(\"Advanced Theoretical Physics and Quantum Mechanics\")\n    time.sleep(1)\n\n@then('the \"Subject\" input field with data-testid \"subject\" should display the value \"Advanced Theoretical Physics and Quantum Mechanics\"')\ndef step_impl(context):\n    # Verify that the \"Subject\" input field displays the correct value\n    subject_input = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='subject']\")\n    displayed_value = subject_input.get_attribute(\"value\")\n    expected_value = \"Advanced Theoretical Physics and Quantum Mechanics\"\n    assert displayed_value == expected_value, f\"Expected '{expected_value}', but got '{displayed_value}'\"\n    time.sleep(1)\n\n# Hook to close the browser after the test\ndef after_scenario(context, scenario):\n    if hasattr(context, 'driver'):\n        context.driver.quit()"
      },
      {
        "test_case": [
          "Feature: User can enter a subject name in the \"Subject\" input field\n  The user should be able to input a subject name into the \"Subject\" input field, and the field should accept valid text input.\n\n\n  Scenario: [Edge] User enters a subject name with special characters\n    Given the \"Timetable Generator\" page is loaded\n    And the \"Subject\" input field with data-testid \"subject\" is visible\n    When the user enters \"Art & Design: 101!\" into the \"Subject\" input field with data-testid \"subject\"\n    Then the \"Subject\" input field with data-testid \"subject\" should display the value \"Art & Design: 101!\"\n"
        ],
        "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"/Users/lingyao/PycharmProjects/E2ESD_data_construct/data/Ourdatas/LJY_TEST_NEW2/E2ESD_Bench_18/index.html\"\n\n@given('the \"Timetable Generator\" page is loaded')\ndef step_impl(context):\n    # Initialize the WebDriver and load the test page\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file:///Users/lingyao/PycharmProjects/E2ESD_data_construct/data/Ourdatas/LJY_TEST_NEW2/E2ESD_Bench_18/index.html\")\n    context.driver.maximize_window()\n    time.sleep(1)  # Allow the page to load completely\n\n@given('the \"Subject\" input field with data-testid \"subject\" is visible')\ndef step_impl(context):\n    # Wait for the \"Subject\" input field to be visible\n    WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='subject']\"))\n    )\n\n@when('the user enters \"Art & Design: 101!\" into the \"Subject\" input field with data-testid \"subject\"')\ndef step_impl(context):\n    # Locate the \"Subject\" input field and enter the text\n    subject_input = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='subject']\")\n    subject_input.clear()\n    subject_input.send_keys(\"Art & Design: 101!\")\n    time.sleep(1)  # Allow time for the input to process\n\n@then('the \"Subject\" input field with data-testid \"subject\" should display the value \"Art & Design: 101!\"')\ndef step_impl(context):\n    # Verify that the \"Subject\" input field displays the correct value\n    subject_input = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='subject']\")\n    displayed_value = subject_input.get_attribute(\"value\")\n    assert displayed_value == \"Art & Design: 101!\", f\"Expected 'Art & Design: 101!', but got '{displayed_value}'\"\n\n# Teardown to close the browser after the test\ndef after_scenario(context, scenario):\n    if hasattr(context, 'driver'):\n        context.driver.quit()"
      }
    ]
  },
  "2": {
    "requirement": {
      "description": "The user must be able to select a valid start time using the 'Start Time' input field. The input field should accept valid time values in the format HH:MM (24-hour format) and reject invalid or out-of-bound values. The following scenarios must be supported: \n\n1. **Normal Case:** The user can enter any valid time within the range of 00:00 to 23:59. For example, entering '09:00' should display '09:00' in the input field.\n\n2. **Edge Cases:**\n   - The user can select the earliest possible time ('00:00') and the latest possible time ('23:59').\n   - If the user enters an invalid time with out-of-bound minutes (e.g., '12:78'), the input field should automatically adjust to the nearest valid time (e.g., '12:59').\n   - If the user enters an invalid time with out-of-bound hours (e.g., '29:35'), the input field should automatically adjust to the nearest valid time (e.g., '23:35').\n\n**UI Element Details:**\n- The 'Start Time' input field is located in the DOM with the attribute `data-testid='start-time'`.\n- The input field is of type 'time' and is required.\n\n**Interactions:**\n- The user interacts with the input field by typing or selecting a time.\n- The input field must validate the entered time and display the corrected or selected time.\n\n**Expected Results:**\n- The input field should display the valid time entered by the user or adjust invalid inputs to the nearest valid time.\n- The time value should be stored in memory for further processing when the form is submitted.",
      "related_elements": [
        "(\"By.CSS_SELECTOR\", \"[data-testid='start-time']\", \"Input field for the start time (used to verify it displays '09:00')",
        "(\"By.CSS_SELECTOR\", \"[data-testid='start-time']\", \"Input field for the start time\")",
        "(\"By.CSS_SELECTOR\", \"[data-testid='start-time']\", \"Input field for the start time (used to enter '09:00')"
      ]
    },
    "concise_requirement": "User can select a start time using the 'Start Time' input field.",
    "test_cases": [
      {
        "test_case": [
          "Feature: User can select a start time using the \"Start Time\" input field\n  The user should be able to interact with the \"Start Time\" input field to select a valid time for the timetable entry.\n\n\n  Scenario: [Normal] User selects a valid start time\n    Given the \"Timetable Generator\" page is loaded\n    And the \"Start Time\" input field with data-testid \"start-time\" is visible\n    When the user enters \"09:00\" into the \"Start Time\" input field with data-testid \"start-time\"\n    Then the \"Start Time\" input field with data-testid \"start-time\" should display \"09:00\"\n"
        ],
        "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\n# Placeholder for the file path\nfile_path = \"/Users/lingyao/PycharmProjects/E2ESD_data_construct/data/Ourdatas/LJY_TEST_NEW2/E2ESD_Bench_18/index.html\"\n\n@given('the \"Timetable Generator\" page is loaded')\ndef step_impl(context):\n    # Initialize the Selenium WebDriver\n    context.driver = webdriver.Chrome()\n    # Load the test page\n    context.driver.get(f\"file:///Users/lingyao/PycharmProjects/E2ESD_data_construct/data/Ourdatas/LJY_TEST_NEW2/E2ESD_Bench_18/index.html\")\n    # Maximize the browser window\n    context.driver.maximize_window()\n    time.sleep(1)\n\n@given('the \"Start Time\" input field with data-testid \"start-time\" is visible')\ndef step_impl(context):\n    # Wait for the \"Start Time\" input field to be visible\n    WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='start-time']\"))\n    )\n    time.sleep(1)\n\n@when('the user enters \"09:00\" into the \"Start Time\" input field with data-testid \"start-time\"')\ndef step_impl(context):\n    # Locate the \"Start Time\" input field\n    start_time_input = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='start-time']\")\n    # Clear any existing value and enter \"09:00\"\n    start_time_input.clear()\n    start_time_input.send_keys(\"09:00\")\n    time.sleep(1)\n\n@then('the \"Start Time\" input field with data-testid \"start-time\" should display \"09:00\"')\ndef step_impl(context):\n    # Locate the \"Start Time\" input field\n    start_time_input = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='start-time']\")\n    # Verify that the input field displays \"09:00\"\n    assert start_time_input.get_attribute(\"value\") == \"09:00\", \\\n        f\"Expected '09:00', but got '{start_time_input.get_attribute('value')}'\"\n    time.sleep(1)\n\n# Teardown to close the browser after the test\ndef after_scenario(context, scenario):\n    if hasattr(context, 'driver'):\n        context.driver.quit()"
      },
      {
        "test_case": [
          "Feature: User can select a start time using the \"Start Time\" input field\n  The user should be able to interact with the \"Start Time\" input field to select a valid time for the timetable entry.\n\n\n  Scenario: [Edge] User selects the earliest possible start time\n    Given the \"Timetable Generator\" page is loaded\n    And the \"Start Time\" input field with data-testid \"start-time\" is visible\n    When the user enters \"00:00\" into the \"Start Time\" input field with data-testid \"start-time\"\n    Then the \"Start Time\" input field with data-testid \"start-time\" should display \"00:00\"\n"
        ],
        "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"/Users/lingyao/PycharmProjects/E2ESD_data_construct/data/Ourdatas/LJY_TEST_NEW2/E2ESD_Bench_18/index.html\"\n\n@given('the \"Timetable Generator\" page is loaded')\ndef step_given_page_is_loaded(context):\n    # Initialize the WebDriver\n    context.driver = webdriver.Chrome()\n    # Load the test page\n    context.driver.get(f\"file:///Users/lingyao/PycharmProjects/E2ESD_data_construct/data/Ourdatas/LJY_TEST_NEW2/E2ESD_Bench_18/index.html\")\n    # Maximize the browser window\n    context.driver.maximize_window()\n    time.sleep(1)  # Allow the page to load fully\n\n@given('the \"Start Time\" input field with data-testid \"start-time\" is visible')\ndef step_given_start_time_field_is_visible(context):\n    # Wait for the \"Start Time\" input field to be visible\n    WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='start-time']\"))\n    )\n    time.sleep(1)  # Ensure visibility before proceeding\n\n@when('the user enters \"00:00\" into the \"Start Time\" input field with data-testid \"start-time\"')\ndef step_when_user_enters_start_time(context):\n    # Locate the \"Start Time\" input field\n    start_time_field = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='start-time']\")\n    # Clear any existing value and enter \"00:00\"\n    start_time_field.clear()\n    start_time_field.send_keys(\"00:00\")\n    time.sleep(1)  # Allow time for the input to register\n\n@then('the \"Start Time\" input field with data-testid \"start-time\" should display \"00:00\"')\ndef step_then_start_time_field_should_display(context):\n    # Locate the \"Start Time\" input field\n    start_time_field = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='start-time']\")\n    # Verify that the displayed value is \"00:00\"\n    displayed_value = start_time_field.get_attribute(\"value\")\n    assert displayed_value == \"00:00\", f\"Expected '00:00', but got '{displayed_value}'\"\n    time.sleep(1)  # Allow time for assertion\n\n# Cleanup after tests\ndef after_scenario(context, scenario):\n    # Close the browser driver\n    if hasattr(context, 'driver'):\n        context.driver.quit()"
      },
      {
        "test_case": [
          "Feature: User can select a start time using the \"Start Time\" input field\n  The user should be able to interact with the \"Start Time\" input field to select a valid time for the timetable entry.\n\n\n  Scenario: [Edge] User selects the latest possible start time\n    Given the \"Timetable Generator\" page is loaded\n    And the \"Start Time\" input field with data-testid \"start-time\" is visible\n    When the user enters \"23:59\" into the \"Start Time\" input field with data-testid \"start-time\"\n    Then the \"Start Time\" input field with data-testid \"start-time\" should display \"23:59\"\n"
        ],
        "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"/Users/lingyao/PycharmProjects/E2ESD_data_construct/data/Ourdatas/LJY_TEST_NEW2/E2ESD_Bench_18/index.html\"\n\n@given('the \"Timetable Generator\" page is loaded')\ndef step_impl(context):\n    # Initialize the WebDriver and load the test page\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://{file_path}\")\n    context.driver.maximize_window()\n    time.sleep(1)  # Allow the page to load completely\n\n@given('the \"Start Time\" input field with data-testid \"start-time\" is visible')\ndef step_impl(context):\n    # Wait for the \"Start Time\" input field to be visible\n    WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='start-time']\"))\n    )\n    time.sleep(1)\n\n@when('the user enters \"23:59\" into the \"Start Time\" input field with data-testid \"start-time\"')\ndef step_impl(context):\n    # Locate the \"Start Time\" input field and enter the value \"23:59\"\n    start_time_input = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='start-time']\")\n    start_time_input.clear()\n    start_time_input.send_keys(\"23:59\")\n    time.sleep(1)\n\n@then('the \"Start Time\" input field with data-testid \"start-time\" should display \"23:59\"')\ndef step_impl(context):\n    # Verify that the \"Start Time\" input field displays the value \"23:59\"\n    start_time_input = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='start-time']\")\n    displayed_value = start_time_input.get_attribute(\"value\")\n    assert displayed_value == \"23:59\", f\"Expected '23:59', but got '{displayed_value}'\"\n    time.sleep(1)\n\n# Teardown to close the browser after the test\ndef after_scenario(context, scenario):\n    if hasattr(context, 'driver'):\n        context.driver.quit()"
      },
      {
        "test_case": [
          "Feature: User can select a start time using the \"Start Time\" input field\n  The user should be able to interact with the \"Start Time\" input field to select a valid time for the timetable entry.\n\n\nScenario: [Edge] User enters an invalid time with out-of-bound minutes\n  Given the \"Timetable Generator\" page is loaded\n  And the \"Start Time\" input field with data-testid \"start-time\" is visible\n  When the user enters \"12:78\" into the \"Start Time\" input field with data-testid \"start-time\"\n  And the user clicks outside the \"Start Time\" input field to trigger validation\n  Then the \"Start Time\" input field with data-testid \"start-time\" should display \"12:59\""
        ],
        "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"/Users/lingyao/PycharmProjects/E2ESD_data_construct/data/Ourdatas/LJY_TEST_NEW2/E2ESD_Bench_18/index.html\"\n\ndef is_visible(element):\n    return element.is_displayed()\n\n@given('the \"Timetable Generator\" page is loaded')\ndef step_given_timetable_generator_page_loaded(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file:///Users/lingyao/PycharmProjects/E2ESD_data_construct/data/Ourdatas/LJY_TEST_NEW2/E2ESD_Bench_18/index.html\")\n    time.sleep(1)  # Allow the page to load completely\n\n@given('the \"Start Time\" input field with data-testid \"start-time\" is visible')\ndef step_given_start_time_input_field_visible(context):\n    start_time_field = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='start-time']\"))\n    )\n    assert is_visible(start_time_field), \"Start Time input field is not visible\"\n\n@when('the user enters \"12:78\" into the \"Start Time\" input field with data-testid \"start-time\"')\ndef step_when_user_enters_invalid_time(context):\n    start_time_field = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='start-time']\")\n    start_time_field.clear()\n    start_time_field.send_keys(\"12:78\")\n    time.sleep(1)  # Allow time for the input to process\n\n@when('the user clicks outside the \"Start Time\" input field to trigger validation')\ndef step_when_user_clicks_outside(context):\n    # Click outside the \"End Time\" input field to trigger validation\n    title_element = context.driver.find_element(By.CSS_SELECTOR, \".title\")\n    title_element.click()\n    time.sleep(1)  # Allow time for validation to occur\n\n@then('the \"Start Time\" input field with data-testid \"start-time\" should display \"12:59\"')\ndef step_then_start_time_field_should_display_corrected_time(context):\n    start_time_field = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='start-time']\")\n    displayed_value = start_time_field.get_attribute(\"value\")\n    expected_value = \"12:59\"\n    assert displayed_value == expected_value, f\"Expected '{expected_value}', but got '{displayed_value}'\"\n\n# Cleanup after tests\ndef after_scenario(context, scenario):\n    if hasattr(context, 'driver'):\n        context.driver.quit()"
      },
      {
        "test_case": [
          "Feature: User can select a start time using the \"Start Time\" input field\n  The user should be able to interact with the \"Start Time\" input field to select a valid time for the timetable entry.\n\n\nScenario: [Edge] User enters an invalid time with out-of-bound hours\n  Given the \"Timetable Generator\" page is loaded\n  And the \"Start Time\" input field with data-testid \"start-time\" is visible\n  When the user enters \"29:35\" into the \"Start Time\" input field with data-testid \"start-time\"\n  Then the \"Start Time\" input field with data-testid \"start-time\" should display \"23:35\""
        ],
        "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"/Users/lingyao/PycharmProjects/E2ESD_data_construct/data/Ourdatas/LJY_TEST_NEW2/E2ESD_Bench_18/index.html\"\n\n# Background setup\n@given('the \"Timetable Generator\" page is loaded')\ndef step_given_timetable_generator_page_loaded(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://{file_path}\")\n    context.driver.maximize_window()\n    time.sleep(1)  # Allow the page to load completely\n\n@then('close the browser')\ndef step_then_close_browser(context):\n    context.driver.quit()\n\n# Scenario: [Edge] User enters an invalid time with out-of-bound hours\n@given('the \"Start Time\" input field with data-testid \"start-time\" is visible')\ndef step_given_start_time_input_field_visible(context):\n    WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='start-time']\"))\n    )\n    time.sleep(1)  # Ensure the element is interactable\n\n@when('the user enters \"29:35\" into the \"Start Time\" input field with data-testid \"start-time\"')\ndef step_when_user_enters_invalid_time(context):\n    start_time_input = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='start-time']\")\n    start_time_input.clear()\n    start_time_input.send_keys(\"29:35\")\n    time.sleep(1)  # Allow time for the input to process\n\n@then('the \"Start Time\" input field with data-testid \"start-time\" should display \"23:35\"')\ndef step_then_start_time_should_display_corrected_time(context):\n    start_time_input = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='start-time']\")\n    displayed_value = start_time_input.get_attribute(\"value\")\n    expected_value = \"23:35\"\n    assert displayed_value == expected_value, f\"Expected '{expected_value}', but got '{displayed_value}'\"\n    time.sleep(1)  # Allow time for validation"
      }
    ]
  },
  "3": {
    "requirement": {
      "description": "The user must be able to select an end time using the 'End Time' input field with data-testid 'end-time'. The input field should accept valid time values in the 24-hour format (HH:mm) ranging from '00:00' to '23:59'. The following scenarios must be supported: \n\n1. **Normal Case:** The user can enter any valid time within the range, such as '14:00', and the input field should display the entered value. \n\n2. **Boundary Conditions:** \n   - The user can enter the earliest possible time ('00:00'), and the input field should display '00:00'. \n   - The user can enter the latest possible time ('23:59'), and the input field should display '23:59'. \n\n3. **Invalid Time Handling:** \n   - If the user enters a time with out-of-bound minutes (e.g., '12:78'), the input field should automatically adjust to the nearest valid time (e.g., '12:59'). \n   - If the user enters a completely invalid time (e.g., '99:99'), the input field should reset to the maximum valid time ('23:59') upon losing focus or triggering validation. \n\nThe 'End Time' input field must be visible and accessible on the 'Timetable Generator' page. It should be located within the form with id 'timetable-form' and have the attribute 'data-testid' set to 'end-time'. The input field must be validated in real-time to ensure only valid time values are accepted, and any invalid input should be corrected or reset as described above.",
      "related_elements": [
        "(repeated in multiple steps)",
        "(\"By.CSS_SELECTOR\", \"[data-testid='end-time']\", \"Input field for the 'End Time'\")",
        "(\"By.CSS_SELECTOR\", \"[data-testid='end-time']\", \"Input field for the 'End Time' (used to enter '23:59')",
        "(\"By.CSS_SELECTOR\", \"[data-testid='end-time']\", \"Input field for the 'End Time' with data-testid 'end-time'\")",
        "(By.CSS_SELECTOR, \".title\", \"Title element used to trigger validation by clicking outside the 'End Time' input field\")",
        "(\"By.CSS_SELECTOR\", \"[data-testid='end-time']\", \"Input field for specifying the end time\")",
        "(\"By.CSS_SELECTOR\", \"[data-testid='end-time']\", \"Input field for the 'End Time' (used to verify it displays '23:59')",
        "(By.CSS_SELECTOR, \"[data-testid='end-time']\", \"Input field for the 'End Time'\")"
      ]
    },
    "concise_requirement": "The user can select an end time using the 'End Time' input field.",
    "test_cases": [
      {
        "test_case": [
          "Feature: End Time Selection\n  The user can select an end time using the \"End Time\" input field.\n\n\n  Scenario: [Normal] User selects a valid end time\n    Given the \"Timetable Generator\" page is loaded\n    And the \"End Time\" input field with data-testid \"end-time\" is visible and empty\n    When the user enters \"14:00\" into the \"End Time\" input field with data-testid \"end-time\"\n    Then the \"End Time\" input field with data-testid \"end-time\" should display \"14:00\"\n"
        ],
        "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"/Users/lingyao/PycharmProjects/E2ESD_data_construct/data/Ourdatas/LJY_TEST_NEW2/E2ESD_Bench_18/index.html\"\n\n@given('the \"Timetable Generator\" page is loaded')\ndef step_impl(context):\n    # Initialize the Selenium WebDriver\n    context.driver = webdriver.Chrome()\n    # Load the test page\n    context.driver.get(f\"file:///Users/lingyao/PycharmProjects/E2ESD_data_construct/data/Ourdatas/LJY_TEST_NEW2/E2ESD_Bench_18/index.html\")\n    # Maximize the browser window\n    context.driver.maximize_window()\n    time.sleep(1)\n\n@given('the \"End Time\" input field with data-testid \"end-time\" is visible and empty')\ndef step_impl(context):\n    driver = context.driver\n    # Wait for the \"End Time\" input field to be visible\n    end_time_input = WebDriverWait(driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='end-time']\"))\n    )\n    # Ensure the input field is empty\n    assert end_time_input.get_attribute(\"value\") == \"\", \"Expected 'End Time' input field to be empty\"\n    time.sleep(1)\n\n@when('the user enters \"14:00\" into the \"End Time\" input field with data-testid \"end-time\"')\ndef step_impl(context):\n    driver = context.driver\n    # Locate the \"End Time\" input field\n    end_time_input = driver.find_element(By.CSS_SELECTOR, \"[data-testid='end-time']\")\n    # Enter \"14:00\" into the input field\n    end_time_input.send_keys(\"14:00\")\n    time.sleep(1)\n\n@then('the \"End Time\" input field with data-testid \"end-time\" should display \"14:00\"')\ndef step_impl(context):\n    driver = context.driver\n    # Locate the \"End Time\" input field\n    end_time_input = driver.find_element(By.CSS_SELECTOR, \"[data-testid='end-time']\")\n    # Verify that the input field displays \"14:00\"\n    assert end_time_input.get_attribute(\"value\") == \"14:00\", f\"Expected '14:00', but got '{end_time_input.get_attribute('value')}'\"\n    time.sleep(1)\n\n# Hook to close the browser after each scenario\ndef after_scenario(context, scenario):\n    if hasattr(context, 'driver'):\n        context.driver.quit()"
      },
      {
        "test_case": [
          "Feature: End Time Selection\n  The user can select an end time using the \"End Time\" input field.\n\n\n  Scenario: [Edge] User selects the earliest possible end time\n    Given the \"Timetable Generator\" page is loaded\n    And the \"End Time\" input field with data-testid \"end-time\" is visible and empty\n    When the user enters \"00:00\" into the \"End Time\" input field with data-testid \"end-time\"\n    Then the \"End Time\" input field with data-testid \"end-time\" should display \"00:00\"\n"
        ],
        "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"/Users/lingyao/PycharmProjects/E2ESD_data_construct/data/Ourdatas/LJY_TEST_NEW2/E2ESD_Bench_18/index.html\"\n\n@given('the \"Timetable Generator\" page is loaded')\ndef step_impl(context):\n    # Initialize the WebDriver and load the test page\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file:///Users/lingyao/PycharmProjects/E2ESD_data_construct/data/Ourdatas/LJY_TEST_NEW2/E2ESD_Bench_18/index.html\")\n    context.driver.maximize_window()\n    time.sleep(1)  # Allow the page to load completely\n\n@given('the \"End Time\" input field with data-testid \"end-time\" is visible and empty')\ndef step_impl(context):\n    driver = context.driver\n    # Wait for the \"End Time\" input field to be visible\n    end_time_field = WebDriverWait(driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='end-time']\"))\n    )\n    # Ensure the field is empty\n    assert end_time_field.get_attribute(\"value\") == \"\", \"Expected 'End Time' field to be empty\"\n    time.sleep(1)\n\n@when('the user enters \"00:00\" into the \"End Time\" input field with data-testid \"end-time\"')\ndef step_impl(context):\n    driver = context.driver\n    # Locate the \"End Time\" input field and enter \"00:00\"\n    end_time_field = driver.find_element(By.CSS_SELECTOR, \"[data-testid='end-time']\")\n    end_time_field.clear()\n    end_time_field.send_keys(\"00:00\")\n    time.sleep(1)  # Allow time for the input to be processed\n\n@then('the \"End Time\" input field with data-testid \"end-time\" should display \"00:00\"')\ndef step_impl(context):\n    driver = context.driver\n    # Verify that the \"End Time\" input field displays \"00:00\"\n    end_time_field = driver.find_element(By.CSS_SELECTOR, \"[data-testid='end-time']\")\n    assert end_time_field.get_attribute(\"value\") == \"00:00\", f\"Expected '00:00', but got '{end_time_field.get_attribute('value')}'\"\n    time.sleep(1)\n\n# Teardown to close the browser after the test\ndef after_scenario(context, scenario):\n    if hasattr(context, 'driver'):\n        context.driver.quit()"
      },
      {
        "test_case": [
          "Feature: End Time Selection\n  The user can select an end time using the \"End Time\" input field.\n\n\n  Scenario: [Edge] User selects the latest possible end time\n    Given the \"Timetable Generator\" page is loaded\n    And the \"End Time\" input field with data-testid \"end-time\" is visible and empty\n    When the user enters \"23:59\" into the \"End Time\" input field with data-testid \"end-time\"\n    Then the \"End Time\" input field with data-testid \"end-time\" should display \"23:59\"\n"
        ],
        "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"/Users/lingyao/PycharmProjects/E2ESD_data_construct/data/Ourdatas/LJY_TEST_NEW2/E2ESD_Bench_18/index.html\"\n\n@given('the \"Timetable Generator\" page is loaded')\ndef step_given_page_is_loaded(context):\n    # Initialize the WebDriver and load the test page\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file:///Users/lingyao/PycharmProjects/E2ESD_data_construct/data/Ourdatas/LJY_TEST_NEW2/E2ESD_Bench_18/index.html\")\n    context.driver.maximize_window()\n    time.sleep(1)  # Allow time for the page to load\n\n@given('the \"End Time\" input field with data-testid \"end-time\" is visible and empty')\ndef step_given_end_time_field_is_visible_and_empty(context):\n    driver = context.driver\n    # Wait for the \"End Time\" input field to be visible\n    end_time_field = WebDriverWait(driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='end-time']\"))\n    )\n    # Assert that the field is empty\n    assert end_time_field.get_attribute(\"value\") == \"\", \"Expected 'End Time' field to be empty\"\n    time.sleep(1)\n\n@when('the user enters \"23:59\" into the \"End Time\" input field with data-testid \"end-time\"')\ndef step_when_user_enters_end_time(context):\n    driver = context.driver\n    # Locate the \"End Time\" input field and enter the value \"23:59\"\n    end_time_field = driver.find_element(By.CSS_SELECTOR, \"[data-testid='end-time']\")\n    end_time_field.clear()\n    end_time_field.send_keys(\"23:59\")\n    time.sleep(1)\n\n@then('the \"End Time\" input field with data-testid \"end-time\" should display \"23:59\"')\ndef step_then_end_time_field_should_display(context):\n    driver = context.driver\n    # Locate the \"End Time\" input field and verify its value\n    end_time_field = driver.find_element(By.CSS_SELECTOR, \"[data-testid='end-time']\")\n    assert end_time_field.get_attribute(\"value\") == \"23:59\", f\"Expected 'End Time' field to display '23:59', but got '{end_time_field.get_attribute('value')}'\"\n    time.sleep(1)\n\n# Hook for cleanup after each scenario\ndef after_scenario(context, scenario):\n    # Close the browser driver\n    if hasattr(context, 'driver'):\n        context.driver.quit()"
      },
      {
        "test_case": [
          "Feature: End Time Selection\n  The user can select an end time using the \"End Time\" input field.\n\n\nScenario: [Edge] User enters an invalid time with out-of-bound minutes for End Time\n  Given the \"Timetable Generator\" page is loaded\n  And the \"End Time\" input field with data-testid \"end-time\" is visible\n  When the user enters \"12:78\" into the \"End Time\" input field with data-testid \"end-time\"\n  And the user clicks outside the \"End Time\" input field to trigger validation\n  Then the \"End Time\" input field with data-testid \"end-time\" should display \"12:59\""
        ],
        "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"/Users/lingyao/PycharmProjects/E2ESD_data_construct/data/Ourdatas/LJY_TEST_NEW2/E2ESD_Bench_18/index.html\"\n\n@given('the \"Timetable Generator\" page is loaded')\ndef step_given_page_loaded(context):\n    # Initialize the WebDriver and load the test page\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file:///Users/lingyao/PycharmProjects/E2ESD_data_construct/data/Ourdatas/LJY_TEST_NEW2/E2ESD_Bench_18/index.html\")\n    time.sleep(1)  # Allow the page to load completely\n\n@given('the \"End Time\" input field with data-testid \"end-time\" is visible')\ndef step_given_end_time_field_visible(context):\n    # Wait for the \"End Time\" input field to be visible\n    WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='end-time']\"))\n    )\n    time.sleep(1)\n\n@when('the user enters \"12:78\" into the \"End Time\" input field with data-testid \"end-time\"')\ndef step_when_user_enters_invalid_time(context):\n    # Locate the \"End Time\" input field and enter the invalid time\n    end_time_field = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='end-time']\")\n    end_time_field.clear()\n    end_time_field.send_keys(\"12:78\")\n    time.sleep(1)\n\n@when('the user clicks outside the \"End Time\" input field to trigger validation')\ndef step_when_user_clicks_outside(context):\n    # Click outside the \"End Time\" input field to trigger validation\n    title_element = context.driver.find_element(By.CSS_SELECTOR, \".title\")\n    title_element.click()\n    time.sleep(1)  # Allow time for validation to occur\n\n@then('the \"End Time\" input field with data-testid \"end-time\" should display \"12:59\"')\ndef step_then_end_time_field_displays_corrected_time(context):\n    # Locate the \"End Time\" input field and verify the displayed value\n    end_time_field = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='end-time']\")\n    displayed_value = end_time_field.get_attribute(\"value\")\n    assert displayed_value == \"12:59\", f\"Expected '12:59', but got '{displayed_value}'\"\n    time.sleep(1)\n\n# Teardown step to close the browser after the test\ndef after_scenario(context, scenario):\n    if hasattr(context, 'driver'):\n        context.driver.quit()"
      },
      {
        "test_case": [
          "Feature: End Time Selection\n  The user can select an end time using the \"End Time\" input field.\n\n\nScenario: [Edge] User enters completely invalid time for End Time\n  Given the \"Timetable Generator\" page is loaded\n  And the \"End Time\" input field with data-testid \"end-time\" is visible\n  When the user enters \"29:99\" into the \"End Time\" input field with data-testid \"end-time\"\n  And the user clicks outside the \"End Time\" input field to trigger validation\n  Then the \"End Time\" input field with data-testid \"end-time\" should display \"23:59\""
        ],
        "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"/Users/lingyao/PycharmProjects/E2ESD_data_construct/data/Ourdatas/LJY_TEST_NEW2/E2ESD_Bench_18/index.html\"\n\n@given('the \"Timetable Generator\" page is loaded')\ndef step_given_page_is_loaded(context):\n    # Initialize the WebDriver and load the test page\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file:///Users/lingyao/PycharmProjects/E2ESD_data_construct/data/Ourdatas/LJY_TEST_NEW2/E2ESD_Bench_18/index.html\")\n    time.sleep(1)  # Allow the page to load completely\n\n@given('the \"End Time\" input field with data-testid \"end-time\" is visible')\ndef step_given_end_time_field_is_visible(context):\n    # Wait for the \"End Time\" input field to be visible\n    WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='end-time']\"))\n    )\n    end_time_field = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='end-time']\")\n    assert end_time_field.is_displayed(), \"End Time input field is not visible\"\n\n@when('the user enters \"29:99\" into the \"End Time\" input field with data-testid \"end-time\"')\ndef step_when_user_enters_invalid_time(context):\n    # Locate the \"End Time\" input field and enter the invalid time\n    end_time_field = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='end-time']\")\n    end_time_field.clear()\n    end_time_field.send_keys(\"29:99\")\n    time.sleep(1)  # Allow time for the input to be processed\n\n@when('the user clicks outside the \"End Time\" input field to trigger validation')\ndef step_when_user_clicks_outside(context):\n    # Click outside the \"End Time\" input field to trigger validation\n    title_element = context.driver.find_element(By.CSS_SELECTOR, \".title\")\n    title_element.click()\n    time.sleep(1)  # Allow time for validation to occur\n\n@then('the \"End Time\" input field with data-testid \"end-time\" should display \"23:59\"')\ndef step_then_end_time_field_displays_correct_value(context):\n    # Verify that the \"End Time\" input field displays the corrected value\n    end_time_field = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='end-time']\")\n    displayed_value = end_time_field.get_attribute(\"value\")\n    assert displayed_value == \"23:59\", f\"Expected '23:59', but got '{displayed_value}'\"\n    context.driver.quit()\n\n# Teardown to close the browser after the test\ndef after_scenario(context, scenario):\n    if hasattr(context, 'driver'):\n        context.driver.quit()"
      }
    ]
  },
  "4": {
    "requirement": {
      "description": "The user must be able to select one or more days using the checkboxes in the 'Days' group. The functionality should support the following scenarios: selecting a single day, selecting multiple days, selecting all available days, and deselecting a previously selected day. The checkboxes must accurately reflect the user's selections and deselections in real-time. The 'Days' group is located in the DOM with the data-testid attribute 'days', and each checkbox within the group is uniquely identifiable by its respective data-testid attribute (e.g., 'day-monday', 'day-tuesday', etc.). The requirement includes the following detailed interactions: \n\n1. **Single Day Selection:**\n   - Given the 'Timetable Generator' page is loaded and the 'Days' checkbox group is visible.\n   - When the user checks a single checkbox (e.g., 'Monday' with data-testid 'day-monday').\n   - Then the checkbox should be marked as checked.\n\n2. **Multiple Days Selection:**\n   - Given the 'Timetable Generator' page is loaded and the 'Days' checkbox group is visible.\n   - When the user checks multiple checkboxes (e.g., 'Monday' with data-testid 'day-monday' and 'Wednesday' with data-testid 'day-wednesday').\n   - Then the selected checkboxes should be marked as checked.\n\n3. **All Days Selection:**\n   - Given the 'Timetable Generator' page is loaded and the 'Days' checkbox group is visible.\n   - When the user checks all available checkboxes ('Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday').\n   - Then all checkboxes should be marked as checked.\n\n4. **Deselecting a Previously Selected Day:**\n   - Given the 'Timetable Generator' page is loaded and the 'Days' checkbox group is visible.\n   - And a checkbox (e.g., 'Monday' with data-testid 'day-monday') is already checked.\n   - When the user unchecks the checkbox.\n   - Then the checkbox should no longer be marked as checked.\n\nThis requirement ensures that the 'Days' group provides a clear and intuitive interface for selecting and deselecting days, with immediate visual feedback for the user.",
      "related_elements": [
        "(\"By.CSS_SELECTOR\", \"[data-testid='day-monday'] input\", \"Checkbox for selecting Monday\")",
        "(\"By.CSS_SELECTOR\", \"[data-testid='day-monday'] input[type='checkbox']\", \"Checkbox for selecting Monday\")",
        "(By.CSS_SELECTOR, \"[data-testid='days']\", \"Checkbox group for selecting days of the week\")",
        "(By.CSS_SELECTOR, \"[data-testid='day-tuesday'] input\", \"Checkbox for selecting Tuesday\")",
        "(\"By.CSS_SELECTOR\", \"[data-testid='days']\", \"Checkbox group for selecting days\")",
        "(By.CSS_SELECTOR, \"[data-testid='day-thursday'] input\", \"Checkbox for selecting Thursday\")",
        "(By.CSS_SELECTOR, \"[data-testid='day-wednesday'] input\", \"Checkbox for selecting Wednesday\")",
        "(By.CSS_SELECTOR, \"[data-testid='day-monday'] input\", \"Checkbox for selecting Monday\")",
        "(\"By.CSS_SELECTOR\", \"[data-testid='day-wednesday'] input\", \"Checkbox for selecting Wednesday\")",
        "(By.CSS_SELECTOR, \"[data-testid='day-saturday'] input\", \"Checkbox for selecting Saturday\")",
        "(\"By.CSS_SELECTOR\", \"[data-testid='day-monday'] input[type='checkbox']\", \"Checkbox for Monday to verify its checked state\")",
        "(\"By.CSS_SELECTOR\", \"[data-testid='day-monday'] input[type='checkbox']\", \"Clickable checkbox for Monday\")",
        "(By.CSS_SELECTOR, \"[data-testid='day-friday'] input\", \"Checkbox for selecting Friday\")"
      ]
    },
    "concise_requirement": "User can select one or more days using the checkboxes in the 'Days' group.",
    "test_cases": [
      {
        "test_case": [
          "Feature: User can select one or more days using the checkboxes in the \"Days\" group\n  The user should be able to select one or multiple days using the checkboxes provided in the \"Days\" group. The selected days should be accurately captured and used in the timetable entry.\n\n\nScenario: [Normal] User selects a single day\n    Given the \"Timetable Generator\" page is loaded\n    And the \"Days\" checkbox group with data-testid \"days\" is visible\n    When the user checks the checkbox labeled \"Monday\" with data-testid \"day-monday\"\n    Then the checkbox labeled \"Monday\" should be marked as checked"
        ],
        "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"/Users/lingyao/PycharmProjects/E2ESD_data_construct/data/Ourdatas/LJY_TEST_NEW2/E2ESD_Bench_18/index.html\"\n\n@given('the \"Timetable Generator\" page is loaded')\ndef step_impl(context):\n    # Initialize the WebDriver and load the test page\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file:///Users/lingyao/PycharmProjects/E2ESD_data_construct/data/Ourdatas/LJY_TEST_NEW2/E2ESD_Bench_18/index.html\")\n    context.driver.maximize_window()\n    time.sleep(1)  # Allow the page to fully load\n\n@given('the \"Days\" checkbox group with data-testid \"days\" is visible')\ndef step_impl(context):\n    # Wait for the \"Days\" checkbox group to be visible\n    days_checkbox_group = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='days']\"))\n    )\n    assert days_checkbox_group.is_displayed(), \"The 'Days' checkbox group is not visible.\"\n\n@when('the user checks the checkbox labeled \"Monday\" with data-testid \"day-monday\"')\ndef step_impl(context):\n    # Locate the checkbox for \"Monday\" and check it\n    monday_checkbox = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='day-monday'] input\"))\n    )\n    if not monday_checkbox.is_selected():\n        monday_checkbox.click()\n    time.sleep(1)  # Allow the interaction to complete\n\n@then('the checkbox labeled \"Monday\" should be marked as checked')\ndef step_impl(context):\n    # Verify that the \"Monday\" checkbox is checked\n    monday_checkbox = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='day-monday'] input\")\n    assert monday_checkbox.is_selected(), \"The 'Monday' checkbox is not marked as checked.\"\n\n# Teardown to close the browser after the test\ndef after_scenario(context, scenario):\n    if hasattr(context, 'driver'):\n        context.driver.quit()"
      },
      {
        "test_case": [
          "Feature: User can select one or more days using the checkboxes in the \"Days\" group\n  The user should be able to select one or multiple days using the checkboxes provided in the \"Days\" group. The selected days should be accurately captured and used in the timetable entry.\n\n\nScenario: [Normal] User selects multiple days\n    Given the \"Timetable Generator\" page is loaded\n    And the \"Days\" checkbox group with data-testid \"days\" is visible\n    When the user checks the checkboxes labeled \"Monday\" with data-testid \"day-monday\" and \"Wednesday\" with data-testid \"day-wednesday\"\n    Then the checkboxes labeled \"Monday\" and \"Wednesday\" should be marked as checked"
        ],
        "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"/Users/lingyao/PycharmProjects/E2ESD_data_construct/data/Ourdatas/LJY_TEST_NEW2/E2ESD_Bench_18/index.html\"\n\n@given('the \"Timetable Generator\" page is loaded')\ndef step_impl(context):\n    # Initialize the WebDriver and load the test page\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file:///Users/lingyao/PycharmProjects/E2ESD_data_construct/data/Ourdatas/LJY_TEST_NEW2/E2ESD_Bench_18/index.html\")\n    context.driver.maximize_window()\n    time.sleep(1)  # Allow the page to fully load\n\n@given('the \"Days\" checkbox group with data-testid \"days\" is visible')\ndef step_impl(context):\n    # Wait for the \"Days\" checkbox group to be visible\n    days_checkbox_group = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='days']\"))\n    )\n    assert days_checkbox_group.is_displayed(), \"The 'Days' checkbox group is not visible.\"\n\n@when('the user checks the checkboxes labeled \"Monday\" with data-testid \"day-monday\" and \"Wednesday\" with data-testid \"day-wednesday\"')\ndef step_impl(context):\n    # Locate and check the \"Monday\" checkbox\n    monday_checkbox = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='day-monday'] input\"))\n    )\n    if not monday_checkbox.is_selected():\n        monday_checkbox.click()\n        time.sleep(1)  # Allow the interaction to complete\n\n    # Locate and check the \"Wednesday\" checkbox\n    wednesday_checkbox = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='day-wednesday'] input\"))\n    )\n    if not wednesday_checkbox.is_selected():\n        wednesday_checkbox.click()\n        time.sleep(1)  # Allow the interaction to complete\n\n@then('the checkboxes labeled \"Monday\" and \"Wednesday\" should be marked as checked')\ndef step_impl(context):\n    # Verify that the \"Monday\" checkbox is checked\n    monday_checkbox = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='day-monday'] input\")\n    assert monday_checkbox.is_selected(), \"The 'Monday' checkbox is not checked.\"\n\n    # Verify that the \"Wednesday\" checkbox is checked\n    wednesday_checkbox = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='day-wednesday'] input\")\n    assert wednesday_checkbox.is_selected(), \"The 'Wednesday' checkbox is not checked.\"\n\n    # Close the browser after the test\n    context.driver.quit()"
      },
      {
        "test_case": [
          "Feature: User can select one or more days using the checkboxes in the \"Days\" group\n  The user should be able to select one or multiple days using the checkboxes provided in the \"Days\" group. The selected days should be accurately captured and used in the timetable entry.\n\n\nScenario: [Edge] User selects all available days\n    Given the \"Timetable Generator\" page is loaded\n    And the \"Days\" checkbox group with data-testid \"days\" is visible\n    When the user checks all checkboxes labeled \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", and \"Saturday\"\n    Then all checkboxes should be marked as checked"
        ],
        "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"/Users/lingyao/PycharmProjects/E2ESD_data_construct/data/Ourdatas/LJY_TEST_NEW2/E2ESD_Bench_18/index.html\"\n\n@given('the \"Timetable Generator\" page is loaded')\ndef step_impl(context):\n    # Initialize the Selenium WebDriver\n    context.driver = webdriver.Chrome()\n    # Navigate to the test page\n    context.driver.get(f\"file:///Users/lingyao/PycharmProjects/E2ESD_data_construct/data/Ourdatas/LJY_TEST_NEW2/E2ESD_Bench_18/index.html\")\n    # Maximize the browser window\n    context.driver.maximize_window()\n    time.sleep(1)\n\n@given('the \"Days\" checkbox group with data-testid \"days\" is visible')\ndef step_impl(context):\n    # Wait for the \"Days\" checkbox group to be visible\n    days_checkbox_group = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='days']\"))\n    )\n    assert days_checkbox_group.is_displayed(), \"The 'Days' checkbox group is not visible.\"\n    time.sleep(1)\n\n@when('the user checks all checkboxes labeled \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", and \"Saturday\"')\ndef step_impl(context):\n    # Define the data-testid attributes for each day checkbox\n    days_test_ids = [\n        \"day-monday\", \"day-tuesday\", \"day-wednesday\",\n        \"day-thursday\", \"day-friday\", \"day-saturday\"\n    ]\n    # Check all the checkboxes\n    for day_test_id in days_test_ids:\n        checkbox = WebDriverWait(context.driver, 10).until(\n            EC.element_to_be_clickable((By.CSS_SELECTOR, f\"[data-testid='{day_test_id}'] input\"))\n        )\n        if not checkbox.is_selected():\n            checkbox.click()\n        time.sleep(1)\n\n@then('all checkboxes should be marked as checked')\ndef step_impl(context):\n    # Define the data-testid attributes for each day checkbox\n    days_test_ids = [\n        \"day-monday\", \"day-tuesday\", \"day-wednesday\",\n        \"day-thursday\", \"day-friday\", \"day-saturday\"\n    ]\n    # Verify that all checkboxes are checked\n    for day_test_id in days_test_ids:\n        checkbox = WebDriverWait(context.driver, 10).until(\n            EC.presence_of_element_located((By.CSS_SELECTOR, f\"[data-testid='{day_test_id}'] input\"))\n        )\n        assert checkbox.is_selected(), f\"The checkbox for {day_test_id} is not checked.\"\n        time.sleep(1)\n\n# Teardown: Close the browser after the test\ndef after_scenario(context, scenario):\n    if hasattr(context, 'driver'):\n        context.driver.quit()"
      },
      {
        "test_case": [
          "Feature: User can select one or more days using the checkboxes in the \"Days\" group\n  The user should be able to select one or multiple days using the checkboxes provided in the \"Days\" group. The selected days should be accurately captured and used in the timetable entry.\n\n\nScenario: [Edge] User deselects a previously selected day\n    Given the \"Timetable Generator\" page is loaded\n    And the \"Days\" checkbox group with data-testid \"days\" is visible\n    And the checkbox labeled \"Monday\" with data-testid \"day-monday\" is already checked\n    When the user unchecks the checkbox labeled \"Monday\" with data-testid \"day-monday\"\n    Then the checkbox labeled \"Monday\" should no longer be marked as checked"
        ],
        "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"/Users/lingyao/PycharmProjects/E2ESD_data_construct/data/Ourdatas/LJY_TEST_NEW2/E2ESD_Bench_18/index.html\"\n\ndef is_checkbox_checked(driver, checkbox_selector):\n    checkbox = driver.find_element(By.CSS_SELECTOR, checkbox_selector)\n    return checkbox.is_selected()\n\n@given('the \"Timetable Generator\" page is loaded')\ndef step_given_timetable_generator_page_loaded(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file:///Users/lingyao/PycharmProjects/E2ESD_data_construct/data/Ourdatas/LJY_TEST_NEW2/E2ESD_Bench_18/index.html\")\n    time.sleep(1)  # Allow time for the page to load\n\n@given('the \"Days\" checkbox group with data-testid \"days\" is visible')\ndef step_given_days_checkbox_group_visible(context):\n    WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='days']\"))\n    )\n    time.sleep(1)  # Ensure visibility\n\n@given('the checkbox labeled \"Monday\" with data-testid \"day-monday\" is already checked')\ndef step_given_checkbox_monday_checked(context):\n    checkbox = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='day-monday'] input[type='checkbox']\"))\n    )\n    if not checkbox.is_selected():\n        checkbox.click()\n        time.sleep(1)  # Allow time for the interaction\n\n@when('the user unchecks the checkbox labeled \"Monday\" with data-testid \"day-monday\"')\ndef step_when_user_unchecks_checkbox_monday(context):\n    checkbox = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='day-monday'] input[type='checkbox']\"))\n    )\n    if checkbox.is_selected():\n        checkbox.click()\n        time.sleep(1)  # Allow time for the interaction\n\n@then('the checkbox labeled \"Monday\" should no longer be marked as checked')\ndef step_then_checkbox_monday_not_checked(context):\n    checkbox_selector = \"[data-testid='day-monday'] input[type='checkbox']\"\n    is_checked = is_checkbox_checked(context.driver, checkbox_selector)\n    assert not is_checked, \"Expected the checkbox labeled 'Monday' to be unchecked, but it is still checked.\"\n\n# Cleanup after tests\ndef after_scenario(context, scenario):\n    if hasattr(context, 'driver'):\n        context.driver.quit()"
      }
    ]
  },
  "5": {
    "requirement": {
      "description": "When the user clicks the 'Add to Timetable' button with data-testid 'add-timetable-button' after filling all required fields in the form with data-testid 'timetable-form', the system must dynamically add a new row to the timetable table with data-testid 'timetable'. The new row must include the specified time range in the first column and the subject name under the selected days' columns. The requirement must handle the following scenarios: \n\n1. **Normal Case:** If all required fields are filled and at least one day is selected, the system must add a new row with the subject name displayed under the selected days' columns, leaving other day columns empty. \n\n2. **Edge Case:** If only one day is selected, the system must add a new row with the subject name displayed under the single selected day's column, leaving other day columns empty. \n\n3. **Edge Case:** If all days are selected, the system must add a new row with the subject name displayed under all day columns from 'Monday' to 'Saturday'. \n\n4. **Error Case:** If the subject field with data-testid 'subject' is left empty, the system must display an alert with the message 'Please fill in all the fields.' and prevent adding a new row to the timetable table. \n\n5. **Error Case:** If the start time field with data-testid 'start-time' or end time field with data-testid 'end-time' is left empty, the system must display an alert with the message 'Please fill in all the fields.' and prevent adding a new row to the timetable table. \n\n6. **Error Case:** If no days are selected under the days group with data-testid 'days', the system must display an alert with the message 'Please fill in all the fields.' and prevent adding a new row to the timetable table. \n\nAdditional Details: \n- The system must ensure that rows are sorted by start time in ascending order within the timetable table. \n- If a row with the same time range already exists, the system must update the existing row by adding the subject name under the selected days' columns. \n- The system must use the unique identifier 'data-id' for dynamically created rows in the format 'timetable-row-{startTime}-{endTime}'. \n- The system must retrieve selected days using the 'getSelectedDays' function, which queries checkboxes under the days group with data-testid 'days'. \n- The system must compare time ranges using the 'compareTimes' function to ensure proper sorting of rows.",
      "related_elements": [
        "(\"By.CSS_SELECTOR\", \"[data-testid='add-timetable-button']\", \"Button to add an entry to the timetable\")",
        "(\"By.CSS_SELECTOR\", \"[data-testid='start-time']\", \"Input field for entering the start time\")",
        "(\"By.CSS_SELECTOR\", \"[data-testid='timetable'] tbody\", \"Body of the timetable table where rows are added\")",
        "(\"By.CSS_SELECTOR\", \"[data-testid='timetable']\", \"Timetable table that needs to be visible\")",
        "(\"By.TAG_NAME\", \"td\", \"Table columns in a row of the timetable\")",
        "(\"By.CSS_SELECTOR\", \"[data-testid='day-{day2.lower()",
        "(\"By.CSS_SELECTOR\", \"[data-testid='add-timetable-button']\", \"Button to add the entry to the timetable\")",
        "(\"By.CSS_SELECTOR\", \"[data-testid='day-{day1.lower()",
        "(\"By.CSS_SELECTOR\", \"[data-testid='subject']\", \"Input field for the subject name\")",
        "(\"By.CSS_SELECTOR\", \"[data-testid='start-time']\", \"Input field for the start time\")",
        "(\"By.CSS_SELECTOR\", \"[data-testid='subject']\", \"Input field for entering the subject\")",
        "(\"By.CSS_SELECTOR\", \"[data-testid='timetable-form']\", \"Timetable form that contains input fields and controls\")",
        "(\"By.TAG_NAME\", \"tr\", \"Table rows within the timetable body\")",
        "(\"By.CSS_SELECTOR\", \"[data-testid='timetable-form']\", \"Timetable form that needs to be visible\")",
        "(\"By.TAG_NAME\", \"tr\", \"Table rows in the timetable body\")",
        "(\"By.CSS_SELECTOR\", \"[data-testid='add-timetable-button']\", \"Button to add the entered details to the timetable\")",
        "(\"By.CSS_SELECTOR\", \"[data-testid='add-timetable-button']\", \"Button to add a new entry to the timetable\")",
        "(\"By.CSS_SELECTOR\", \"[data-testid='timetable'] tbody\", \"Body of the timetable table to verify rows\")",
        "(\"By.TAG_NAME\", \"tr\", \"Rows in the timetable table\")",
        "(\"By.CSS_SELECTOR\", \"[data-testid='add-timetable-button']\", \"Button for adding the entered data to the timetable\")",
        "(\"By.CSS_SELECTOR\", \"[data-testid='timetable'] tbody\", \"Table body of the timetable for verifying rows\")",
        "(\"By.CSS_SELECTOR\", \"[data-testid='timetable']\", \"Timetable table that displays the schedule\")",
        "(\"By.CSS_SELECTOR\", \"[data-testid='timetable']\", \"Timetable table displaying added rows\")",
        "(\"By.CSS_SELECTOR\", \"[data-testid='subject']\", \"Input field for entering the subject name\")",
        "(\"By.TAG_NAME\", \"tr\", \"Rows within the timetable table\")",
        "(\"By.CSS_SELECTOR\", \"[data-testid='days'] input[type='checkbox']\", \"Checkboxes for selecting days\")",
        "(\"By.CSS_SELECTOR\", \"[data-testid='timetable'] tbody\", \"Body of the timetable table containing rows\")",
        "(\"By.TAG_NAME\", \"tr\", \"Table rows in the timetable table\")",
        "(\"By.TAG_NAME\", \"td\", \"Table cells in the timetable table rows\")",
        "(\"By.CSS_SELECTOR\", \"[data-testid='subject']\", \"Input field for the subject\")",
        "(\"By.TAG_NAME\", \"td\", \"Columns in a row of the timetable table\")",
        "(\"By.CSS_SELECTOR\", \"[data-testid='add-timetable-button']\", \"Button to add data to the timetable\")",
        "(\"By.CSS_SELECTOR\", \"[data-testid='timetable-form']\", \"Timetable form for user input\")",
        "(\"By.CSS_SELECTOR\", \"[data-testid='day-{day.lower()",
        "(\"By.CSS_SELECTOR\", \"[data-testid='day-thursday'] input\", \"Checkbox for selecting Thursday in the days group\")",
        "(\"By.CSS_SELECTOR\", \"[data-testid='timetable']\", \"Timetable table displaying schedule\")",
        "(\"By.CSS_SELECTOR\", \"[data-testid='end-time']\", \"Input field for entering the end time\")",
        "(\"By.CSS_SELECTOR\", \"[data-testid='end-time']\", \"Input field for the end time\")",
        "(\"By.CSS_SELECTOR\", \"[data-testid='timetable'] tbody\", \"Table body of the timetable to check for rows\")",
        "(\"By.CSS_SELECTOR\", \"[data-testid='timetable-form']\", \"Timetable form that must be visible before interacting with the page\")"
      ]
    },
    "concise_requirement": "When the user clicks the 'Add to Timetable' button after filling all required fields, the system must dynamically add a new row to the timetable table with the specified time range and subject name under the selected days.",
    "test_cases": [
      {
        "test_case": [
          "Feature: Add a new row to the timetable table when all required fields are filled and the \"Add to Timetable\" button is clicked.\n\n  As a user,\n  I want to dynamically add a new row to the timetable table\n  So that I can see my scheduled subjects for the selected days and time range.\n\n  Background:\n    Given the \"Timetable Generator\" page is loaded\n    And the timetable form with data-testid \"timetable-form\" is visible\n    And the timetable table with data-testid \"timetable\" is visible\n\n\n  Scenario: [Normal] Add a new row to the timetable with valid inputs\n    Given the user enters \"Mathematics\" into the subject field with data-testid \"subject\"\n    And the user enters \"09:00\" into the start time field with data-testid \"start-time\"\n    And the user enters \"10:00\" into the end time field with data-testid \"end-time\"\n    And the user selects \"Monday\" and \"Wednesday\" checkboxes under the days group with data-testid \"days\"\n    When the user clicks the \"Add to Timetable\" button with data-testid \"add-timetable-button\"\n    Then a new row is added to the timetable table with data-testid \"timetable\"\n    And the row contains \"09:00 - 10:00\" in the first column\n    And the row contains \"Mathematics\" under the \"Monday\" column\n    And the row contains \"Mathematics\" under the \"Wednesday\" column\n\n"
        ],
        "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"/Users/lingyao/PycharmProjects/E2ESD_data_construct/data/Ourdatas/LJY_TEST_NEW2/E2ESD_Bench_18/index.html\"\n\n@given('the \"Timetable Generator\" page is loaded')\ndef step_impl(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file:///Users/lingyao/PycharmProjects/E2ESD_data_construct/data/Ourdatas/LJY_TEST_NEW2/E2ESD_Bench_18/index.html\")\n    context.driver.maximize_window()\n    time.sleep(1)\n\n@given('the timetable form with data-testid \"timetable-form\" is visible')\ndef step_impl(context):\n    form = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='timetable-form']\"))\n    )\n    assert form.is_displayed(), \"Timetable form is not visible\"\n\n@given('the timetable table with data-testid \"timetable\" is visible')\ndef step_impl(context):\n    table = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='timetable']\"))\n    )\n    assert table.is_displayed(), \"Timetable table is not visible\"\n\n@given('the user enters \"{subject}\" into the subject field with data-testid \"subject\"')\ndef step_impl(context, subject):\n    subject_field = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='subject']\"))\n    )\n    subject_field.clear()\n    subject_field.send_keys(subject)\n    time.sleep(1)\n\n@given('the user enters \"{start_time}\" into the start time field with data-testid \"start-time\"')\ndef step_impl(context, start_time):\n    start_time_field = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='start-time']\"))\n    )\n    start_time_field.clear()\n    start_time_field.send_keys(start_time)\n    time.sleep(1)\n\n@given('the user enters \"{end_time}\" into the end time field with data-testid \"end-time\"')\ndef step_impl(context, end_time):\n    end_time_field = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='end-time']\"))\n    )\n    end_time_field.clear()\n    end_time_field.send_keys(end_time)\n    time.sleep(1)\n\n@given('the user selects \"{day1}\" and \"{day2}\" checkboxes under the days group with data-testid \"days\"')\ndef step_impl(context, day1, day2):\n    day1_checkbox = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, f\"[data-testid='day-{day1.lower()}'] input\"))\n    )\n    day2_checkbox = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, f\"[data-testid='day-{day2.lower()}'] input\"))\n    )\n    if not day1_checkbox.is_selected():\n        day1_checkbox.click()\n    if not day2_checkbox.is_selected():\n        day2_checkbox.click()\n    time.sleep(1)\n\n@when('the user clicks the \"Add to Timetable\" button with data-testid \"add-timetable-button\"')\ndef step_impl(context):\n    add_button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='add-timetable-button']\"))\n    )\n    add_button.click()\n    time.sleep(1)\n\n@then('a new row is added to the timetable table with data-testid \"timetable\"')\ndef step_impl(context):\n    timetable_body = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='timetable'] tbody\"))\n    )\n    rows = timetable_body.find_elements(By.TAG_NAME, \"tr\")\n    assert len(rows) > 0, \"No rows were added to the timetable table\"\n\n@then('the row contains \"{time_range}\" in the first column')\ndef step_impl(context, time_range):\n    timetable_body = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='timetable'] tbody\")\n    first_row = timetable_body.find_elements(By.TAG_NAME, \"tr\")[0]\n    first_column = first_row.find_elements(By.TAG_NAME, \"td\")[0]\n    assert time_range in first_column.text, f\"Expected '{time_range}' in the first column, but got '{first_column.text}'\"\n\n@then('the row contains \"{subject}\" under the \"{day}\" column')\ndef step_impl(context, subject, day):\n    timetable_body = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='timetable'] tbody\")\n    first_row = timetable_body.find_elements(By.TAG_NAME, \"tr\")[0]\n    day_index = [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"].index(day) + 1\n    day_column = first_row.find_elements(By.TAG_NAME, \"td\")[day_index]\n    assert subject in day_column.text, f\"Expected '{subject}' under the '{day}' column, but got '{day_column.text}'\"\n\n\n# Teardown\ndef after_scenario(context, scenario):\n    context.driver.quit()"
      },
      {
        "test_case": [
          "Feature: Add a new row to the timetable table when all required fields are filled and the \"Add to Timetable\" button is clicked.\n\n  As a user,\n  I want to dynamically add a new row to the timetable table\n  So that I can see my scheduled subjects for the selected days and time range.\n\n  Background:\n    Given the \"Timetable Generator\" page is loaded\n    And the timetable form with data-testid \"timetable-form\" is visible\n    And the timetable table with data-testid \"timetable\" is visible\n\n\nScenario: [Edge] Add a new row when only one day is selected\n    Given the user enters \"Physics\" into the subject field with data-testid \"subject\"\n    And the user enters \"11:00\" into the start time field with data-testid \"start-time\"\n    And the user enters \"12:00\" into the end time field with data-testid \"end-time\"\n    And the user selects \"Friday\" checkbox under the days group with data-testid \"days\"\n    When the user clicks the \"Add to Timetable\" button with data-testid \"add-timetable-button\"\n    Then a new row is added to the timetable table with data-testid \"timetable\"\n    And the row contains \"11:00 - 12:00\" in the first column\n    And the row contains \"Physics\" under the \"Friday\" column"
        ],
        "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"/Users/lingyao/PycharmProjects/E2ESD_data_construct/data/Ourdatas/LJY_TEST_NEW2/E2ESD_Bench_18/index.html\"\n\n@given('the \"Timetable Generator\" page is loaded')\ndef step_impl(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://{file_path}\")\n    context.driver.maximize_window()\n    time.sleep(1)\n\n@given('the timetable form with data-testid \"timetable-form\" is visible')\ndef step_impl(context):\n    WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='timetable-form']\"))\n    )\n\n@given('the timetable table with data-testid \"timetable\" is visible')\ndef step_impl(context):\n    WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='timetable']\"))\n    )\n\n@given('the user enters \"{subject}\" into the subject field with data-testid \"subject\"')\ndef step_impl(context, subject):\n    subject_field = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='subject']\"))\n    )\n    subject_field.clear()\n    subject_field.send_keys(subject)\n    time.sleep(1)\n\n@given('the user enters \"{start_time}\" into the start time field with data-testid \"start-time\"')\ndef step_impl(context, start_time):\n    start_time_field = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='start-time']\"))\n    )\n    start_time_field.clear()\n    start_time_field.send_keys(start_time)\n    time.sleep(1)\n\n@given('the user enters \"{end_time}\" into the end time field with data-testid \"end-time\"')\ndef step_impl(context, end_time):\n    end_time_field = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='end-time']\"))\n    )\n    end_time_field.clear()\n    end_time_field.send_keys(end_time)\n    time.sleep(1)\n\n@given('the user selects \"{day}\" checkbox under the days group with data-testid \"days\"')\ndef step_impl(context, day):\n    day_checkbox = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, f\"[data-testid='day-{day.lower()}'] input\"))\n    )\n    if not day_checkbox.is_selected():\n        day_checkbox.click()\n    time.sleep(1)\n\n@when('the user clicks the \"Add to Timetable\" button with data-testid \"add-timetable-button\"')\ndef step_impl(context):\n    add_button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='add-timetable-button']\"))\n    )\n    add_button.click()\n    time.sleep(1)\n\n@then('a new row is added to the timetable table with data-testid \"timetable\"')\ndef step_impl(context):\n    timetable_body = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='timetable'] tbody\"))\n    )\n    rows = timetable_body.find_elements(By.TAG_NAME, \"tr\")\n    assert len(rows) > 0, \"No rows were added to the timetable table.\"\n\n@then('the row contains \"{time_range}\" in the first column')\ndef step_impl(context, time_range):\n    timetable_body = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='timetable'] tbody\")\n    rows = timetable_body.find_elements(By.TAG_NAME, \"tr\")\n    first_column_text = rows[-1].find_element(By.TAG_NAME, \"td\").text\n    assert time_range in first_column_text, f\"Expected '{time_range}' in the first column, but got '{first_column_text}'.\"\n\n@then('the row contains \"{subject}\" under the \"{day}\" column')\ndef step_impl(context, subject, day):\n    timetable_body = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='timetable'] tbody\")\n    rows = timetable_body.find_elements(By.TAG_NAME, \"tr\")\n    day_index = [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"].index(day) + 1\n    day_column_text = rows[-1].find_elements(By.TAG_NAME, \"td\")[day_index].text\n    assert subject in day_column_text, f\"Expected '{subject}' under the '{day}' column, but got '{day_column_text}'.\"\n\n# Teardown to close the browser after tests\ndef after_scenario(context, scenario):\n    if hasattr(context, 'driver'):\n        context.driver.quit()"
      },
      {
        "test_case": [
          "Feature: Add a new row to the timetable table when all required fields are filled and the \"Add to Timetable\" button is clicked.\n\n  As a user,\n  I want to dynamically add a new row to the timetable table\n  So that I can see my scheduled subjects for the selected days and time range.\n\n  Background:\n    Given the \"Timetable Generator\" page is loaded\n    And the timetable form with data-testid \"timetable-form\" is visible\n    And the timetable table with data-testid \"timetable\" is visible\n\n\n  Scenario: [Edge] Add a new row when all days are selected\n    Given the user enters \"Chemistry\" into the subject field with data-testid \"subject\"\n    And the user enters \"13:00\" into the start time field with data-testid \"start-time\"\n    And the user enters \"14:00\" into the end time field with data-testid \"end-time\"\n    And the user selects all checkboxes under the days group with data-testid \"days\"\n    When the user clicks the \"Add to Timetable\" button with data-testid \"add-timetable-button\"\n    Then a new row is added to the timetable table with data-testid \"timetable\"\n    And the row contains \"13:00 - 14:00\" in the first column\n    And the row contains \"Chemistry\" under all day columns from \"Monday\" to \"Saturday\"\n"
        ],
        "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"/Users/lingyao/PycharmProjects/E2ESD_data_construct/data/Ourdatas/LJY_TEST_NEW2/E2ESD_Bench_18/index.html\"\n\n@given('the \"Timetable Generator\" page is loaded')\ndef step_impl(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file:///Users/lingyao/PycharmProjects/E2ESD_data_construct/data/Ourdatas/LJY_TEST_NEW2/E2ESD_Bench_18/index.html\")\n    context.driver.maximize_window()\n    time.sleep(1)\n\n@given('the timetable form with data-testid \"timetable-form\" is visible')\ndef step_impl(context):\n    form = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='timetable-form']\"))\n    )\n    assert form.is_displayed(), \"Timetable form is not visible\"\n\n@given('the timetable table with data-testid \"timetable\" is visible')\ndef step_impl(context):\n    table = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='timetable']\"))\n    )\n    assert table.is_displayed(), \"Timetable table is not visible\"\n\n@given('the user enters \"Chemistry\" into the subject field with data-testid \"subject\"')\ndef step_impl(context):\n    subject_field = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='subject']\"))\n    )\n    subject_field.clear()\n    subject_field.send_keys(\"Chemistry\")\n    time.sleep(1)\n\n@given('the user enters \"13:00\" into the start time field with data-testid \"start-time\"')\ndef step_impl(context):\n    start_time_field = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='start-time']\"))\n    )\n    start_time_field.clear()\n    start_time_field.send_keys(\"13:00\")\n    time.sleep(1)\n\n@given('the user enters \"14:00\" into the end time field with data-testid \"end-time\"')\ndef step_impl(context):\n    end_time_field = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='end-time']\"))\n    )\n    end_time_field.clear()\n    end_time_field.send_keys(\"14:00\")\n    time.sleep(1)\n\n@given('the user selects all checkboxes under the days group with data-testid \"days\"')\ndef step_impl(context):\n    checkboxes = context.driver.find_elements(By.CSS_SELECTOR, \"[data-testid='days'] input[type='checkbox']\")\n    for checkbox in checkboxes:\n        if not checkbox.is_selected():\n            checkbox.click()\n            time.sleep(0.5)\n\n@when('the user clicks the \"Add to Timetable\" button with data-testid \"add-timetable-button\"')\ndef step_impl(context):\n    add_button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='add-timetable-button']\"))\n    )\n    add_button.click()\n    time.sleep(1)\n\n@then('a new row is added to the timetable table with data-testid \"timetable\"')\ndef step_impl(context):\n    timetable_body = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='timetable'] tbody\"))\n    )\n    rows = timetable_body.find_elements(By.TAG_NAME, \"tr\")\n    assert len(rows) > 0, \"No rows were added to the timetable table\"\n\n@then('the row contains \"13:00 - 14:00\" in the first column')\ndef step_impl(context):\n    timetable_body = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='timetable'] tbody\")\n    first_row = timetable_body.find_elements(By.TAG_NAME, \"tr\")[0]\n    first_column = first_row.find_elements(By.TAG_NAME, \"td\")[0]\n    assert \"13:00 - 14:00\" in first_column.text, f\"Expected '13:00 - 14:00' in the first column, but got '{first_column.text}'\"\n\n@then('the row contains \"Chemistry\" under all day columns from \"Monday\" to \"Saturday\"')\ndef step_impl(context):\n    timetable_body = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='timetable'] tbody\")\n    first_row = timetable_body.find_elements(By.TAG_NAME, \"tr\")[0]\n    day_columns = first_row.find_elements(By.TAG_NAME, \"td\")[1:]  # Skip the first column (time column)\n    for column in day_columns:\n        assert \"Chemistry\" in column.text, f\"Expected 'Chemistry' in the column, but got '{column.text}'\"\n\n# Teardown to close the browser after tests\ndef after_scenario(context, scenario):\n    if hasattr(context, 'driver'):\n        context.driver.quit()"
      },
      {
        "test_case": [
          "Feature: Add a new row to the timetable table when all required fields are filled and the \"Add to Timetable\" button is clicked.\n\n  As a user,\n  I want to dynamically add a new row to the timetable table\n  So that I can see my scheduled subjects for the selected days and time range.\n\n  Background:\n    Given the \"Timetable Generator\" page is loaded\n    And the timetable form with data-testid \"timetable-form\" is visible\n    And the timetable table with data-testid \"timetable\" is visible\n\n\nScenario: [Error] Attempt to add a row with missing subject\n    Given the user leaves the subject field with data-testid \"subject\" empty\n    And the user enters \"15:00\" into the start time field with data-testid \"start-time\"\n    And the user enters \"16:00\" into the end time field with data-testid \"end-time\"\n    And the user selects \"Tuesday\" checkbox under the days group with data-testid \"days\"\n    When the user clicks the \"Add to Timetable\" button with data-testid \"add-timetable-button\"\n    Then an alert is displayed\n    And no new row is added to the timetable table with data-testid \"timetable\""
        ],
        "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"/Users/lingyao/PycharmProjects/E2ESD_data_construct/data/Ourdatas/LJY_TEST_NEW2/E2ESD_Bench_18/index.html\"\n\n@given('the \"Timetable Generator\" page is loaded')\ndef step_impl(context):\n    context.driver = webdriver.Chrome()  # Initialize the WebDriver\n    context.driver.get(f\"file://{file_path}\")  # Load the test page\n    context.driver.maximize_window()\n    time.sleep(1)  # Allow the page to load completely\n\n@given('the timetable form with data-testid \"timetable-form\" is visible')\ndef step_impl(context):\n    form = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='timetable-form']\"))\n    )\n    assert form.is_displayed(), \"Timetable form is not visible\"\n\n@given('the timetable table with data-testid \"timetable\" is visible')\ndef step_impl(context):\n    table = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='timetable']\"))\n    )\n    assert table.is_displayed(), \"Timetable table is not visible\"\n\n@given('the user leaves the subject field with data-testid \"subject\" empty')\ndef step_impl(context):\n    subject_field = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='subject']\")\n    subject_field.clear()  # Ensure the field is empty\n    time.sleep(1)\n\n@given('the user enters \"{start_time}\" into the start time field with data-testid \"start-time\"')\ndef step_impl(context, start_time):\n    start_time_field = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='start-time']\")\n    start_time_field.clear()\n    start_time_field.send_keys(start_time)\n    time.sleep(1)\n\n@given('the user enters \"{end_time}\" into the end time field with data-testid \"end-time\"')\ndef step_impl(context, end_time):\n    end_time_field = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='end-time']\")\n    end_time_field.clear()\n    end_time_field.send_keys(end_time)\n    time.sleep(1)\n\n@given('the user selects \"{day}\" checkbox under the days group with data-testid \"days\"')\ndef step_impl(context, day):\n    day_checkbox = context.driver.find_element(By.CSS_SELECTOR, f\"[data-testid='day-{day.lower()}'] input\")\n    if not day_checkbox.is_selected():\n        day_checkbox.click()\n    time.sleep(1)\n\n@when('the user clicks the \"Add to Timetable\" button with data-testid \"add-timetable-button\"')\ndef step_impl(context):\n    add_button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='add-timetable-button']\"))\n    )\n    add_button.click()\n    time.sleep(1)\n\n@then('an alert is displayed')\ndef step_impl(context):\n    pass\n\n@then('no new row is added to the timetable table with data-testid \"timetable\"')\ndef step_impl(context):\n    timetable_body = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='timetable'] tbody\")\n    rows = timetable_body.find_elements(By.TAG_NAME, \"tr\")\n    assert len(rows) == 0, f\"Expected no rows in the timetable, but found {len(rows)}\"\n\n# Teardown to close the browser after tests\ndef after_scenario(context, scenario):\n    if hasattr(context, 'driver'):\n        context.driver.quit()"
      },
      {
        "test_case": [
          "Feature: Add a new row to the timetable table when all required fields are filled and the \"Add to Timetable\" button is clicked.\n\n  As a user,\n  I want to dynamically add a new row to the timetable table\n  So that I can see my scheduled subjects for the selected days and time range.\n\n  Background:\n    Given the \"Timetable Generator\" page is loaded\n    And the timetable form with data-testid \"timetable-form\" is visible\n    And the timetable table with data-testid \"timetable\" is visible\n\n\n  Scenario: [Error] Attempt to add a row with missing time range\n    Given the user enters \"Biology\" into the subject field with data-testid \"subject\"\n    And the user leaves the start time field with data-testid \"start-time\" empty\n    And the user enters \"17:00\" into the end time field with data-testid \"end-time\"\n    And the user selects \"Thursday\" checkbox under the days group with data-testid \"days\"\n    When the user clicks the \"Add to Timetable\" button with data-testid \"add-timetable-button\"\n    Then an alert is displayed with the message \"Please fill in all the fields.\"\n    And no new row is added to the timetable table with data-testid \"timetable\"\n"
        ],
        "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"/Users/lingyao/PycharmProjects/E2ESD_data_construct/data/Ourdatas/LJY_TEST_NEW2/E2ESD_Bench_18/index.html\"\n\ndef is_alert_present(driver):\n    try:\n        WebDriverWait(driver, 3).until(EC.alert_is_present())\n        return True\n    except:\n        return False\n\n@given('the \"Timetable Generator\" page is loaded')\ndef step_given_timetable_generator_page_loaded(context):\n    context.driver = webdriver.Chrome()  # Initialize the WebDriver\n    context.driver.get(f\"file:///Users/lingyao/PycharmProjects/E2ESD_data_construct/data/Ourdatas/LJY_TEST_NEW2/E2ESD_Bench_18/index.html\")\n    time.sleep(1)  # Allow the page to load\n\n@given('the timetable form with data-testid \"timetable-form\" is visible')\ndef step_given_timetable_form_visible(context):\n    form = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='timetable-form']\"))\n    )\n    assert form.is_displayed(), \"Timetable form is not visible\"\n\n@given('the timetable table with data-testid \"timetable\" is visible')\ndef step_given_timetable_table_visible(context):\n    table = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='timetable']\"))\n    )\n    assert table.is_displayed(), \"Timetable table is not visible\"\n\n@given('the user enters \"Biology\" into the subject field with data-testid \"subject\"')\ndef step_given_user_enters_subject(context):\n    subject_field = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='subject']\"))\n    )\n    subject_field.clear()\n    subject_field.send_keys(\"Biology\")\n    time.sleep(1)\n\n@given('the user leaves the start time field with data-testid \"start-time\" empty')\ndef step_given_user_leaves_start_time_empty(context):\n    start_time_field = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='start-time']\"))\n    )\n    start_time_field.clear()\n    time.sleep(1)\n\n@given('the user enters \"17:00\" into the end time field with data-testid \"end-time\"')\ndef step_given_user_enters_end_time(context):\n    end_time_field = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='end-time']\"))\n    )\n    end_time_field.clear()\n    end_time_field.send_keys(\"17:00\")\n    time.sleep(1)\n\n@given('the user selects \"Thursday\" checkbox under the days group with data-testid \"days\"')\ndef step_given_user_selects_thursday(context):\n    thursday_checkbox = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='day-thursday'] input\"))\n    )\n    if not thursday_checkbox.is_selected():\n        thursday_checkbox.click()\n    time.sleep(1)\n\n@when('the user clicks the \"Add to Timetable\" button with data-testid \"add-timetable-button\"')\ndef step_when_user_clicks_add_button(context):\n    add_button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='add-timetable-button']\"))\n    )\n    add_button.click()\n    time.sleep(1)\n\n@then('an alert is displayed with the message \"Please fill in all the fields.\"')\ndef step_then_alert_displayed(context):\n    pass\n\n@then('no new row is added to the timetable table with data-testid \"timetable\"')\ndef step_then_no_new_row_added(context):\n    timetable_body = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='timetable'] tbody\"))\n    )\n    rows = timetable_body.find_elements(By.TAG_NAME, \"tr\")\n    assert len(rows) == 0, f\"Expected no rows in the timetable, but found {len(rows)}\"\n\n# Cleanup after tests\ndef after_scenario(context, scenario):\n    context.driver.quit()"
      },
      {
        "test_case": [
          "Feature: Add a new row to the timetable table when all required fields are filled and the \"Add to Timetable\" button is clicked.\n\n  As a user,\n  I want to dynamically add a new row to the timetable table\n  So that I can see my scheduled subjects for the selected days and time range.\n\n  Background:\n    Given the \"Timetable Generator\" page is loaded\n    And the timetable form with data-testid \"timetable-form\" is visible\n    And the timetable table with data-testid \"timetable\" is visible\n\n\n  Scenario: [Error] Attempt to add a row with no days selected\n    Given the user enters \"History\" into the subject field with data-testid \"subject\"\n    And the user enters \"18:00\" into the start time field with data-testid \"start-time\"\n    And the user enters \"19:00\" into the end time field with data-testid \"end-time\"\n    And the user does not select any checkboxes under the days group with data-testid \"days\"\n    When the user clicks the \"Add to Timetable\" button with data-testid \"add-timetable-button\"\n    Then an alert is displayed with the message \"Please fill in all the fields.\"\n    And no new row is added to the timetable table with data-testid \"timetable\""
        ],
        "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"/Users/lingyao/PycharmProjects/E2ESD_data_construct/data/Ourdatas/LJY_TEST_NEW2/E2ESD_Bench_18/index.html\"\n\n@given('the \"Timetable Generator\" page is loaded')\ndef step_impl(context):\n    context.driver = webdriver.Chrome()  # Initialize the WebDriver\n    context.driver.get(f\"file://{file_path}\")  # Load the test page\n    context.driver.maximize_window()\n    time.sleep(1)  # Allow the page to load completely\n\n@given('the timetable form with data-testid \"timetable-form\" is visible')\ndef step_impl(context):\n    form = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='timetable-form']\"))\n    )\n    assert form.is_displayed(), \"The timetable form is not visible.\"\n\n@given('the timetable table with data-testid \"timetable\" is visible')\ndef step_impl(context):\n    table = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='timetable']\"))\n    )\n    assert table.is_displayed(), \"The timetable table is not visible.\"\n\n@given('the user enters \"History\" into the subject field with data-testid \"subject\"')\ndef step_impl(context):\n    subject_field = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='subject']\"))\n    )\n    subject_field.clear()\n    subject_field.send_keys(\"History\")\n    time.sleep(1)\n\n@given('the user enters \"18:00\" into the start time field with data-testid \"start-time\"')\ndef step_impl(context):\n    start_time_field = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='start-time']\"))\n    )\n    start_time_field.clear()\n    start_time_field.send_keys(\"18:00\")\n    time.sleep(1)\n\n@given('the user enters \"19:00\" into the end time field with data-testid \"end-time\"')\ndef step_impl(context):\n    end_time_field = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='end-time']\"))\n    )\n    end_time_field.clear()\n    end_time_field.send_keys(\"19:00\")\n    time.sleep(1)\n\n@given('the user does not select any checkboxes under the days group with data-testid \"days\"')\ndef step_impl(context):\n    checkboxes = context.driver.find_elements(By.CSS_SELECTOR, \"[data-testid='days'] input[type='checkbox']\")\n    for checkbox in checkboxes:\n        if checkbox.is_selected():\n            checkbox.click()  # Deselect any pre-selected checkboxes\n    time.sleep(1)\n\n@when('the user clicks the \"Add to Timetable\" button with data-testid \"add-timetable-button\"')\ndef step_impl(context):\n    add_button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='add-timetable-button']\"))\n    )\n    add_button.click()\n    time.sleep(1)\n\n@then('an alert is displayed with the message \"Please fill in all the fields.\"')\ndef step_impl(context):\n    WebDriverWait(context.driver, 10).until(EC.alert_is_present())\n    alert = context.driver.switch_to.alert\n    assert alert.text == \"Please fill in all the fields.\", f\"Unexpected alert message: {alert.text}\"\n    alert.accept()\n    time.sleep(1)\n\n@then('no new row is added to the timetable table with data-testid \"timetable\"')\ndef step_impl(context):\n    timetable_body = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='timetable'] tbody\")\n    rows = timetable_body.find_elements(By.TAG_NAME, \"tr\")\n    assert len(rows) == 0, f\"Expected no rows in the timetable, but found {len(rows)}.\"\n\n# Teardown to close the browser after the test\ndef after_scenario(context, scenario):\n    if hasattr(context, 'driver'):\n        context.driver.quit()"
      }
    ]
  },
  "6": {
    "requirement": {
      "description": "If a row with the same time range already exists in the timetable table, the system must update the cells corresponding to the selected days with the new subject name instead of creating a new row. The system must handle the following scenarios: \n\n1. **Normal Scenario:** When a row with the same time range exists and multiple days are selected, the system must update the cells for the selected days with the new subject name. For example:\n   - Given a row exists in the timetable with the time range '09:00 - 10:00' and subject 'Math' on Monday and Tuesday.\n   - When the user enters 'Science' into the subject field (located via `data-testid='subject'`), '09:00' into the start time field (located via `data-testid='start-time'`), '10:00' into the end time field (located via `data-testid='end-time'`), and selects 'Monday' and 'Tuesday' checkboxes (located via `data-testid='day-monday'` and `data-testid='day-tuesday'`).\n   - And the user clicks the 'Add to Timetable' button (located via `data-testid='add-timetable-button'`).\n   - Then the existing row with the time range '09:00 - 10:00' must be updated, the cells for Monday and Tuesday must display 'Science', and no new row must be created.\n\n2. **Edge Case:** When a row with the same time range exists but only one day overlaps with the new subject, the system must update the cell for the overlapping day with the new subject name. For example:\n   - Given a row exists in the timetable with the time range '11:00 - 12:00' and subject 'History' on Wednesday.\n   - When the user enters 'Geography' into the subject field (located via `data-testid='subject'`), '11:00' into the start time field (located via `data-testid='start-time'`), '12:00' into the end time field (located via `data-testid='end-time'`), and selects 'Wednesday' checkbox (located via `data-testid='day-wednesday'`).\n   - And the user clicks the 'Add to Timetable' button (located via `data-testid='add-timetable-button'`).\n   - Then the existing row with the time range '11:00 - 12:00' must be updated, the cell for Wednesday must display 'Geography', and no new row must be created.\n\nThe system must ensure that the update operation is performed without creating duplicate rows in the timetable table. The rows in the timetable table are identified by their unique time range, and the cells for each day are updated based on the selected checkboxes. The DOM elements involved in this functionality include the timetable table (located via `data-testid='timetable'`), the subject input field (located via `data-testid='subject'`), the start time input field (located via `data-testid='start-time'`), the end time input field (located via `data-testid='end-time'`), and the day checkboxes (located via `data-testid='days'`).",
      "related_elements": [
        "(\"By.CSS_SELECTOR\", \"[data-testid='day-monday'] input\", \"Checkbox for selecting Monday\")",
        "(\"By.CSS_SELECTOR\", \"[data-testid='start-time']\", \"Input field for the start time\")",
        "(\"By.CSS_SELECTOR\", \"[data-testid='add-timetable-button']\", \"Button to add a row to the timetable\")",
        "(\"By.TAG_NAME\", \"td\", \"Table cell element in the timetable\")",
        "(\"By.CSS_SELECTOR\", \"[data-testid='timetable'] tbody\", \"Table body element for the timetable\")",
        "(\"By.CSS_SELECTOR\", \"[data-testid='end-time']\", \"Input field for the end time\")",
        "(\"By.TAG_NAME\", \"tr\", \"Table row element in the timetable\")",
        "(\"By.CSS_SELECTOR\", \"[data-testid='add-timetable-button']\", \"Button to add a new entry to the timetable\")",
        "(\"By.CSS_SELECTOR\", \"[data-testid='timetable-form']\", \"Form element for the timetable page\")",
        "(\"By.CSS_SELECTOR\", \"[data-testid='subject']\", \"Input field for the subject name\")",
        "(\"By.CSS_SELECTOR\", \"[data-testid='day-tuesday'] input\", \"Checkbox for selecting Tuesday\")",
        "(\"By.CSS_SELECTOR\", \"[data-testid='day-wednesday'] input[type='checkbox']\", \"Checkbox for selecting Wednesday\")",
        "(\"By.CSS_SELECTOR\", \"[data-testid='subject']\", \"Input field for the subject\")"
      ]
    },
    "concise_requirement": "If a row with the same time range already exists in the timetable table, the system must update the cells corresponding to the selected days with the new subject name instead of creating a new row.",
    "test_cases": [
      {
        "test_case": [
          "Feature: Update existing timetable row with new subject for overlapping time range\n  The system must update the cells corresponding to the selected days with the new subject name if a row with the same time range already exists in the timetable table.\n\n\n  Scenario: [Normal] Update existing row when a time range overlaps and days are selected\n    Given the timetable page is loaded\n    And a row exists in the timetable with time range \"09:00 - 10:00\" and subject \"Math\" on Monday and Tuesday\n    When the user enters \"Science\" into the subject field with data-testid \"subject\"\n    And the user enters \"09:00\" into the start time field with data-testid \"start-time\"\n    And the user enters \"10:00\" into the end time field with data-testid \"end-time\"\n    And the user selects \"Monday\" and \"Tuesday\" checkboxes with data-testid \"day-monday\" and \"day-tuesday\"\n    And the user clicks the \"Add to Timetable\" button with data-testid \"add-timetable-button\"\n    Then the existing row with time range \"09:00 - 10:00\" is updated\n    And the cell for Monday displays \"Science\"\n    And the cell for Tuesday displays \"Science\"\n    And no new row is created in the timetable\n"
        ],
        "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"/Users/lingyao/PycharmProjects/E2ESD_data_construct/data/Ourdatas/LJY_TEST_NEW2/E2ESD_Bench_18/index.html\"\n\n@given('the timetable page is loaded')\ndef step_impl(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file:///Users/lingyao/PycharmProjects/E2ESD_data_construct/data/Ourdatas/LJY_TEST_NEW2/E2ESD_Bench_18/index.html\")\n    context.driver.maximize_window()\n    WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='timetable-form']\"))\n    )\n    time.sleep(1)\n\n@given('a row exists in the timetable with time range \"09:00 - 10:00\" and subject \"Math\" on Monday and Tuesday')\ndef step_impl(context):\n    # Manually add a row to the timetable for testing purposes\n    timetable_body = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='timetable'] tbody\")\n    new_row = context.driver.execute_script(\"\"\"\n        const tbody = arguments[0];\n        const row = document.createElement('tr');\n        row.innerHTML = `<td>09:00 - 10:00</td><td>Math</td><td>Math</td><td></td><td></td><td></td><td></td>`;\n        tbody.appendChild(row);\n    \"\"\", timetable_body)\n    time.sleep(1)\n\n@when('the user enters \"Science\" into the subject field with data-testid \"subject\"')\ndef step_impl(context):\n    subject_field = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='subject']\"))\n    )\n    subject_field.clear()\n    subject_field.send_keys(\"Science\")\n    time.sleep(1)\n\n@when('the user enters \"09:00\" into the start time field with data-testid \"start-time\"')\ndef step_impl(context):\n    start_time_field = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='start-time']\"))\n    )\n    start_time_field.clear()\n    start_time_field.send_keys(\"09:00\")\n    time.sleep(1)\n\n@when('the user enters \"10:00\" into the end time field with data-testid \"end-time\"')\ndef step_impl(context):\n    end_time_field = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='end-time']\"))\n    )\n    end_time_field.clear()\n    end_time_field.send_keys(\"10:00\")\n    time.sleep(1)\n\n@when('the user selects \"Monday\" and \"Tuesday\" checkboxes with data-testid \"day-monday\" and \"day-tuesday\"')\ndef step_impl(context):\n    monday_checkbox = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='day-monday'] input\"))\n    )\n    tuesday_checkbox = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='day-tuesday'] input\"))\n    )\n    if not monday_checkbox.is_selected():\n        monday_checkbox.click()\n    if not tuesday_checkbox.is_selected():\n        tuesday_checkbox.click()\n    time.sleep(1)\n\n@when('the user clicks the \"Add to Timetable\" button with data-testid \"add-timetable-button\"')\ndef step_impl(context):\n    add_button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='add-timetable-button']\"))\n    )\n    add_button.click()\n    time.sleep(1)\n\n@then('the existing row with time range \"09:00 - 10:00\" is updated')\ndef step_impl(context):\n    timetable_body = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='timetable'] tbody\")\n    rows = timetable_body.find_elements(By.TAG_NAME, \"tr\")\n    for row in rows:\n        time_cell = row.find_element(By.TAG_NAME, \"td\")\n        if time_cell.text == \"09:00 - 10:00\":\n            monday_cell = row.find_elements(By.TAG_NAME, \"td\")[1]\n            tuesday_cell = row.find_elements(By.TAG_NAME, \"td\")[2]\n            assert monday_cell.text == \"Science\", \"Monday cell was not updated correctly\"\n            assert tuesday_cell.text == \"Science\", \"Tuesday cell was not updated correctly\"\n            return\n    assert False, \"Row with time range '09:00 - 10:00' was not found\"\n\n@then('the cell for Monday displays \"Science\"')\ndef step_impl(context):\n    timetable_body = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='timetable'] tbody\")\n    rows = timetable_body.find_elements(By.TAG_NAME, \"tr\")\n    for row in rows:\n        time_cell = row.find_element(By.TAG_NAME, \"td\")\n        if time_cell.text == \"09:00 - 10:00\":\n            monday_cell = row.find_elements(By.TAG_NAME, \"td\")[1]\n            assert monday_cell.text == \"Science\", \"Monday cell does not display 'Science'\"\n            return\n    assert False, \"Row with time range '09:00 - 10:00' was not found\"\n\n@then('the cell for Tuesday displays \"Science\"')\ndef step_impl(context):\n    timetable_body = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='timetable'] tbody\")\n    rows = timetable_body.find_elements(By.TAG_NAME, \"tr\")\n    for row in rows:\n        time_cell = row.find_element(By.TAG_NAME, \"td\")\n        if time_cell.text == \"09:00 - 10:00\":\n            tuesday_cell = row.find_elements(By.TAG_NAME, \"td\")[2]\n            assert tuesday_cell.text == \"Science\", \"Tuesday cell does not display 'Science'\"\n            return\n    assert False, \"Row with time range '09:00 - 10:00' was not found\"\n\n@then('no new row is created in the timetable')\ndef step_impl(context):\n    timetable_body = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='timetable'] tbody\")\n    rows = timetable_body.find_elements(By.TAG_NAME, \"tr\")\n    assert len(rows) == 1, f\"Expected 1 row, but found {len(rows)}\"\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
      },
      {
        "test_case": [
          "Feature: Update existing timetable row with new subject for overlapping time range\n  The system must update the cells corresponding to the selected days with the new subject name if a row with the same time range already exists in the timetable table.\n\n\n  Scenario: [Edge] Update existing row when only one day overlaps with the new subject\n    Given the timetable page is loaded\n    And a row exists in the timetable with time range \"11:00 - 12:00\" and subject \"History\" on Wednesday\n    When the user enters \"Geography\" into the subject field with data-testid \"subject\"\n    And the user enters \"11:00\" into the start time field with data-testid \"start-time\"\n    And the user enters \"12:00\" into the end time field with data-testid \"end-time\"\n    And the user selects \"Wednesday\" checkbox with data-testid \"day-wednesday\"\n    And the user clicks the \"Add to Timetable\" button with data-testid \"add-timetable-button\"\n    Then the existing row with time range \"11:00 - 12:00\" is updated\n    And the cell for Wednesday displays \"Geography\"\n    And no new row is created in the timetable\n"
        ],
        "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"/Users/lingyao/PycharmProjects/E2ESD_data_construct/data/Ourdatas/LJY_TEST_NEW2/E2ESD_Bench_18/index.html\"\n\n@given(\"the timetable page is loaded\")\ndef step_given_timetable_page_loaded(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file:///Users/lingyao/PycharmProjects/E2ESD_data_construct/data/Ourdatas/LJY_TEST_NEW2/E2ESD_Bench_18/index.html\")\n    context.driver.maximize_window()\n    WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='timetable-form']\"))\n    )\n    time.sleep(1)\n\n@given('a row exists in the timetable with time range \"11:00 - 12:00\" and subject \"History\" on Wednesday')\ndef step_given_row_exists_in_timetable(context):\n    # Manually add a row to the timetable for testing purposes\n    timetable_body = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='timetable'] tbody\")\n    new_row = context.driver.execute_script(\"\"\"\n        const tbody = arguments[0];\n        const newRow = document.createElement('tr');\n        newRow.innerHTML = `<td>11:00 - 12:00</td><td></td><td></td><td>History</td><td></td><td></td><td></td>`;\n        tbody.appendChild(newRow);\n    \"\"\", timetable_body)\n    time.sleep(1)\n\n@when('the user enters \"Geography\" into the subject field with data-testid \"subject\"')\ndef step_when_user_enters_subject(context):\n    subject_field = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='subject']\"))\n    )\n    subject_field.clear()\n    subject_field.send_keys(\"Geography\")\n    time.sleep(1)\n\n@when('the user enters \"11:00\" into the start time field with data-testid \"start-time\"')\ndef step_when_user_enters_start_time(context):\n    start_time_field = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='start-time']\"))\n    )\n    start_time_field.clear()\n    start_time_field.send_keys(\"11:00\")\n    time.sleep(1)\n\n@when('the user enters \"12:00\" into the end time field with data-testid \"end-time\"')\ndef step_when_user_enters_end_time(context):\n    end_time_field = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='end-time']\"))\n    )\n    end_time_field.clear()\n    end_time_field.send_keys(\"12:00\")\n    time.sleep(1)\n\n@when('the user selects \"Wednesday\" checkbox with data-testid \"day-wednesday\"')\ndef step_when_user_selects_wednesday(context):\n    wednesday_checkbox = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='day-wednesday'] input[type='checkbox']\"))\n    )\n    if not wednesday_checkbox.is_selected():\n        wednesday_checkbox.click()\n    time.sleep(1)\n\n@when('the user clicks the \"Add to Timetable\" button with data-testid \"add-timetable-button\"')\ndef step_when_user_clicks_add_button(context):\n    add_button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='add-timetable-button']\"))\n    )\n    add_button.click()\n    time.sleep(1)\n\n@then('the existing row with time range \"11:00 - 12:00\" is updated')\ndef step_then_existing_row_updated(context):\n    timetable_body = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='timetable'] tbody\")\n    rows = timetable_body.find_elements(By.TAG_NAME, \"tr\")\n    updated = False\n    for row in rows:\n        time_cell = row.find_element(By.TAG_NAME, \"td\")\n        if time_cell.text == \"11:00 - 12:00\":\n            wednesday_cell = row.find_elements(By.TAG_NAME, \"td\")[3]  # Wednesday is the 4th column\n            if wednesday_cell.text == \"Geography\":\n                updated = True\n                break\n    assert updated, \"The existing row was not updated with the new subject.\"\n\n@then('the cell for Wednesday displays \"Geography\"')\ndef step_then_wednesday_cell_displays_subject(context):\n    timetable_body = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='timetable'] tbody\")\n    rows = timetable_body.find_elements(By.TAG_NAME, \"tr\")\n    wednesday_cell_updated = False\n    for row in rows:\n        time_cell = row.find_element(By.TAG_NAME, \"td\")\n        if time_cell.text == \"11:00 - 12:00\":\n            wednesday_cell = row.find_elements(By.TAG_NAME, \"td\")[3]  # Wednesday is the 4th column\n            if wednesday_cell.text == \"Geography\":\n                wednesday_cell_updated = True\n                break\n    assert wednesday_cell_updated, \"The cell for Wednesday does not display 'Geography'.\"\n\n@then('no new row is created in the timetable')\ndef step_then_no_new_row_created(context):\n    timetable_body = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='timetable'] tbody\")\n    rows = timetable_body.find_elements(By.TAG_NAME, \"tr\")\n    assert len(rows) == 1, f\"Expected 1 row, but found {len(rows)}.\"\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
      }
    ]
  },
  "7": {
    "requirement": {
      "description": "The web application must allow users to add new rows to the timetable table through a form submission. The form includes fields for subject, start time, end time, and days of the week, each identified by specific data-testid attributes. The user must fill in all fields: 'subject' with data-testid 'subject', 'start time' with data-testid 'start-time', 'end time' with data-testid 'end-time', and select at least one day from the checkboxes with data-testid 'days'. Upon clicking the 'Add to Timetable' button with data-testid 'add-timetable-button', the system must validate that all fields are filled and at least one day is selected. If validation passes, the system will add a new row to the timetable table with a unique data-id format 'timetable-row-{startTime}-{endTime}'. The row must display the time range in the first column and the subject in the columns corresponding to the selected days. The system must ensure that the new row is inserted in chronological order based on the start time, using the 'compareTimes' function to determine the correct position among existing rows. If the start time matches an existing row, the subject is added to the corresponding day columns of that row. The timetable table is identified by data-testid 'timetable', and rows are dynamically created and inserted using JavaScript functions 'addTimetableEntry' and 'insertSortedRow'.",
      "related_elements": [
        "(\"By.CSS_SELECTOR\", \"[data-testid='add-timetable-button']\", \"Button to add a new row to the timetable\")",
        "(By.TAG_NAME, \"td\", \"Cells within a row of the timetable table\")",
        "(By.TAG_NAME, \"td\", \"First column of the newly added row in the timetable table\")",
        "(By.CSS_SELECTOR, \"[data-testid='start-time']\", \"Input field for the start time\")",
        "(By.CSS_SELECTOR, \"[data-testid='add-timetable-button']\", \"Button to add a new row to the timetable\")",
        "(\"By.CSS_SELECTOR\", \"[data-testid='start-time']\", \"Input field for the start time\")",
        "(By.CSS_SELECTOR, \"[data-testid='subject']\", \"Input field for the subject\")",
        "(\"By.TAG_NAME\", \"tr\", \"Table row in the timetable table\")",
        "(\"By.CSS_SELECTOR\", \"[data-testid='add-timetable-button']\", \"Button to add a new entry to the timetable\")",
        "(\"By.CSS_SELECTOR\", \"td:nth-child(4)",
        "(\"By.CSS_SELECTOR\", \"[data-testid='day-monday'] input\", \"Checkbox for selecting Monday\")",
        "(By.CSS_SELECTOR, \"[data-id='timetable-row-{start_time}-{end_time}']\", \"Newly added row in the timetable table\")",
        "(By.CSS_SELECTOR, \"[data-testid='day-{day.lower()",
        "(\"By.CSS_SELECTOR\", \"td:first-child\", \"First column of the newly added row displaying the time\")",
        "(By.TAG_NAME, \"tr\", \"Rows within the timetable table\")",
        "(By.TAG_NAME, \"td\", \"Columns within the newly added row in the timetable table\")",
        "(\"By.CSS_SELECTOR\", \"[data-id='timetable-row-09:00-10:00']\", \"Newly added row in the timetable table\")",
        "(\"By.CSS_SELECTOR\", \"[data-id='timetable-row-10:00-11:00']\", \"Newly added row in the timetable\")",
        "(\"By.CSS_SELECTOR\", \"[data-testid='timetable'] tbody\", \"Timetable table body for inserting rows\")",
        "(\"By.CSS_SELECTOR\", \"[data-testid='timetable'] tbody\", \"Table body for the timetable\")",
        "(\"By.CSS_SELECTOR\", \"[data-testid='day-wednesday'] input[type='checkbox']\", \"Checkbox for selecting Wednesday\")",
        "(\"By.CSS_SELECTOR\", \"[data-testid='subject']\", \"Input field for the subject\")",
        "(\"By.TAG_NAME\", \"td\", \"Table cell in the timetable row\")",
        "(\"By.CSS_SELECTOR\", \"[data-testid='end-time']\", \"Input field for the end time\")",
        "(By.CSS_SELECTOR, \"[data-testid='timetable']\", \"Timetable table body\")",
        "(By.CSS_SELECTOR, \"[data-testid='end-time']\", \"Input field for the end time\")"
      ]
    },
    "concise_requirement": "When the user adds a new row to the timetable table, the system must insert the row in chronological order based on the start time.",
    "test_cases": [
      {
        "test_case": [
          "Feature: Insert timetable rows in chronological order based on start time\n  The system must ensure that when a user adds a new row to the timetable, it is inserted in chronological order based on the start time.\n\n\n  Scenario: [Normal] Add a new row with a start time earlier than existing rows\n    Given the timetable table is empty\n    And the user enters \"Math\" into the subject field with data-testid \"subject\"\n    And the user enters \"09:00\" into the start time field with data-testid \"start-time\"\n    And the user enters \"10:00\" into the end time field with data-testid \"end-time\"\n    And the user selects \"Monday\" from the days checkboxes with data-testid \"day-monday\"\n    When the user clicks the \"Add to Timetable\" button with data-testid \"add-timetable-button\"\n    Then a new row is added to the timetable table with data-id \"timetable-row-09:00-10:00\"\n    And the row displays \"09:00 - 10:00\" in the first column\n    And the row displays \"Math\" in the Monday column\n    And the row is the first row in the timetable table\n"
        ],
        "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"/Users/lingyao/PycharmProjects/E2ESD_data_construct/data/Ourdatas/LJY_TEST_NEW2/E2ESD_Bench_18/index.html\"\n\ndef is_row_first_in_table(row_element, table_element):\n    return table_element.find_elements(By.TAG_NAME, \"tr\")[0] == row_element\n\n@given(\"the timetable table is empty\")\ndef step_given_timetable_table_is_empty(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://{file_path}\")\n    time.sleep(1)  # Allow page to load\n    timetable_body = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='timetable'] tbody\")\n    assert len(timetable_body.find_elements(By.TAG_NAME, \"tr\")) == 0, \"Timetable table is not empty\"\n\n@given('the user enters \"Math\" into the subject field with data-testid \"subject\"')\ndef step_given_user_enters_subject(context):\n    subject_field = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='subject']\"))\n    )\n    subject_field.clear()\n    subject_field.send_keys(\"Math\")\n    time.sleep(1)\n\n@given('the user enters \"09:00\" into the start time field with data-testid \"start-time\"')\ndef step_given_user_enters_start_time(context):\n    start_time_field = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='start-time']\"))\n    )\n    start_time_field.clear()\n    start_time_field.send_keys(\"09:00\")\n    time.sleep(1)\n\n@given('the user enters \"10:00\" into the end time field with data-testid \"end-time\"')\ndef step_given_user_enters_end_time(context):\n    end_time_field = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='end-time']\"))\n    )\n    end_time_field.clear()\n    end_time_field.send_keys(\"10:00\")\n    time.sleep(1)\n\n@given('the user selects \"Monday\" from the days checkboxes with data-testid \"day-monday\"')\ndef step_given_user_selects_day(context):\n    monday_checkbox = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='day-monday'] input\"))\n    )\n    if not monday_checkbox.is_selected():\n        monday_checkbox.click()\n    time.sleep(1)\n\n@when('the user clicks the \"Add to Timetable\" button with data-testid \"add-timetable-button\"')\ndef step_when_user_clicks_add_button(context):\n    add_button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='add-timetable-button']\"))\n    )\n    add_button.click()\n    time.sleep(1)\n\n@then('a new row is added to the timetable table with data-id \"timetable-row-09:00-10:00\"')\ndef step_then_new_row_added(context):\n    timetable_body = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='timetable'] tbody\"))\n    )\n    new_row = timetable_body.find_element(By.CSS_SELECTOR, \"[data-id='timetable-row-09:00-10:00']\")\n    assert new_row is not None, \"New row with data-id 'timetable-row-09:00-10:00' was not added\"\n\n@then('the row displays \"09:00 - 10:00\" in the first column')\ndef step_then_row_displays_time(context):\n    timetable_body = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='timetable'] tbody\")\n    new_row = timetable_body.find_element(By.CSS_SELECTOR, \"[data-id='timetable-row-09:00-10:00']\")\n    first_column = new_row.find_elements(By.TAG_NAME, \"td\")[0]\n    assert \"09:00 - 10:00\" in first_column.text, f\"Expected '09:00 - 10:00', but got '{first_column.text}'\"\n\n@then('the row displays \"Math\" in the Monday column')\ndef step_then_row_displays_subject(context):\n    timetable_body = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='timetable'] tbody\")\n    new_row = timetable_body.find_element(By.CSS_SELECTOR, \"[data-id='timetable-row-09:00-10:00']\")\n    monday_column = new_row.find_elements(By.TAG_NAME, \"td\")[1]\n    assert \"Math\" in monday_column.text, f\"Expected 'Math', but got '{monday_column.text}'\"\n\n@then('the row is the first row in the timetable table')\ndef step_then_row_is_first(context):\n    timetable_body = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='timetable'] tbody\")\n    new_row = timetable_body.find_element(By.CSS_SELECTOR, \"[data-id='timetable-row-09:00-10:00']\")\n    assert is_row_first_in_table(new_row, timetable_body), \"New row is not the first row in the timetable table\"\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
      },
      {
        "test_case": [
          "Feature: Insert timetable rows in chronological order based on start time\n  The system must ensure that when a user adds a new row to the timetable, it is inserted in chronological order based on the start time.\n\n\n  Scenario: [Normal] Add a new row with a start time later than existing rows\n    Given the timetable table contains a row with start time \"09:00\" and end time \"10:00\"\n    And the user enters \"Science\" into the subject field with data-testid \"subject\"\n    And the user enters \"11:00\" into the start time field with data-testid \"start-time\"\n    And the user enters \"12:00\" into the end time field with data-testid \"end-time\"\n    And the user selects \"Tuesday\" from the days checkboxes with data-testid \"day-tuesday\"\n    When the user clicks the \"Add to Timetable\" button with data-testid \"add-timetable-button\"\n    Then a new row is added to the timetable table with data-id \"timetable-row-11:00-12:00\"\n    And the row displays \"11:00 - 12:00\" in the first column\n    And the row displays \"Science\" in the Tuesday column\n    And the row is placed after the row with start time \"09:00\"\n"
        ],
        "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"/Users/lingyao/PycharmProjects/E2ESD_data_construct/data/Ourdatas/LJY_TEST_NEW2/E2ESD_Bench_18/index.html\"\n\ndef is_row_present(driver, start_time, end_time):\n    timetable_body = driver.find_element(By.CSS_SELECTOR, \"[data-testid='timetable'] tbody\")\n    rows = timetable_body.find_elements(By.TAG_NAME, \"tr\")\n    for row in rows:\n        if f\"{start_time} - {end_time}\" in row.find_element(By.TAG_NAME, \"td\").text:\n            return row\n    return None\n\n@given('the timetable table contains a row with start time \"{start_time}\" and end time \"{end_time}\"')\ndef step_given_timetable_contains_row(context, start_time, end_time):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://{file_path}\")\n    WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='timetable']\"))\n    )\n    timetable_body = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='timetable'] tbody\")\n    new_row = context.driver.execute_script(\n        \"\"\"\n        const timetableBody = arguments[0];\n        const newRow = document.createElement('tr');\n        newRow.innerHTML = `<td>{start_time} - {end_time}</td><td></td><td></td><td></td><td></td><td></td><td></td>`;\n        timetableBody.appendChild(newRow);\n        \"\"\",\n        timetable_body\n    )\n    time.sleep(1)\n\n@given('the user enters \"{subject}\" into the subject field with data-testid \"subject\"')\ndef step_given_enter_subject(context, subject):\n    subject_field = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='subject']\"))\n    )\n    subject_field.clear()\n    subject_field.send_keys(subject)\n    time.sleep(1)\n\n@given('the user enters \"{start_time}\" into the start time field with data-testid \"start-time\"')\ndef step_given_enter_start_time(context, start_time):\n    start_time_field = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='start-time']\"))\n    )\n    start_time_field.clear()\n    start_time_field.send_keys(start_time)\n    time.sleep(1)\n\n@given('the user enters \"{end_time}\" into the end time field with data-testid \"end-time\"')\ndef step_given_enter_end_time(context, end_time):\n    end_time_field = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='end-time']\"))\n    )\n    end_time_field.clear()\n    end_time_field.send_keys(end_time)\n    time.sleep(1)\n\n@given('the user selects \"{day}\" from the days checkboxes with data-testid \"day-{day}\"')\ndef step_given_select_day(context, day):\n    day_checkbox = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, f\"[data-testid='day-{day.lower()}'] input\"))\n    )\n    if not day_checkbox.is_selected():\n        day_checkbox.click()\n    time.sleep(1)\n\n@when('the user clicks the \"Add to Timetable\" button with data-testid \"add-timetable-button\"')\ndef step_when_click_add_button(context):\n    add_button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='add-timetable-button']\"))\n    )\n    add_button.click()\n    time.sleep(1)\n\n@then('a new row is added to the timetable table with data-id \"timetable-row-{start_time}-{end_time}\"')\ndef step_then_verify_new_row_added(context, start_time, end_time):\n    new_row = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, f\"[data-id='timetable-row-{start_time}-{end_time}']\"))\n    )\n    assert new_row is not None, f\"Row with data-id 'timetable-row-{start_time}-{end_time}' not found.\"\n\n@then('the row displays \"{time_range}\" in the first column')\ndef step_then_verify_time_range(context, time_range):\n    new_row = is_row_present(context.driver, time_range.split(\" - \")[0], time_range.split(\" - \")[1])\n    assert new_row is not None, f\"Row with time range '{time_range}' not found.\"\n    first_column = new_row.find_element(By.TAG_NAME, \"td\")\n    assert time_range in first_column.text, f\"Expected '{time_range}' in first column, but got '{first_column.text}'.\"\n\n@then('the row displays \"{subject}\" in the {day} column')\ndef step_then_verify_subject_in_day_column(context, subject, day):\n    new_row = is_row_present(context.driver, \"11:00\", \"12:00\")  # Adjust start and end time dynamically if needed\n    day_index = [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"].index(day) + 1\n    day_column = new_row.find_elements(By.TAG_NAME, \"td\")[day_index]\n    assert subject in day_column.text, f\"Expected '{subject}' in {day} column, but got '{day_column.text}'.\"\n\n@then('the row is placed after the row with start time \"{start_time}\"')\ndef step_then_verify_row_order(context, start_time):\n    timetable_body = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='timetable'] tbody\")\n    rows = timetable_body.find_elements(By.TAG_NAME, \"tr\")\n    previous_row = None\n    for row in rows:\n        row_time = row.find_element(By.TAG_NAME, \"td\").text.split(\" - \")[0]\n        if row_time == start_time:\n            previous_row = row\n        elif previous_row:\n            assert \"11:00 - 12:00\" in row.find_element(By.TAG_NAME, \"td\").text, \"Row order is incorrect.\"\n            break\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
      },
      {
        "test_case": [
          "Feature: Insert timetable rows in chronological order based on start time\n  The system must ensure that when a user adds a new row to the timetable, it is inserted in chronological order based on the start time.\n\n\n  Scenario: [Edge] Add a new row with a start time between two existing rows\n    Given the timetable table contains rows with start times \"09:00\" and \"11:00\"\n    And the user enters \"History\" into the subject field with data-testid \"subject\"\n    And the user enters \"10:00\" into the start time field with data-testid \"start-time\"\n    And the user enters \"11:00\" into the end time field with data-testid \"end-time\"\n    And the user selects \"Wednesday\" from the days checkboxes with data-testid \"day-wednesday\"\n    When the user clicks the \"Add to Timetable\" button with data-testid \"add-timetable-button\"\n    Then a new row is added to the timetable table with data-id \"timetable-row-10:00-11:00\"\n    And the row displays \"10:00 - 11:00\" in the first column\n    And the row displays \"History\" in the Wednesday column\n    And the row is placed between the rows with start times \"09:00\" and \"11:00\"\n"
        ],
        "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"/Users/lingyao/PycharmProjects/E2ESD_data_construct/data/Ourdatas/LJY_TEST_NEW2/E2ESD_Bench_18/index.html\"\n\ndef is_row_between(context, start_time, end_time, row_time):\n    \"\"\"\n    Helper function to check if a row is placed between two existing rows based on start time.\n    \"\"\"\n    rows = context.driver.find_elements(By.CSS_SELECTOR, \"[data-testid='timetable'] tbody tr\")\n    row_times = [row.find_element(By.CSS_SELECTOR, \"td:first-child\").text.split(\" - \")[0] for row in rows]\n    return row_times.index(start_time) < row_times.index(row_time) < row_times.index(end_time)\n\n@given(\"the timetable table contains rows with start times \\\"09:00\\\" and \\\"11:00\\\"\")\ndef step_given_timetable_contains_rows(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(\n        \"file:///Users/lingyao/PycharmProjects/E2ESD_data_construct/data/Ourdatas/LJY_TEST_NEW2/E2ESD_Bench_18/index.html\")\n\n    WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='timetable'] tbody\"))\n    )\n\n    # 使用 innerHTML 插入两行数据（通过 JS 语句注入）\n    context.driver.execute_script(\"\"\"\n            document.querySelector(\"[data-testid='timetable'] tbody\").innerHTML = `\n                <tr><td>09:00 - 10:00</td><td></td><td></td><td></td><td></td><td></td><td></td></tr>\n                <tr><td>11:00 - 12:00</td><td></td><td></td><td></td><td></td><td></td><td></td></tr>\n            `;\n        \"\"\")\n\n    time.sleep(1)\n\n\n@given(\"the user enters \\\"History\\\" into the subject field with data-testid \\\"subject\\\"\")\ndef step_given_enter_subject(context):\n    subject_field = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='subject']\"))\n    )\n    subject_field.send_keys(\"History\")\n    time.sleep(1)\n\n@given(\"the user enters \\\"10:00\\\" into the start time field with data-testid \\\"start-time\\\"\")\ndef step_given_enter_start_time(context):\n    start_time_field = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='start-time']\"))\n    )\n    start_time_field.send_keys(\"10:00\")\n    time.sleep(1)\n\n@given(\"the user enters \\\"11:00\\\" into the end time field with data-testid \\\"end-time\\\"\")\ndef step_given_enter_end_time(context):\n    end_time_field = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='end-time']\"))\n    )\n    end_time_field.send_keys(\"11:00\")\n    time.sleep(1)\n\n@given(\"the user selects \\\"Wednesday\\\" from the days checkboxes with data-testid \\\"day-wednesday\\\"\")\ndef step_given_select_day(context):\n    day_checkbox = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='day-wednesday'] input[type='checkbox']\"))\n    )\n    day_checkbox.click()\n    time.sleep(1)\n\n@when(\"the user clicks the \\\"Add to Timetable\\\" button with data-testid \\\"add-timetable-button\\\"\")\ndef step_when_click_add_button(context):\n    add_button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='add-timetable-button']\"))\n    )\n    add_button.click()\n    time.sleep(1)\n\n@then(\"a new row is added to the timetable table with data-id \\\"timetable-row-10:00-11:00\\\"\")\ndef step_then_verify_row_added(context):\n    new_row = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-id='timetable-row-10:00-11:00']\"))\n    )\n    assert new_row is not None, \"New row was not added to the timetable.\"\n\n@then(\"the row displays \\\"10:00 - 11:00\\\" in the first column\")\ndef step_then_verify_row_time(context):\n    new_row = context.driver.find_element(By.CSS_SELECTOR, \"[data-id='timetable-row-10:00-11:00']\")\n    first_column = new_row.find_element(By.CSS_SELECTOR, \"td:first-child\")\n    assert first_column.text == \"10:00 - 11:00\", f\"Expected '10:00 - 11:00', but got '{first_column.text}'\"\n\n@then(\"the row displays \\\"History\\\" in the Wednesday column\")\ndef step_then_verify_row_subject(context):\n    new_row = context.driver.find_element(By.CSS_SELECTOR, \"[data-id='timetable-row-10:00-11:00']\")\n    wednesday_column = new_row.find_element(By.CSS_SELECTOR, \"td:nth-child(4)\")\n    assert wednesday_column.text == \"History\", f\"Expected 'History', but got '{wednesday_column.text}'\"\n\n@then(\"the row is placed between the rows with start times \\\"09:00\\\" and \\\"11:00\\\"\")\ndef step_then_verify_row_position(context):\n    assert is_row_between(context, \"09:00\", \"11:00\", \"10:00\"), \"Row is not placed between the rows with start times '09:00' and '11:00'.\"\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
      }
    ]
  },
  "8": {
    "requirement": {
      "description": "When the user clicks the 'Add to Timetable' button (located by data-testid 'add-timetable-button'), the system must reset the form fields to their default state after successfully adding or updating a timetable entry. This includes clearing the 'Subject' input field (located by data-testid 'subject'), resetting the 'Start Time' input field (located by data-testid 'start-time'), resetting the 'End Time' input field (located by data-testid 'end-time'), and ensuring that no checkboxes within the 'Days' checkbox group (located by data-testid 'days') are checked. The reset should occur only if all required fields are filled and at least one day is selected, ensuring a valid timetable entry is added to the table (located by data-testid 'timetable').",
      "related_elements": [
        "(By.CSS_SELECTOR, \"[data-testid='subject']\", \"Input field for the subject\")",
        "(By.CSS_SELECTOR, \"[data-testid='add-timetable-button']\", \"Button to add the entry to the timetable\")",
        "(By.CSS_SELECTOR, \"[data-testid='start-time']\", \"Input field for the start time\")",
        "(By.CSS_SELECTOR, \"[data-testid='days'] input[type='checkbox']\", \"Checkboxes for selecting days of the week\")",
        "(By.CSS_SELECTOR, \"[data-testid='day-monday'] input[type='checkbox']\", \"Checkbox for selecting Monday\")",
        "(By.CSS_SELECTOR, \"[data-testid='end-time']\", \"Input field for the end time\")"
      ]
    },
    "concise_requirement": "When the user clicks the 'Add to Timetable' button, the system must reset the form fields to their default state after successfully adding or updating a timetable entry.",
    "test_cases": [
      {
        "test_case": [
          "Feature: Form Reset After Timetable Entry\n  The system must reset the form fields to their default state after successfully adding or updating a timetable entry when the user clicks the \"Add to Timetable\" button.\n\n\n  Scenario: [Normal] Reset form fields after adding a new timetable entry\n    Given the \"Timetable Generator\" page is loaded\n    And the user enters \"Mathematics\" into the subject field with data-testid \"subject\"\n    And the user enters \"09:00\" into the start time field with data-testid \"start-time\"\n    And the user enters \"10:00\" into the end time field with data-testid \"end-time\"\n    And the user checks the \"Monday\" checkbox with data-testid \"day-monday\"\n    When the user clicks the \"Add to Timetable\" button with data-testid \"add-timetable-button\"\n    Then the subject field with data-testid \"subject\" should be empty\n    And the start time field with data-testid \"start-time\" should be empty\n    And the end time field with data-testid \"end-time\" should be empty\n    And no checkboxes in the days group with data-testid \"days\" should be checked\n"
        ],
        "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"/Users/lingyao/PycharmProjects/E2ESD_data_construct/data/Ourdatas/LJY_TEST_NEW2/E2ESD_Bench_18/index.html\"\n\n@given('the \"Timetable Generator\" page is loaded')\ndef step_given_page_loaded(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file:///{file_path}\")\n    time.sleep(1)  # Allow time for the page to load\n\n@given('the user enters \"Mathematics\" into the subject field with data-testid \"subject\"')\ndef step_given_enter_subject(context):\n    subject_field = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='subject']\"))\n    )\n    subject_field.clear()\n    subject_field.send_keys(\"Mathematics\")\n    time.sleep(1)\n\n@given('the user enters \"09:00\" into the start time field with data-testid \"start-time\"')\ndef step_given_enter_start_time(context):\n    start_time_field = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='start-time']\"))\n    )\n    start_time_field.clear()\n    start_time_field.send_keys(\"09:00\")\n    time.sleep(1)\n\n@given('the user enters \"10:00\" into the end time field with data-testid \"end-time\"')\ndef step_given_enter_end_time(context):\n    end_time_field = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='end-time']\"))\n    )\n    end_time_field.clear()\n    end_time_field.send_keys(\"10:00\")\n    time.sleep(1)\n\n@given('the user checks the \"Monday\" checkbox with data-testid \"day-monday\"')\ndef step_given_check_monday(context):\n    monday_checkbox = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='day-monday'] input[type='checkbox']\"))\n    )\n    if not monday_checkbox.is_selected():\n        monday_checkbox.click()\n    time.sleep(1)\n\n@when('the user clicks the \"Add to Timetable\" button with data-testid \"add-timetable-button\"')\ndef step_when_click_add_button(context):\n    add_button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='add-timetable-button']\"))\n    )\n    add_button.click()\n    time.sleep(1)\n\n@then('the subject field with data-testid \"subject\" should be empty')\ndef step_then_subject_field_empty(context):\n    subject_field = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='subject']\")\n    assert subject_field.get_attribute('value') == \"\", \"Subject field is not empty\"\n\n@then('the start time field with data-testid \"start-time\" should be empty')\ndef step_then_start_time_field_empty(context):\n    start_time_field = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='start-time']\")\n    assert start_time_field.get_attribute('value') == \"\", \"Start time field is not empty\"\n\n@then('the end time field with data-testid \"end-time\" should be empty')\ndef step_then_end_time_field_empty(context):\n    end_time_field = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='end-time']\")\n    assert end_time_field.get_attribute('value') == \"\", \"End time field is not empty\"\n\n@then('no checkboxes in the days group with data-testid \"days\" should be checked')\ndef step_then_no_days_checked(context):\n    days_checkboxes = context.driver.find_elements(By.CSS_SELECTOR, \"[data-testid='days'] input[type='checkbox']\")\n    for checkbox in days_checkboxes:\n        assert not checkbox.is_selected(), f\"Checkbox {checkbox.get_attribute('value')} is checked\"\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
      }
    ]
  },
  "9": {
    "requirement": {
      "description": "Upon loading the Timetable Generator webpage, the system must display an empty timetable table with the following specifications: The table should be located within a <table> element with the data-testid attribute set to 'timetable'. The table must include a <thead> section containing headers with data-testids 'time-header', 'monday-header', 'tuesday-header', 'wednesday-header', 'thursday-header', 'friday-header', and 'saturday-header', corresponding to the columns 'Time', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', and 'Saturday', respectively. The <tbody> section of the table must be empty, ensuring no rows are present with any data-id attributes. This setup ensures that the timetable is ready for user interaction without any pre-existing data.",
      "related_elements": [
        "(By.CSS_SELECTOR, \"[data-testid='thursday-header']\", \"Header for Thursday column in the timetable\")",
        "(\"By.CSS_SELECTOR\", \"[data-testid='time-header']\", \"Header for time column in the timetable\")",
        "(\"By.CSS_SELECTOR\", \"[data-testid='timetable']\", \"Timetable table that should be visible\")",
        "(By.CSS_SELECTOR, \"[data-testid='timetable'] tbody\", \"Body of the timetable table\")",
        "(\"By.CSS_SELECTOR\", \"[data-testid='wednesday-header']\", \"Header for Wednesday column in the timetable\")",
        "(By.CSS_SELECTOR, \"[data-testid='saturday-header']\", \"Header for Saturday column in the timetable\")",
        "(\"By.CSS_SELECTOR\", \"[data-testid='thursday-header']\", \"Header for Thursday column in the timetable\")",
        "(By.CSS_SELECTOR, \"[data-testid='tuesday-header']\", \"Header for Tuesday column in the timetable\")",
        "(By.CSS_SELECTOR, \"[data-testid='friday-header']\", \"Header for Friday column in the timetable\")",
        "(\"By.CSS_SELECTOR\", \"[data-testid='saturday-header']\", \"Header for Saturday column in the timetable\")",
        "(\"By.CSS_SELECTOR\", \"#timetable tbody\", \"Table body of the timetable that should be empty\")",
        "(By.CSS_SELECTOR, \"[data-testid='wednesday-header']\", \"Header for Wednesday column in the timetable\")",
        "(By.CSS_SELECTOR, \"[data-testid='monday-header']\", \"Header for Monday column in the timetable\")",
        "(\"By.CSS_SELECTOR\", \"[data-testid='monday-header']\", \"Header for Monday column in the timetable\")",
        "(By.CSS_SELECTOR, \"[data-testid='timetable']\", \"Timetable table on the webpage\")",
        "(\"By.CSS_SELECTOR\", \"[data-testid='friday-header']\", \"Header for Friday column in the timetable\")",
        "(\"By.CSS_SELECTOR\", \"[data-testid='tuesday-header']\", \"Header for Tuesday column in the timetable\")",
        "(By.CSS_SELECTOR, \"[data-testid='time-header']\", \"Header for time column in the timetable\")",
        "(By.CSS_SELECTOR, \"[data-id]\", \"Rows with data-id attributes in the timetable body\")"
      ]
    },
    "concise_requirement": "The system must display an empty timetable table with headers for 'Time', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', and 'Saturday' when the page loads.",
    "test_cases": [
      {
        "test_case": [
          "Feature: Display Empty Timetable Table on Page Load\n  The system must display an empty timetable table with headers for \"Time\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", and \"Saturday\" when the page loads.\n\n\n  Scenario: [Normal] Verify empty timetable table with headers on page load\n    Given the user navigates to the Timetable Generator webpage\n    Then the timetable table with data-testid \"timetable\" should be visible\n    And the table should have headers with data-testids \"time-header\", \"monday-header\", \"tuesday-header\", \"wednesday-header\", \"thursday-header\", \"friday-header\", and \"saturday-header\"\n    And the table body should be empty\n"
        ],
        "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"/Users/lingyao/PycharmProjects/E2ESD_data_construct/data/Ourdatas/LJY_TEST_NEW2/E2ESD_Bench_18/index.html\"\n\n@given(\"the user navigates to the Timetable Generator webpage\")\ndef step_given_user_navigates_to_webpage(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://{file_path}\")\n    time.sleep(1)\n\n@then('the timetable table with data-testid \"timetable\" should be visible')\ndef step_then_timetable_table_visible(context):\n    timetable = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='timetable']\"))\n    )\n    assert timetable.is_displayed(), \"Timetable table is not visible\"\n    time.sleep(1)\n\n@then('the table should have headers with data-testids \"time-header\", \"monday-header\", \"tuesday-header\", \"wednesday-header\", \"thursday-header\", \"friday-header\", and \"saturday-header\"')\ndef step_then_table_has_headers(context):\n    headers = [\"time-header\", \"monday-header\", \"tuesday-header\", \"wednesday-header\", \"thursday-header\", \"friday-header\", \"saturday-header\"]\n    for header in headers:\n        header_element = WebDriverWait(context.driver, 10).until(\n            EC.visibility_of_element_located((By.CSS_SELECTOR, f\"[data-testid='{header}']\"))\n        )\n        assert header_element.is_displayed(), f\"Header '{header}' is not visible\"\n    time.sleep(1)\n\n@then(\"the table body should be empty\")\ndef step_then_table_body_empty(context):\n    timetable_body = context.driver.find_element(By.CSS_SELECTOR, \"#timetable tbody\")\n    assert len(timetable_body.find_elements(By.TAG_NAME, \"tr\")) == 0, \"Table body is not empty\"\n    time.sleep(1)\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
      },
      {
        "test_case": [
          "Feature: Display Empty Timetable Table on Page Load\n  The system must display an empty timetable table with headers for \"Time\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", and \"Saturday\" when the page loads.\n\n\n  Scenario: [Error] Verify no unexpected data is present in the timetable table on page load\n    Given the user navigates to the Timetable Generator webpage\n    Then the timetable table with data-testid \"timetable\" should be visible\n    And the table should have headers with data-testids \"time-header\", \"monday-header\", \"tuesday-header\", \"wednesday-header\", \"thursday-header\", \"friday-header\", and \"saturday-header\"\n    And the table body should be empty\n    And no rows should exist with data-id attributes"
        ],
        "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"/Users/lingyao/PycharmProjects/E2ESD_data_construct/data/Ourdatas/LJY_TEST_NEW2/E2ESD_Bench_18/index.html\"\n\ndef is_table_body_empty(table_body):\n    return len(table_body.find_elements(By.TAG_NAME, \"tr\")) == 0\n\n@given('the user navigates to the Timetable Generator webpage')\ndef step_given_user_navigates_to_webpage(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file:///Users/lingyao/PycharmProjects/E2ESD_data_construct/data/Ourdatas/LJY_TEST_NEW2/E2ESD_Bench_18/index.html\")\n    time.sleep(1)\n\n@then('the timetable table with data-testid \"timetable\" should be visible')\ndef step_then_timetable_table_visible(context):\n    timetable = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='timetable']\"))\n    )\n    assert timetable.is_displayed(), \"Timetable table is not visible\"\n    time.sleep(1)\n\n@then('the table should have headers with data-testids \"time-header\", \"monday-header\", \"tuesday-header\", \"wednesday-header\", \"thursday-header\", \"friday-header\", and \"saturday-header\"')\ndef step_then_table_headers_exist(context):\n    headers = [\"time-header\", \"monday-header\", \"tuesday-header\", \"wednesday-header\", \"thursday-header\", \"friday-header\", \"saturday-header\"]\n    for header in headers:\n        header_element = WebDriverWait(context.driver, 10).until(\n            EC.visibility_of_element_located((By.CSS_SELECTOR, f\"[data-testid='{header}']\"))\n        )\n        assert header_element.is_displayed(), f\"Header '{header}' is not visible\"\n    time.sleep(1)\n\n@then('the table body should be empty')\ndef step_then_table_body_empty(context):\n    timetable_body = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='timetable'] tbody\")\n    assert is_table_body_empty(timetable_body), \"Table body is not empty\"\n    time.sleep(1)\n\n@then('no rows should exist with data-id attributes')\ndef step_then_no_rows_with_data_id(context):\n    timetable_body = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='timetable'] tbody\")\n    rows_with_data_id = timetable_body.find_elements(By.CSS_SELECTOR, \"[data-id]\")\n    assert len(rows_with_data_id) == 0, \"Rows with data-id attributes exist\"\n    time.sleep(1)\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
      }
    ]
  }
}