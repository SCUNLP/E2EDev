{
    "summary": {
        "overview": "The Compound Interest Calculator web application allows users to calculate the compound interest based on user-provided inputs such as principal amount, annual interest rate, number of years, and number of times interest is compounded per year. The application provides real-time feedback and results upon user interaction.",
        "predefined_options": "The application does not set predefined options for input fields; users must manually enter all values.",
        "external_resources": "The application uses Bootstrap for styling, which is linked externally via a CDN.",
        "external_js_libraries": "Bootstrap is used for styling, sourced from https://stackpath.bootstrapcdn.com/bootstrap/4.5.0/css/bootstrap.min.css."
    },
    "finegrained_rewith_test": {
        "1": {
            "requirement": {
                "description": "The system shall validate the 'Principal' input field (data-testid='principal') to ensure that it accepts only numeric values greater than 0. The input field should display the entered value if it meets the validation criteria. If the user enters a value less than or equal to 0, non-numeric characters, or leaves the field empty, the system shall prevent further calculations and display an alert message stating 'Please Enter Valid Values!!'. The validation should occur both when the user clicks the 'Calculate' button (data-testid='calculate-button') and when the user presses the 'Enter' key. The input field should allow decimal values (e.g., 0.01) as valid input."
            },
            "test_cases": [
                {
                    "test_case": [
                        "Feature: Validate Principal Input Field\n  The system shall accept a numeric value greater than 0 entered in the 'Principal' input field.\n\n\nScenario: [Normal] User enters a valid principal amount\n    Given the Compound Interest Calculator page is loaded\n    And the user sees the input field with data-testid \"principal\"\n    When the user enters \"1000\" into the input field with data-testid \"principal\"\n    Then the principal field with data-testid \"principal\" should have the value \"1000\""
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\n# Placeholder for the file path\nfile_path = \"index.html\"\n\n@given('the Compound Interest Calculator page is loaded')\ndef step_impl(context):\n    # Initialize the WebDriver\n    context.driver = webdriver.Chrome()\n    # Load the test page\n    context.driver.get(f\"file://index.html\")\n    # Maximize the browser window\n    context.driver.maximize_window()\n    # Wait for the page title to be visible\n    WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='title']\"))\n    )\n    time.sleep(1)\n\n@given('the user sees the input field with data-testid \"principal\"')\ndef step_impl(context):\n    # Ensure the principal input field is visible\n    principal_field = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='principal']\"))\n    )\n    assert principal_field.is_displayed(), \"Principal input field is not visible\"\n    time.sleep(1)\n\n@when('the user enters \"1000\" into the input field with data-testid \"principal\"')\ndef step_impl(context):\n    # Locate the principal input field\n    principal_field = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='principal']\")\n    # Clear any existing text and enter \"1000\"\n    principal_field.clear()\n    principal_field.send_keys(\"1000\")\n    time.sleep(1)\n\n@then('the principal field with data-testid \"principal\" should have the value \"1000\"')\ndef step_impl(context):\n    # Locate the principal input field\n    principal_field = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='principal']\")\n    # Verify the value entered is \"1000\"\n    assert principal_field.get_attribute(\"value\") == \"1000\", f\"Expected value '1000', but got '{principal_field.get_attribute('value')}'\"\n    time.sleep(1)\n\n# Teardown to close the browser after the test\ndef after_scenario(context, scenario):\n    if hasattr(context, 'driver'):\n        context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: Validate Principal Input Field\n  The system shall accept a numeric value greater than 0 entered in the 'Principal' input field.\n\n\nScenario: [Edge] User enters the minimum valid principal amount\n    Given the Compound Interest Calculator page is loaded\n    And the user sees the input field with data-testid \"principal\"\n    When the user enters \"0.01\" into the input field with data-testid \"principal\"\n    Then the principal field with data-testid \"principal\" should have the value \"0.01\""
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.common.keys import Keys\nimport time\n\n# Placeholder for the file path to dynamically load the test page\nfile_path = \"index.html\"\n\n@given(u'the Compound Interest Calculator page is loaded')\ndef step_impl(context):\n    # Initialize the Selenium WebDriver\n    context.driver = webdriver.Chrome()\n    # Navigate to the test page\n    context.driver.get(f\"file://index.html\")\n    # Wait for the page to load\n    time.sleep(2)\n\n@given(u'the user sees the input field with data-testid \"principal\"')\ndef step_impl(context):\n    # Verify the presence of the input field with data-testid \"principal\"\n    principal_field = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='principal']\")\n    assert principal_field.is_displayed(), \"Principal input field is not visible\"\n\n@when(u'the user enters \"0.01\" into the input field with data-testid \"principal\"')\ndef step_impl(context):\n    # Locate the input field and enter the value \"0.01\"\n    principal_field = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='principal']\")\n    principal_field.clear()\n    principal_field.send_keys(\"0.01\")\n\n@then(u'the principal field with data-testid \"principal\" should have the value \"0.01\"')\ndef step_impl(context):\n    # Verify that the input field contains the value \"0.01\"\n    principal_field = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='principal']\")\n    entered_value = principal_field.get_attribute(\"value\")\n    assert entered_value == \"0.01\", f\"Expected value '0.01', but got '{entered_value}'\"\n\n# Hook to close the browser after the test\ndef after_scenario(context, scenario):\n    # Close the browser to prevent resource leaks\n    if hasattr(context, 'driver'):\n        context.driver.quit()"
                }
            ]
        },
        "2": {
            "requirement": {
                "description": "The system shall validate the 'Interest Rate (%)' input field (data-testid: 'annual-interest-rate') to ensure it accepts only numeric values greater than 0. The input field must display the entered value immediately upon user input. The system shall handle the following scenarios: (1) Normal case: Accept valid numeric values greater than 0 (e.g., 5). (2) Edge case: Accept the smallest valid numeric value (e.g., 0.01). If the user enters an invalid value (e.g., non-numeric or less than or equal to 0), the system shall not allow the input and shall display an appropriate error message or alert. The validation must occur both when the user interacts with the input field directly and when the 'Calculate' button (data-testid: 'calculate-button') is clicked or the Enter key is pressed."
            },
            "test_cases": [
                {
                    "test_case": [
                        "Feature: Validate the 'Interest Rate (%)' input field to ensure it accepts numeric values greater than 0.\n\n  Background:\n    Given the user is on the \"Compound Interest Calculator\" page\n    And the page displays the title \"Compound Interest Calculator\" with data-testid \"title\"\n    And the input field for \"Interest Rate (%)\" is visible with data-testid \"annual-interest-rate\"\n\n\n  Scenario: [Normal] User enters a valid numeric value greater than 0 in the 'Interest Rate (%)' field\n    Given the \"Interest Rate (%)\" input field with data-testid \"annual-interest-rate\" is empty\n    When the user enters \"5\" into the \"Interest Rate (%)\" input field with data-testid \"annual-interest-rate\"\n    Then the value \"5\" is displayed in the \"Interest Rate (%)\" input field with data-testid \"annual-interest-rate\"\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\ndef is_visible(element):\n    return element.is_displayed()\n\n@given('the user is on the \"Compound Interest Calculator\" page')\ndef step_given_user_on_calculator_page(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)\n\n@given('the page displays the title \"Compound Interest Calculator\" with data-testid \"title\"')\ndef step_given_page_displays_title(context):\n    title_element = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='title']\"))\n    )\n    assert \"Compound Interest Calculator\" in title_element.text, f\"Expected 'Compound Interest Calculator' in '{title_element.text}'\"\n    time.sleep(1)\n\n@given('the input field for \"Interest Rate (%)\" is visible with data-testid \"annual-interest-rate\"')\ndef step_given_interest_rate_field_visible(context):\n    interest_rate_element = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='annual-interest-rate']\"))\n    )\n    assert is_visible(interest_rate_element), \"Interest Rate (%) field is not visible\"\n    time.sleep(1)\n\n@given('the \"Interest Rate (%)\" input field with data-testid \"annual-interest-rate\" is empty')\ndef step_given_interest_rate_field_empty(context):\n    interest_rate_element = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='annual-interest-rate']\")\n    assert interest_rate_element.get_attribute('value') == \"\", \"Interest Rate (%) field is not empty\"\n    time.sleep(1)\n\n@when('the user enters \"5\" into the \"Interest Rate (%)\" input field with data-testid \"annual-interest-rate\"')\ndef step_when_user_enters_interest_rate(context):\n    interest_rate_element = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='annual-interest-rate']\")\n    interest_rate_element.clear()\n    interest_rate_element.send_keys(\"5\")\n    time.sleep(1)\n\n@then('the value \"5\" is displayed in the \"Interest Rate (%)\" input field with data-testid \"annual-interest-rate\"')\ndef step_then_value_displayed_in_interest_rate_field(context):\n    interest_rate_element = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='annual-interest-rate']\")\n    assert interest_rate_element.get_attribute('value') == \"5\", f\"Expected '5' in Interest Rate (%) field, but got '{interest_rate_element.get_attribute('value')}'\"\n    time.sleep(1)\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: Validate the 'Interest Rate (%)' input field to ensure it accepts numeric values greater than 0.\n\n  Background:\n    Given the user is on the \"Compound Interest Calculator\" page\n    And the page displays the title \"Compound Interest Calculator\" with data-testid \"title\"\n    And the input field for \"Interest Rate (%)\" is visible with data-testid \"annual-interest-rate\"\n\n\n  Scenario: [Edge] User enters the smallest valid numeric value (0.01) in the 'Interest Rate (%)' field\n    Given the \"Interest Rate (%)\" input field with data-testid \"annual-interest-rate\" is empty\n    When the user enters \"0.01\" into the \"Interest Rate (%)\" input field with data-testid \"annual-interest-rate\"\n    Then the value \"0.01\" is displayed in the \"Interest Rate (%)\" input field with data-testid \"annual-interest-rate\"\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the user is on the \"Compound Interest Calculator\" page')\ndef step_user_on_calculator_page(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    context.driver.maximize_window()\n    time.sleep(1)\n\n@given('the page displays the title \"Compound Interest Calculator\" with data-testid \"title\"')\ndef step_page_displays_title(context):\n    title_element = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='title']\"))\n    )\n    assert title_element.text.strip() == \"Compound Interest Calculator\", \"Title does not match\"\n    time.sleep(1)\n\n@given('the input field for \"Interest Rate (%)\" is visible with data-testid \"annual-interest-rate\"')\ndef step_interest_rate_field_visible(context):\n    interest_rate_field = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='annual-interest-rate']\"))\n    )\n    assert interest_rate_field.is_displayed(), \"Interest Rate (%) input field is not visible\"\n    time.sleep(1)\n\n@given('the \"Interest Rate (%)\" input field with data-testid \"annual-interest-rate\" is empty')\ndef step_interest_rate_field_empty(context):\n    interest_rate_field = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='annual-interest-rate']\")\n    assert interest_rate_field.get_attribute(\"value\") == \"\", \"Interest Rate (%) input field is not empty\"\n    time.sleep(1)\n\n@when('the user enters \"0.01\" into the \"Interest Rate (%)\" input field with data-testid \"annual-interest-rate\"')\ndef step_user_enters_interest_rate(context):\n    interest_rate_field = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='annual-interest-rate']\")\n    interest_rate_field.clear()\n    interest_rate_field.send_keys(\"0.01\")\n    time.sleep(1)\n\n@then('the value \"0.01\" is displayed in the \"Interest Rate (%)\" input field with data-testid \"annual-interest-rate\"')\ndef step_value_displayed_in_interest_rate_field(context):\n    interest_rate_field = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='annual-interest-rate']\")\n    assert interest_rate_field.get_attribute(\"value\") == \"0.01\", \"The value in the Interest Rate (%) input field is not '0.01'\"\n    time.sleep(1)\n\n# Teardown to close the browser after the test\ndef after_scenario(context, scenario):\n    if hasattr(context, 'driver'):\n        context.driver.quit()"
                }
            ]
        },
        "3": {
            "requirement": {
                "description": "The system shall ensure that the 'Number of Years' input field, identified by the attribute data-testid='number-of-year', accepts only numeric values greater than 0. Upon entering a valid value, the input field should reflect the entered value accurately. The validation should occur both when the user clicks the 'Calculate' button (data-testid='calculate-button') and when the user presses the 'Enter' key while focused on any input field. If the entered value is not valid, an alert should be displayed with the message 'Please Enter Valid Values!!'."
            },
            "test_cases": [
                {
                    "test_case": [
                        "Feature: Validate 'Number of Years' input field for numeric values greater than 0\n\n\nScenario: [Normal] User enters a valid numeric value greater than 0 in 'Number of Years'\n    Given the Compound Interest Calculator page is loaded\n    And the user sees the input field with data-testid \"number-of-year\"\n    When the user enters \"10\" into the input field with data-testid \"number-of-year\"\n    Then the number of years field with data-testid \"number-of-year\" should have the value \"10\""
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the Compound Interest Calculator page is loaded')\ndef step_impl(context):\n    # Initialize the WebDriver and load the test page\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    context.driver.maximize_window()\n    time.sleep(1)  # Allow the page to load fully\n\n@given('the user sees the input field with data-testid \"number-of-year\"')\ndef step_impl(context):\n    # Wait for the input field to be visible\n    WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='number-of-year']\"))\n    )\n    input_field = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='number-of-year']\")\n    assert input_field.is_displayed(), \"The 'Number of Years' input field is not visible.\"\n\n@when('the user enters \"10\" into the input field with data-testid \"number-of-year\"')\ndef step_impl(context):\n    # Locate the input field and enter the value \"10\"\n    input_field = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='number-of-year']\")\n    input_field.clear()\n    input_field.send_keys(\"10\")\n    time.sleep(1)  # Allow time for the input to be processed\n\n@then('the number of years field with data-testid \"number-of-year\" should have the value \"10\"')\ndef step_impl(context):\n    # Verify that the input field contains the value \"10\"\n    input_field = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='number-of-year']\")\n    entered_value = input_field.get_attribute(\"value\")\n    assert entered_value == \"10\", f\"Expected value '10', but got '{entered_value}'\"\n\n# Teardown to close the browser after the test\ndef after_scenario(context, scenario):\n    if hasattr(context, 'driver'):\n        context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: Validate 'Number of Years' input field for numeric values greater than 0\n\n\nScenario: [Edge] User enters '1' in 'Number of Years' field\n    Given the Compound Interest Calculator page is loaded\n    And the user sees the input field with data-testid \"number-of-year\"\n    When the user enters \"1\" into the input field with data-testid \"number-of-year\"\n    Then the number of years field with data-testid \"number-of-year\" should have the value \"1\""
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given(\"the Compound Interest Calculator page is loaded\")\ndef step_given_page_is_loaded(context):\n    # Initialize the Selenium WebDriver\n    context.driver = webdriver.Chrome()\n    # Load the test page dynamically\n    context.driver.get(f\"file://index.html\")\n    # Maximize the browser window\n    context.driver.maximize_window()\n    # Wait for the page title to be visible\n    WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='title']\"))\n    )\n    time.sleep(1)  # Improve test robustness\n\n@given(\"the user sees the input field with data-testid \\\"number-of-year\\\"\")\ndef step_given_user_sees_input_field(context):\n    # Verify the presence of the input field\n    input_field = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='number-of-year']\"))\n    )\n    assert input_field.is_displayed(), \"The 'Number of Years' input field is not visible.\"\n    time.sleep(1)\n\n@when(\"the user enters \\\"1\\\" into the input field with data-testid \\\"number-of-year\\\"\")\ndef step_when_user_enters_value(context):\n    # Locate the input field and enter the value\n    input_field = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='number-of-year']\"))\n    )\n    input_field.clear()\n    input_field.send_keys(\"1\")\n    time.sleep(1)\n\n@then(\"the number of years field with data-testid \\\"number-of-year\\\" should have the value \\\"1\\\"\")\ndef step_then_field_should_have_value(context):\n    # Verify the value of the input field\n    input_field = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='number-of-year']\"))\n    )\n    assert input_field.get_attribute(\"value\") == \"1\", f\"Expected value '1', but got '{input_field.get_attribute('value')}'\"\n    time.sleep(1)\n\n# Teardown to close the browser after the test\ndef after_scenario(context, scenario):\n    if hasattr(context, 'driver'):\n        context.driver.quit()"
                }
            ]
        },
        "4": {
            "requirement": {
                "description": "The system shall validate and accept a numeric value greater than 0 entered in the 'Number of Times in a Single Year' input field (data-testid='number-of-times-in-year'). The input field shall allow users to type numeric values directly, and the entered value shall be reflected in the field upon submission. The system shall display an alert message ('Please Enter Valid Values!!') if the entered value is invalid (non-numeric, negative, or zero). The validation shall occur both when the user clicks the 'Calculate' button (data-testid='calculate-button') and when the user presses the 'Enter' key. The input field shall support edge cases, including the minimum valid value of '1'."
            },
            "test_cases": [
                {
                    "test_case": [
                        "Feature: Validate input for 'Number of Times in a Single Year' field\n  The system shall accept a numeric value greater than 0 entered in the 'Number of Times in a Single Year' input field.\n\n\nScenario: [Normal] User enters a valid numeric value greater than 0 in 'Number of Times in a Single Year'\n    Given the Compound Interest Calculator page is loaded\n    And the user sees the input field with data-testid \"number-of-times-in-year\"\n    When the user enters \"4\" into the input field with data-testid \"number-of-times-in-year\"\n    Then the number of times in a single year field with data-testid \"number-of-times-in-year\" should have the value \"4\"\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the Compound Interest Calculator page is loaded')\ndef step_impl(context):\n    # Initialize the WebDriver and load the test page\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    context.driver.maximize_window()\n    time.sleep(1)  # Allow the page to fully load\n\n@then('the browser is closed')\ndef step_impl(context):\n    # Close the browser driver\n    context.driver.quit()\n\n@given('the user sees the input field with data-testid \"number-of-times-in-year\"')\ndef step_impl(context):\n    # Wait for the input field to be visible\n    WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='number-of-times-in-year']\"))\n    )\n    time.sleep(1)\n\n@when('the user enters \"{value}\" into the input field with data-testid \"number-of-times-in-year\"')\ndef step_impl(context, value):\n    # Locate the input field and enter the specified value\n    input_field = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='number-of-times-in-year']\")\n    input_field.clear()\n    input_field.send_keys(value)\n    time.sleep(1)\n\n@then('the number of times in a single year field with data-testid \"number-of-times-in-year\" should have the value \"{expected_value}\"')\ndef step_impl(context, expected_value):\n    # Verify that the input field contains the expected value\n    input_field = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='number-of-times-in-year']\")\n    actual_value = input_field.get_attribute(\"value\")\n    assert actual_value == expected_value, f\"Expected value '{expected_value}', but got '{actual_value}'\"\n    time.sleep(1)"
                },
                {
                    "test_case": [
                        "Feature: Validate input for 'Number of Times in a Single Year' field\n  The system shall accept a numeric value greater than 0 entered in the 'Number of Times in a Single Year' input field.\n\n\nScenario: [Edge] User enters the minimum valid numeric value '1' in 'Number of Times in a Single Year'\n    Given the Compound Interest Calculator page is loaded\n    And the user sees the input field with data-testid \"number-of-times-in-year\"\n    When the user enters \"1\" into the input field with data-testid \"number-of-times-in-year\"\n    Then the number of times in a single year field with data-testid \"number-of-times-in-year\" should have the value \"1\""
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\n# Placeholder for the file path\nfile_path = \"index.html\"\n\n@given('the Compound Interest Calculator page is loaded')\ndef step_impl(context):\n    # Initialize the WebDriver and load the test page\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    context.driver.maximize_window()\n    time.sleep(1)  # Allow the page to load completely\n\n@given('the user sees the input field with data-testid \"number-of-times-in-year\"')\ndef step_impl(context):\n    # Wait for the input field to be visible\n    WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='number-of-times-in-year']\"))\n    )\n    input_field = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='number-of-times-in-year']\")\n    assert input_field.is_displayed(), \"The input field with data-testid 'number-of-times-in-year' is not visible.\"\n\n@when('the user enters \"1\" into the input field with data-testid \"number-of-times-in-year\"')\ndef step_impl(context):\n    # Locate the input field and enter the value \"1\"\n    input_field = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='number-of-times-in-year']\")\n    input_field.clear()\n    input_field.send_keys(\"1\")\n    time.sleep(1)  # Allow time for the input to be processed\n\n@then('the number of times in a single year field with data-testid \"number-of-times-in-year\" should have the value \"1\"')\ndef step_impl(context):\n    # Verify that the input field contains the value \"1\"\n    input_field = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='number-of-times-in-year']\")\n    actual_value = input_field.get_attribute(\"value\")\n    assert actual_value == \"1\", f\"Expected value '1', but got '{actual_value}'\"\n\n# Teardown to close the browser after the test\ndef after_scenario(context, scenario):\n    if hasattr(context, 'driver'):\n        context.driver.quit()"
                }
            ]
        },
        "5": {
            "requirement": {
                "description": "The web application shall provide a Compound Interest Calculator that allows users to input the principal amount, annual interest rate, number of years, and number of times interest is compounded per year. The user can initiate the calculation by either clicking the 'Calculate' button or pressing the 'Enter' key. The system shall validate that all inputs are positive numeric values greater than zero. If any input is invalid, an alert with the message 'Please Enter Valid Values!!' shall be displayed. Upon valid input, the system shall compute the compound interest using the formula: CI = principal * (1 + (interest / (ntime * 100)))^(ntime * nyear), round the result to two decimal places, and update the 'Result' section with data-testid 'result-value' to display the calculated value. The UI elements involved include: 'Principal' input field with data-testid 'principal', 'Interest rate (%)' input field with data-testid 'annual-interest-rate', 'Number of Years' input field with data-testid 'number-of-year', 'Number of Times in a Single Year' input field with data-testid 'number-of-times-in-year', 'Calculate' button with data-testid 'calculate-button', and 'Result' section with data-testid 'result-value'."
            },
            "test_cases": [
                {
                    "test_case": [
                        "Feature: Compound Interest Calculation\n  The system shall compute the compound interest based on the provided inputs and display the result in the \"Result\" section when the user clicks the \"Calculate\" button.\n\n\n  Scenario: [Normal] Calculate compound interest with valid inputs\n    Given the \"Compound Interest Calculator\" page is loaded\n    And the user enters \"1000\" into the \"Principal\" field with data-testid \"principal\"\n    And the user enters \"5\" into the \"Interest rate (%)\" field with data-testid \"annual-interest-rate\"\n    And the user enters \"10\" into the \"Number of Years\" field with data-testid \"number-of-year\"\n    And the user enters \"4\" into the \"Number of Times in a Single Year\" field with data-testid \"number-of-times-in-year\"\n    When the user clicks the \"Calculate\" button with data-testid \"calculate-button\"\n    Then the \"Result\" section with data-testid \"result-value\" should display \"1643.62\"\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the \"Compound Interest Calculator\" page is loaded')\ndef step_impl(context):\n    # Initialize the Selenium WebDriver\n    context.driver = webdriver.Chrome()\n    # Load the test page\n    context.driver.get(f\"file://index.html\")\n    # Maximize the browser window\n    context.driver.maximize_window()\n    # Wait for the title element to be visible\n    WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='title']\"))\n    )\n    time.sleep(1)\n\n@given('the user enters \"{value}\" into the \"Principal\" field with data-testid \"principal\"')\ndef step_impl(context, value):\n    principal_field = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='principal']\"))\n    )\n    principal_field.clear()\n    principal_field.send_keys(value)\n    time.sleep(1)\n\n@given('the user enters \"{value}\" into the \"Interest rate (%)\" field with data-testid \"annual-interest-rate\"')\ndef step_impl(context, value):\n    interest_rate_field = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='annual-interest-rate']\"))\n    )\n    interest_rate_field.clear()\n    interest_rate_field.send_keys(value)\n    time.sleep(1)\n\n@given('the user enters \"{value}\" into the \"Number of Years\" field with data-testid \"number-of-year\"')\ndef step_impl(context, value):\n    years_field = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='number-of-year']\"))\n    )\n    years_field.clear()\n    years_field.send_keys(value)\n    time.sleep(1)\n\n@given('the user enters \"{value}\" into the \"Number of Times in a Single Year\" field with data-testid \"number-of-times-in-year\"')\ndef step_impl(context, value):\n    times_in_year_field = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='number-of-times-in-year']\"))\n    )\n    times_in_year_field.clear()\n    times_in_year_field.send_keys(value)\n    time.sleep(1)\n\n@when('the user clicks the \"Calculate\" button with data-testid \"calculate-button\"')\ndef step_impl(context):\n    calculate_button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='calculate-button']\"))\n    )\n    calculate_button.click()\n    time.sleep(1)\n\n@then('the \"Result\" section with data-testid \"result-value\" should display \"{expected_result}\"')\ndef step_impl(context, expected_result):\n    result_element = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='result-value']\"))\n    )\n    actual_result = result_element.text.strip()\n    assert actual_result == expected_result, f\"Expected result '{expected_result}', but got '{actual_result}'\"\n    time.sleep(1)\n\n# Teardown after all steps\ndef after_scenario(context, scenario):\n    if hasattr(context, 'driver'):\n        context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: Compound Interest Calculation\n  The system shall compute the compound interest based on the provided inputs and display the result in the \"Result\" section when the user clicks the \"Calculate\" button.\n\n\n  Scenario: [Edge] Calculate compound interest with the minimum valid inputs\n    Given the \"Compound Interest Calculator\" page is loaded\n    And the user enters \"1\" into the \"Principal\" field with data-testid \"principal\"\n    And the user enters \"0.01\" into the \"Interest rate (%)\" field with data-testid \"annual-interest-rate\"\n    And the user enters \"1\" into the \"Number of Years\" field with data-testid \"number-of-year\"\n    And the user enters \"1\" into the \"Number of Times in a Single Year\" field with data-testid \"number-of-times-in-year\"\n    When the user clicks the \"Calculate\" button with data-testid \"calculate-button\"\n    Then the \"Result\" section with data-testid \"result-value\" should display \"1.00\"\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\ndef is_visible(element):\n    return element.is_displayed()\n\n@given('the \"Compound Interest Calculator\" page is loaded')\ndef step_given_page_loaded(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)\n\n@given('the user enters \"{value}\" into the \"Principal\" field with data-testid \"principal\"')\ndef step_given_enter_principal(context, value):\n    principal_input = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='principal']\"))\n    )\n    principal_input.clear()\n    principal_input.send_keys(value)\n    time.sleep(1)\n\n@given('the user enters \"{value}\" into the \"Interest rate (%)\" field with data-testid \"annual-interest-rate\"')\ndef step_given_enter_interest_rate(context, value):\n    interest_rate_input = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='annual-interest-rate']\"))\n    )\n    interest_rate_input.clear()\n    interest_rate_input.send_keys(value)\n    time.sleep(1)\n\n@given('the user enters \"{value}\" into the \"Number of Years\" field with data-testid \"number-of-year\"')\ndef step_given_enter_number_of_years(context, value):\n    number_of_years_input = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='number-of-year']\"))\n    )\n    number_of_years_input.clear()\n    number_of_years_input.send_keys(value)\n    time.sleep(1)\n\n@given('the user enters \"{value}\" into the \"Number of Times in a Single Year\" field with data-testid \"number-of-times-in-year\"')\ndef step_given_enter_number_of_times(context, value):\n    number_of_times_input = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='number-of-times-in-year']\"))\n    )\n    number_of_times_input.clear()\n    number_of_times_input.send_keys(value)\n    time.sleep(1)\n\n@when('the user clicks the \"Calculate\" button with data-testid \"calculate-button\"')\ndef step_when_click_calculate(context):\n    calculate_button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='calculate-button']\"))\n    )\n    calculate_button.click()\n    time.sleep(1)\n\n@then('the \"Result\" section with data-testid \"result-value\" should display \"{expected_result}\"')\ndef step_then_check_result(context, expected_result):\n    result_value = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='result-value']\"))\n    )\n    actual_result = result_value.text.strip()\n    assert expected_result == actual_result, f\"Expected result '{expected_result}', but got '{actual_result}'\"\n    time.sleep(1)\n    context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: Compound Interest Calculation\n  The system shall compute the compound interest based on the provided inputs and display the result in the \"Result\" section when the user clicks the \"Calculate\" button.\n\n\n  Scenario: [Edge] Calculate compound interest with a very large principal amount\n    Given the \"Compound Interest Calculator\" page is loaded\n    And the user enters \"1000000000\" into the \"Principal\" field with data-testid \"principal\"\n    And the user enters \"10\" into the \"Interest rate (%)\" field with data-testid \"annual-interest-rate\"\n    And the user enters \"5\" into the \"Number of Years\" field with data-testid \"number-of-year\"\n    And the user enters \"12\" into the \"Number of Times in a Single Year\" field with data-testid \"number-of-times-in-year\"\n    When the user clicks the \"Calculate\" button with data-testid \"calculate-button\"\n    Then the \"Result\" section with data-testid \"result-value\" should display \"1645308934.78\"\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\ndef is_expanded(element):\n    aria = element.get_attribute(\"aria-expanded\")\n    if aria is not None:\n        return aria == \"true\"\n\n    class_list = element.get_attribute(\"class\").split()\n    if any(cls in class_list for cls in [\"expanded\", \"open\", \"show\"]):\n        return True\n\n    data_expanded = element.get_attribute(\"data-expanded\")\n    if data_expanded is not None:\n        return data_expanded == \"true\"\n\n    return element.is_displayed()\n\ndef is_collapsed(element):\n    aria = element.get_attribute(\"aria-expanded\")\n    if aria is not None and aria.lower() == \"false\":\n        return True\n\n    class_attr = element.get_attribute(\"class\") or \"\"\n    class_list = class_attr.split()\n    if \"collapsed\" in class_list:\n        return True\n\n    data_expanded = element.get_attribute(\"data-expanded\")\n    if data_expanded is not None and data_expanded.lower() == \"false\":\n        return True\n\n    style = element.get_attribute(\"style\") or \"\"\n    if \"display: none\" in style or \"visibility: hidden\" in style or \"height: 0\" in style:\n        return True\n\n    return not element.is_displayed()\n\n@given('the \"Compound Interest Calculator\" page is loaded')\ndef step_impl(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)\n\n@given('the user enters \"{value}\" into the \"Principal\" field with data-testid \"principal\"')\ndef step_impl(context, value):\n    principal_input = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='principal']\"))\n    )\n    principal_input.clear()\n    principal_input.send_keys(value)\n    time.sleep(1)\n\n@given('the user enters \"{value}\" into the \"Interest rate (%)\" field with data-testid \"annual-interest-rate\"')\ndef step_impl(context, value):\n    interest_input = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='annual-interest-rate']\"))\n    )\n    interest_input.clear()\n    interest_input.send_keys(value)\n    time.sleep(1)\n\n@given('the user enters \"{value}\" into the \"Number of Years\" field with data-testid \"number-of-year\"')\ndef step_impl(context, value):\n    years_input = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='number-of-year']\"))\n    )\n    years_input.clear()\n    years_input.send_keys(value)\n    time.sleep(1)\n\n@given('the user enters \"{value}\" into the \"Number of Times in a Single Year\" field with data-testid \"number-of-times-in-year\"')\ndef step_impl(context, value):\n    times_input = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='number-of-times-in-year']\"))\n    )\n    times_input.clear()\n    times_input.send_keys(value)\n    time.sleep(1)\n\n@when('the user clicks the \"Calculate\" button with data-testid \"calculate-button\"')\ndef step_impl(context):\n    calculate_button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='calculate-button']\"))\n    )\n    calculate_button.click()\n    time.sleep(1)\n\n@then('the \"Result\" section with data-testid \"result-value\" should display \"{expected_result}\"')\ndef step_impl(context, expected_result):\n    result_value = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='result-value']\"))\n    )\n    actual_result = result_value.text.strip()\n    assert expected_result == actual_result, f\"Expected result '{expected_result}', but got '{actual_result}'\"\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: Compound Interest Calculation\n  The system shall compute the compound interest based on the provided inputs and display the result in the \"Result\" section when the user clicks the \"Calculate\" button.\n\n\n  Scenario: [Error] Display an error when any input field is empty\n    Given the \"Compound Interest Calculator\" page is loaded\n    And the user leaves the \"Principal\" field with data-testid \"principal\" empty\n    And the user enters \"5\" into the \"Interest rate (%)\" field with data-testid \"annual-interest-rate\"\n    And the user enters \"10\" into the \"Number of Years\" field with data-testid \"number-of-year\"\n    And the user enters \"4\" into the \"Number of Times in a Single Year\" field with data-testid \"number-of-times-in-year\"\n    When the user clicks the \"Calculate\" button with data-testid \"calculate-button\"\n    Then an alert should be displayed with the message \"Please Enter Valid Values!!\"\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n# Background setup\n@given('the \"Compound Interest Calculator\" page is loaded')\ndef step_given_page_is_loaded(context):\n    context.driver = webdriver.Chrome()  # Initialize the WebDriver\n    context.driver.get(f\"file://index.html\")  # Load the test page\n    WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='title']\"))\n    )\n    time.sleep(1)  # Allow the page to fully load\n\n@given('the user leaves the \"Principal\" field with data-testid \"principal\" empty')\ndef step_given_principal_field_empty(context):\n    principal_field = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='principal']\")\n    principal_field.clear()  # Ensure the field is empty\n    time.sleep(1)\n\n@given('the user enters \"5\" into the \"Interest rate (%)\" field with data-testid \"annual-interest-rate\"')\ndef step_given_enter_interest_rate(context):\n    interest_rate_field = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='annual-interest-rate']\")\n    interest_rate_field.clear()\n    interest_rate_field.send_keys(\"5\")  # Enter the interest rate\n    time.sleep(1)\n\n@given('the user enters \"10\" into the \"Number of Years\" field with data-testid \"number-of-year\"')\ndef step_given_enter_number_of_years(context):\n    years_field = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='number-of-year']\")\n    years_field.clear()\n    years_field.send_keys(\"10\")  # Enter the number of years\n    time.sleep(1)\n\n@given('the user enters \"4\" into the \"Number of Times in a Single Year\" field with data-testid \"number-of-times-in-year\"')\ndef step_given_enter_number_of_times(context):\n    times_field = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='number-of-times-in-year']\")\n    times_field.clear()\n    times_field.send_keys(\"4\")  # Enter the number of times in a year\n    time.sleep(1)\n\n@when('the user clicks the \"Calculate\" button with data-testid \"calculate-button\"')\ndef step_when_click_calculate_button(context):\n    calculate_button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='calculate-button']\"))\n    )\n    calculate_button.click()  # Click the calculate button\n    time.sleep(1)\n\n@then('an alert should be displayed with the message \"Please Enter Valid Values!!\"')\ndef step_then_alert_displayed(context):\n    WebDriverWait(context.driver, 10).until(EC.alert_is_present())  # Wait for the alert\n    alert = context.driver.switch_to.alert\n    assert alert.text == \"Please Enter Valid Values!!\", f\"Unexpected alert message: {alert.text}\"\n    alert.accept()  # Close the alert\n    time.sleep(1)\n\n# Teardown\ndef after_scenario(context, scenario):\n    context.driver.quit()  # Close the browser"
                },
                {
                    "test_case": [
                        "Feature: Compound Interest Calculation\n  The system shall compute the compound interest based on the provided inputs and display the result in the \"Result\" section when the user clicks the \"Calculate\" button.\n\n\n  Scenario: [Error] Display an error when any input field contains a negative value\n    Given the \"Compound Interest Calculator\" page is loaded\n    And the user enters \"-1000\" into the \"Principal\" field with data-testid \"principal\"\n    And the user enters \"5\" into the \"Interest rate (%)\" field with data-testid \"annual-interest-rate\"\n    And the user enters \"10\" into the \"Number of Years\" field with data-testid \"number-of-year\"\n    And the user enters \"4\" into the \"Number of Times in a Single Year\" field with data-testid \"number-of-times-in-year\"\n    When the user clicks the \"Calculate\" button with data-testid \"calculate-button\"\n    Then an alert should be displayed with the message \"Please Enter Valid Values!!\"\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the \"Compound Interest Calculator\" page is loaded')\ndef step_impl(context):\n    # Initialize the WebDriver and load the test page\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='title']\"))\n    )\n    time.sleep(1)\n\n@given('the user enters \"{value}\" into the \"Principal\" field with data-testid \"principal\"')\ndef step_impl(context, value):\n    principal_field = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='principal']\"))\n    )\n    principal_field.clear()\n    principal_field.send_keys(value)\n    time.sleep(1)\n\n@given('the user enters \"{value}\" into the \"Interest rate (%)\" field with data-testid \"annual-interest-rate\"')\ndef step_impl(context, value):\n    interest_rate_field = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='annual-interest-rate']\"))\n    )\n    interest_rate_field.clear()\n    interest_rate_field.send_keys(value)\n    time.sleep(1)\n\n@given('the user enters \"{value}\" into the \"Number of Years\" field with data-testid \"number-of-year\"')\ndef step_impl(context, value):\n    years_field = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='number-of-year']\"))\n    )\n    years_field.clear()\n    years_field.send_keys(value)\n    time.sleep(1)\n\n@given('the user enters \"{value}\" into the \"Number of Times in a Single Year\" field with data-testid \"number-of-times-in-year\"')\ndef step_impl(context, value):\n    times_in_year_field = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='number-of-times-in-year']\"))\n    )\n    times_in_year_field.clear()\n    times_in_year_field.send_keys(value)\n    time.sleep(1)\n\n@when('the user clicks the \"Calculate\" button with data-testid \"calculate-button\"')\ndef step_impl(context):\n    calculate_button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='calculate-button']\"))\n    )\n    calculate_button.click()\n    time.sleep(1)\n\n@then('an alert should be displayed with the message \"Please Enter Valid Values!!\"')\ndef step_impl(context):\n    WebDriverWait(context.driver, 10).until(EC.alert_is_present())\n    alert = context.driver.switch_to.alert\n    assert alert.text == \"Please Enter Valid Values!!\", f\"Expected alert message 'Please Enter Valid Values!!', but got '{alert.text}'\"\n    alert.accept()\n    time.sleep(1)\n\n# Teardown after all tests\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: Compound Interest Calculation\n  The system shall compute the compound interest based on the provided inputs and display the result in the \"Result\" section when the user clicks the \"Calculate\" button.\n\n\n  Scenario: [Error] Display an error when any input field contains a non-numeric value\n    Given the \"Compound Interest Calculator\" page is loaded\n    And the user enters \"abc\" into the \"Principal\" field with data-testid \"principal\"\n    And the user enters \"5\" into the \"Interest rate (%)\" field with data-testid \"annual-interest-rate\"\n    And the user enters \"10\" into the \"Number of Years\" field with data-testid \"number-of-year\"\n    And the user enters \"4\" into the \"Number of Times in a Single Year\" field with data-testid \"number-of-times-in-year\"\n    When the user clicks the \"Calculate\" button with data-testid \"calculate-button\"\n    Then an alert should be displayed with the message \"Please Enter Valid Values!!\"\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the \"Compound Interest Calculator\" page is loaded')\ndef step_impl(context):\n    # Initialize the WebDriver and load the test page\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    context.driver.maximize_window()\n    time.sleep(1)  # Allow the page to fully load\n\n@given('the user enters \"{value}\" into the \"Principal\" field with data-testid \"principal\"')\ndef step_impl(context, value):\n    principal_field = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='principal']\"))\n    )\n    principal_field.clear()\n    principal_field.send_keys(value)\n    time.sleep(1)\n\n@given('the user enters \"{value}\" into the \"Interest rate (%)\" field with data-testid \"annual-interest-rate\"')\ndef step_impl(context, value):\n    interest_rate_field = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='annual-interest-rate']\"))\n    )\n    interest_rate_field.clear()\n    interest_rate_field.send_keys(value)\n    time.sleep(1)\n\n@given('the user enters \"{value}\" into the \"Number of Years\" field with data-testid \"number-of-year\"')\ndef step_impl(context, value):\n    years_field = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='number-of-year']\"))\n    )\n    years_field.clear()\n    years_field.send_keys(value)\n    time.sleep(1)\n\n@given('the user enters \"{value}\" into the \"Number of Times in a Single Year\" field with data-testid \"number-of-times-in-year\"')\ndef step_impl(context, value):\n    times_in_year_field = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='number-of-times-in-year']\"))\n    )\n    times_in_year_field.clear()\n    times_in_year_field.send_keys(value)\n    time.sleep(1)\n\n@when('the user clicks the \"Calculate\" button with data-testid \"calculate-button\"')\ndef step_impl(context):\n    calculate_button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='calculate-button']\"))\n    )\n    calculate_button.click()\n    time.sleep(1)\n\n@then('an alert should be displayed with the message \"Please Enter Valid Values!!\"')\ndef step_impl(context):\n    WebDriverWait(context.driver, 10).until(EC.alert_is_present())\n    alert = context.driver.switch_to.alert\n    assert alert.text == \"Please Enter Valid Values!!\", f\"Expected alert message 'Please Enter Valid Values!!', but got '{alert.text}'\"\n    alert.accept()\n    time.sleep(1)\n\n# Teardown to close the browser after the test\ndef after_scenario(context, scenario):\n    if hasattr(context, 'driver'):\n        context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: Compound Interest Calculation\n  The system shall compute the compound interest based on the provided inputs and display the result in the \"Result\" section when the user clicks the \"Calculate\" button.\n\n\n  Scenario: [Normal] Calculate compound interest using the Enter key\n    Given the \"Compound Interest Calculator\" page is loaded\n    And the user enters \"2000\" into the \"Principal\" field with data-testid \"principal\"\n    And the user enters \"3\" into the \"Interest rate (%)\" field with data-testid \"annual-interest-rate\"\n    And the user enters \"15\" into the \"Number of Years\" field with data-testid \"number-of-year\"\n    And the user enters \"2\" into the \"Number of Times in a Single Year\" field with data-testid \"number-of-times-in-year\"\n    When the user presses the \"Enter\" key\n    Then the \"Result\" section with data-testid \"result-value\" should display \"3126.16\""
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.keys import Keys\nfrom selenium.webdriver.common.by import By\nimport time\n\nfile_path = \"index.html\"  # Replace with the actual file path to the HTML file\n\n@given('the \"Compound Interest Calculator\" page is loaded')\ndef step_impl(context):\n    context.driver = webdriver.Chrome()  # Initialize the WebDriver\n    context.driver.get(f\"file://index.html\")  # Load the test page\n    time.sleep(2)  # Wait for the page to load\n\n@given('the user enters \"2000\" into the \"Principal\" field with data-testid \"principal\"')\ndef step_impl(context):\n    principal_field = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='principal']\")\n    principal_field.clear()\n    principal_field.send_keys(\"2000\")\n\n@given('the user enters \"3\" into the \"Interest rate (%)\" field with data-testid \"annual-interest-rate\"')\ndef step_impl(context):\n    interest_rate_field = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='annual-interest-rate']\")\n    interest_rate_field.clear()\n    interest_rate_field.send_keys(\"3\")\n\n@given('the user enters \"15\" into the \"Number of Years\" field with data-testid \"number-of-year\"')\ndef step_impl(context):\n    years_field = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='number-of-year']\")\n    years_field.clear()\n    years_field.send_keys(\"15\")\n\n@given('the user enters \"2\" into the \"Number of Times in a Single Year\" field with data-testid \"number-of-times-in-year\"')\ndef step_impl(context):\n    times_in_year_field = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='number-of-times-in-year']\")\n    times_in_year_field.clear()\n    times_in_year_field.send_keys(\"2\")\n\n@when('the user presses the \"Enter\" key')\ndef step_impl(context):\n    body = context.driver.find_element(By.TAG_NAME, \"body\")\n    body.send_keys(Keys.ENTER)\n    time.sleep(2)  # Wait for the calculation to complete\n\n@then('the \"Result\" section with data-testid \"result-value\" should display \"3126.16\"')\ndef step_impl(context):\n    result_value = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='result-value']\").text\n    assert result_value == \"3126.16\", f\"Expected result to be '3118.48', but got '{result_value}'\"\n    context.driver.quit()  # Close the browser"
                }
            ]
        },
        "6": {
            "requirement": {
                "description": "When the user presses the Enter key while focused on any input field, the system shall compute the compound interest based on the provided inputs and display the result in the 'Result' section. The system shall validate all inputs to ensure they are positive numeric values greater than zero. If any input is invalid (e.g., empty, non-numeric, or negative), an alert with the message 'Please Enter Valid Values!!' shall be displayed, and the 'Result' section shall remain unchanged, displaying '0'. The calculation shall use the formula: CI = Principal * (1 + (Interest Rate / (Number of Times in Year * 100)))^(Number of Times in Year * Number of Years), rounded to two decimal places. The following UI elements and attributes are involved: \n\n- Input fields:\n  - Principal: [data-testid='principal']\n  - Interest Rate (%): [data-testid='annual-interest-rate']\n  - Number of Years: [data-testid='number-of-year']\n  - Number of Times in a Single Year: [data-testid='number-of-times-in-year']\n\n- Result section:\n  - Result label: [data-testid='result-label']\n  - Result value: [data-testid='result-value']\n\n- Button:\n  - Calculate button: [data-testid='calculate-button']\n\nThe Enter key functionality shall trigger the calculation regardless of which input field is focused, and the result shall be displayed in the 'Result' section with data-testid='result-value'."
            },
            "test_cases": [
                {
                    "test_case": [
                        "Feature: Compute compound interest using the Enter key\n  The system shall compute the compound interest and display the result in the \"Result\" section when the user presses the Enter key while focused on any input field.\n\n\n  Scenario: [Normal] User presses Enter key with valid inputs in all fields\n    Given the \"Compound Interest Calculator\" page is loaded\n    And the user enters \"1000\" into the \"Principal\" field with data-testid \"principal\"\n    And the user enters \"5\" into the \"Interest rate (%)\" field with data-testid \"annual-interest-rate\"\n    And the user enters \"10\" into the \"Number of Years\" field with data-testid \"number-of-year\"\n    And the user enters \"4\" into the \"Number of Times in a Single Year\" field with data-testid \"number-of-times-in-year\"\n    When the user presses the Enter key while focused on the \"Principal\" field with data-testid \"principal\"\n    Then the \"Result\" section with data-testid \"result-value\" should display \"1643.62\"\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n# Background setup\n@given('the \"Compound Interest Calculator\" page is loaded')\ndef step_impl(context):\n    context.driver = webdriver.Chrome()  # Initialize the WebDriver\n    context.driver.get(f\"file://index.html\")  # Load the test page\n    context.driver.maximize_window()\n    WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='title']\"))\n    )\n    time.sleep(1)  # Allow the page to fully load\n\n@given('the user enters \"{value}\" into the \"Principal\" field with data-testid \"principal\"')\ndef step_impl(context, value):\n    principal_field = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='principal']\"))\n    )\n    principal_field.clear()\n    principal_field.send_keys(value)\n    time.sleep(1)\n\n@given('the user enters \"{value}\" into the \"Interest rate (%)\" field with data-testid \"annual-interest-rate\"')\ndef step_impl(context, value):\n    interest_rate_field = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='annual-interest-rate']\"))\n    )\n    interest_rate_field.clear()\n    interest_rate_field.send_keys(value)\n    time.sleep(1)\n\n@given('the user enters \"{value}\" into the \"Number of Years\" field with data-testid \"number-of-year\"')\ndef step_impl(context, value):\n    years_field = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='number-of-year']\"))\n    )\n    years_field.clear()\n    years_field.send_keys(value)\n    time.sleep(1)\n\n@given('the user enters \"{value}\" into the \"Number of Times in a Single Year\" field with data-testid \"number-of-times-in-year\"')\ndef step_impl(context, value):\n    times_in_year_field = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='number-of-times-in-year']\"))\n    )\n    times_in_year_field.clear()\n    times_in_year_field.send_keys(value)\n    time.sleep(1)\n\n@when('the user presses the Enter key while focused on the \"Principal\" field with data-testid \"principal\"')\ndef step_impl(context):\n    principal_field = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='principal']\"))\n    )\n    principal_field.send_keys(\"\\n\")  # Simulate pressing the Enter key\n    time.sleep(1)\n\n@then('the \"Result\" section with data-testid \"result-value\" should display \"{expected_result}\"')\ndef step_impl(context, expected_result):\n    result_value = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='result-value']\"))\n    )\n    actual_result = result_value.text.strip()\n    assert actual_result == expected_result, f\"Expected '{expected_result}', but got '{actual_result}'\"\n\n# Teardown\ndef after_scenario(context, scenario):\n    context.driver.quit()  # Close the browser after the test"
                },
                {
                    "test_case": [
                        "Feature: Compute compound interest using the Enter key\n  The system shall compute the compound interest and display the result in the \"Result\" section when the user presses the Enter key while focused on any input field.\n\n\n  Scenario: [Edge] User presses Enter key with the minimum valid inputs\n    Given the \"Compound Interest Calculator\" page is loaded\n    And the user enters \"1\" into the \"Principal\" field with data-testid \"principal\"\n    And the user enters \"0.01\" into the \"Interest rate (%)\" field with data-testid \"annual-interest-rate\"\n    And the user enters \"1\" into the \"Number of Years\" field with data-testid \"number-of-year\"\n    And the user enters \"1\" into the \"Number of Times in a Single Year\" field with data-testid \"number-of-times-in-year\"\n    When the user presses the Enter key while focused on the \"Interest rate (%)\" field with data-testid \"annual-interest-rate\"\n    Then the \"Result\" section with data-testid \"result-value\" should display \"1.00\"\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.common.keys import Keys\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the \"Compound Interest Calculator\" page is loaded')\ndef step_impl(context):\n    # Initialize the WebDriver and load the test page\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    context.driver.maximize_window()\n    time.sleep(1)  # Allow the page to fully load\n\n@given('the user enters \"{value}\" into the \"Principal\" field with data-testid \"principal\"')\ndef step_impl(context, value):\n    principal_field = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='principal']\"))\n    )\n    principal_field.clear()\n    principal_field.send_keys(value)\n    time.sleep(1)\n\n@given('the user enters \"{value}\" into the \"Interest rate (%)\" field with data-testid \"annual-interest-rate\"')\ndef step_impl(context, value):\n    interest_rate_field = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='annual-interest-rate']\"))\n    )\n    interest_rate_field.clear()\n    interest_rate_field.send_keys(value)\n    time.sleep(1)\n\n@given('the user enters \"{value}\" into the \"Number of Years\" field with data-testid \"number-of-year\"')\ndef step_impl(context, value):\n    years_field = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='number-of-year']\"))\n    )\n    years_field.clear()\n    years_field.send_keys(value)\n    time.sleep(1)\n\n@given('the user enters \"{value}\" into the \"Number of Times in a Single Year\" field with data-testid \"number-of-times-in-year\"')\ndef step_impl(context, value):\n    times_in_year_field = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='number-of-times-in-year']\"))\n    )\n    times_in_year_field.clear()\n    times_in_year_field.send_keys(value)\n    time.sleep(1)\n\n@when('the user presses the Enter key while focused on the \"Interest rate (%)\" field with data-testid \"annual-interest-rate\"')\ndef step_impl(context):\n    interest_rate_field = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='annual-interest-rate']\"))\n    )\n    interest_rate_field.send_keys(Keys.RETURN)\n    time.sleep(1)\n\n@then('the \"Result\" section with data-testid \"result-value\" should display \"{expected_result}\"')\ndef step_impl(context, expected_result):\n    result_value = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='result-value']\"))\n    )\n    actual_result = result_value.text.strip()\n    assert actual_result == expected_result, f\"Expected result '{expected_result}', but got '{actual_result}'\"\n    time.sleep(1)\n\n# Teardown to close the browser after the test\ndef after_scenario(context, scenario):\n    if hasattr(context, 'driver'):\n        context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: Compute compound interest using the Enter key\n  The system shall compute the compound interest and display the result in the \"Result\" section when the user presses the Enter key while focused on any input field.\n\n\n  Scenario: [Edge] User presses Enter key with the maximum valid inputs\n    Given the \"Compound Interest Calculator\" page is loaded\n    And the user enters \"1000000\" into the \"Principal\" field with data-testid \"principal\"\n    And the user enters \"100\" into the \"Interest rate (%)\" field with data-testid \"annual-interest-rate\"\n    And the user enters \"50\" into the \"Number of Years\" field with data-testid \"number-of-year\"\n    And the user enters \"365\" into the \"Number of Times in a Single Year\" field with data-testid \"number-of-times-in-year\"\n    When the user presses the Enter key while focused on the \"Number of Years\" field with data-testid \"number-of-year\"\n    Then the \"Result\" section with data-testid \"result-value\" should display a very large number (greater than 0)\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\ndef is_visible(element):\n    return element.is_displayed()\n\n@given('the \"Compound Interest Calculator\" page is loaded')\ndef step_impl(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)\n\n@given('the user enters \"{principal}\" into the \"Principal\" field with data-testid \"principal\"')\ndef step_impl(context, principal):\n    principal_input = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='principal']\"))\n    )\n    principal_input.clear()\n    principal_input.send_keys(principal)\n    time.sleep(1)\n\n@given('the user enters \"{interest_rate}\" into the \"Interest rate (%)\" field with data-testid \"annual-interest-rate\"')\ndef step_impl(context, interest_rate):\n    interest_input = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='annual-interest-rate']\"))\n    )\n    interest_input.clear()\n    interest_input.send_keys(interest_rate)\n    time.sleep(1)\n\n@given('the user enters \"{years}\" into the \"Number of Years\" field with data-testid \"number-of-year\"')\ndef step_impl(context, years):\n    years_input = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='number-of-year']\"))\n    )\n    years_input.clear()\n    years_input.send_keys(years)\n    time.sleep(1)\n\n@given('the user enters \"{times_in_year}\" into the \"Number of Times in a Single Year\" field with data-testid \"number-of-times-in-year\"')\ndef step_impl(context, times_in_year):\n    times_input = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='number-of-times-in-year']\"))\n    )\n    times_input.clear()\n    times_input.send_keys(times_in_year)\n    time.sleep(1)\n\n@when('the user presses the Enter key while focused on the \"Number of Years\" field with data-testid \"number-of-year\"')\ndef step_impl(context):\n    years_input = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='number-of-year']\")\n    years_input.send_keys('\\ue007')  # Press Enter key\n    time.sleep(1)\n\n@then('the \"Result\" section with data-testid \"result-value\" should display a very large number (greater than 0)')\ndef step_impl(context):\n    result_value = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='result-value']\"))\n    )\n    result_text = result_value.text.strip()\n    assert float(result_text) > 0, f\"Expected a result greater than 0, but got {result_text}\"\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: Compute compound interest using the Enter key\n  The system shall compute the compound interest and display the result in the \"Result\" section when the user presses the Enter key while focused on any input field.\n\n\n  Scenario: [Error] User presses Enter key with one or more empty fields\n    Given the \"Compound Interest Calculator\" page is loaded\n    And the user enters \"1000\" into the \"Principal\" field with data-testid \"principal\"\n    And the user leaves the \"Interest rate (%)\" field with data-testid \"annual-interest-rate\" empty\n    And the user enters \"10\" into the \"Number of Years\" field with data-testid \"number-of-year\"\n    And the user enters \"4\" into the \"Number of Times in a Single Year\" field with data-testid \"number-of-times-in-year\"\n    When the user presses the Enter key while focused on the \"Number of Times in a Single Year\" field with data-testid \"number-of-times-in-year\"\n    Then an alert should be displayed with the message \"Please Enter Valid Values!!\"\n    And the \"Result\" section with data-testid \"result-value\" should still display \"0\"\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.common.keys import Keys\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the \"Compound Interest Calculator\" page is loaded')\ndef step_impl(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    context.driver.maximize_window()\n    WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='title']\"))\n    )\n    time.sleep(1)\n\n@given('the user enters \"{value}\" into the \"Principal\" field with data-testid \"principal\"')\ndef step_impl(context, value):\n    principal_field = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='principal']\"))\n    )\n    principal_field.clear()\n    principal_field.send_keys(value)\n    time.sleep(1)\n\n@given('the user leaves the \"Interest rate (%)\" field with data-testid \"annual-interest-rate\" empty')\ndef step_impl(context):\n    interest_rate_field = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='annual-interest-rate']\"))\n    )\n    interest_rate_field.clear()\n    time.sleep(1)\n\n@given('the user enters \"{value}\" into the \"Number of Years\" field with data-testid \"number-of-year\"')\ndef step_impl(context, value):\n    years_field = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='number-of-year']\"))\n    )\n    years_field.clear()\n    years_field.send_keys(value)\n    time.sleep(1)\n\n@given('the user enters \"{value}\" into the \"Number of Times in a Single Year\" field with data-testid \"number-of-times-in-year\"')\ndef step_impl(context, value):\n    times_in_year_field = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='number-of-times-in-year']\"))\n    )\n    times_in_year_field.clear()\n    times_in_year_field.send_keys(value)\n    time.sleep(1)\n\n@when('the user presses the Enter key while focused on the \"Number of Times in a Single Year\" field with data-testid \"number-of-times-in-year\"')\ndef step_impl(context):\n    times_in_year_field = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='number-of-times-in-year']\"))\n    )\n    times_in_year_field.send_keys(Keys.ENTER)\n    time.sleep(1)\n\n@then('an alert should be displayed with the message \"Please Enter Valid Values!!\"')\ndef step_impl(context):\n    WebDriverWait(context.driver, 10).until(EC.alert_is_present())\n    alert = context.driver.switch_to.alert\n    assert alert.text == \"Please Enter Valid Values!!\", f\"Expected alert message 'Please Enter Valid Values!!', but got '{alert.text}'\"\n    alert.accept()\n    time.sleep(1)\n\n@then('the \"Result\" section with data-testid \"result-value\" should still display \"0\"')\ndef step_impl(context):\n    result_value = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='result-value']\"))\n    )\n    assert result_value.text == \"0\", f\"Expected result value '0', but got '{result_value.text}'\"\n    time.sleep(1)\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: Compute compound interest using the Enter key\n  The system shall compute the compound interest and display the result in the \"Result\" section when the user presses the Enter key while focused on any input field.\n\n\n  Scenario: [Error] User presses Enter key with invalid (non-numeric) inputs\n    Given the \"Compound Interest Calculator\" page is loaded\n    And the user enters \"abc\" into the \"Principal\" field with data-testid \"principal\"\n    And the user enters \"5\" into the \"Interest rate (%)\" field with data-testid \"annual-interest-rate\"\n    And the user enters \"10\" into the \"Number of Years\" field with data-testid \"number-of-year\"\n    And the user enters \"4\" into the \"Number of Times in a Single Year\" field with data-testid \"number-of-times-in-year\"\n    When the user presses the Enter key while focused on the \"Principal\" field with data-testid \"principal\"\n    Then an alert should be displayed with the message \"Please Enter Valid Values!!\"\n    And the \"Result\" section with data-testid \"result-value\" should still display \"0\"\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.common.keys import Keys\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the \"Compound Interest Calculator\" page is loaded')\ndef step_impl(context):\n    # Initialize the WebDriver and load the test page\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    context.driver.maximize_window()\n    time.sleep(1)  # Allow the page to load completely\n\n@given('the user enters \"{value}\" into the \"Principal\" field with data-testid \"principal\"')\ndef step_impl(context, value):\n    principal_field = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='principal']\"))\n    )\n    principal_field.clear()\n    principal_field.send_keys(value)\n    time.sleep(1)\n\n@given('the user enters \"{value}\" into the \"Interest rate (%)\" field with data-testid \"annual-interest-rate\"')\ndef step_impl(context, value):\n    interest_rate_field = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='annual-interest-rate']\"))\n    )\n    interest_rate_field.clear()\n    interest_rate_field.send_keys(value)\n    time.sleep(1)\n\n@given('the user enters \"{value}\" into the \"Number of Years\" field with data-testid \"number-of-year\"')\ndef step_impl(context, value):\n    years_field = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='number-of-year']\"))\n    )\n    years_field.clear()\n    years_field.send_keys(value)\n    time.sleep(1)\n\n@given('the user enters \"{value}\" into the \"Number of Times in a Single Year\" field with data-testid \"number-of-times-in-year\"')\ndef step_impl(context, value):\n    times_in_year_field = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='number-of-times-in-year']\"))\n    )\n    times_in_year_field.clear()\n    times_in_year_field.send_keys(value)\n    time.sleep(1)\n\n@when('the user presses the Enter key while focused on the \"Principal\" field with data-testid \"principal\"')\ndef step_impl(context):\n    principal_field = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='principal']\"))\n    )\n    principal_field.send_keys(Keys.ENTER)\n    time.sleep(1)\n\n@then('an alert should be displayed with the message \"Please Enter Valid Values!!\"')\ndef step_impl(context):\n    WebDriverWait(context.driver, 10).until(EC.alert_is_present())\n    alert = context.driver.switch_to.alert\n    assert alert.text == \"Please Enter Valid Values!!\", f\"Unexpected alert message: {alert.text}\"\n    alert.accept()\n    time.sleep(1)\n\n@then('the \"Result\" section with data-testid \"result-value\" should still display \"0\"')\ndef step_impl(context):\n    result_value = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='result-value']\"))\n    )\n    assert result_value.text == \"0\", f\"Expected result to be '0', but got '{result_value.text}'\"\n    time.sleep(1)\n\n# Teardown to close the browser after the test\ndef after_scenario(context, scenario):\n    if hasattr(context, 'driver'):\n        context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: Compute compound interest using the Enter key\n  The system shall compute the compound interest and display the result in the \"Result\" section when the user presses the Enter key while focused on any input field.\n\n\n  Scenario: [Error] User presses Enter key with negative inputs\n    Given the \"Compound Interest Calculator\" page is loaded\n    And the user enters \"-1000\" into the \"Principal\" field with data-testid \"principal\"\n    And the user enters \"5\" into the \"Interest rate (%)\" field with data-testid \"annual-interest-rate\"\n    And the user enters \"10\" into the \"Number of Years\" field with data-testid \"number-of-year\"\n    And the user enters \"4\" into the \"Number of Times in a Single Year\" field with data-testid \"number-of-times-in-year\"\n    When the user presses the Enter key while focused on the \"Principal\" field with data-testid \"principal\"\n    Then an alert should be displayed with the message \"Please Enter Valid Values!!\"\n    And the \"Result\" section with data-testid \"result-value\" should still display \"0\""
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the \"Compound Interest Calculator\" page is loaded')\ndef step_given_page_loaded(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)\n\n@given('the user enters \"{value}\" into the \"Principal\" field with data-testid \"principal\"')\ndef step_given_enter_principal(context, value):\n    principal_input = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='principal']\"))\n    )\n    principal_input.clear()\n    principal_input.send_keys(value)\n    time.sleep(1)\n\n@given('the user enters \"{value}\" into the \"Interest rate (%)\" field with data-testid \"annual-interest-rate\"')\ndef step_given_enter_interest_rate(context, value):\n    interest_input = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='annual-interest-rate']\"))\n    )\n    interest_input.clear()\n    interest_input.send_keys(value)\n    time.sleep(1)\n\n@given('the user enters \"{value}\" into the \"Number of Years\" field with data-testid \"number-of-year\"')\ndef step_given_enter_years(context, value):\n    years_input = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='number-of-year']\"))\n    )\n    years_input.clear()\n    years_input.send_keys(value)\n    time.sleep(1)\n\n@given('the user enters \"{value}\" into the \"Number of Times in a Single Year\" field with data-testid \"number-of-times-in-year\"')\ndef step_given_enter_times_in_year(context, value):\n    times_input = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='number-of-times-in-year']\"))\n    )\n    times_input.clear()\n    times_input.send_keys(value)\n    time.sleep(1)\n\n@when('the user presses the Enter key while focused on the \"Principal\" field with data-testid \"principal\"')\ndef step_when_press_enter(context):\n    principal_input = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='principal']\"))\n    )\n    principal_input.send_keys(u'\\ue007')  # Unicode for Enter key\n    time.sleep(1)\n\n@then('an alert should be displayed with the message \"Please Enter Valid Values!!\"')\ndef step_then_alert_displayed(context):\n    alert = WebDriverWait(context.driver, 10).until(EC.alert_is_present())\n    assert alert.text == \"Please Enter Valid Values!!\", f\"Expected alert message 'Please Enter Valid Values!!', but got '{alert.text}'\"\n    alert.accept()\n    time.sleep(1)\n\n@then('the \"Result\" section with data-testid \"result-value\" should still display \"0\"')\ndef step_then_result_displayed(context):\n    result_value = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='result-value']\"))\n    )\n    assert result_value.text.strip() == \"0\", f\"Expected result '0', but got '{result_value.text.strip()}'\"\n    time.sleep(1)\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                }
            ]
        }
    }
}