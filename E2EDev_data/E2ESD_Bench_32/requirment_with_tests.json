{
    "summary": {
        "overview": "The SM-Task Manager application allows users to add, manage, and clear tasks. Users can input tasks, set expected completion times, mark tasks as completed, and delete tasks individually or clear all tasks at once.",
        "predefined_options": "The application provides default placeholder text in the task input field to guide users in entering new tasks.",
        "external_resources": "External resources include Google Fonts for Montserrat font styling and a local stylesheet (styles.css) for additional styling.",
        "external_js_libraries": "No external JavaScript libraries are used; functionality is implemented using vanilla JavaScript."
    },
    "finegrained_rewith_test": {
        "2": {
            "requirement": {
                "description": "The SM-Task Manager application allows users to add tasks through a user-friendly interface. Users can input a task description into the text field identified by the data-testid 'task-input'. Upon entering a valid task description (non-empty and trimmed of leading/trailing spaces), users can either press the 'Enter' key or click the 'Add Task' button, identified by the data-testid 'add-task-btn', to add the task to the task list. The task list is displayed as an unordered list with the data-testid 'task-list'. Each task entry includes the task description, an input for expected completion time, and buttons for marking the task as completed or deleting it. After a task is successfully added, the input field is cleared, and the 'Clear All' button, identified by the data-testid 'clear-all-btn', becomes visible. If the task input is empty or consists solely of spaces, the task is not added, and the 'Clear All' button remains hidden if no tasks exist. The application ensures that the task list is dynamically updated with animations for new entries, and the 'Clear All' button's visibility is contingent on the presence of tasks in the list."
            },
            "test_cases": [
                {
                    "test_case": [
                        "Feature: Task Addition Functionality\n  Users can add a task by clicking the 'Add Task' button. The task should be added to the task list, the input field should be cleared, and the 'Clear All' button should be displayed.\n\n\n  Scenario: [Normal] Add a task successfully\n    Given the SM-Task Manager page is loaded\n    And the task input field with data-testid \"task-input\" is empty\n    When the user enters \"Buy groceries\" into the task input field with data-testid \"task-input\"\n    And the user clicks the 'Add Task' button with data-testid \"add-task-btn\"\n    Then the task list with data-testid \"task-list\" should contain a task with the text \"Buy groceries\"\n    And the task input field with data-testid \"task-input\" should be empty\n    And the 'Clear All' button with data-testid \"clear-all-btn\" should be displayed\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the SM-Task Manager page is loaded')\ndef step_given_page_loaded(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)\n\n@given('the task input field with data-testid \"task-input\" is empty')\ndef step_given_task_input_empty(context):\n    task_input = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='task-input']\"))\n    )\n    assert task_input.get_attribute('value') == \"\", \"Task input field is not empty\"\n    time.sleep(1)\n\n@when('the user enters \"Buy groceries\" into the task input field with data-testid \"task-input\"')\ndef step_when_user_enters_task(context):\n    task_input = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='task-input']\"))\n    )\n    task_input.send_keys(\"Buy groceries\")\n    time.sleep(1)\n\n@when('the user clicks the \\'Add Task\\' button with data-testid \"add-task-btn\"')\ndef step_when_user_clicks_add_task(context):\n    add_task_btn = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='add-task-btn']\"))\n    )\n    add_task_btn.click()\n    time.sleep(1)\n\n@then('the task list with data-testid \"task-list\" should contain a task with the text \"Buy groceries\"')\ndef step_then_task_list_contains_task(context):\n    task_list = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='task-list']\"))\n    )\n    tasks = task_list.find_elements(By.TAG_NAME, \"li\")\n    assert any(\"Buy groceries\" in task.text for task in tasks), \"Task 'Buy groceries' not found in task list\"\n    time.sleep(1)\n\n@then('the task input field with data-testid \"task-input\" should be empty')\ndef step_then_task_input_empty(context):\n    task_input = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='task-input']\"))\n    )\n    assert task_input.get_attribute('value') == \"\", \"Task input field is not empty after adding task\"\n    time.sleep(1)\n\n@then('the \\'Clear All\\' button with data-testid \"clear-all-btn\" should be displayed')\ndef step_then_clear_all_button_displayed(context):\n    clear_all_btn = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='clear-all-btn']\"))\n    )\n    assert clear_all_btn.is_displayed(), \"'Clear All' button is not displayed\"\n    time.sleep(1)\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: Task Addition Functionality\n  Users can add a task by clicking the 'Add Task' button. The task should be added to the task list, the input field should be cleared, and the 'Clear All' button should be displayed.\n\n\n  Scenario: [Edge] Add a task with leading and trailing spaces\n    Given the SM-Task Manager page is loaded\n    And the task input field with data-testid \"task-input\" is empty\n    When the user enters \"   Call mom   \" into the task input field with data-testid \"task-input\"\n    And the user clicks the 'Add Task' button with data-testid \"add-task-btn\"\n    Then the task list with data-testid \"task-list\" should contain a task with the text \"Call mom\"\n    And the task input field with data-testid \"task-input\" should be empty\n    And the 'Clear All' button with data-testid \"clear-all-btn\" should be displayed\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\ndef is_visible(element):\n    return element.is_displayed()\n\n@given('the SM-Task Manager page is loaded')\ndef step_given_page_loaded(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)\n\n@given('the task input field with data-testid \"task-input\" is empty')\ndef step_given_task_input_empty(context):\n    task_input = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='task-input']\"))\n    )\n    assert task_input.get_attribute('value') == \"\", \"Task input field is not empty\"\n    time.sleep(1)\n\n@when('the user enters \"   Call mom   \" into the task input field with data-testid \"task-input\"')\ndef step_when_user_enters_task(context):\n    task_input = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='task-input']\"))\n    )\n    task_input.send_keys(\"   Call mom   \")\n    time.sleep(1)\n\n@when('the user clicks the \\'Add Task\\' button with data-testid \"add-task-btn\"')\ndef step_when_user_clicks_add_task(context):\n    add_task_btn = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='add-task-btn']\"))\n    )\n    add_task_btn.click()\n    time.sleep(1)\n\n@then('the task list with data-testid \"task-list\" should contain a task with the text \"Call mom\"')\ndef step_then_task_list_contains_task(context):\n    task_list = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='task-list']\"))\n    )\n    tasks = task_list.find_elements(By.TAG_NAME, \"li\")\n    assert any(\"Call mom\" in task.text for task in tasks), \"Task 'Call mom' not found in task list\"\n    time.sleep(1)\n\n@then('the task input field with data-testid \"task-input\" should be empty')\ndef step_then_task_input_empty(context):\n    task_input = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='task-input']\"))\n    )\n    assert task_input.get_attribute('value') == \"\", \"Task input field is not empty after adding task\"\n    time.sleep(1)\n\n@then('the \\'Clear All\\' button with data-testid \"clear-all-btn\" should be displayed')\ndef step_then_clear_all_button_displayed(context):\n    clear_all_btn = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='clear-all-btn']\"))\n    )\n    assert is_visible(clear_all_btn), \"'Clear All' button is not displayed\"\n    time.sleep(1)\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: Task Addition Functionality\n  Users can add a task by clicking the 'Add Task' button. The task should be added to the task list, the input field should be cleared, and the 'Clear All' button should be displayed.\n\n\n  Scenario: [Error] Attempt to add an empty task\n    Given the SM-Task Manager page is loaded\n    And the task input field with data-testid \"task-input\" is empty\n    When the user clicks the 'Add Task' button with data-testid \"add-task-btn\"\n    Then the task list with data-testid \"task-list\" should remain empty\n    And the task input field with data-testid \"task-input\" should be empty\n    And the 'Clear All' button with data-testid \"clear-all-btn\" should not be displayed"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the SM-Task Manager page is loaded')\ndef step_given_page_is_loaded(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)\n\n@given('the task input field with data-testid \"task-input\" is empty')\ndef step_given_task_input_is_empty(context):\n    task_input = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='task-input']\")\n    task_input.clear()\n    assert task_input.get_attribute('value') == \"\", \"Task input field is not empty\"\n    time.sleep(1)\n\n@when('the user clicks the \\'Add Task\\' button with data-testid \"add-task-btn\"')\ndef step_when_user_clicks_add_task_button(context):\n    add_task_btn = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='add-task-btn']\"))\n    )\n    add_task_btn.click()\n    time.sleep(1)\n\n@then('the task list with data-testid \"task-list\" should remain empty')\ndef step_then_task_list_should_remain_empty(context):\n    task_list = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='task-list']\")\n    assert len(task_list.find_elements(By.TAG_NAME, \"li\")) == 0, \"Task list is not empty\"\n    time.sleep(1)\n\n@then('the task input field with data-testid \"task-input\" should be empty')\ndef step_then_task_input_should_be_empty(context):\n    task_input = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='task-input']\")\n    assert task_input.get_attribute('value') == \"\", \"Task input field is not empty\"\n    time.sleep(1)\n\n@then('the \\'Clear All\\' button with data-testid \"clear-all-btn\" should not be displayed')\ndef step_then_clear_all_button_should_not_be_displayed(context):\n    clear_all_btn = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='clear-all-btn']\")\n    assert not clear_all_btn.is_displayed(), \"'Clear All' button is displayed\"\n    time.sleep(1)\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                }
            ]
        },
        "3": {
            "requirement": {
                "description": "Users can add a task by pressing the 'Enter' key after entering text in the task input field. The task input field is identified by the data-testid 'task-input'. When the user presses the 'Enter' key, the system should trigger the 'Add Task' button click event. If the input contains only whitespace or is empty, no task should be added, and the input field should remain empty. If the input contains valid text, the task should be added to the task list identified by the data-testid 'task-list', with leading and trailing spaces trimmed. After adding the task, the input field should be cleared. The system should ensure that the task list is updated accordingly, and the 'Clear All' button, identified by the data-testid 'clear-all-btn', should be displayed if there are tasks in the list."
            },
            "test_cases": [
                {
                    "test_case": [
                        "Feature: REQ-003 - Add Task Using 'Enter' Key\n  Users can add a task by pressing the 'Enter' key after entering text in the task input field.\n\n\n  Scenario: [Edge] Add a task using the 'Enter' key with leading and trailing spaces\n    Given the SM-Task Manager page is loaded\n    And the task input field with data-testid \"task-input\" is empty\n    When the user enters \"   Finish homework   \" into the task input field with data-testid \"task-input\"\n    And presses the 'Enter' key\n    Then the task \"Finish homework\" should be added to the task list with data-testid \"task-list\"\n    And the task input field with data-testid \"task-input\" should be cleared\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the SM-Task Manager page is loaded')\ndef step_impl(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)\n\n@given('the task input field with data-testid \"task-input\" is empty')\ndef step_impl(context):\n    task_input = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='task-input']\"))\n    )\n    assert task_input.get_attribute('value') == \"\", \"Task input field is not empty\"\n    time.sleep(1)\n\n@when('the user enters \"   Finish homework   \" into the task input field with data-testid \"task-input\"')\ndef step_impl(context):\n    task_input = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='task-input']\")\n    task_input.send_keys(\"   Finish homework   \")\n    time.sleep(1)\n\n@when(\"presses the 'Enter' key\")\ndef step_impl(context):\n    task_input = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='task-input']\")\n    task_input.send_keys(\"\\n\")\n    time.sleep(1)\n\n@then('the task \"Finish homework\" should be added to the task list with data-testid \"task-list\"')\ndef step_impl(context):\n    task_list = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='task-list']\"))\n    )\n    tasks = task_list.find_elements(By.TAG_NAME, \"li\")\n    assert any(\"Finish homework\" in task.text for task in tasks), \"Task 'Finish homework' not found in task list\"\n    time.sleep(1)\n\n@then('the task input field with data-testid \"task-input\" should be cleared')\ndef step_impl(context):\n    task_input = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='task-input']\")\n    assert task_input.get_attribute('value') == \"\", \"Task input field is not cleared\"\n    time.sleep(1)\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: REQ-003 - Add Task Using 'Enter' Key\n  Users can add a task by pressing the 'Enter' key after entering text in the task input field.\n\n\n  Scenario: [Error] Attempt to add an empty task using the 'Enter' key\n    Given the SM-Task Manager page is loaded\n    And the task input field with data-testid \"task-input\" is empty\n    When the user presses the 'Enter' key\n    Then no task should be added to the task list with data-testid \"task-list\"\n    And the task input field with data-testid \"task-input\" should remain empty"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\ndef is_task_list_empty(driver):\n    task_list = driver.find_element(By.CSS_SELECTOR, \"[data-testid='task-list']\")\n    return len(task_list.find_elements(By.TAG_NAME, \"li\")) == 0\n\n@given('the SM-Task Manager page is loaded')\ndef step_given_page_is_loaded(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)\n\n@given('the task input field with data-testid \"task-input\" is empty')\ndef step_given_task_input_is_empty(context):\n    task_input = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='task-input']\")\n    task_input.clear()\n    time.sleep(1)\n\n@when('the user presses the \\'Enter\\' key')\ndef step_when_user_presses_enter(context):\n    task_input = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='task-input']\")\n    task_input.send_keys(\"\\n\")\n    time.sleep(1)\n\n@then('no task should be added to the task list with data-testid \"task-list\"')\ndef step_then_no_task_added(context):\n    assert is_task_list_empty(context.driver), \"Task list is not empty when it should be.\"\n\n@then('the task input field with data-testid \"task-input\" should remain empty')\ndef step_then_task_input_remains_empty(context):\n    task_input = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='task-input']\")\n    assert task_input.get_attribute('value') == \"\", \"Task input field is not empty.\"\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                }
            ]
        },
        "4": {
            "requirement": {
                "description": "The SM-Task Manager web application allows users to manage tasks through a user-friendly interface. Each task entry in the task list includes a 'Completed' button, identifiable by the data-id 'complete-btn', which users can click to toggle the task's completion status. Upon clicking the 'Completed' button, the system visually updates the task by adding or removing the 'completed' class to the task's DOM element, providing immediate feedback on the task's status. This functionality supports toggling for individual tasks as well as multiple tasks simultaneously. The task list is dynamically updated to reflect these changes, ensuring users can efficiently manage their task completion statuses."
            },
            "test_cases": [
                {
                    "test_case": [
                        "Feature: Task Completion Toggle\n  Each task entry includes a 'Completed' button to toggle its completion status. Users can view tasks in the list and click the 'Completed' button on a task to change its visual completion status.\n\n\n  Scenario: [Normal] Toggle task completion status\n    Given the SM-Task Manager page is loaded\n    And the user enters \"Buy groceries\" into the task input field with data-testid \"task-input\"\n    And the user clicks the \"Add Task\" button with data-testid \"add-task-btn\"\n    When the user clicks the \"Completed\" button on the task \"Buy groceries\" with data-id \"complete-btn\"\n    Then the task \"Buy groceries\" should have the class \"completed\"\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\ndef is_expanded(element):\n    aria = element.get_attribute(\"aria-expanded\")\n    if aria is not None:\n        return aria == \"true\"\n\n    class_list = element.get_attribute(\"class\").split()\n    if any(cls in class_list for cls in [\"expanded\", \"open\", \"show\"]):\n        return True\n\n    data_expanded = element.get_attribute(\"data-expanded\")\n    if data_expanded is not None:\n        return data_expanded == \"true\"\n\n    return element.is_displayed()\n\ndef is_collapsed(element):\n    aria = element.get_attribute(\"aria-expanded\")\n    if aria is not None and aria.lower() == \"false\":\n        return True\n\n    class_attr = element.get_attribute(\"class\") or \"\"\n    class_list = class_attr.split()\n    if \"collapsed\" in class_list:\n        return True\n\n    data_expanded = element.get_attribute(\"data-expanded\")\n    if data_expanded is not None and data_expanded.lower() == \"false\":\n        return True\n\n    style = element.get_attribute(\"style\") or \"\"\n    if \"display: none\" in style or \"visibility: hidden\" in style or \"height: 0\" in style:\n        return True\n\n    return not element.is_displayed()\n\n@given('the SM-Task Manager page is loaded')\ndef step_impl(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)\n\n@given('the user enters \"{task}\" into the task input field with data-testid \"task-input\"')\ndef step_impl(context, task):\n    task_input = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='task-input']\"))\n    )\n    task_input.clear()\n    task_input.send_keys(task)\n    time.sleep(1)\n\n@given('the user clicks the \"Add Task\" button with data-testid \"add-task-btn\"')\ndef step_impl(context):\n    add_task_btn = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='add-task-btn']\"))\n    )\n    add_task_btn.click()\n    time.sleep(1)\n\n@when('the user clicks the \"Completed\" button on the task \"{task}\" with data-id \"complete-btn\"')\ndef step_impl(context, task):\n    task_list = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='task-list']\"))\n    )\n    task_items = task_list.find_elements(By.TAG_NAME, \"li\")\n    for item in task_items:\n        if task in item.text:\n            complete_btn = item.find_element(By.CSS_SELECTOR, \"[data-id='complete-btn']\")\n            complete_btn.click()\n            time.sleep(1)\n            break\n\n@then('the task \"{task}\" should have the class \"completed\"')\ndef step_impl(context, task):\n    task_list = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='task-list']\"))\n    )\n    task_items = task_list.find_elements(By.TAG_NAME, \"li\")\n    for item in task_items:\n        if task in item.text:\n            assert \"completed\" in item.get_attribute(\"class\"), f\"Task '{task}' is not marked as completed.\"\n            break\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: Task Completion Toggle\n  Each task entry includes a 'Completed' button to toggle its completion status. Users can view tasks in the list and click the 'Completed' button on a task to change its visual completion status.\n\n\n  Scenario: [Edge] Toggle completion status of multiple tasks\n    Given the SM-Task Manager page is loaded\n    And the user enters \"Buy groceries\" into the task input field with data-testid \"task-input\"\n    And the user clicks the \"Add Task\" button with data-testid \"add-task-btn\"\n    And the user enters \"Walk the dog\" into the task input field with data-testid \"task-input\"\n    And the user clicks the \"Add Task\" button with data-testid \"add-task-btn\"\n    When the user clicks the \"Completed\" button on the task \"Buy groceries\" with data-id \"complete-btn\"\n    And the user clicks the \"Completed\" button on the task \"Walk the dog\" with data-id \"complete-btn\"\n    Then both tasks \"Buy groceries\" and \"Walk the dog\" should have the class \"completed\"\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\ndef is_task_completed(task_element):\n    return \"completed\" in task_element.get_attribute(\"class\").split()\n\n@given('the SM-Task Manager page is loaded')\ndef step_given_page_loaded(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)\n\n@given('the user enters \"{task}\" into the task input field with data-testid \"task-input\"')\ndef step_given_enter_task(context, task):\n    task_input = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='task-input']\"))\n    )\n    task_input.clear()\n    task_input.send_keys(task)\n    time.sleep(1)\n\n@given('the user clicks the \"Add Task\" button with data-testid \"add-task-btn\"')\ndef step_given_click_add_task(context):\n    add_task_btn = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='add-task-btn']\"))\n    )\n    add_task_btn.click()\n    time.sleep(1)\n\n@when('the user clicks the \"Completed\" button on the task \"{task}\" with data-id \"complete-btn\"')\ndef step_when_click_completed(context, task):\n    task_list = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='task-list']\"))\n    )\n    task_items = task_list.find_elements(By.TAG_NAME, \"li\")\n    for item in task_items:\n        if task.lower() in item.text.lower():\n            complete_btn = item.find_element(By.CSS_SELECTOR, \"[data-id='complete-btn']\")\n            complete_btn.click()\n            time.sleep(1)\n            break\n\n@then('both tasks \"Buy groceries\" and \"Walk the dog\" should have the class \"completed\"')\ndef step_then_tasks_completed(context):\n    task_list = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='task-list']\"))\n    )\n    task_items = task_list.find_elements(By.TAG_NAME, \"li\")\n    completed_tasks = [\"buy groceries\", \"walk the dog\"]\n    for task in completed_tasks:\n        for item in task_items:\n            if task.lower() in item.text.lower():\n                assert is_task_completed(item), f\"Task '{task}' is not marked as completed.\"\n                break\n\n    context.driver.quit()"
                }
            ]
        },
        "5": {
            "requirement": {
                "description": "The web application must allow users to delete individual tasks from the task list using a 'Delete' button associated with each task entry. The 'Delete' button must be identifiable by the class 'delete-btn' and should be located within each task's container in the task list, which is identified by the data-testid 'task-list'. Upon clicking the 'Delete' button, the system must remove the corresponding task from the DOM. If the task list becomes empty after deletion, the system must hide the 'Clear All' button, which is identified by the data-testid 'clear-all-btn'. The 'Clear All' button should only be visible when there is at least one task in the list. This functionality must handle normal cases where multiple tasks exist, as well as edge cases where the deleted task is the only task in the list."
            },
            "test_cases": [
                {
                    "test_case": [
                        "Feature: Task Deletion Functionality\n  The system allows users to delete individual tasks from the task list. Upon deletion, the system checks if the 'Clear All' button should be hidden when no tasks remain.\n\n\n  Scenario: [Normal] User deletes a task from the list\n    Given the SM-Task Manager page is loaded\n    And the user enters \"Buy groceries\" into the task input field with data-testid \"task-input\"\n    And the user clicks the \"Add Task\" button with data-testid \"add-task-btn\"\n    And the task \"Buy groceries\" is displayed in the task list with data-testid \"task-list\"\n    When the user clicks the \"Delete\" button for the task \"Buy groceries\"\n    Then the task \"Buy groceries\" should be removed from the task list\n    And the \"Clear All\" button with data-testid \"clear-all-btn\" should be hidden\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the SM-Task Manager page is loaded')\ndef step_given_page_loaded(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='task-input']\"))\n    )\n    time.sleep(1)\n\n@given('the user enters \"Buy groceries\" into the task input field with data-testid \"task-input\"')\ndef step_given_enter_task(context):\n    task_input = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='task-input']\")\n    task_input.send_keys(\"Buy groceries\")\n    time.sleep(1)\n\n@given('the user clicks the \"Add Task\" button with data-testid \"add-task-btn\"')\ndef step_given_click_add_task(context):\n    add_task_btn = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='add-task-btn']\"))\n    )\n    add_task_btn.click()\n    time.sleep(1)\n\n@given('the task \"Buy groceries\" is displayed in the task list with data-testid \"task-list\"')\ndef step_given_task_displayed(context):\n    task_list = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='task-list']\"))\n    )\n    task_items = task_list.find_elements(By.TAG_NAME, \"li\")\n    assert any(\"Buy groceries\" in item.text for item in task_items), \"Task 'Buy groceries' not found in task list\"\n    time.sleep(1)\n\n@when('the user clicks the \"Delete\" button for the task \"Buy groceries\"')\ndef step_when_click_delete(context):\n    task_list = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='task-list']\")\n    task_items = task_list.find_elements(By.TAG_NAME, \"li\")\n    for item in task_items:\n        if \"Buy groceries\" in item.text:\n            delete_btn = item.find_element(By.CSS_SELECTOR, \"[data-id='delete-btn']\")\n            delete_btn.click()\n            time.sleep(1)\n            break\n\n@then('the task \"Buy groceries\" should be removed from the task list')\ndef step_then_task_removed(context):\n    task_list = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='task-list']\")\n    task_items = task_list.find_elements(By.TAG_NAME, \"li\")\n    assert not any(\"Buy groceries\" in item.text for item in task_items), \"Task 'Buy groceries' still found in task list\"\n    time.sleep(1)\n\n@then('the \"Clear All\" button with data-testid \"clear-all-btn\" should be hidden')\ndef step_then_clear_all_hidden(context):\n    clear_all_btn = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='clear-all-btn']\")\n    assert not clear_all_btn.is_displayed(), \"Clear All button is not hidden\"\n    time.sleep(1)\n    context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: Task Deletion Functionality\n  The system allows users to delete individual tasks from the task list. Upon deletion, the system checks if the 'Clear All' button should be hidden when no tasks remain.\n\n\n  Scenario: [Edge] User deletes the only task in the list\n    Given the SM-Task Manager page is loaded\n    And the user enters \"Read a book\" into the task input field with data-testid \"task-input\"\n    And the user clicks the \"Add Task\" button with data-testid \"add-task-btn\"\n    And the task \"Read a book\" is displayed in the task list with data-testid \"task-list\"\n    When the user clicks the \"Delete\" button for the task \"Read a book\"\n    Then the task \"Read a book\" should be removed from the task list\n    And the \"Clear All\" button with data-testid \"clear-all-btn\" should be hidden\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\ndef is_visible(element):\n    return element.is_displayed()\n\n@given('the SM-Task Manager page is loaded')\ndef step_impl(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)\n\n@given('the user enters \"{task}\" into the task input field with data-testid \"task-input\"')\ndef step_impl(context, task):\n    task_input = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='task-input']\"))\n    )\n    task_input.clear()\n    task_input.send_keys(task)\n    time.sleep(1)\n\n@given('the user clicks the \"Add Task\" button with data-testid \"add-task-btn\"')\ndef step_impl(context):\n    add_task_btn = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='add-task-btn']\"))\n    )\n    add_task_btn.click()\n    time.sleep(1)\n\n@given('the task \"{task}\" is displayed in the task list with data-testid \"task-list\"')\ndef step_impl(context, task):\n    task_list = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='task-list']\"))\n    )\n    tasks = task_list.find_elements(By.TAG_NAME, \"li\")\n    assert any(task in task_item.text for task_item in tasks), f\"Task '{task}' not found in task list\"\n    time.sleep(1)\n\n@when('the user clicks the \"Delete\" button for the task \"{task}\"')\ndef step_impl(context, task):\n    task_list = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='task-list']\"))\n    )\n    tasks = task_list.find_elements(By.TAG_NAME, \"li\")\n    for task_item in tasks:\n        if task in task_item.text:\n            delete_btn = task_item.find_element(By.CSS_SELECTOR, \"[data-id='delete-btn']\")\n            delete_btn.click()\n            time.sleep(1)\n            break\n\n@then('the task \"{task}\" should be removed from the task list')\ndef step_impl(context, task):\n    # Wait for the task list to update after deletion\n    WebDriverWait(context.driver, 10).until(\n        lambda driver: not any(task in task_item.text for task_item in driver.find_elements(By.CSS_SELECTOR, \"[data-testid='task-list'] li\"))\n    )\n    task_list = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='task-list']\")\n    tasks = task_list.find_elements(By.TAG_NAME, \"li\")\n    assert not any(task in task_item.text for task_item in tasks), f\"Task '{task}' was not removed from task list\"\n    time.sleep(1)\n\n@then('the \"Clear All\" button with data-testid \"clear-all-btn\" should be hidden')\ndef step_impl(context):\n    clear_all_btn = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='clear-all-btn']\")\n    assert not is_visible(clear_all_btn), \"Clear All button is not hidden\"\n    time.sleep(1)\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                }
            ]
        },
        "6": {
            "requirement": {
                "description": "The SM-Task Manager application allows users to clear all tasks from the task list by interacting with the 'Clear All' button. When the user clicks the 'Clear All' button, identified by the data-testid 'clear-all-btn', the system will remove all tasks from the task list, which is identified by the data-testid 'task-list'. Additionally, the 'Clear All' button will be hidden from view after all tasks are cleared. This functionality is only applicable when there are tasks present in the list. The 'Clear All' button should be visible only when there is at least one task in the list, and it should be hidden when the list is empty, ensuring a clear and intuitive user experience."
            },
            "test_cases": [
                {
                    "test_case": [
                        "Feature: Clear All Tasks Functionality\n  Users can clear all tasks by clicking the 'Clear All' button to remove all tasks from the list and hide the 'Clear All' button.\n\n\n  Scenario: [Normal] Clear all tasks when tasks are present\n    Given the SM-Task Manager page is loaded\n    And the user enters \"Task 1\" into the task input field with data-testid \"task-input\"\n    And the user clicks the \"Add Task\" button with data-testid \"add-task-btn\"\n    And the user enters \"Task 2\" into the task input field with data-testid \"task-input\"\n    And the user clicks the \"Add Task\" button with data-testid \"add-task-btn\"\n    When the user clicks the \"Clear All\" button with data-testid \"clear-all-btn\"\n    Then the task list with data-testid \"task-list\" should be empty\n    And the \"Clear All\" button with data-testid \"clear-all-btn\" should not be visible\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the SM-Task Manager page is loaded')\ndef step_given_page_loaded(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    context.driver.maximize_window()\n    time.sleep(1)\n\n@given('the user enters \"{task}\" into the task input field with data-testid \"task-input\"')\ndef step_given_enter_task(context, task):\n    task_input = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='task-input']\"))\n    )\n    task_input.clear()\n    task_input.send_keys(task)\n    time.sleep(1)\n\n@given('the user clicks the \"Add Task\" button with data-testid \"add-task-btn\"')\n@when('the user clicks the \"Add Task\" button with data-testid \"add-task-btn\"')\ndef step_when_click_add_task(context):\n    add_task_btn = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='add-task-btn']\"))\n    )\n    add_task_btn.click()\n    time.sleep(1)\n\n@when('the user clicks the \"Clear All\" button with data-testid \"clear-all-btn\"')\ndef step_when_click_clear_all(context):\n    clear_all_btn = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='clear-all-btn']\"))\n    )\n    clear_all_btn.click()\n    time.sleep(1)\n\n@then('the task list with data-testid \"task-list\" should be empty')\ndef step_then_task_list_empty(context):\n    WebDriverWait(context.driver, 10).until(\n        EC.invisibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='task-list'] li\"))\n    )\n    task_list = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='task-list']\")\n    assert len(task_list.find_elements(By.TAG_NAME, \"li\")) == 0, \"Task list is not empty\"\n\n@then('the \"Clear All\" button with data-testid \"clear-all-btn\" should not be visible')\ndef step_then_clear_all_not_visible(context):\n    clear_all_btn = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='clear-all-btn']\")\n    assert not clear_all_btn.is_displayed(), \"Clear All button is still visible\"\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                }
            ]
        },
        "7": {
            "requirement": {
                "description": "The task input field, identified by the data-testid 'task-input' and id 'task-input', must display the placeholder text 'Enter a new task...' when the 'SM-Task Manager' page is fully loaded. This placeholder guides users in entering new tasks. No user action is required for this placeholder to be visible; it should be present by default upon page load. The placeholder text should remain visible until the user begins typing in the input field."
            },
            "test_cases": [
                {
                    "test_case": [
                        "Feature: Task Input Field Placeholder Text\n  The task input field provides a placeholder text to guide task entry.\n\n\n  Scenario: [Normal] Display placeholder text in task input field\n    Given the user is on the \"SM-Task Manager\" page\n    When the page is fully loaded\n    Then the task input field with data-testid \"task-input\" should display the placeholder text \"Enter a new task...\"\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the user is on the \"SM-Task Manager\" page')\ndef step_given_user_on_task_manager_page(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)\n\n@when('the page is fully loaded')\ndef step_when_page_fully_loaded(context):\n    WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='task-input']\"))\n    )\n    time.sleep(1)\n\n@then('the task input field with data-testid \"task-input\" should display the placeholder text \"Enter a new task...\"')\ndef step_then_task_input_placeholder(context):\n    task_input = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='task-input']\")\n    placeholder_text = task_input.get_attribute(\"placeholder\")\n    expected_text = \"Enter a new task...\"\n    assert expected_text.lower() in placeholder_text.lower(), f\"Expected '{expected_text}' in '{placeholder_text}'\"\n    time.sleep(1)\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                }
            ]
        }
    }
}