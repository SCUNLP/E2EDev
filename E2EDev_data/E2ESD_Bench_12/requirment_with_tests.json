{
    "summary": {
        "overview": "The application is a simple web-based 'Dad Jokes' generator. It allows users to fetch and display random dad jokes from an external API ('https://icanhazdadjoke.com') by clicking a button. The jokes are displayed dynamically on the page.",
        "predefined_options": "No predefined options are available. The jokes are fetched dynamically from the external API.",
        "external_resources": [
            {
                "name": "Dad Jokes API",
                "source": "https://icanhazdadjoke.com"
            }
        ],
        "external_js_libraries": "No external JavaScript libraries are used in the provided code."
    },
    "finegrained_rewith_test": {
        "1": {
            "requirement": {
                "description": "Upon loading the 'Dad Jokes' webpage, the system must automatically initiate a fetch request to the 'https://icanhazdadjoke.com' API to retrieve a random dad joke. The joke must be displayed in the designated joke display area, which is identified by the data-testid attribute 'joke'. "
            },
            "test_cases": [
                {
                    "test_case": [
                        "Feature: Automatic Joke Fetching on Page Load\n  The system must automatically fetch a random dad joke from the \"https://icanhazdadjoke.com\" API and display it in the joke display area when the page loads.\n\n\n  Scenario: [Normal] Display a dad joke on page load\n    Given the webpage \"Dad Jokes\" is loaded\n    When the system fetches a joke from \"https://icanhazdadjoke.com\"\n    Then the joke display area with data-testid \"joke\" should show a dad joke\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the webpage \"Dad Jokes\" is loaded')\ndef step_given_webpage_loaded(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)  # Allow time for the page to load\n\n@when('the system fetches a joke from \"https://icanhazdadjoke.com\"')\ndef step_when_system_fetches_joke(context):\n    # This step is implicitly handled by the JavaScript on page load\n    # We can wait for the joke element to be updated with a new joke\n    # joke_element = WebDriverWait(context.driver, 10).until(\n    #     EC.text_to_be_present_in_element((By.CSS_SELECTOR, \"[data-testid='joke']\"), \"// Joke goes here\")\n    # )\n    time.sleep(2)  # Allow time for the joke to be fetched\n\n@then('the joke display area with data-testid \"joke\" should show a dad joke')\ndef step_then_joke_display_area_shows_joke(context):\n    joke_element = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='joke']\")\n    joke_text = joke_element.text.strip()\n    assert joke_text != \"// Joke goes here\", \"Expected a dad joke, but the placeholder text is still present.\"\n    assert len(joke_text) > 0, \"Expected a dad joke, but the joke text is empty.\"\n    time.sleep(1)  # Allow time for any final checks\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                }
            ]
        },
        "2": {
            "requirement": {
                "description": "The user must be able to click the 'Get Another Joke' button (data-testid='get-another-joke-button'). Upon clicking, the application must asynchronously fetch a new random dad joke and display it in the joke container (data-testid='joke')."
            },
            "test_cases": [
                {
                    "test_case": [
                        "Feature: Fetch and display a new random dad joke when the user clicks the \"Get Another Joke\" button\n  The user must be able to click the \"Get Another Joke\" button to fetch a new random dad joke from the \"https://icanhazdadjoke.com\" API and display it on the page.\n\n\n  Scenario: [Normal] Fetch and display a new dad joke when the button is clicked\n    Given the webpage is loaded and the joke container with data-testid \"joke\" displays \"// Joke goes here\"\n    And the \"Get Another Joke\" button with data-testid \"get-another-joke-button\" is visible\n    When the user clicks the \"Get Another Joke\" button\n    Then a new dad joke is fetched from the \"https://icanhazdadjoke.com\" API\n    And the joke container with data-testid \"joke\" is updated to display the fetched joke\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\ndef is_visible(element):\n    return element.is_displayed()\n\n@given('the webpage is loaded and the joke container with data-testid \"joke\" displays \"// Joke goes here\"')\ndef step_given_webpage_loaded(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(2)  # Allow time for the page to load\n\n    # joke_elementement = WebDriverWait(context.driver, 10).until(\n    #     EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='joke']\"))\n    # )\n    # assert \"// Joke goes here\" in joke_element.text, f\"Expected '// Joke goes here' in '{joke_element.text}'\"\n\n@given('the \"Get Another Joke\" button with data-testid \"get-another-joke-button\" is visible')\ndef step_given_button_visible(context):\n    joke_button = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='get-another-joke-button']\"))\n    )\n    assert is_visible(joke_button), \"The 'Get Another Joke' button is not visible\"\n\n@when('the user clicks the \"Get Another Joke\" button')\ndef step_when_user_clicks_button(context):\n    joke_button = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='get-another-joke-button']\")\n    joke_button.click()\n    time.sleep(1)  # Allow time for the joke to be fetched and displayed\n\n@then('a new dad joke is fetched from the \"https://icanhazdadjoke.com\" API')\ndef step_then_joke_fetched(context):\n    # This step is implicitly verified by the next step\n    pass\n\n@then('the joke container with data-testid \"joke\" is updated to display the fetched joke')\ndef step_then_joke_displayed(context):\n    joke_element = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='joke']\"))\n    )\n    assert \"// Joke goes here\" not in joke_element.text, \"The joke was not updated\"\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                }
            ]
        },
        "3": {
            "requirement": {
                "description": "The user must be able to click the 'Get Another Joke' button (data-testid='get-another-joke-button'). Upon clicking, the application must asynchronously fetch a new random dad joke and display it in the joke container (data-testid='joke'), replacing either the placeholder text '// Joke goes here' or the previously displayed joke."
            },
            "test_cases": [
                {
                    "test_case": [
                        "Feature: REQ-003 - Fetch and Display New Joke\n  The system must replace the current joke in the joke display area with a newly fetched joke when the user clicks the \"Get Another Joke\" button.\n\n\n  Scenario: [Normal] User clicks the \"Get Another Joke\" button to fetch a new joke\n    Given the webpage is loaded with the title \"Dad Jokes\"\n    And the joke display area with data-testid \"joke\" contains a joke\n    When the user clicks the \"Get Another Joke\" button with data-testid \"get-another-joke-button\"\n    Then the joke display area with data-testid \"joke\" should be updated with a new joke\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the webpage is loaded with the title \"Dad Jokes\"')\ndef step_given_webpage_loaded(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    WebDriverWait(context.driver, 10).until(\n        EC.title_contains(\"Dad Jokes\")\n    )\n    time.sleep(1)\n\n@given('the joke display area with data-testid \"joke\" contains a joke')\ndef step_given_joke_display_contains_joke(context):\n    joke_element = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='joke']\"))\n    )\n    assert joke_element.text.strip() != \"// Joke goes here\", \"Joke display area should contain a joke\"\n    time.sleep(1)\n\n@when('the user clicks the \"Get Another Joke\" button with data-testid \"get-another-joke-button\"')\ndef step_when_user_clicks_get_another_joke_button(context):\n    joke_button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='get-another-joke-button']\"))\n    )\n    joke_button.click()\n    time.sleep(1)\n\n@then('the joke display area with data-testid \"joke\" should be updated with a new joke')\ndef step_then_joke_display_updated(context):\n    joke_element = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='joke']\"))\n    )\n    assert joke_element.text.strip() != \"// Joke goes here\", \"Joke display area should be updated with a new joke\"\n    time.sleep(1)\n    context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: REQ-003 - Fetch and Display New Joke\n  The system must replace the current joke in the joke display area with a newly fetched joke when the user clicks the \"Get Another Joke\" button.\n\n\n  Scenario: [Edge] User clicks the \"Get Another Joke\" button multiple times in quick succession\n    Given the webpage is loaded with the title \"Dad Jokes\"\n    And the joke display area with data-testid \"joke\" contains a joke\n    When the user clicks the \"Get Another Joke\" button with data-testid \"get-another-joke-button\" rapidly multiple times\n    Then the joke display area with data-testid \"joke\" should eventually display a new joke\n    And the joke should be different from the initial joke\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the webpage is loaded with the title \"Dad Jokes\"')\ndef step_given_webpage_loaded(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    WebDriverWait(context.driver, 10).until(EC.title_is(\"Dad Jokes\"))\n    time.sleep(1)\n\n@given('the joke display area with data-testid \"joke\" contains a joke')\ndef step_given_joke_display_area_contains_joke(context):\n    joke_element = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='joke']\"))\n    )\n    time.sleep(2)\n    # assert joke_element.text.strip() != \"// Joke goes here\", \"Joke display area should contain a joke\"\n    context.initial_joke = joke_element.text.strip()\n    time.sleep(1)\n\n@when('the user clicks the \"Get Another Joke\" button with data-testid \"get-another-joke-button\" rapidly multiple times')\ndef step_when_user_clicks_button_rapidly(context):\n    joke_button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='get-another-joke-button']\"))\n    )\n    for _ in range(5):  # Simulate rapid clicks\n        joke_button.click()\n        time.sleep(0.5)  # Short delay between clicks\n\n@then('the joke display area with data-testid \"joke\" should eventually display a new joke')\ndef step_then_joke_display_area_shows_new_joke(context):\n    joke_element = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='joke']\"))\n    )\n    new_joke = joke_element.text.strip()\n    assert new_joke != context.initial_joke, \"The joke should be different from the initial joke\"\n    time.sleep(1)\n\n@then('the joke should be different from the initial joke')\ndef step_then_joke_is_different(context):\n    joke_element = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='joke']\")\n    new_joke = joke_element.text.strip()\n    assert new_joke != context.initial_joke, \"The joke should be different from the initial joke\"\n    time.sleep(1)\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                }
            ]
        }
    }
}