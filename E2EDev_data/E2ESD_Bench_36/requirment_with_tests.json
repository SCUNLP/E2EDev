{
    "summary": {
        "overview": "The Word Counter application allows users to input text and receive real-time feedback on the number of words, characters, and paragraphs. Users can also set a character limit, highlight specific words, and save their progress using local storage.",
        "predefined_options": "Default values for word, character, and paragraph counts are set to zero. The character limit input is optional and can be set by the user.",
        "external_resources": "None specified in the provided code.",
        "external_js_libraries": "None specified in the provided code."
    },
    "finegrained_rewith_test": {
        "1": {
            "requirement": {
                "description": "The web application should provide a textarea element with the attribute data-testid='text-input' where users can input text freely without immediate restrictions. Upon entering text, the system should update the word count, character count, and paragraph count displayed in elements with data-testid='word-count', 'char-count', and 'para-count', respectively. The user can input text of any length, including large texts up to 5000 characters, without restrictions. The system should persist the entered text and counts in localStorage using keys 'text', 'words', 'chars', and 'paras'. Additionally, the application should allow users to set a character limit via an input element with data-testid='char-limit', and visually indicate when the character count exceeds this limit by changing the text color to red in the 'char-count' element. The system should also provide functionality to clear the text and counts via a button with data-testid='clear-button', and highlight specific words in the text using a button with id='highlight-button' and an input with id='highlight-word'."
            },
            "test_cases": [
                {
                    "test_case": [
                        "Feature: Text Input Functionality\n  The system should allow the user to input any text into the textarea without immediate restrictions.\n\n\nScenario: [Normal] User enters text into the textarea\n    Given the Word Counter page is loaded\n    And the textarea with data-testid \"text-input\" is empty\n    When the user enters \"Hello World\" into the textarea with data-testid \"text-input\"\n    Then the textarea with data-testid \"text-input\" should contain the text \"Hello World\""
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the Word Counter page is loaded')\ndef step_given_word_counter_page_loaded(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)  # Allow time for the page to load\n\n@given('the textarea with data-testid \"text-input\" is empty')\ndef step_given_textarea_is_empty(context):\n    text_area = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='text-input']\"))\n    )\n    assert text_area.get_attribute('value') == \"\", \"Textarea is not empty\"\n    time.sleep(1)\n\n@when('the user enters \"Hello World\" into the textarea with data-testid \"text-input\"')\ndef step_when_user_enters_text(context):\n    text_area = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='text-input']\"))\n    )\n    text_area.clear()\n    text_area.send_keys(\"Hello World\")\n    time.sleep(1)\n\n@then('the textarea with data-testid \"text-input\" should contain the text \"Hello World\"')\ndef step_then_textarea_should_contain_text(context):\n    text_area = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='text-input']\"))\n    )\n    assert \"Hello World\" in text_area.get_attribute('value'), \"Textarea does not contain 'Hello World'\"\n    time.sleep(1)\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: Text Input Functionality\n  The system should allow the user to input any text into the textarea without immediate restrictions.\n\n\nScenario: [Edge] User enters a large amount of text into the textarea\n    Given the Word Counter page is loaded\n    And the textarea with data-testid \"text-input\" is empty\n    When the user enters a text of 5000 characters into the textarea with data-testid \"text-input\"\n    Then the textarea with data-testid \"text-input\" should contain the text of 5000 characters"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\n\n@given(u'the Word Counter page is loaded')\ndef step_impl(context):\n    # Initialize the WebDriver\n    context.driver = webdriver.Chrome()\n    # Load the test page\n    file_path = \"index.html\"\n    context.driver.get(f\"file://index.html\")\n\n@given(u'the textarea with data-testid \"text-input\" is empty')\ndef step_impl(context):\n    # Find the textarea element and ensure it is empty\n    text_area = context.driver.find_element(By.CSS_SELECTOR, '[data-testid=\"text-input\"]')\n    text_area.clear()\n    assert text_area.get_attribute('value') == \"\"\n\n@when(u'the user enters a text of 5000 characters into the textarea with data-testid \"text-input\"')\ndef step_impl(context):\n    # Enter 5000 characters into the textarea\n    text_area = context.driver.find_element(By.CSS_SELECTOR, '[data-testid=\"text-input\"]')\n    large_text = 'a' * 5000\n    text_area.send_keys(large_text)\n\n@then(u'the textarea with data-testid \"text-input\" should contain the text of 5000 characters')\ndef step_impl(context):\n    # Verify the textarea contains 5000 characters\n    text_area = context.driver.find_element(By.CSS_SELECTOR, '[data-testid=\"text-input\"]')\n    assert len(text_area.get_attribute('value')) == 5000\n    # Close the WebDriver\n    context.driver.quit()"
                }
            ]
        },
        "2": {
            "requirement": {
                "description": "The web application should provide a text input area identified by the attribute data-testid='text-input' where users can enter text. Upon clicking the 'Count' button, identified by data-testid='count-button', the system must calculate and display the number of words, characters, and paragraphs in the text input. The results should be shown in elements with data-testid='word-count', 'char-count', and 'para-count', respectively. The word count should exclude empty strings resulting from spaces or newlines. The character count should include all characters, including spaces and special characters. The paragraph count should consider non-empty lines separated by newlines. The system should handle edge cases such as empty input, input with only spaces or newlines, and input with special characters. Additionally, the application should persist the text input and counts in localStorage using keys 'text', 'words', 'chars', and 'paras', and reload them upon page refresh. If a character limit is set in the input field with data-testid='char-limit', the character count should change color to red if the limit is exceeded, and the text should indicate the excess."
            },
            "test_cases": [
                {
                    "test_case": [
                        "Feature: Word, Character, and Paragraph Counting\n  The system should calculate and display the number of words, characters, and paragraphs in the text input when the user clicks the 'Count' button.\n\n\n  Scenario: [Normal] Count words, characters, and paragraphs for a typical input\n    Given the webpage is loaded\n    And the user enters \"Hello world! This is a test.\\nThis is a new paragraph.\" into the text area with data-testid \"text-input\"\n    When the user clicks the 'Count' button with data-testid \"count-button\"\n    Then the word count displayed with data-testid \"word-count\" should be \"Words: 11\"\n    And the character count displayed with data-testid \"char-count\" should be \"Characters: 53\"\n    And the paragraph count displayed with data-testid \"para-count\" should be \"Paragraphs: 2\"\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the webpage is loaded')\ndef step_given_webpage_loaded(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)\n\n@given('the user enters \"Hello world! This is a test.\\\\nThis is a new paragraph.\" into the text area with data-testid \"text-input\"')\ndef step_given_user_enters_text(context):\n    text_area = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='text-input']\"))\n    )\n    text_area.clear()\n    text_area.send_keys(\"Hello world! This is a test.\\nThis is a new paragraph.\")\n    time.sleep(1)\n\n@when('the user clicks the \\'Count\\' button with data-testid \"count-button\"')\ndef step_when_user_clicks_count_button(context):\n    count_button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='count-button']\"))\n    )\n    count_button.click()\n    time.sleep(1)\n\n@then('the word count displayed with data-testid \"word-count\" should be \"Words: 11\"')\ndef step_then_word_count_should_be(context):\n    word_count = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='word-count']\"))\n    )\n    expected_text = \"Words: 11\"\n    assert \"11\" in word_count.text.lower(), f\"Expected '{expected_text}' in '{word_count.text}'\"\n\n@then('the character count displayed with data-testid \"char-count\" should be \"Characters: 53\"')\ndef step_then_character_count_should_be(context):\n    char_count = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='char-count']\"))\n    )\n    expected_text = \"Characters: 53\"\n    assert \"53\" in char_count.text.lower(), f\"Expected '{expected_text}' in '{char_count.text}'\"\n\n@then('the paragraph count displayed with data-testid \"para-count\" should be \"Paragraphs: 2\"')\ndef step_then_paragraph_count_should_be(context):\n    para_count = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='para-count']\"))\n    )\n    expected_text = \"Paragraphs: 2\"\n    assert \"2\" in para_count.text.lower(), f\"Expected '{expected_text}' in '{para_count.text}'\"\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: Word, Character, and Paragraph Counting\n  The system should calculate and display the number of words, characters, and paragraphs in the text input when the user clicks the 'Count' button.\n\n\n  Scenario: [Edge] Count words, characters, and paragraphs for an empty input\n    Given the webpage is loaded\n    And the text area with data-testid \"text-input\" is empty\n    When the user clicks the 'Count' button with data-testid \"count-button\"\n    Then the word count displayed with data-testid \"word-count\" should be \"Words: 0\"\n    And the character count displayed with data-testid \"char-count\" should be \"Characters: 0\"\n    And the paragraph count displayed with data-testid \"para-count\" should be \"Paragraphs: 0\"\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the webpage is loaded')\ndef step_given_webpage_loaded(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)\n\n@given('the text area with data-testid \"text-input\" is empty')\ndef step_given_text_area_empty(context):\n    text_area = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='text-input']\"))\n    )\n    text_area.clear()\n    time.sleep(1)\n\n@when('the user clicks the \\'Count\\' button with data-testid \"count-button\"')\ndef step_when_user_clicks_count_button(context):\n    count_button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='count-button']\"))\n    )\n    count_button.click()\n    time.sleep(1)\n\n@then('the word count displayed with data-testid \"word-count\" should be \"Words: 0\"')\ndef step_then_word_count_should_be_zero(context):\n    word_count = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='word-count']\"))\n    )\n    assert \"Words: 0\" in word_count.text, f\"Expected 'Words: 0', but got '{word_count.text}'\"\n\n@then('the character count displayed with data-testid \"char-count\" should be \"Characters: 0\"')\ndef step_then_character_count_should_be_zero(context):\n    char_count = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='char-count']\"))\n    )\n    assert \"Characters: 0\" in char_count.text, f\"Expected 'Characters: 0', but got '{char_count.text}'\"\n\n@then('the paragraph count displayed with data-testid \"para-count\" should be \"Paragraphs: 0\"')\ndef step_then_paragraph_count_should_be_zero(context):\n    para_count = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='para-count']\"))\n    )\n    assert \"Paragraphs: 0\" in para_count.text, f\"Expected 'Paragraphs: 0', but got '{para_count.text}'\"\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: Word, Character, and Paragraph Counting\n  The system should calculate and display the number of words, characters, and paragraphs in the text input when the user clicks the 'Count' button.\n\n\n  Scenario: [Edge] Count words, characters, and paragraphs for input with only spaces and newlines\n    Given the webpage is loaded\n    And the user enters \"   \\n   \\n\" into the text area with data-testid \"text-input\"\n    When the user clicks the 'Count' button with data-testid \"count-button\"\n    Then the word count displayed with data-testid \"word-count\" should be \"Words: 0\"\n    And the character count displayed with data-testid \"char-count\" should be \"Characters: 8\"\n    And the paragraph count displayed with data-testid \"para-count\" should be \"Paragraphs: 0\"\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the webpage is loaded')\ndef step_given_webpage_is_loaded(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)\n\n@given('the user enters \"   \\\\n   \\\\n\" into the text area with data-testid \"text-input\"')\ndef step_given_user_enters_text(context):\n    text_area = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='text-input']\"))\n    )\n    text_area.clear()\n    text_area.send_keys(\"   \\n   \\n\")\n    time.sleep(1)\n\n@when('the user clicks the \\'Count\\' button with data-testid \"count-button\"')\ndef step_when_user_clicks_count_button(context):\n    count_button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='count-button']\"))\n    )\n    count_button.click()\n    time.sleep(1)\n\n@then('the word count displayed with data-testid \"word-count\" should be \"Words: 0\"')\ndef step_then_word_count_should_be(context):\n    word_count = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='word-count']\"))\n    )\n    assert \"Words: 0\" in word_count.text, f\"Expected 'Words: 0', but got '{word_count.text}'\"\n\n@then('the character count displayed with data-testid \"char-count\" should be \"Characters: 8\"')\ndef step_then_character_count_should_be(context):\n    char_count = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='char-count']\"))\n    )\n    assert \"8\" in char_count.text, f\"Expected 'Characters: 8', but got '{char_count.text}'\"\n\n@then('the paragraph count displayed with data-testid \"para-count\" should be \"Paragraphs: 0\"')\ndef step_then_paragraph_count_should_be(context):\n    para_count = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='para-count']\"))\n    )\n    assert \"Paragraphs: 0\" in para_count.text, f\"Expected 'Paragraphs: 0', but got '{para_count.text}'\"\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: Word, Character, and Paragraph Counting\n  The system should calculate and display the number of words, characters, and paragraphs in the text input when the user clicks the 'Count' button.\n\n\n  Scenario: [Error] Count words, characters, and paragraphs for input with special characters\n    Given the webpage is loaded\n    And the user enters \"!@#$%^&*()_+{}|:<>?\" into the text area with data-testid \"text-input\"\n    When the user clicks the 'Count' button with data-testid \"count-button\"\n    Then the word count displayed with data-testid \"word-count\" should be \"Words: 1\"\n    And the character count displayed with data-testid \"char-count\" should be \"Characters: 19\"\n    And the paragraph count displayed with data-testid \"para-count\" should be \"Paragraphs: 1\""
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the webpage is loaded')\ndef step_given_webpage_loaded(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)\n\n@given('the user enters \"{text}\" into the text area with data-testid \"text-input\"')\ndef step_given_user_enters_special_characters(context,text):\n    text_area = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='text-input']\"))\n    )\n    text_area.clear()\n    text_area.send_keys(text)\n    time.sleep(1)\n\n@when('the user clicks the \\'Count\\' button with data-testid \"count-button\"')\ndef step_when_user_clicks_count_button(context):\n    count_button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='count-button']\"))\n    )\n    count_button.click()\n    time.sleep(1)\n\n@then('the word count displayed with data-testid \"word-count\" should be \"Words: 1\"')\ndef step_then_word_count_should_be_zero(context):\n    word_count = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='word-count']\"))\n    )\n    assert \"1\" in word_count.text, f\"Expected 'Words: 0', but got '{word_count.text}'\"\n\n@then('the character count displayed with data-testid \"char-count\" should be \"Characters: 19\"')\ndef step_then_character_count_should_be_twenty(context):\n    char_count = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='char-count']\"))\n    )\n    assert \"19\" in char_count.text, f\"Expected 'Characters: 20', but got '{char_count.text}'\"\n\n@then('the paragraph count displayed with data-testid \"para-count\" should be \"Paragraphs: 1\"')\ndef step_then_paragraph_count_should_be_one(context):\n    para_count = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='para-count']\"))\n    )\n    assert \"1\" in para_count.text, f\"Expected 'Paragraphs: 1', but got '{para_count.text}'\"\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                }
            ]
        },
        "3": {
            "requirement": {
                "description": "The web application must provide a 'Clear' button, identifiable by the data-testid 'clear-button', which, when clicked by the user, clears the text input field with data-testid 'text-input' and resets the word count (data-testid 'word-count'), character count (data-testid 'char-count'), and paragraph count (data-testid 'para-count') to zero. This functionality should work regardless of the current state of the text input, including when it is already empty. Upon clearing, the text input field should be empty, and the counts should display 'Words: 0', 'Characters: 0', and 'Paragraphs: 0'. The system should ensure that these changes are reflected in the UI immediately after the button is clicked."
            },
            "test_cases": [
                {
                    "test_case": [
                        "Feature: Clear Text Functionality\n  The system should clear the text input and reset the word, character, and paragraph counts to zero when the user clicks the 'Clear' button.\n\n\n  Scenario: [Normal] Clear text input and reset counts\n    Given the webpage is loaded\n    And the user enters \"This is a test.\\nThis is another test.\" into the text area with data-testid \"text-input\"\n    When the user clicks the 'Clear' button with data-testid \"clear-button\"\n    Then the text area with data-testid \"text-input\" should be empty\n    And the word count should display \"Words: 0\"\n    And the character count should display \"Characters: 0\"\n    And the paragraph count should display \"Paragraphs: 0\"\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the webpage is loaded')\ndef step_given_webpage_loaded(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)\n\n@given('the user enters \"This is a test.\\\\nThis is another test.\" into the text area with data-testid \"text-input\"')\ndef step_given_user_enters_text(context):\n    text_area = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='text-input']\"))\n    )\n    text_area.clear()\n    text_area.send_keys(\"This is a test.\\nThis is another test.\")\n    time.sleep(1)\n\n\n@when('the user clicks the \\'Clear\\' button with data-testid \"clear-button\"')\ndef step_when_user_clicks_clear_button(context):\n    clear_button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='clear-button']\"))\n    )\n    clear_button.click()\n    time.sleep(1)\n\n@then('the text area with data-testid \"text-input\" should be empty')\ndef step_then_text_area_should_be_empty(context):\n    text_area = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='text-input']\"))\n    )\n    assert text_area.get_attribute('value') == \"\", \"Expected text area to be empty\"\n    time.sleep(1)\n\n@then('the word count should display \"Words: 0\"')\ndef step_then_word_count_should_display(context):\n    word_count = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='word-count']\"))\n    )\n    expected_text = \"Words: 0\"\n    assert expected_text.lower() in word_count.text.lower(), f\"Expected '{expected_text}' in '{word_count.text}'\"\n    time.sleep(1)\n\n@then('the character count should display \"Characters: 0\"')\ndef step_then_character_count_should_display(context):\n    char_count = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='char-count']\"))\n    )\n    expected_text = \"Characters: 0\"\n    assert expected_text.lower() in char_count.text.lower(), f\"Expected '{expected_text}' in '{char_count.text}'\"\n    time.sleep(1)\n\n@then('the paragraph count should display \"Paragraphs: 0\"')\ndef step_then_paragraph_count_should_display(context):\n    para_count = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='para-count']\"))\n    )\n    expected_text = \"Paragraphs: 0\"\n    assert expected_text.lower() in para_count.text.lower(), f\"Expected '{expected_text}' in '{para_count.text}'\"\n    time.sleep(1)\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: Clear Text Functionality\n  The system should clear the text input and reset the word, character, and paragraph counts to zero when the user clicks the 'Clear' button.\n\n\nScenario: [Edge] Clear button with empty text input\n    Given the webpage is loaded\n    And the text area with data-testid \"text-input\" is empty\n    When the user clicks the 'Clear' button with data-testid \"clear-button\"\n    Then the text area with data-testid \"text-input\" should remain empty\n    And the word count should still display \"Words: 0\"\n    And the character count should still display \"Characters: 0\"\n    And the paragraph count should still display \"Paragraphs: 0\""
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the webpage is loaded')\ndef step_given_webpage_loaded(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)\n\n@given('the text area with data-testid \"text-input\" is empty')\ndef step_given_text_area_empty(context):\n    text_area = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='text-input']\"))\n    )\n    assert text_area.get_attribute('value') == \"\", \"Text area is not empty\"\n\n@when('the user clicks the \\'Clear\\' button with data-testid \"clear-button\"')\ndef step_when_user_clicks_clear_button(context):\n    clear_button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='clear-button']\"))\n    )\n    clear_button.click()\n    time.sleep(1)\n\n@then('the text area with data-testid \"text-input\" should remain empty')\ndef step_then_text_area_remains_empty(context):\n    text_area = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='text-input']\"))\n    )\n    assert text_area.get_attribute('value') == \"\", \"Text area is not empty\"\n\n@then('the word count should still display \"Words: 0\"')\ndef step_then_word_count_display(context):\n    word_count = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='word-count']\"))\n    )\n    assert \"Words: 0\" in word_count.text, f\"Expected 'Words: 0', but got '{word_count.text}'\"\n\n@then('the character count should still display \"Characters: 0\"')\ndef step_then_character_count_display(context):\n    char_count = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='char-count']\"))\n    )\n    assert \"Characters: 0\" in char_count.text, f\"Expected 'Characters: 0', but got '{char_count.text}'\"\n\n@then('the paragraph count should still display \"Paragraphs: 0\"')\ndef step_then_paragraph_count_display(context):\n    para_count = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='para-count']\"))\n    )\n    assert \"Paragraphs: 0\" in para_count.text, f\"Expected 'Paragraphs: 0', but got '{para_count.text}'\"\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: Clear Text Functionality\n  The system should clear the text input and reset the word, character, and paragraph counts to zero when the user clicks the 'Clear' button.\n\n\nScenario: [Normal] Clear button with text\n    Given the webpage is loaded\n    And the user enters \"Invalid state test\" into the text area with data-testid \"text-input\"\n    When the user clicks the 'Clear' button with data-testid \"clear-button\"\n    Then the text area with data-testid \"text-input\" should be empty\n    And the word count should display \"Words: 0\"\n    And the character count should display \"Characters: 0\"\n    And the paragraph count should display \"Paragraphs: 0\""
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the webpage is loaded')\ndef step_given_webpage_loaded(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)\n\n@given('the user enters \"Invalid state test\" into the text area with data-testid \"text-input\"')\ndef step_given_user_enters_text(context):\n    text_area = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='text-input']\"))\n    )\n    text_area.clear()\n    text_area.send_keys(\"Invalid state test\")\n    time.sleep(1)\n\n@when('the user clicks the \\'Clear\\' button with data-testid \"clear-button\"')\ndef step_when_user_clicks_clear_button(context):\n    clear_button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='clear-button']\"))\n    )\n    clear_button.click()\n    time.sleep(1)\n\n@then('the text area with data-testid \"text-input\" should be empty')\ndef step_then_text_area_should_be_empty(context):\n    text_area = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='text-input']\")\n    assert text_area.get_attribute('value') == \"\", \"Text area is not empty\"\n\n@then('the word count should display \"Words: 0\"')\ndef step_then_word_count_should_display_zero(context):\n    word_count = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='word-count']\")\n    assert \"Words: 0\" in word_count.text, f\"Expected 'Words: 0', but got '{word_count.text}'\"\n\n@then('the character count should display \"Characters: 0\"')\ndef step_then_character_count_should_display_zero(context):\n    char_count = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='char-count']\")\n    assert \"Characters: 0\" in char_count.text, f\"Expected 'Characters: 0', but got '{char_count.text}'\"\n\n@then('the paragraph count should display \"Paragraphs: 0\"')\ndef step_then_paragraph_count_should_display_zero(context):\n    para_count = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='para-count']\")\n    assert \"Paragraphs: 0\" in para_count.text, f\"Expected 'Paragraphs: 0', but got '{para_count.text}'\"\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                }
            ]
        }
    }
}