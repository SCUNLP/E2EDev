{
    "summary": {
        "overview": "The Speech Text Reader application allows users to input text, select a voice, and have the text read aloud. It also provides predefined phrases with associated images that can be clicked to trigger speech synthesis.",
        "predefined_options": "The application provides a set of predefined phrases such as 'I'm Thirsty', 'I'm Hungry', 'I'm Tired', 'I'm Hurt', 'I'm Happy', 'I'm Angry', 'I'm Sad', 'I'm Scared', 'I Want to Go Outside', 'I Want to Go Home', 'I Want to Go to School', 'I Want to Go to Grandmas'. each associated with an image. These phrases can be clicked to trigger speech synthesis.",
        "external_resources": [
            {
                "name": "Images for predefined phrases",
                "source": "https://github.com/bradtraversy/vanillawebprojects/blob/master/speech-text-reader/img/"
            }
        ],
        "external_js_libraries": [
            {
                "name": "Font Awesome",
                "source": "https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.1/css/all.min.css"
            }
        ]
    },
    "finegrained_rewith_test": {
        "1": {
            "requirement": {
                "description": "The Speech Text Reader must allow users to toggle the visibility of the text box—containing the voice dropdown, textarea, and \"Read Text\" button—by clicking the \"Toggle Text Box\" button (data-testid=\"toggle-button\"). Initially hidden, the text box (data-testid=\"text-box\") should appear or disappear based on user interaction, with visibility controlled by the presence of the 'show' class. The system must handle normal toggles, rapid repeated clicks, and boundary conditions reliably, ensuring the final state reflects the last user action without inconsistency.å√"
            },
            "test_cases": [
                {
                    "test_case": [
                        "Feature: Toggle Text Box Visibility\n  The system should toggle the visibility of the text box containing the voice selection dropdown, textarea, and 'Read Text' button when the user clicks the 'Toggle Text Box' button.\n\n\n  Scenario: [Normal] Toggle text box visibility on button click\n    Given the Speech Text Reader page is loaded\n    And the text box with data-testid \"text-box\" is initially hidden\n    When the user clicks the 'Toggle Text Box' button with data-testid \"toggle-button\"\n    Then the text box with data-testid \"text-box\" should be visible\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the Speech Text Reader page is loaded')\ndef step_impl(context):\n    # Initialize the WebDriver and load the test page\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    context.driver.maximize_window()\n    time.sleep(1)  # Allow the page to fully load\n\n@given('the text box with data-testid \"text-box\" is initially hidden')\ndef step_impl(context):\n    # Verify that the text box is initially hidden\n    text_box = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='text-box']\")\n    # Check if the text box has the 'show' class, which indicates visibility\n    assert 'show' not in text_box.get_attribute('class'), \"Expected the text box to be initially hidden\"\n\n@when('the user clicks the \\'Toggle Text Box\\' button with data-testid \"toggle-button\"')\ndef step_impl(context):\n    # Click the toggle button to toggle the visibility of the text box\n    toggle_button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='toggle-button']\"))\n    )\n    toggle_button.click()\n    time.sleep(1)  # Allow time for the visibility change to take effect\n\n@then('the text box with data-testid \"text-box\" should be visible')\ndef step_impl(context):\n    # Verify that the text box is now visible\n    text_box = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='text-box']\"))\n    )\n    assert text_box.is_displayed(), \"Expected the text box to be visible\"\n\n# Teardown to close the browser after the test\ndef after_scenario(context, scenario):\n    if hasattr(context, 'driver'):\n        context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: Toggle Text Box Visibility\n  The system should toggle the visibility of the text box containing the voice selection dropdown, textarea, and 'Read Text' button when the user clicks the 'Toggle Text Box' button.\n\n\n  Scenario: [Normal] Toggle text box visibility off on button click\n    Given the Speech Text Reader page is loaded\n    And the user clicks the 'Toggle Text Box' button with data-testid \"toggle-button\"\n    And the text box with data-testid \"text-box\" is visible\n    When the user clicks the 'Toggle Text Box' button with data-testid \"toggle-button\"\n    Then the text box with data-testid \"text-box\" should be hidden\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\ndef is_collapsed(element):\n    aria = element.get_attribute(\"aria-expanded\")\n    if aria is not None and aria.lower() == \"false\":\n        return True\n\n    class_attr = element.get_attribute(\"class\") or \"\"\n    class_list = class_attr.split()\n    if \"collapsed\" in class_list:\n        return True\n\n    data_expanded = element.get_attribute(\"data-expanded\")\n    if data_expanded is not None and data_expanded.lower() == \"false\":\n        return True\n\n    style = element.get_attribute(\"style\") or \"\"\n    if \"display: none\" in style or \"visibility: hidden\" in style or \"height: 0\" in style:\n        return True\n\n    return not element.is_displayed()\n\ndef is_visible(element):\n    return element.is_displayed()\n\n@given('the Speech Text Reader page is loaded')\ndef step_given_page_loaded(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)  # Allow the page to load completely\n\n@given('the user clicks the \\'Toggle Text Box\\' button with data-testid \"toggle-button\"')\ndef step_when_user_clicks_toggle_button(context):\n    toggle_button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='toggle-button']\"))\n    )\n    toggle_button.click()\n    time.sleep(1)  # Allow time for the toggle action to take effect\n\n\n@given('the text box with data-testid \"text-box\" is visible')\ndef step_given_text_box_visible(context):\n    text_box = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='text-box']\"))\n    )\n    assert is_visible(text_box), \"Text box is not visible initially\"\n\n@when('the user clicks the \\'Toggle Text Box\\' button with data-testid \"toggle-button\"')\ndef step_when_user_clicks_toggle_button(context):\n    toggle_button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='toggle-button']\"))\n    )\n    toggle_button.click()\n    time.sleep(1)  # Allow time for the toggle action to take effect\n\n@then('the text box with data-testid \"text-box\" should be hidden')\ndef step_then_text_box_hidden(context):\n    text_box = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='text-box']\")\n    # 检查是否没有 'show' 类，表示文本框被隐藏\n    assert 'show' not in text_box.get_attribute('class') or not text_box.is_displayed(), \"Text box is not hidden\"\n\n\n\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: Toggle Text Box Visibility\n  The system should toggle the visibility of the text box containing the voice selection dropdown, textarea, and 'Read Text' button when the user clicks the 'Toggle Text Box' button.\n\n\n  Scenario: [Edge] Toggle text box visibility rapidly\n    Given the Speech Text Reader page is loaded\n    And the text box with data-testid \"text-box\" is initially hidden\n    When the user rapidly clicks the 'Toggle Text Box' button with data-testid \"toggle-button\" multiple times\n    Then the text box with data-testid \"text-box\" should eventually be visible or hidden based on the final click\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\ndef is_collapsed(element):\n    aria = element.get_attribute(\"aria-expanded\")\n    if aria is not None and aria.lower() == \"false\":\n        return True\n\n    class_attr = element.get_attribute(\"class\") or \"\"\n    class_list = class_attr.split()\n    if \"collapsed\" in class_list:\n        return True\n\n    data_expanded = element.get_attribute(\"data-expanded\")\n    if data_expanded is not None and data_expanded.lower() == \"false\":\n        return True\n\n    style = element.get_attribute(\"style\") or \"\"\n    if \"display: none\" in style or \"visibility: hidden\" in style or \"height: 0\" in style:\n        return True\n\n    return not element.is_displayed()\n\ndef is_visible(element):\n    return element.is_displayed()\n\n@given('the Speech Text Reader page is loaded')\ndef step_given_page_is_loaded(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)\n\n@given('the text box with data-testid \"text-box\" is initially hidden')\ndef step_given_text_box_initially_hidden(context):\n    text_box = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='text-box']\")\n    assert not text_box.is_displayed() or 'show' not in text_box.get_attribute('class'), \"Text box should be initially hidden\"\n\n@when('the user rapidly clicks the \\'Toggle Text Box\\' button with data-testid \"toggle-button\" multiple times')\ndef step_when_user_rapidly_clicks_toggle_button(context):\n    toggle_button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='toggle-button']\"))\n    )\n    for _ in range(5):  # Simulate rapid clicking\n        toggle_button.click()\n        time.sleep(0.2)  # Short delay to simulate rapid clicking\n\n@then('the text box with data-testid \"text-box\" should eventually be visible or hidden based on the final click')\ndef step_then_text_box_visibility(context):\n    text_box = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='text-box']\")\n    # Check if the text box is either visible or hidden\n    assert is_visible(text_box) or is_collapsed(text_box), \"Text box should be either visible or hidden\"\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                }
            ]
        },
        "2": {
            "requirement": {
                "description": "The web application should allow users to toggle the visibility of a text box using a 'Toggle Text Box' button and hide the text box using a 'Close' button. The text box is initially hidden. When the user clicks the 'Toggle Text Box' button, located in the DOM with the attribute data-testid='toggle-button', the text box, identified by data-testid='text-box', becomes visible. Within the visible text box, there is a 'Close' button, identified by data-testid='close-button'. When the user clicks this 'Close' button, the text box should be hidden again. The visibility of the text box is controlled by adding or removing the 'show' class from the text box element in the DOM."
            },
            "test_cases": [
                {
                    "test_case": [
                        "Feature: Hide Text Box on Close Button Click\n  The system should hide the text box when the user clicks the 'Close' button within the text box.\n\n\nScenario: [Normal] User clicks the 'Close' button to hide the text box\n    Given the Speech Text Reader page is loaded\n    And  the user clicks the \"Toggle Text Box\" button with data-testid \"toggle-button\"\n    And the text box is visible with data-testid 'text-box'\n    When the user clicks the 'Close' button with data-testid 'close-button'\n    Then the text box should not be visible"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\ndef is_visible(element):\n    return element.is_displayed()\n\n@given(\"the Speech Text Reader page is loaded\")\ndef step_given_page_loaded(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    context.driver.maximize_window()\n    time.sleep(1)  # Allow the page to fully load\n\n@given('the user clicks the \"Toggle Text Box\" button with data-testid \"toggle-button\"')\ndef step_given_click_toggle_button(context):\n    toggle_button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='toggle-button']\"))\n    )\n    toggle_button.click()\n    time.sleep(1)  # Wait for the text box to toggle\n\n@given(\"the text box is visible with data-testid 'text-box'\")\ndef step_given_text_box_visible(context):\n    text_box = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='text-box']\"))\n    )\n    assert is_visible(text_box), \"Text box is not visible\"\n\n@when(\"the user clicks the 'Close' button with data-testid 'close-button'\")\ndef step_when_click_close_button(context):\n    close_button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='close-button']\"))\n    )\n    close_button.click()\n    time.sleep(1)  # Wait for the text box to hide\n\n@then(\"the text box should not be visible\")\ndef step_then_text_box_not_visible(context):\n    text_box = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='text-box']\")\n\n    # 确保元素要么不显示 show 类，要么不可见\n    assert 'show' not in text_box.get_attribute('class') or not text_box.is_displayed(), \"Text box is not hidden\"\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                }
            ]
        },
        "3": {
            "requirement": {
                "description": "The system must populate the 'Choose Voice' dropdown (data-testid='voice-select') with available voices from the Web Speech API after the user opens the text box using the 'Toggle Text Box' button (data-testid='toggle-button'). Once the text box (data-testid='text-box') becomes visible, the system invokes the getVoices function, which retrieves the voices using speechSynthesis.getVoices(), and populates the dropdown with option elements whose values are set to the voice names and whose display texts show the voice names and languages. If the available voices change, the system listens for the 'voiceschanged' event and updates the dropdown accordingly. When a user selects a voice, it is assigned to message.voice for speech synthesis."
            },
            "test_cases": [
                {
                    "test_case": [
                        "Feature: Populate 'Choose Voice' Dropdown\n  The system should populate the 'Choose Voice' dropdown with available voices from the Web Speech API when the page loads or when the available voices change.\n\n\nScenario: [Normal] Populate voices dropdown on page load\n    Given the Speech Text Reader page is loaded\n    When the page is initialized\n    And the user clicks the 'Toggle Text Box' button with data-testid \"toggle-button\" to display the text box\n    Then the 'Choose Voice' dropdown with data-testid 'voice-select' should be populated with available voices from the Web Speech API"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given(\"the Speech Text Reader page is loaded\")\ndef step_given_page_is_loaded(context):\n    # Initialize the WebDriver and load the test page\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)  # Allow the page to load completely\n\n@when(\"the page is initialized\")\ndef step_when_page_is_initialized(context):\n    # Wait for the page elements to be interactable\n    WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='toggle-button']\"))\n    )\n    time.sleep(1)\n\n@when(\"the user clicks the 'Toggle Text Box' button with data-testid \\\"toggle-button\\\" to display the text box\")\ndef step_when_user_clicks_toggle_button(context):\n    # Ensure the toggle button is visible and not obstructed\n    toggle_button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='toggle-button']\"))\n    )\n    context.driver.execute_script(\"arguments[0].scrollIntoView(true);\", toggle_button)  # Scroll to the button if necessary\n    toggle_button.click()\n    time.sleep(1)  # Allow the text box to toggle its visibility\n\n@then(\"the 'Choose Voice' dropdown with data-testid 'voice-select' should be populated with available voices from the Web Speech API\")\ndef step_then_dropdown_is_populated(context):\n    # Wait for the dropdown to be populated\n    voice_select = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='voice-select']\"))\n    )\n    options = voice_select.find_elements(By.TAG_NAME, \"option\")\n    assert len(options) > 0, \"The 'Choose Voice' dropdown is not populated with voices.\"\n    time.sleep(1)\n\n# Cleanup after the test\ndef after_scenario(context, scenario):\n    if hasattr(context, 'driver'):\n        context.driver.quit()"
                }
            ]
        },
        "4": {
            "requirement": {
                "description": "The Speech Text Reader web application must allow users to select a voice from the 'Choose Voice' dropdown, identified by data-testid='voice-select'. Upon selection, the system should set the chosen voice for speech synthesis. The dropdown should be populated with available voices when the page is fully loaded. The system must handle multiple voice selections, ensuring that the last selected voice is set as the active voice for speech synthesis. The application should support voice options that include specific language codes, such as 'CN' for Chinese or 'US' for English, and accurately set the voice containing these codes as the active voice when selected."
            },
            "test_cases": [
                {
                    "test_case": [
                        "Feature: Set selected voice for speech synthesis\n  The system should allow the user to select a voice from the \"Choose Voice\" dropdown, and the selected voice should be set for speech synthesis.\n\n\nScenario: [Normal] User selects a voice from the dropdown\n   Given the Speech Text Reader page has fully loaded\n   And the user clicks the 'Toggle Text Box' button identified by data-testid=\"toggle-button\" to reveal the text box\n   And the 'Choose Voice' dropdown identified by data-testid=\"voice-select\" is populated with available voices\n   When the user selects an option from the 'Choose Voice' dropdown (data-testid='voice-select') where the option text includes 'US'\n   Then the system should set the voice containing 'US' as the active voice for speech synthesis"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\ndef is_visible(element):\n    return element.is_displayed()\n\n@given(\"the Speech Text Reader page has fully loaded\")\ndef step_given_page_loaded(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='toggle-button']\"))\n    )\n    time.sleep(1)\n\n@given(\"the user clicks the 'Toggle Text Box' button identified by data-testid=\\\"toggle-button\\\" to reveal the text box\")\ndef step_given_toggle_text_box(context):\n    toggle_button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='toggle-button']\"))\n    )\n    toggle_button.click()\n    time.sleep(1)\n\n@given(\"the 'Choose Voice' dropdown identified by data-testid=\\\"voice-select\\\" is populated with available voices\")\ndef step_given_voice_dropdown_populated(context):\n    voices_dropdown = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='voice-select']\"))\n    )\n    assert is_visible(voices_dropdown), \"Voice dropdown is not visible\"\n    options = voices_dropdown.find_elements(By.TAG_NAME, \"option\")\n    assert len(options) > 0, \"Voice dropdown is not populated\"\n    time.sleep(1)\n\n@when(\"the user selects an option from the 'Choose Voice' dropdown (data-testid='voice-select') where the option text includes 'US'\")\ndef step_when_select_voice(context):\n    voices_dropdown = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='voice-select']\"))\n    )\n    voices_dropdown.click()\n    time.sleep(1)\n    options = voices_dropdown.find_elements(By.TAG_NAME, \"option\")\n    voice_found = False\n    for option in options:\n        if \"US\" in option.text:\n            option.click()\n            voice_found = True\n            break\n    assert voice_found, \"Voice 'Google US English' not found in the dropdown\"\n    time.sleep(1)\n\n@then(\"the system should set the voice containing 'US' as the active voice for speech synthesis\")\ndef step_then_verify_active_voice(context):\n    voices_dropdown = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='voice-select']\")\n    selected_option = voices_dropdown.find_element(By.CSS_SELECTOR, \"option:checked\")\n    assert \"US\" in selected_option.text, f\"Expected 'Google US English', but got '{selected_option.text}'\"\n    time.sleep(1)\n\n# Teardown\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: Set selected voice for speech synthesis\n  The system should allow the user to select a voice from the \"Choose Voice\" dropdown, and the selected voice should be set for speech synthesis.\n\n\nScenario: [Normal] User selects a voice from the dropdown\n   Given the Speech Text Reader page has fully loaded\n   And the user clicks the 'Toggle Text Box' button identified by data-testid=\"toggle-button\" to reveal the text box\n   And the 'Choose Voice' dropdown identified by data-testid=\"voice-select\" is populated with available voices\n   When the user selects an option from the 'Choose Voice' dropdown (data-testid='voice-select') where the option text includes 'CN'\n   Then the system should set the voice containing ‘CN’ as the active voice for speech synthesis"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\ndef is_expanded(element):\n    aria = element.get_attribute(\"aria-expanded\")\n    if aria is not None:\n        return aria == \"true\"\n\n    class_list = element.get_attribute(\"class\").split()\n    if any(cls in class_list for cls in [\"expanded\", \"open\", \"show\"]):\n        return True\n\n    data_expanded = element.get_attribute(\"data-expanded\")\n    if data_expanded is not None:\n        return data_expanded == \"true\"\n\n    return element.is_displayed()\n\n@given('the Speech Text Reader page has fully loaded')\ndef step_impl(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)\n\n@given('the user clicks the \\'Toggle Text Box\\' button identified by data-testid=\"toggle-button\" to reveal the text box')\ndef step_impl(context):\n    toggle_button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='toggle-button']\"))\n    )\n    toggle_button.click()\n    time.sleep(1)\n\n@given('the \\'Choose Voice\\' dropdown identified by data-testid=\"voice-select\" is populated with available voices')\ndef step_impl(context):\n    voices_select = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='voice-select']\"))\n    )\n    options = voices_select.find_elements(By.TAG_NAME, \"option\")\n    assert len(options) > 0, \"No voices available in the dropdown\"\n    time.sleep(1)\n\n@when('the user selects an option from the \\'Choose Voice\\' dropdown (data-testid=\\'voice-select\\') where the option text includes \\'CN\\'')\ndef step_impl(context):\n    voices_select = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='voice-select']\")\n    options = voices_select.find_elements(By.TAG_NAME, \"option\")\n    for option in options:\n        if 'CN' in option.text:\n            option.click()\n            break\n    time.sleep(1)\n\n@then('the system should set the voice containing ‘CN’ as the active voice for speech synthesis')\ndef step_impl(context):\n    selected_voice = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='voice-select']\").get_attribute(\"value\")\n    selected_voice_text = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='voice-select'] option:checked\").text\n    assert 'CN' in selected_voice_text, f\"Expected selected voice to contain 'CN', but got '{selected_voice_text}'\"\n    time.sleep(1)\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: Set selected voice for speech synthesis\n  The system should allow the user to select a voice from the \"Choose Voice\" dropdown, and the selected voice should be set for speech synthesis.\n\n\nScenario: [Edge] User changes the selected voice multiple times\n    Given the Speech Text Reader page is loaded\n    And the page is initialized\n    And the user clicks the 'Toggle Text Box' button identified by data-testid=\"toggle-button\" to reveal the text box\n    And the 'Choose Voice' dropdown identified by data-testid=\"voice-select\" is populated with available voices\n    When the user selects an option from the 'Choose Voice' dropdown (data-testid='voice-select') where the option text includes 'CN'\n    When the user selects an option from the 'Choose Voice' dropdown (data-testid='voice-select') where the option text includes ‘US’\n    Then the system should set the voice containing ‘US’ as the active voice for speech synthesis"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\ndef is_expanded(element):\n    aria = element.get_attribute(\"aria-expanded\")\n    if aria is not None:\n        return aria == \"true\"\n\n    class_list = element.get_attribute(\"class\").split()\n    if any(cls in class_list for cls in [\"expanded\", \"open\", \"show\"]):\n        return True\n\n    data_expanded = element.get_attribute(\"data-expanded\")\n    if data_expanded is not None:\n        return data_expanded == \"true\"\n\n    return element.is_displayed()\n\n@given('the Speech Text Reader page is loaded')\ndef step_given_page_loaded(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)\n\n@given('the page is initialized')\ndef step_given_page_initialized(context):\n    WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='toggle-button']\"))\n    )\n    time.sleep(1)\n\n@given('the user clicks the \\'Toggle Text Box\\' button identified by data-testid=\"toggle-button\" to reveal the text box')\ndef step_given_click_toggle_button(context):\n    toggle_button = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='toggle-button']\")\n    toggle_button.click()\n    time.sleep(1)\n\n@given('the \\'Choose Voice\\' dropdown identified by data-testid=\"voice-select\" is populated with available voices')\ndef step_given_voice_dropdown_populated(context):\n    WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='voice-select'] option\"))\n    )\n    time.sleep(1)\n\n@when('the user selects an option from the \\'Choose Voice\\' dropdown (data-testid=\\'voice-select\\') where the option text includes \\'CN\\'')\ndef step_when_select_cn_voice(context):\n    voices_select = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='voice-select']\")\n    for option in voices_select.find_elements(By.TAG_NAME, 'option'):\n        if 'CN' in option.text:\n            option.click()\n            break\n    time.sleep(1)\n\n@when('the user selects an option from the \\'Choose Voice\\' dropdown (data-testid=\\'voice-select\\') where the option text includes ‘US’')\ndef step_when_select_us_voice(context):\n    voices_select = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='voice-select']\")\n    for option in voices_select.find_elements(By.TAG_NAME, 'option'):\n        if 'US' in option.text:\n            option.click()\n            break\n    time.sleep(1)\n\n@then('the system should set the voice containing ‘US’ as the active voice for speech synthesis')\ndef step_then_verify_us_voice_set(context):\n    selected_voice = context.driver.execute_script(\n        \"return arguments[0].options[arguments[0].selectedIndex].text;\", \n        context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='voice-select']\")\n    )\n    assert 'US' in selected_voice, f\"Expected 'US' in selected voice, but got '{selected_voice}'\"\n    time.sleep(1)\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                }
            ]
        },
        "5": {
            "requirement": {
                "description": "The Speech Text Reader application must allow users to enter text into the textarea (data-testid='text-area') and read it aloud using a selected voice from the dynamically populated dropdown (data-testid='voice-select'). When the user toggles the text box (data-testid='text-box') via the 'Toggle Text Box' button (data-testid='toggle-button') and clicks the 'Read Text' button (data-testid='read-button'), the system must use the selected voice to read the entered text aloud."
            },
            "test_cases": [
                {
                    "test_case": [
                        "Feature: REQ-005 - Text Reading Functionality\n  The system should read aloud the text entered by the user in the textarea using the selected voice when the 'Read Text' button is clicked.\n\n\nScenario: [Normal] User enters text and clicks 'Read Text' button\n    Given the Speech Text Reader page is loaded\n    And the user clicks the \"Toggle Text Box\" button with data-testid \"toggle-button\" to display the text box\n    And the user enters \"Hello World\" into the textarea with data-testid \"text-area\"\n    And the user selects a voice from the dropdown with data-testid \"voice-select\"\n    When the user clicks the \"Read Text\" button with data-testid \"read-button\"\n    Then the system should read aloud \"Hello World\" using the selected voice"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given(\"the Speech Text Reader page is loaded\")\ndef step_given_page_loaded(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    context.driver.maximize_window()\n    WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='toggle-button']\"))\n    )\n\n@given('the user clicks the \"Toggle Text Box\" button with data-testid \"toggle-button\" to display the text box')\ndef step_given_toggle_text_box(context):\n    toggle_button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='toggle-button']\"))\n    )\n    toggle_button.click()\n    time.sleep(1)  # Allow time for the text box to appear\n\n@given('the user enters \"Hello World\" into the textarea with data-testid \"text-area\"')\ndef step_given_enter_text(context):\n    text_area = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='text-area']\"))\n    )\n    text_area.clear()\n    text_area.send_keys(\"Hello World\")\n\n@given('the user selects a voice from the dropdown with data-testid \"voice-select\"')\ndef step_given_select_voice(context):\n    voice_select = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='voice-select']\"))\n    )\n    options = voice_select.find_elements(By.TAG_NAME, \"option\")\n    if options:\n        options[0].click()  # Select the first voice option\n\n@when('the user clicks the \"Read Text\" button with data-testid \"read-button\"')\ndef step_when_click_read_button(context):\n    read_button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='read-button']\"))\n    )\n    read_button.click()\n\n@then('the system should read aloud \"Hello World\" using the selected voice')\ndef step_then_verify_text_read(context):\n    # Since verifying speech synthesis output programmatically is complex,\n    # we assume the button click triggers the speech synthesis functionality.\n    # You can add manual verification steps or mock the speech synthesis API in unit tests.\n    print(\"Speech synthesis triggered for 'Hello World'.\")\n\n# Cleanup after tests\ndef after_scenario(context, scenario):\n    if hasattr(context, 'driver'):\n        context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: REQ-005 - Text Reading Functionality\n  The system should read aloud the text entered by the user in the textarea using the selected voice when the 'Read Text' button is clicked.\n\n\nScenario: [Edge] User enters a long text and clicks 'Read Text' button\n    Given the Speech Text Reader page is loaded\n    And the user clicks the \"Toggle Text Box\" button with data-testid \"toggle-button\" to display the text box\n    And the user enters a long text into the textarea with data-testid \"text-area\"\n    And the user selects a voice from the dropdown with data-testid \"voice-select\"\n    When the user clicks the \"Read Text\" button with data-testid \"read-button\"\n    Then the system should read aloud \"Hello World\" using the selected voice"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\ndef is_expanded(element):\n    aria = element.get_attribute(\"aria-expanded\")\n    if aria is not None:\n        return aria == \"true\"\n\n    class_list = element.get_attribute(\"class\").split()\n    if any(cls in class_list for cls in [\"expanded\", \"open\", \"show\"]):\n        return True\n\n    data_expanded = element.get_attribute(\"data-expanded\")\n    if data_expanded is not None:\n        return data_expanded == \"true\"\n\n    return element.is_displayed()\n\n@given('the Speech Text Reader page is loaded')\ndef step_given_page_loaded(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)\n\n@given('the user clicks the \"Toggle Text Box\" button with data-testid \"toggle-button\" to display the text box')\ndef step_given_click_toggle_button(context):\n    toggle_button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='toggle-button']\"))\n    )\n    toggle_button.click()\n    time.sleep(1)\n\n@given('the user enters a long text into the textarea with data-testid \"text-area\"')\ndef step_given_enter_long_text(context):\n    textarea = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='text-area']\"))\n    )\n    textarea.send_keys(\"Hello World\")\n    time.sleep(1)\n\n@given('the user selects a voice from the dropdown with data-testid \"voice-select\"')\ndef step_given_select_voice(context):\n    voice_select = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='voice-select']\"))\n    )\n    voice_select.click()\n    time.sleep(1)\n    # Assuming the first voice option is selected for simplicity\n    first_option = voice_select.find_element(By.TAG_NAME, \"option\")\n    first_option.click()\n    time.sleep(1)\n\n@when('the user clicks the \"Read Text\" button with data-testid \"read-button\"')\ndef step_when_click_read_button(context):\n    read_button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='read-button']\"))\n    )\n    read_button.click()\n    time.sleep(1)\n\n@then('the system should read aloud \"Hello World\" using the selected voice')\ndef step_then_system_reads_aloud(context):\n    # This step assumes that the reading functionality is tested manually or through audio verification tools\n    # As Selenium cannot verify audio output directly, this step is a placeholder for manual verification\n    print(\"Verify that the system reads aloud 'Hello World' using the selected voice.\")\n    context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: REQ-005 - Text Reading Functionality\n  The system should read aloud the text entered by the user in the textarea using the selected voice when the 'Read Text' button is clicked.\n\n\nScenario: [Edge] User enters text and changes voice before clicking 'Read Text' button\n    Given the Speech Text Reader page is loaded\n    And the user clicks the \"Toggle Text Box\" button with data-testid \"toggle-button\" to display the text box\n    And the user enters \"Testing voice change\" into the textarea with data-testid 'text-area'\n    And the user selects a voice from the dropdown with data-testid 'voice-select'\n    And the user changes the voice selection to another voice\n    When the user clicks the 'Read Text' button with data-testid 'read-button'\n    Then the system should read aloud \"Testing voice change\" using the newly selected voice"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\ndef is_visible(element):\n    return element.is_displayed()\n\n@given(\"the Speech Text Reader page is loaded\")\ndef step_given_page_loaded(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='toggle-button']\"))\n    )\n    time.sleep(1)\n\n@given('the user clicks the \"Toggle Text Box\" button with data-testid \"toggle-button\" to display the text box')\ndef step_given_click_toggle_button(context):\n    toggle_button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='toggle-button']\"))\n    )\n    toggle_button.click()\n    time.sleep(1)\n\n@given('the user enters \"Testing voice change\" into the textarea with data-testid \\'text-area\\'')\ndef step_given_enter_text(context):\n    text_area = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='text-area']\"))\n    )\n    text_area.clear()\n    text_area.send_keys(\"Testing voice change\")\n    time.sleep(1)\n\n@given('the user selects a voice from the dropdown with data-testid \\'voice-select\\'')\ndef step_given_select_voice(context):\n    voice_select = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='voice-select']\"))\n    )\n    options = voice_select.find_elements(By.TAG_NAME, \"option\")\n    if options:\n        options[0].click()  # Select the first voice option\n    time.sleep(1)\n\n@given('the user changes the voice selection to another voice')\ndef step_given_change_voice(context):\n    voice_select = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='voice-select']\"))\n    )\n    options = voice_select.find_elements(By.TAG_NAME, \"option\")\n    if len(options) > 1:\n        options[1].click()  # Select the second voice option\n    time.sleep(1)\n\n@when('the user clicks the \\'Read Text\\' button with data-testid \\'read-button\\'')\ndef step_when_click_read_button(context):\n    read_button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='read-button']\"))\n    )\n    read_button.click()\n    time.sleep(1)\n\n@then('the system should read aloud \"Testing voice change\" using the newly selected voice')\ndef step_then_validate_text_read(context):\n    # Since speech synthesis is a browser feature, we cannot directly validate the audio output.\n    # Instead, we can check if the text message is set correctly in the textarea.\n    text_area = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='text-area']\"))\n    )\n    assert \"Testing voice change\" in text_area.get_attribute(\"value\"), \"Text was not set correctly for reading.\"\n\n    # Cleanup: Close the browser\n    context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: REQ-005 - Text Reading Functionality\n  The system should read aloud the text entered by the user in the textarea using the selected voice when the 'Read Text' button is clicked.\n\n\nScenario: [Error] User clicks 'Read Text' button without entering text\n    Given the Speech Text Reader page is loaded\n    And the user clicks the \"Toggle Text Box\" button with data-testid \"toggle-button\" to display the text box\n    And the textarea with data-testid 'text-area' is empty\n    And the user selects a voice from the dropdown with data-testid 'voice-select'\n    When the user clicks the 'Read Text' button with data-testid 'read-button'\n    Then the system should not read aloud any text"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\ndef is_visible(element):\n    return element.is_displayed()\n\n@given(\"the Speech Text Reader page is loaded\")\ndef step_given_page_is_loaded(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='toggle-button']\"))\n    )\n    time.sleep(1)\n\n@given('the user clicks the \"Toggle Text Box\" button with data-testid \"toggle-button\" to display the text box')\ndef step_given_toggle_text_box(context):\n    toggle_button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='toggle-button']\"))\n    )\n    toggle_button.click()\n    time.sleep(1)\n\n@given(\"the textarea with data-testid 'text-area' is empty\")\ndef step_given_textarea_is_empty(context):\n    textarea = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='text-area']\"))\n    )\n    assert textarea.get_attribute(\"value\") == \"\", \"Expected textarea to be empty\"\n    time.sleep(1)\n\n@given(\"the user selects a voice from the dropdown with data-testid 'voice-select'\")\ndef step_given_select_voice(context):\n    voice_select = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='voice-select']\"))\n    )\n    options = voice_select.find_elements(By.TAG_NAME, \"option\")\n    assert len(options) > 0, \"Expected at least one voice option\"\n    options[0].click()  # Select the first voice option\n    time.sleep(1)\n\n@when(\"the user clicks the 'Read Text' button with data-testid 'read-button'\")\ndef step_when_click_read_button(context):\n    read_button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='read-button']\"))\n    )\n    read_button.click()\n    time.sleep(1)\n\n@then(\"the system should not read aloud any text\")\ndef step_then_no_text_read_aloud(context):\n    # Since we cannot directly verify speech synthesis output, we check that no text is set in the message object\n    textarea = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='text-area']\")\n    assert textarea.get_attribute(\"value\") == \"\", \"Expected no text to be read aloud\"\n    time.sleep(1)\n\n# Teardown\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                }
            ]
        },
        "6": {
            "requirement": {
                "description": "The system must dynamically generate predefined phrase boxes, located in the main section, based on a data array. Each box contains an image (<img src=...>) and a paragraph (<p class='info'>...</p>) representing a phrase. When a user clicks on a box, the system must read the associated text aloud using the Web Speech API and visually highlight the box by adding the active class for 800 milliseconds. The system must correctly handle normal clicks, sequential clicks across different boxes, and rapid repeated clicks on the same box, ensuring that speech playback and visual feedback are triggered accurately for each interaction."
            },
            "test_cases": [
                {
                    "test_case": [
                        "Feature: REQ-006 - Predefined Phrase Box Interaction\n  The system should allow users to click on predefined phrase boxes, triggering the associated text to be read aloud and visually highlighting the box momentarily.\n\n\n  Scenario: [Normal] User clicks on a predefined phrase box\n    Given the webpage is loaded and all predefined phrase boxes are displayed in the main section\n    When the user clicks on the box containing the text \"I'm Thirsty\"\n    Then the system should read aloud the text \"I'm Thirsty\"\n    And the box should visually highlight by adding the \"active\" class\n    And the highlight should disappear after 800 milliseconds\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\ndef is_expanded(element):\n    aria = element.get_attribute(\"aria-expanded\")\n    if aria is not None:\n        return aria == \"true\"\n\n    class_list = element.get_attribute(\"class\").split()\n    if any(cls in class_list for cls in [\"expanded\", \"open\", \"show\"]):\n        return True\n\n    data_expanded = element.get_attribute(\"data-expanded\")\n    if data_expanded is not None:\n        return data_expanded == \"true\"\n\n    return element.is_displayed()\n\n@given(\"the webpage is loaded and all predefined phrase boxes are displayed in the main section\")\ndef step_given_webpage_loaded(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"main .box\"))\n    )\n    time.sleep(1)\n\n@when(\"the user clicks on the box containing the text \\\"I'm Thirsty\\\"\")\ndef step_when_user_clicks_thirsty_box(context):\n    boxes = context.driver.find_elements(By.CSS_SELECTOR, \"main .box\")\n    for box in boxes:\n        if \"I'm Thirsty\" in box.text:\n            box.click()\n            time.sleep(1)\n            break\n\n@then(\"the system should read aloud the text \\\"I'm Thirsty\\\"\")\ndef step_then_system_reads_text(context):\n    # Assuming the text is read aloud, we can't verify audio output directly.\n    # This step is a placeholder for audio verification.\n    pass\n\n@then(\"the box should visually highlight by adding the \\\"active\\\" class\")\ndef step_then_box_highlighted(context):\n    boxes = context.driver.find_elements(By.CSS_SELECTOR, \"main .box\")\n    for box in boxes:\n        if \"I'm Thirsty\" in box.text:\n            assert \"active\" in box.get_attribute(\"class\"), \"Box is not highlighted\"\n            break\n\n@then(\"the highlight should disappear after 800 milliseconds\")\ndef step_then_highlight_disappears(context):\n    time.sleep(0.8)\n    boxes = context.driver.find_elements(By.CSS_SELECTOR, \"main .box\")\n    for box in boxes:\n        if \"I'm Thirsty\" in box.text:\n            assert \"active\" not in box.get_attribute(\"class\"), \"Box highlight did not disappear\"\n            break\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: REQ-006 - Predefined Phrase Box Interaction\n  The system should allow users to click on predefined phrase boxes, triggering the associated text to be read aloud and visually highlighting the box momentarily.\n\n\n  Scenario: [Normal] User clicks on multiple predefined phrase boxes sequentially\n    Given the webpage is loaded and all predefined phrase boxes are displayed in the main section\n    When the user clicks on the box containing the text \"I'm Hungry\"\n    Then the system should read aloud the text \"I'm Hungry\"\n    And the box should visually highlight by adding the \"active\" class\n    And the highlight should disappear after 800 milliseconds\n    When the user clicks on the box containing the text \"I'm Happy\"\n    Then the system should read aloud the text \"I'm Happy\"\n    And the box should visually highlight by adding the \"active\" class\n    And the highlight should disappear after 800 milliseconds\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\ndef is_active(element):\n    \"\"\"Helper function to check if the box is visually highlighted.\"\"\"\n    class_list = element.get_attribute(\"class\").split()\n    return \"active\" in class_list\n\n@given(\"the webpage is loaded and all predefined phrase boxes are displayed in the main section\")\ndef step_given_webpage_loaded(context):\n    context.driver = webdriver.Chrome()  # Initialize the WebDriver\n    context.driver.get(f\"file://index.html\")  # Load the test page\n    WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"main .box\"))\n    )  # Wait for the predefined phrase boxes to be displayed\n\n@when('the user clicks on the box containing the text \"{text}\"')\ndef step_when_user_clicks_box(context, text):\n    boxes = context.driver.find_elements(By.CSS_SELECTOR, \"main .box\")\n    target_box = None\n    for box in boxes:\n        box_text = box.text.strip()\n        print(box_text)\n        if text.strip().lower() in box_text.lower():\n            target_box = box\n            break\n    assert target_box is not None, f\"Box with text '{text}' not found\"\n    WebDriverWait(context.driver, 10).until(EC.element_to_be_clickable(target_box))\n    target_box.click()  # Click the box\n\n@then('the system should read aloud the text \"{text}\"')\ndef step_then_system_reads_text(context, text):\n    # Validate that the specified text is set in the SpeechSynthesisUtterance\n    pass\n\n@then('the box should visually highlight by adding the \"active\" class')\ndef step_then_box_highlights(context):\n    active_boxes = [box for box in context.driver.find_elements(By.CSS_SELECTOR, \"main .box\") if is_active(box)]\n    assert len(active_boxes) > 0, \"Expected at least one box to be visually highlighted\"\n\n@then('the highlight should disappear after 800 milliseconds')\ndef step_then_highlight_disappears(context):\n    time.sleep(0.8)  # Wait for 800 milliseconds\n    active_boxes = [box for box in context.driver.find_elements(By.CSS_SELECTOR, \"main .box\") if is_active(box)]\n    assert len(active_boxes) == 0, \"Expected the highlight to disappear\"\n\n# Teardown step to close the browser after the test\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: REQ-006 - Predefined Phrase Box Interaction\n  The system should allow users to click on predefined phrase boxes, triggering the associated text to be read aloud and visually highlighting the box momentarily.\n\n\n  Scenario: [Edge] User clicks on a predefined phrase box repeatedly in quick succession\n    Given the webpage is loaded and all predefined phrase boxes are displayed in the main section\n    When the user clicks on the box containing the text \"I'm Angry\" three times in quick succession\n    Then the system should read aloud the text \"I'm Angry\" three times\n    And the box should visually highlight by adding the \"active\" class each time\n    And the highlight should disappear after 800 milliseconds for each click\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\ndef is_expanded(element):\n    aria = element.get_attribute(\"aria-expanded\")\n    if aria is not None:\n        return aria == \"true\"\n\n    class_list = element.get_attribute(\"class\").split()\n    if any(cls in class_list for cls in [\"expanded\", \"open\", \"show\"]):\n        return True\n\n    data_expanded = element.get_attribute(\"data-expanded\")\n    if data_expanded is not None:\n        return data_expanded == \"true\"\n\n    return element.is_displayed()\n\n@given('the webpage is loaded and all predefined phrase boxes are displayed in the main section')\ndef step_given_webpage_loaded(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)  # Allow time for the page to load\n\n@when('the user clicks on the box containing the text \"I\\'m Angry\" three times in quick succession')\ndef step_when_user_clicks_angry_box(context):\n    main_section = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.TAG_NAME, \"main\"))\n    )\n    angry_box = WebDriverWait(main_section, 10).until(\n        EC.element_to_be_clickable((By.XPATH, \"//p[contains(text(), \\\"I'm Angry\\\")]/..\"))\n    )\n    for _ in range(3):\n        angry_box.click()\n        time.sleep(0.1)  # Simulate quick succession clicks\n\n@then('the system should read aloud the text \"I\\'m Angry\" three times')\ndef step_then_system_reads_aloud(context):\n    # This step would require integration with a speech synthesis verification tool\n    # Placeholder for actual speech synthesis verification\n    pass\n\n@then('the box should visually highlight by adding the \"active\" class each time')\ndef step_then_box_highlights(context):\n    angry_box = context.driver.find_element(By.XPATH, \"//p[contains(text(), \\\"I'm Angry\\\")]/..\")\n    assert \"active\" in angry_box.get_attribute(\"class\"), \"The box should be highlighted with 'active' class\"\n\n@then('the highlight should disappear after 800 milliseconds for each click')\ndef step_then_highlight_disappears(context):\n    angry_box = context.driver.find_element(By.XPATH, \"//p[contains(text(), \\\"I'm Angry\\\")]/..\")\n    time.sleep(0.8)  # Wait for the highlight to disappear\n    assert \"active\" not in angry_box.get_attribute(\"class\"), \"The 'active' class should be removed after 800ms\"\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                }
            ]
        }
    }
}