{
    "summary": {
        "overview": "The web application is a Random Choice Picker that allows users to input multiple choices separated by commas, processes the input into visual tags, and randomly selects one of the tags after simulating a selection process. The application provides immediate visual feedback and interaction for the user.",
        "predefined_options": "No predefined options are set by the system. Users manually input their choices in the textarea.",
        "external_resources": "No external resources such as images, audio files, or links are used in the application.",
        "external_js_libraries": "No external JavaScript libraries are used. The application relies solely on custom JavaScript code."
    },
    "finegrained_rewith_test": {
        "1": {
            "requirement": {
                "description": "Upon loading the webpage, the textarea element identified by the attribute data-testid='choices-textarea' must automatically receive focus, enabling the user to begin typing without additional interaction. The user inputs choices separated by commas into this textarea. As the user types, each choice is dynamically parsed and displayed as individual tags within the container identified by data-testid='tags-container'. When the user presses the 'Enter' key, the textarea is cleared, and a random selection process begins. This process involves highlighting tags in a rapid sequence for a duration of 3 seconds (30 iterations at 100ms intervals), culminating in the final selection of one tag, which remains highlighted. Each tag is created with a unique data-id attribute in the format 'tag-{index}', where index is the tag's position in the sequence. The highlight effect is achieved by toggling the 'highlight' class on the selected tag."
            },
            "test_cases": [
                {
                    "test_case": [
                        "Feature: Automatic Focus on Textarea Element\n  The page should automatically focus on the textarea element when it loads, allowing the user to start typing immediately.\n\n\n  Scenario: [Normal] Textarea receives focus on page load\n    Given the webpage is loaded\n    When the user views the page\n    Then the textarea element with data-testid \"choices-textarea\" should be focused\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\n# Placeholder for the file path to dynamically load the test page\nfile_path = \"index.html\"\n\n@given(\"the webpage is loaded\")\ndef step_given_webpage_is_loaded(context):\n    # Initialize the Selenium WebDriver\n    context.driver = webdriver.Chrome()\n    # Load the test page\n    context.driver.get(f\"file://index.html\")\n    # Maximize the browser window for better visibility\n    context.driver.maximize_window()\n    time.sleep(1)  # Allow the page to load completely\n\n@when(\"the user views the page\")\ndef step_when_user_views_page(context):\n    # Wait for the textarea element to be present and visible\n    WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='choices-textarea']\"))\n    )\n    time.sleep(1)  # Allow time for the user to view the page\n\n@then('the textarea element with data-testid \"choices-textarea\" should be focused')\ndef step_then_textarea_should_be_focused(context):\n    # Locate the textarea element\n    textarea = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='choices-textarea']\")\n    # Check if the textarea element is focused\n    is_focused = context.driver.execute_script(\"return document.activeElement === arguments[0];\", textarea)\n    assert is_focused, \"The textarea element is not focused as expected.\"\n\n# Hook to close the browser after each scenario\ndef after_scenario(context, scenario):\n    if hasattr(context, \"driver\"):\n        context.driver.quit()"
                }
            ]
        },
        "2": {
            "requirement": {
                "description": "The user must be able to input multiple choices into the textarea with the attribute data-testid 'choices-textarea', separated by commas. Upon input, the system should process the entries, trimming any leading or trailing spaces, and ignoring empty entries. Each valid choice should be displayed as a visual tag within the container identified by data-testid 'tags-container'. Each tag should be a span element with the class 'tag' and a unique 'data-id' attribute in the format 'tag-{index}', where {index} is the position of the tag starting from 1. The system should handle various input scenarios, including normal cases with valid entries, edge cases with extra spaces or single entries, and error cases with only commas or special characters. When the 'Enter' key is pressed, the textarea should be cleared, and a random tag should be highlighted for a brief period, simulating a selection process. The highlighting involves adding and removing the 'highlight' class to the randomly selected tag."
            },
            "test_cases": [
                {
                    "test_case": [
                        "Feature: Input and Display Multiple Choices as Tags\n  The user should be able to input multiple choices into the textarea, separated by commas. The system should process the input and display each choice as a visual tag in the tags container.\n\n\n  Scenario: [Normal] User inputs multiple valid choices separated by commas\n    Given the webpage is loaded with the textarea focused\n    When the user enters \"apple, banana, cherry\" into the textarea with data-testid \"choices-textarea\"\n    Then the tags container with data-testid \"tags-container\" should display three tags with texts \"apple\", \"banana\", and \"cherry\"\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the webpage is loaded with the textarea focused')\ndef step_given_webpage_loaded(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    textarea = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='choices-textarea']\"))\n    )\n    textarea.click()\n    time.sleep(1)\n\n@when('the user enters \"apple, banana, cherry\" into the textarea with data-testid \"choices-textarea\"')\ndef step_when_user_enters_choices(context):\n    textarea = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='choices-textarea']\"))\n    )\n    textarea.send_keys(\"apple, banana, cherry\")\n    time.sleep(1)\n    textarea.send_keys(\"\\n\")\n    time.sleep(1)\n\n@then('the tags container with data-testid \"tags-container\" should display three tags with texts \"apple\", \"banana\", and \"cherry\"')\ndef step_then_tags_displayed(context):\n    tags_container = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='tags-container']\"))\n    )\n    tags = tags_container.find_elements(By.CSS_SELECTOR, \".tag\")\n    tag_texts = [tag.text.strip().lower() for tag in tags]\n    expected_tags = [\"apple\", \"banana\", \"cherry\"]\n    for expected_tag in expected_tags:\n        assert expected_tag in tag_texts, f\"Expected tag '{expected_tag}' not found in {tag_texts}\"\n\n    context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: Input and Display Multiple Choices as Tags\n  The user should be able to input multiple choices into the textarea, separated by commas. The system should process the input and display each choice as a visual tag in the tags container.\n\n\n  Scenario: [Edge] User inputs choices with extra spaces and empty entries\n    Given the webpage is loaded with the textarea focused\n    When the user enters \"  apple  , , banana , cherry  \" into the textarea with data-testid \"choices-textarea\"\n    Then the tags container with data-testid \"tags-container\" should display three tags with texts \"apple\", \"banana\", and \"cherry\"\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the webpage is loaded with the textarea focused')\ndef step_given_webpage_loaded(context):\n    # Initialize the Selenium WebDriver\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    \n    # Wait for the textarea to be visible and focused\n    textarea = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='choices-textarea']\"))\n    )\n    textarea.click()  # Ensure focus\n    time.sleep(1)  # Allow time for focus\n\n@when('the user enters \"  apple  , , banana , cherry  \" into the textarea with data-testid \"choices-textarea\"')\ndef step_when_user_enters_choices(context):\n    # Locate the textarea and input the choices\n    textarea = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='choices-textarea']\"))\n    )\n    textarea.send_keys(\"  apple  , , banana , cherry  \")\n    time.sleep(1)  # Allow time for input processing\n\n    # Simulate pressing the Enter key\n    textarea.send_keys(\"\\n\")\n    time.sleep(1)  # Allow time for tags to be created\n\n@then('the tags container with data-testid \"tags-container\" should display three tags with texts \"apple\", \"banana\", and \"cherry\"')\ndef step_then_tags_displayed(context):\n    # Locate the tags container\n    tags_container = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='tags-container']\"))\n    )\n    \n    # Retrieve all tags within the container\n    tags = tags_container.find_elements(By.CSS_SELECTOR, \".tag\")\n    tag_texts = [tag.text.strip() for tag in tags]\n\n    # Validate the tags' text content\n    expected_tags = [\"apple\", \"banana\", \"cherry\"]\n    assert tag_texts == expected_tags, f\"Expected tags {expected_tags}, but got {tag_texts}\"\n\n    time.sleep(1)  # Allow time for visual inspection\n\n# Cleanup after tests\ndef after_scenario(context, scenario):\n    if hasattr(context, 'driver'):\n        context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: Input and Display Multiple Choices as Tags\n  The user should be able to input multiple choices into the textarea, separated by commas. The system should process the input and display each choice as a visual tag in the tags container.\n\n\n  Scenario: [Edge] User inputs a single choice without commas\n    Given the webpage is loaded with the textarea focused\n    When the user enters \"apple\" into the textarea with data-testid \"choices-textarea\"\n    Then the tags container with data-testid \"tags-container\" should display one tag with text \"apple\"\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the webpage is loaded with the textarea focused')\ndef step_given_webpage_loaded(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    textarea = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='choices-textarea']\"))\n    )\n    textarea.click()\n    time.sleep(1)\n\n@when('the user enters \"apple\" into the textarea with data-testid \"choices-textarea\"')\ndef step_when_user_enters_choice(context):\n    textarea = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='choices-textarea']\"))\n    )\n    textarea.send_keys(\"apple\")\n    time.sleep(1)\n    textarea.send_keys(\"\\n\")\n    time.sleep(1)\n\n@then('the tags container with data-testid \"tags-container\" should display one tag with text \"apple\"')\ndef step_then_tags_displayed(context):\n    tags_container = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='tags-container']\"))\n    )\n    tags = tags_container.find_elements(By.CSS_SELECTOR, \".tag\")\n    assert len(tags) == 1, f\"Expected 1 tag, but found {len(tags)}\"\n    assert \"apple\" in tags[0].text.lower(), f\"Expected 'apple' in '{tags[0].text}'\"\n\n    context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: Input and Display Multiple Choices as Tags\n  The user should be able to input multiple choices into the textarea, separated by commas. The system should process the input and display each choice as a visual tag in the tags container.\n\n\n  Scenario: [Error] User inputs only commas without any valid choices\n    Given the webpage is loaded with the textarea focused\n    When the user enters \",,,,\" into the textarea with data-testid \"choices-textarea\"\n    Then the tags container with data-testid \"tags-container\" should not display any tags\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the webpage is loaded with the textarea focused')\ndef step_given_webpage_loaded(context):\n    # Initialize the WebDriver\n    context.driver = webdriver.Chrome()\n    # Load the test page\n    context.driver.get(f\"file://index.html\")\n    # Wait for the textarea to be present and focused\n    WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='choices-textarea']\"))\n    )\n    textarea = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='choices-textarea']\")\n    textarea.click()\n    time.sleep(1)  # Allow time for the focus to be set\n\n@when('the user enters \",,,,\" into the textarea with data-testid \"choices-textarea\"')\ndef step_when_user_enters_commas(context):\n    # Locate the textarea and input \",,,,\"\n    textarea = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='choices-textarea']\")\n    textarea.send_keys(\",,,,\")\n    time.sleep(1)  # Allow time for the input to be processed\n\n@then('the tags container with data-testid \"tags-container\" should not display any tags')\ndef step_then_no_tags_displayed(context):\n    # Locate the tags container\n    tags_container = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='tags-container']\")\n    # Verify that no tags are displayed\n    tags = tags_container.find_elements(By.CSS_SELECTOR, \".tag\")\n    assert len(tags) == 0, f\"Expected no tags, but found {len(tags)}\"\n    time.sleep(1)  # Allow time for visual confirmation\n\n# Teardown to close the browser after each scenario\ndef after_scenario(context, scenario):\n    if hasattr(context, 'driver'):\n        context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: Input and Display Multiple Choices as Tags\n  The user should be able to input multiple choices into the textarea, separated by commas. The system should process the input and display each choice as a visual tag in the tags container.\n\n\n  Scenario: [Error] User inputs choices with special characters\n    Given the webpage is loaded with the textarea focused\n    When the user enters \"apple, @banana!, #cherry$\" into the textarea with data-testid \"choices-textarea\"\n    Then the tags container with data-testid \"tags-container\" should display three tags with texts \"apple\", \"@banana!\", and \"#cherry$\""
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the webpage is loaded with the textarea focused')\ndef step_given_webpage_loaded(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    context.driver.maximize_window()\n    WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='choices-textarea']\"))\n    )\n    textarea = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='choices-textarea']\")\n    textarea.click()\n    time.sleep(1)\n\n@when('the user enters \"apple, @banana!, #cherry$\" into the textarea with data-testid \"choices-textarea\"')\ndef step_when_user_enters_choices(context):\n    textarea = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='choices-textarea']\")\n    textarea.clear()\n    textarea.send_keys(\"apple, @banana!, #cherry$\")\n    time.sleep(1)\n    textarea.send_keys(\"\\n\")\n    time.sleep(1)\n\n@then('the tags container with data-testid \"tags-container\" should display three tags with texts \"apple\", \"@banana!\", and \"#cherry$\"')\ndef step_then_tags_displayed(context):\n    WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='tags-container'] .tag\"))\n    )\n    tags_container = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='tags-container']\")\n    tags = tags_container.find_elements(By.CSS_SELECTOR, \".tag\")\n    tag_texts = [tag.text for tag in tags]\n\n    expected_tags = [\"apple\", \"@banana!\", \"#cherry$\"]\n    for expected_tag in expected_tags:\n        assert expected_tag in tag_texts, f\"Expected tag '{expected_tag}' not found in {tag_texts}\"\n\n    time.sleep(1)\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                }
            ]
        },
        "3": {
            "requirement": {
                "description": "The Random Choice Picker web application should allow users to input multiple choices into a textarea, separated by commas. When the user presses the 'Enter' key, the application must: 1) Clear the textarea with data-testid 'choices-textarea'. 2) Parse the input to create individual tags for each non-empty, trimmed choice, displaying them within the tags container with data-testid 'tags-container'. Each tag should have a unique 'data-id' attribute. 3) If no valid choices are entered (e.g., only commas or empty input), the tags container should remain empty, and no random selection should occur. 4) Initiate a random selection process where tags are highlighted in sequence, simulating a selection process for a duration of 3 seconds (30 iterations at 100ms intervals). 5) Conclude the process by highlighting one randomly selected tag to indicate the final choice. The application should handle edge cases such as single choice input, extra spaces around choices, and ensure no tags are created or highlighted when invalid input is provided."
            },
            "test_cases": [
                {
                    "test_case": [
                        "Feature: Random Choice Picker Enter Key Functionality\n  The system should clear the textarea and initiate the random selection process when the user presses the 'Enter' key.\n\n\nScenario: [Normal] User enters choices and presses 'Enter'\n  Given the Random Choice Picker page is loaded\n  And the user sees the textarea with data-testid \"choices-textarea\"\n  When the user enters \"Choice1, Choice2, Choice3\" into the textarea with data-testid \"choices-textarea\"\n  And the user presses the 'Enter' key\n  Then the textarea with data-testid \"choices-textarea\" should be cleared\n  And the tags container with data-testid \"tags-container\" should display tags for \"Choice1\", \"Choice2\", and \"Choice3\"\n  And after the random selection process, exactly one tag should remain highlighted to indicate the final choice"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given(\"the Random Choice Picker page is loaded\")\ndef step_given_page_loaded(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)\n\n@given(\"the user sees the textarea with data-testid \\\"choices-textarea\\\"\")\ndef step_given_user_sees_textarea(context):\n    textarea = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='choices-textarea']\"))\n    )\n    assert textarea.is_displayed(), \"Textarea is not visible\"\n    time.sleep(1)\n\n@when(\"the user enters \\\"Choice1, Choice2, Choice3\\\" into the textarea with data-testid \\\"choices-textarea\\\"\")\ndef step_when_user_enters_choices(context):\n    textarea = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='choices-textarea']\")\n    textarea.clear()\n    textarea.send_keys(\"Choice1, Choice2, Choice3\")\n    time.sleep(1)\n\n@when(\"the user presses the 'Enter' key\")\ndef step_when_user_presses_enter(context):\n    textarea = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='choices-textarea']\")\n    textarea.send_keys(\"\\n\")\n    time.sleep(1)\n\n@then(\"the textarea with data-testid \\\"choices-textarea\\\" should be cleared\")\ndef step_then_textarea_cleared(context):\n    textarea = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='choices-textarea']\")\n    assert textarea.get_attribute(\"value\") == \"\", \"Textarea is not cleared\"\n    time.sleep(1)\n\n@then(\"the tags container with data-testid \\\"tags-container\\\" should display tags for \\\"Choice1\\\", \\\"Choice2\\\", and \\\"Choice3\\\"\")\ndef step_then_tags_displayed(context):\n    tags_container = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='tags-container']\")\n    tags = tags_container.find_elements(By.CSS_SELECTOR, \".tag\")\n    tag_texts = [tag.text for tag in tags]\n    expected_tags = [\"Choice1\", \"Choice2\", \"Choice3\"]\n    for expected_tag in expected_tags:\n        assert expected_tag in tag_texts, f\"Expected tag '{expected_tag}' not found in {tag_texts}\"\n    time.sleep(1)\n\n@then(\"after the random selection process, exactly one tag should remain highlighted to indicate the final choice\")\ndef step_then_one_tag_highlighted(context):\n    time.sleep(3)  # Wait for the random selection process to complete\n    tags_container = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='tags-container']\")\n    tags = tags_container.find_elements(By.CSS_SELECTOR, \".tag\")\n    highlighted_tags = [tag for tag in tags if \"highlight\" in tag.get_attribute(\"class\")]\n    assert len(highlighted_tags) == 1, f\"Expected exactly one highlighted tag, but found {len(highlighted_tags)}\"\n    time.sleep(1)\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: Random Choice Picker Enter Key Functionality\n  The system should clear the textarea and initiate the random selection process when the user presses the 'Enter' key.\n\n\nScenario: [Edge] User enters a single choice and presses 'Enter'\n    Given the Random Choice Picker page is loaded\n    And the user sees the textarea with data-testid \"choices-textarea\"\n    When the user enters \"SingleChoice\" into the textarea with data-testid \"choices-textarea\"\n    And the user presses the 'Enter' key\n    Then the textarea with data-testid \"choices-textarea\" should be cleared\n    And the tags container with data-testid \"tags-container\" should display a tag for \"SingleChoice\"\n    And the tag should be highlighted after the random selection process"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.common.keys import Keys\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the Random Choice Picker page is loaded')\ndef step_impl(context):\n    # Initialize the WebDriver and load the test page\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    context.driver.maximize_window()\n    time.sleep(1)  # Allow the page to load completely\n\n@given('the user sees the textarea with data-testid \"choices-textarea\"')\ndef step_impl(context):\n    # Verify the textarea is visible\n    textarea = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='choices-textarea']\"))\n    )\n    assert textarea.is_displayed(), \"Textarea is not visible\"\n\n@when('the user enters \"SingleChoice\" into the textarea with data-testid \"choices-textarea\"')\ndef step_impl(context):\n    # Locate the textarea and enter the text\n    textarea = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='choices-textarea']\")\n    textarea.send_keys(\"SingleChoice\")\n    time.sleep(1)  # Allow the input to be processed\n\n@when(\"the user presses the 'Enter' key\")\ndef step_impl(context):\n    # Press the Enter key in the textarea\n    textarea = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='choices-textarea']\")\n    textarea.send_keys(Keys.ENTER)\n    time.sleep(1)  # Allow the event to be processed\n\n@then('the textarea with data-testid \"choices-textarea\" should be cleared')\ndef step_impl(context):\n    # Verify the textarea is cleared\n    textarea = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='choices-textarea']\")\n    assert textarea.get_attribute(\"value\") == \"\", \"Textarea is not cleared\"\n\n@then('the tags container with data-testid \"tags-container\" should display a tag for \"SingleChoice\"')\ndef step_impl(context):\n    # Verify the tag is displayed in the tags container\n    tags_container = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='tags-container']\")\n    tag = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.XPATH, \"//span[contains(@class, 'tag') and text()='SingleChoice']\"))\n    )\n    assert tag.is_displayed(), \"Tag for 'SingleChoice' is not displayed\"\n\n@then('the tag should be highlighted after the random selection process')\ndef step_impl(context):\n    # Verify the tag is highlighted after the random selection process\n    tag = context.driver.find_element(By.XPATH, \"//span[contains(@class, 'tag') and text()='SingleChoice']\")\n    time.sleep(3)  # Wait for the random selection process to complete\n    assert \"highlight\" in tag.get_attribute(\"class\"), \"Tag is still highlighted after the random selection process\"\n\n# Teardown to close the browser after the test\ndef after_scenario(context, scenario):\n    if hasattr(context, 'driver'):\n        context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: Random Choice Picker Enter Key Functionality\n  The system should clear the textarea and initiate the random selection process when the user presses the 'Enter' key.\n\n\n  Scenario: [Edge] User enters choices with extra spaces and presses 'Enter'\n    Given the Random Choice Picker page is loaded\n    And the user sees the textarea with data-testid \"choices-textarea\"\n    When the user enters \"  Choice1  ,  Choice2  ,  Choice3  \" into the textarea with data-testid \"choices-textarea\"\n    And the user presses the 'Enter' key\n    Then the textarea with data-testid \"choices-textarea\" should be cleared\n    And the tags container with data-testid \"tags-container\" should display tags for \"Choice1\", \"Choice2\", and \"Choice3\"\n    And one of the tags should be highlighted after the random selection process\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.common.keys import Keys\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given(\"the Random Choice Picker page is loaded\")\ndef step_given_page_is_loaded(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    context.driver.maximize_window()\n    time.sleep(1)  # Allow the page to load completely\n\n@given('the user sees the textarea with data-testid \"choices-textarea\"')\ndef step_given_user_sees_textarea(context):\n    textarea = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='choices-textarea']\"))\n    )\n    assert textarea.is_displayed(), \"Textarea is not visible\"\n\n@when('the user enters \"  Choice1  ,  Choice2  ,  Choice3  \" into the textarea with data-testid \"choices-textarea\"')\ndef step_when_user_enters_choices(context):\n    textarea = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='choices-textarea']\"))\n    )\n    textarea.clear()\n    textarea.send_keys(\"  Choice1  ,  Choice2  ,  Choice3  \")\n    time.sleep(1)  # Allow the input to be processed\n\n@when(\"the user presses the 'Enter' key\")\ndef step_when_user_presses_enter(context):\n    textarea = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='choices-textarea']\"))\n    )\n    textarea.send_keys(Keys.ENTER)\n    time.sleep(1)  # Allow the Enter key event to be processed\n\n@then('the textarea with data-testid \"choices-textarea\" should be cleared')\ndef step_then_textarea_should_be_cleared(context):\n    textarea = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='choices-textarea']\"))\n    )\n    assert textarea.get_attribute(\"value\") == \"\", \"Textarea is not cleared\"\n\n@then('the tags container with data-testid \"tags-container\" should display tags for \"Choice1\", \"Choice2\", and \"Choice3\"')\ndef step_then_tags_container_should_display_tags(context):\n    tags_container = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='tags-container']\"))\n    )\n    tags = tags_container.find_elements(By.CSS_SELECTOR, \".tag\")\n    tag_texts = [tag.text.strip() for tag in tags]\n    expected_tags = [\"Choice1\", \"Choice2\", \"Choice3\"]\n    assert all(tag in tag_texts for tag in expected_tags), f\"Expected tags {expected_tags}, but got {tag_texts}\"\n\n@then(\"one of the tags should be highlighted after the random selection process\")\ndef step_then_one_tag_should_be_highlighted(context):\n    time.sleep(5)  # Wait for the random selection process to complete\n    tags_container = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='tags-container']\"))\n    )\n    highlighted_tags = tags_container.find_elements(By.CSS_SELECTOR, \".tag.highlight\")\n    assert len(highlighted_tags) == 1, f\"Expected one highlighted tag, but found {len(highlighted_tags)}\"\n\n# Teardown\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: Random Choice Picker Enter Key Functionality\n  The system should clear the textarea and initiate the random selection process when the user presses the 'Enter' key.\n\n\n  Scenario: [Error] User presses 'Enter' without entering any choices\n    Given the Random Choice Picker page is loaded\n    And the user sees the textarea with data-testid \"choices-textarea\"\n    When the user presses the 'Enter' key without entering any choices\n    Then the textarea with data-testid \"choices-textarea\" should remain empty\n    And the tags container with data-testid \"tags-container\" should not display any tags\n    And no tag should be highlighted\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\ndef is_highlighted(element):\n    class_list = element.get_attribute(\"class\").split()\n    return \"highlight\" in class_list\n\n@given('the Random Choice Picker page is loaded')\ndef step_given_page_is_loaded(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)\n\n@given('the user sees the textarea with data-testid \"choices-textarea\"')\ndef step_given_user_sees_textarea(context):\n    textarea = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='choices-textarea']\"))\n    )\n    assert textarea.is_displayed(), \"Textarea is not visible\"\n    time.sleep(1)\n\n@when('the user presses the \\'Enter\\' key without entering any choices')\ndef step_when_user_presses_enter_without_choices(context):\n    textarea = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='choices-textarea']\")\n    textarea.send_keys('\\n')\n    time.sleep(1)\n\n@then('the textarea with data-testid \"choices-textarea\" should remain empty')\ndef step_then_textarea_should_remain_empty(context):\n    textarea = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='choices-textarea']\")\n    assert textarea.get_attribute('value') == '', \"Textarea is not empty\"\n    time.sleep(1)\n\n@then('the tags container with data-testid \"tags-container\" should not display any tags')\ndef step_then_tags_container_should_not_display_tags(context):\n    tags_container = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='tags-container']\")\n    assert tags_container.text.strip() == '', \"Tags container is not empty\"\n    time.sleep(1)\n\n@then('no tag should be highlighted')\ndef step_then_no_tag_should_be_highlighted(context):\n    tags = context.driver.find_elements(By.CSS_SELECTOR, \".tag\")\n    for tag in tags:\n        assert not is_highlighted(tag), \"A tag is highlighted\"\n    time.sleep(1)\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: Random Choice Picker Enter Key Functionality\n  The system should clear the textarea and initiate the random selection process when the user presses the 'Enter' key.\n\n\n  Scenario: [Error] User enters only commas and presses 'Enter'\n    Given the Random Choice Picker page is loaded\n    And the user sees the textarea with data-testid \"choices-textarea\"\n    When the user enters \",,,,\" into the textarea with data-testid \"choices-textarea\"\n    And the user presses the 'Enter' key\n    Then the textarea with data-testid \"choices-textarea\" should be cleared\n    And the tags container with data-testid \"tags-container\" should not display any tags\n    And no tag should be highlighted"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given(\"the Random Choice Picker page is loaded\")\ndef step_given_page_is_loaded(context):\n    # Initialize the WebDriver\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)  # Allow the page to load completely\n\n@given('the user sees the textarea with data-testid \"choices-textarea\"')\ndef step_given_user_sees_textarea(context):\n    # Verify the textarea is visible\n    textarea = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='choices-textarea']\"))\n    )\n    assert textarea.is_displayed(), \"Textarea is not visible\"\n\n@when('the user enters \",,,,\" into the textarea with data-testid \"choices-textarea\"')\ndef step_when_user_enters_commas(context):\n    # Locate the textarea and enter \",,,,\"\n    textarea = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='choices-textarea']\")\n    textarea.clear()\n    textarea.send_keys(\",,,,\")\n    time.sleep(1)  # Allow the input to be processed\n\n@when(\"the user presses the 'Enter' key\")\ndef step_when_user_presses_enter(context):\n    # Simulate pressing the 'Enter' key\n    textarea = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='choices-textarea']\")\n    textarea.send_keys(\"\\n\")\n    time.sleep(1)  # Allow the event to be triggered\n\n@then('the textarea with data-testid \"choices-textarea\" should be cleared')\ndef step_then_textarea_should_be_cleared(context):\n    # Verify the textarea is cleared\n    textarea = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='choices-textarea']\")\n    assert textarea.get_attribute(\"value\") == \"\", \"Textarea is not cleared\"\n\n@then('the tags container with data-testid \"tags-container\" should not display any tags')\ndef step_then_tags_container_should_be_empty(context):\n    # Verify the tags container is empty\n    tags_container = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='tags-container']\")\n    assert tags_container.text.strip() == \"\", \"Tags container is not empty\"\n\n@then(\"no tag should be highlighted\")\ndef step_then_no_tag_should_be_highlighted(context):\n    # Verify no tag is highlighted\n    tags = context.driver.find_elements(By.CSS_SELECTOR, \".tag.highlight\")\n    assert len(tags) == 0, \"There are highlighted tags\"\n\n# Teardown after the test\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                }
            ]
        }
    }
}