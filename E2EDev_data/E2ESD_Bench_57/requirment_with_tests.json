{
    "summary": {
        "overview": "This web application provides a user interface for managing a list of checkboxes. Users can select all options, deselect all options, or reverse the selection of options. The application dynamically updates the state of the 'Select All/None' checkbox and its label based on user interactions.",
        "predefined_options": "The application includes predefined options for checkbox selections, such as 'Select All', 'Deselect All', and 'Reverse Selection'. These options standardize user interactions with the checkbox list.",
        "external_resources": "No external resources such as links, images, or audio files are used in this application.",
        "external_js_libraries": "No external JavaScript libraries are used in this application; all functionality is implemented using native JavaScript."
    },
    "finegrained_rewith_test": {
        "1": {
            "requirement": {
                "description": "The web application provides a checkbox list with a 'Select All/None' functionality. The user can interact with the 'Select All/None' checkbox, identified by the data-testid 'checkAll'. When the user clicks this checkbox, all individual checkboxes, identified by data-testids 'checkbox-1' to 'checkbox-10', should be toggled to match the state of the 'Select All/None' checkbox. If the 'Select All/None' checkbox is checked, all individual checkboxes should be checked, and the label with data-testid 'checkAll-label' should update to '全不选'. Conversely, if the 'Select All/None' checkbox is unchecked, all individual checkboxes should be unchecked, and the label should update to '全选'. Additionally, if any individual checkbox is manually toggled, the system should automatically update the 'Select All/None' checkbox and its label to reflect whether all individual checkboxes are selected or not. The 'Reverse Selection' link, identified by data-testid 'checkReverse', allows the user to invert the selection of all individual checkboxes, and the system should update the 'Select All/None' checkbox and its label accordingly."
            },
            "test_cases": [
                {
                    "test_case": [
                        "Feature: Select All/None Checkbox Functionality\n  The user can toggle the 'Select All/None' checkbox to select or deselect all individual checkboxes, and the label should update accordingly.\n\n\n  Scenario: [Normal] User selects all checkboxes using 'Select All/None'\n    Given the webpage is loaded with the checkbox list\n    And the 'Select All/None' checkbox with data-testid 'checkAll' is unchecked\n    And the label with data-testid 'checkAll-label' displays '全选'\n    When the user clicks the 'Select All/None' checkbox with data-testid 'checkAll'\n    Then all individual checkboxes with data-testid 'checkbox-1' to 'checkbox-10' are checked\n    And the label with data-testid 'checkAll-label' changes to '全不选'\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\ndef is_checked(element):\n    return element.is_selected()\n\n@given('the webpage is loaded with the checkbox list')\ndef step_given_webpage_loaded(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)\n\n@given('the \\'Select All/None\\' checkbox with data-testid \\'checkAll\\' is unchecked')\ndef step_given_checkall_unchecked(context):\n    check_all_checkbox = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='checkAll']\"))\n    )\n    if is_checked(check_all_checkbox):\n        check_all_checkbox.click()\n    assert not is_checked(check_all_checkbox), \"Expected 'Select All/None' checkbox to be unchecked\"\n\n@given('the label with data-testid \\'checkAll-label\\' displays \\'全选\\'')\ndef step_given_checkall_label_displays_select_all(context):\n    label = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='checkAll-label']\"))\n    )\n    assert \"全选\" in label.text, f\"Expected label to display '全选', but got '{label.text}'\"\n\n@when('the user clicks the \\'Select All/None\\' checkbox with data-testid \\'checkAll\\'')\ndef step_when_user_clicks_checkall(context):\n    check_all_checkbox = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='checkAll']\"))\n    )\n    check_all_checkbox.click()\n    time.sleep(1)\n\n@then('all individual checkboxes with data-testid \\'checkbox-1\\' to \\'checkbox-10\\' are checked')\ndef step_then_all_checkboxes_checked(context):\n    for i in range(1, 11):\n        checkbox = WebDriverWait(context.driver, 10).until(\n            EC.presence_of_element_located((By.CSS_SELECTOR, f\"[data-testid='checkbox-{i}']\"))\n        )\n        assert is_checked(checkbox), f\"Expected checkbox-{i} to be checked\"\n\n@then('the label with data-testid \\'checkAll-label\\' changes to \\'全不选\\'')\ndef step_then_checkall_label_changes_to_deselect_all(context):\n    label = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='checkAll-label']\"))\n    )\n    assert \"全不选\" in label.text, f\"Expected label to display '全不选', but got '{label.text}'\"\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: Select All/None Checkbox Functionality\n  The user can toggle the 'Select All/None' checkbox to select or deselect all individual checkboxes, and the label should update accordingly.\n\n\n  Scenario: [Edge] User toggles 'Select All/None' when all checkboxes are already selected\n    Given the webpage is loaded with the checkbox list\n    And all individual checkboxes with data-testid 'checkbox-1' to 'checkbox-10' are checked\n    And the 'Select All/None' checkbox with data-testid 'checkAll' is checked\n    And the label with data-testid 'checkAll-label' displays '全不选'\n    When the user clicks the 'Select All/None' checkbox with data-testid 'checkAll'\n    Then all individual checkboxes with data-testid 'checkbox-1' to 'checkbox-10' are unchecked\n    And the label with data-testid 'checkAll-label' changes to '全选'\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\ndef is_expanded(element):\n    aria = element.get_attribute(\"aria-expanded\")\n    if aria is not None:\n        return aria == \"true\"\n\n    class_list = element.get_attribute(\"class\").split()\n    if any(cls in class_list for cls in [\"expanded\", \"open\", \"show\"]):\n        return True\n\n    data_expanded = element.get_attribute(\"data-expanded\")\n    if data_expanded is not None:\n        return data_expanded == \"true\"\n\n    return element.is_displayed()\n\n@given('the webpage is loaded with the checkbox list')\ndef step_given_webpage_loaded(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)\n\n@given('all individual checkboxes with data-testid \\'checkbox-1\\' to \\'checkbox-10\\' are checked')\ndef step_given_all_checkboxes_checked(context):\n    for i in range(1, 11):\n        checkbox = WebDriverWait(context.driver, 10).until(\n            EC.element_to_be_clickable((By.CSS_SELECTOR, f\"[data-testid='checkbox-{i}']\"))\n        )\n        if not checkbox.is_selected():\n            checkbox.click()\n            time.sleep(1)\n\n@given('the \\'Select All/None\\' checkbox with data-testid \\'checkAll\\' is checked')\ndef step_given_select_all_checked(context):\n    select_all_checkbox = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='checkAll']\"))\n    )\n    if not select_all_checkbox.is_selected():\n        select_all_checkbox.click()\n        time.sleep(1)\n\n@given('the label with data-testid \\'checkAll-label\\' displays \\'全不选\\'')\ndef step_given_label_displays_unselect_all(context):\n    label = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='checkAll-label']\"))\n    )\n    assert \"全不选\" in label.text.strip(), f\"Expected '全不选' in '{label.text}'\"\n\n@when('the user clicks the \\'Select All/None\\' checkbox with data-testid \\'checkAll\\'')\ndef step_when_user_clicks_select_all(context):\n    select_all_checkbox = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='checkAll']\"))\n    )\n    select_all_checkbox.click()\n    time.sleep(1)\n\n@then('all individual checkboxes with data-testid \\'checkbox-1\\' to \\'checkbox-10\\' are unchecked')\ndef step_then_all_checkboxes_unchecked(context):\n    for i in range(1, 11):\n        checkbox = WebDriverWait(context.driver, 10).until(\n            EC.visibility_of_element_located((By.CSS_SELECTOR, f\"[data-testid='checkbox-{i}']\"))\n        )\n        assert not checkbox.is_selected(), f\"Checkbox {i} should be unchecked\"\n\n@then('the label with data-testid \\'checkAll-label\\' changes to \\'全选\\'')\ndef step_then_label_changes_to_select_all(context):\n    label = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='checkAll-label']\"))\n    )\n    assert \"全选\" in label.text.strip(), f\"Expected '全选' in '{label.text}'\"\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: Select All/None Checkbox Functionality\n  The user can toggle the 'Select All/None' checkbox to select or deselect all individual checkboxes, and the label should update accordingly.\n\n\n  Scenario: [Error] User clicks 'Select All/None' with some checkboxes already selected\n    Given the webpage is loaded with the checkbox list\n    And some individual checkboxes with data-testid 'checkbox-1' and 'checkbox-2' are checked\n    And the 'Select All/None' checkbox with data-testid 'checkAll' is unchecked\n    And the label with data-testid 'checkAll-label' displays '全选'\n    When the user clicks the 'Select All/None' checkbox with data-testid 'checkAll'\n    Then all individual checkboxes with data-testid 'checkbox-1' to 'checkbox-10' are checked\n    And the label with data-testid 'checkAll-label' changes to '全不选'"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given(\"the webpage is loaded with the checkbox list\")\ndef step_given_webpage_loaded(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)\n\n@given(\"some individual checkboxes with data-testid 'checkbox-1' and 'checkbox-2' are checked\")\ndef step_given_some_checkboxes_checked(context):\n    checkbox1 = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='checkbox-1']\"))\n    )\n    checkbox2 = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='checkbox-2']\"))\n    )\n    if not checkbox1.is_selected():\n        checkbox1.click()\n    time.sleep(1)\n    if not checkbox2.is_selected():\n        checkbox2.click()\n    time.sleep(1)\n\n@given(\"the 'Select All/None' checkbox with data-testid 'checkAll' is unchecked\")\ndef step_given_select_all_none_unchecked(context):\n    check_all = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='checkAll']\"))\n    )\n    if check_all.is_selected():\n        check_all.click()\n    time.sleep(1)\n\n@given(\"the label with data-testid 'checkAll-label' displays '全选'\")\ndef step_given_label_displays_select_all(context):\n    label = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='checkAll-label']\"))\n    )\n    assert \"全选\" in label.text.strip(), f\"Expected '全选' in '{label.text}'\"\n\n@when(\"the user clicks the 'Select All/None' checkbox with data-testid 'checkAll'\")\ndef step_when_user_clicks_select_all_none(context):\n    check_all = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='checkAll']\"))\n    )\n    check_all.click()\n    time.sleep(1)\n\n@then(\"all individual checkboxes with data-testid 'checkbox-1' to 'checkbox-10' are checked\")\ndef step_then_all_checkboxes_checked(context):\n    for i in range(1, 11):\n        checkbox = WebDriverWait(context.driver, 10).until(\n            EC.element_to_be_clickable((By.CSS_SELECTOR, f\"[data-testid='checkbox-{i}']\"))\n        )\n        assert checkbox.is_selected(), f\"Checkbox {i} is not selected\"\n\n@then(\"the label with data-testid 'checkAll-label' changes to '全不选'\")\ndef step_then_label_changes_to_select_none(context):\n    label = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='checkAll-label']\"))\n    )\n    assert \"全不选\" in label.text.strip(), f\"Expected '全不选' in '{label.text}'\"\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                }
            ]
        },
        "2": {
            "requirement": {
                "description": "The web application provides a checkbox list functionality where users can manage the selection of multiple options efficiently. The interface includes a 'Select All/None' checkbox with the attribute data-testid 'checkAll' and a corresponding label with data-testid 'checkAll-label'. When the user clicks the 'Select All/None' checkbox, the system toggles the selection state of all individual checkboxes, which have data-testids ranging from 'checkbox-1' to 'checkbox-10'. If all checkboxes are currently selected, clicking the 'Select All/None' checkbox will deselect all individual checkboxes and update the label text to '全选'. Conversely, if any checkboxes are deselected, clicking the 'Select All/None' checkbox will select all checkboxes and change the label text to '全不选'. Additionally, the system ensures that the 'Select All/None' checkbox reflects the collective state of all individual checkboxes, automatically updating its checked status and label text based on user interactions with individual checkboxes. The 'Reverse Selection' link with data-testid 'checkReverse' allows users to invert the current selection state of all individual checkboxes, and the system will update the 'Select All/None' checkbox and label accordingly."
            },
            "test_cases": [
                {
                    "test_case": [
                        "Feature: Checkbox List Select All/None Functionality\n  The feature allows users to toggle the selection of all checkboxes using a single 'Select All/None' checkbox.\n\n\n  Scenario: [Normal] Deselect all checkboxes using 'Select All/None' checkbox\n    Given the webpage is loaded with all checkboxes selected\n      And the 'Select All/None' checkbox with data-testid 'checkAll' is checked\n      And the label with data-testid 'checkAll-label' displays '全不选'\n    When the user clicks the 'Select All/None' checkbox with data-testid 'checkAll'\n    Then all individual checkboxes with data-testid 'checkbox-1' to 'checkbox-10' are unchecked\n      And the label with data-testid 'checkAll-label' changes to '全选'\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\ndef is_checkbox_checked(driver, data_testid):\n    checkbox = driver.find_element(By.CSS_SELECTOR, f\"[data-testid='{data_testid}']\")\n    return checkbox.is_selected()\n\n@given(\"the webpage is loaded with all checkboxes selected\")\ndef step_given_webpage_loaded_with_all_checkboxes_selected(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='checkAll']\"))\n    )\n    # Ensure all checkboxes are selected\n    check_all = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='checkAll']\")\n    if not check_all.is_selected():\n        check_all.click()\n        time.sleep(1)  # Allow time for the action to complete\n\n@given(\"the 'Select All/None' checkbox with data-testid 'checkAll' is checked\")\ndef step_given_select_all_none_checkbox_checked(context):\n    check_all = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='checkAll']\")\n    assert check_all.is_selected(), \"The 'Select All/None' checkbox is not checked.\"\n\n@given(\"the label with data-testid 'checkAll-label' displays '全不选'\")\ndef step_given_label_displays_all_none(context):\n    label = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='checkAll-label']\")\n    assert \"全不选\" in label.text, f\"Expected label text to be '全不选', but got '{label.text}'\"\n\n@when(\"the user clicks the 'Select All/None' checkbox with data-testid 'checkAll'\")\ndef step_when_user_clicks_select_all_none_checkbox(context):\n    check_all = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='checkAll']\")\n    check_all.click()\n    time.sleep(1)  # Allow time for the action to complete\n\n@then(\"all individual checkboxes with data-testid 'checkbox-1' to 'checkbox-10' are unchecked\")\ndef step_then_all_individual_checkboxes_unchecked(context):\n    for i in range(1, 11):\n        checkbox_testid = f\"checkbox-{i}\"\n        assert not is_checkbox_checked(context.driver, checkbox_testid), f\"Checkbox '{checkbox_testid}' is still checked.\"\n\n@then(\"the label with data-testid 'checkAll-label' changes to '全选'\")\ndef step_then_label_changes_to_select_all(context):\n    label = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='checkAll-label']\")\n    assert \"全选\" in label.text, f\"Expected label text to be '全选', but got '{label.text}'\"\n\n# Teardown\ndef after_scenario(context, scenario):\n    if hasattr(context, 'driver'):\n        context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: Checkbox List Select All/None Functionality\n  The feature allows users to toggle the selection of all checkboxes using a single 'Select All/None' checkbox.\n\n\n  Scenario: [Edge] Deselect all checkboxes when some are already deselected\n    Given the webpage is loaded\n      And some checkboxes with data-testid 'checkbox-1' to 'checkbox-10' are unchecked\n      And the 'Select All/None' checkbox with data-testid 'checkAll' is checked\n      And the label with data-testid 'checkAll-label' displays '全不选'\n    When the user clicks the 'Select All/None' checkbox with data-testid 'checkAll'\n    Then all individual checkboxes with data-testid 'checkbox-1' to 'checkbox-10' are unchecked\n      And the label with data-testid 'checkAll-label' changes to '全选'\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\ndef is_checkbox_checked(driver, data_testid):\n    checkbox = driver.find_element(By.CSS_SELECTOR, f\"[data-testid='{data_testid}']\")\n    return checkbox.is_selected()\n\n@given('the webpage is loaded')\ndef step_given_webpage_loaded(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)\n\n@given('some checkboxes with data-testid \\'checkbox-1\\' to \\'checkbox-10\\' are unchecked')\ndef step_given_some_checkboxes_unchecked(context):\n    for i in range(1, 11):\n        checkbox = context.driver.find_element(By.CSS_SELECTOR, f\"[data-testid='checkbox-{i}']\")\n        if checkbox.is_selected():\n            checkbox.click()\n            time.sleep(1)\n\n@given('the \\'Select All/None\\' checkbox with data-testid \\'checkAll\\' is checked')\ndef step_given_select_all_checked(context):\n    check_all = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='checkAll']\")\n    if not check_all.is_selected():\n        check_all.click()\n        time.sleep(1)\n\n@given('the label with data-testid \\'checkAll-label\\' displays \\'全不选\\'')\ndef step_given_label_displays_unselect_all(context):\n    label = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='checkAll-label']\")\n    assert \"全不选\" in label.text, f\"Expected '全不选' in '{label.text}'\"\n\n@when('the user clicks the \\'Select All/None\\' checkbox with data-testid \\'checkAll\\'')\ndef step_when_user_clicks_select_all(context):\n    check_all = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='checkAll']\")\n    check_all.click()\n    time.sleep(1)\n\n@then('all individual checkboxes with data-testid \\'checkbox-1\\' to \\'checkbox-10\\' are unchecked')\ndef step_then_all_checkboxes_unchecked(context):\n    for i in range(1, 11):\n        assert not is_checkbox_checked(context.driver, f\"checkbox-{i}\"), f\"Checkbox {i} should be unchecked\"\n\n@then('the label with data-testid \\'checkAll-label\\' changes to \\'全选\\'')\ndef step_then_label_changes_to_select_all(context):\n    label = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='checkAll-label']\")\n    assert \"全选\" in label.text, f\"Expected '全选' in '{label.text}'\"\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                }
            ]
        },
        "3": {
            "requirement": {
                "description": "The web application provides a checkbox list with a 'Reverse Selection' link, identified by the data-testid 'checkReverse'. When the user clicks this link, the application toggles the checked state of each checkbox in the list. Specifically, if a checkbox is checked, it becomes unchecked, and if it is unchecked, it becomes checked. This functionality applies to all checkboxes with data-testids ranging from 'checkbox-1' to 'checkbox-10'. The initial state of the checkboxes can be all checked, all unchecked, or a mix of checked and unchecked states. The system ensures that the toggle operation is accurately reflected in the UI, updating the checked state of each checkbox accordingly."
            },
            "test_cases": [
                {
                    "test_case": [
                        "Feature: Reverse Selection Functionality\n  The user can toggle the checked state of each individual checkbox by clicking the 'Reverse Selection' link.\n\n\n  Scenario: [Normal] Reverse selection toggles all checkboxes\n    Given the webpage is loaded with the checkbox list visible\n    And all checkboxes are initially unchecked\n    When the user clicks the 'Reverse Selection' link with data-testid 'checkReverse'\n    Then each checkbox with data-testid 'checkbox-1' to 'checkbox-10' should be checked\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\ndef is_checked(element):\n    return element.is_selected()\n\n@given('the webpage is loaded with the checkbox list visible')\ndef step_given_webpage_loaded(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)  # Allow time for the page to load\n\n@given('all checkboxes are initially unchecked')\ndef step_given_checkboxes_unchecked(context):\n    for i in range(1, 11):\n        checkbox = WebDriverWait(context.driver, 10).until(\n            EC.presence_of_element_located((By.CSS_SELECTOR, f\"[data-testid='checkbox-{i}']\"))\n        )\n        assert not is_checked(checkbox), f\"Checkbox {i} should be unchecked initially\"\n    time.sleep(1)\n\n@when('the user clicks the \\'Reverse Selection\\' link with data-testid \\'checkReverse\\'')\ndef step_when_click_reverse_selection(context):\n    reverse_link = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='checkReverse']\"))\n    )\n    reverse_link.click()\n    time.sleep(1)\n\n@then('each checkbox with data-testid \\'checkbox-1\\' to \\'checkbox-10\\' should be checked')\ndef step_then_checkboxes_checked(context):\n    for i in range(1, 11):\n        checkbox = WebDriverWait(context.driver, 10).until(\n            EC.presence_of_element_located((By.CSS_SELECTOR, f\"[data-testid='checkbox-{i}']\"))\n        )\n        assert is_checked(checkbox), f\"Checkbox {i} should be checked after reverse selection\"\n    time.sleep(1)\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: Reverse Selection Functionality\n  The user can toggle the checked state of each individual checkbox by clicking the 'Reverse Selection' link.\n\n\n  Scenario: [Normal] Reverse selection toggles all checkboxes again\n    Given the webpage is loaded with the checkbox list visible\n    And all checkboxes are initially checked\n    When the user clicks the 'Reverse Selection' link with data-testid 'checkReverse'\n    Then each checkbox with data-testid 'checkbox-1' to 'checkbox-10' should be unchecked\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the webpage is loaded with the checkbox list visible')\ndef step_given_webpage_loaded(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='checkAll']\"))\n    )\n    time.sleep(1)\n\n@given('all checkboxes are initially checked')\ndef step_given_all_checkboxes_checked(context):\n    check_all = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='checkAll']\")\n    if not check_all.is_selected():\n        check_all.click()\n    time.sleep(1)\n\n@when(\"the user clicks the 'Reverse Selection' link with data-testid 'checkReverse'\")\ndef step_when_user_clicks_reverse_selection(context):\n    reverse_link = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='checkReverse']\")\n    reverse_link.click()\n    time.sleep(1)\n\n@then('each checkbox with data-testid \\'checkbox-1\\' to \\'checkbox-10\\' should be unchecked')\ndef step_then_checkboxes_should_be_unchecked(context):\n    for i in range(1, 11):\n        checkbox = context.driver.find_element(By.CSS_SELECTOR, f\"[data-testid='checkbox-{i}']\")\n        assert not checkbox.is_selected(), f\"Checkbox {i} is still checked\"\n    time.sleep(1)\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: Reverse Selection Functionality\n  The user can toggle the checked state of each individual checkbox by clicking the 'Reverse Selection' link.\n\n\n  Scenario: [Edge] Reverse selection with mixed checkbox states\n    Given the webpage is loaded with the checkbox list visible\n    And checkboxes with data-testid 'checkbox-1', 'checkbox-3', 'checkbox-5' are checked\n    And checkboxes with data-testid 'checkbox-2', 'checkbox-4', 'checkbox-6', 'checkbox-7', 'checkbox-8', 'checkbox-9', 'checkbox-10' are unchecked\n    When the user clicks the 'Reverse Selection' link with data-testid 'checkReverse'\n    Then checkboxes with data-testid 'checkbox-1', 'checkbox-3', 'checkbox-5' should be unchecked\n    And checkboxes with data-testid 'checkbox-2', 'checkbox-4', 'checkbox-6', 'checkbox-7', 'checkbox-8', 'checkbox-9', 'checkbox-10' should be checked\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\ndef is_checked(element):\n    return element.is_selected()\n\n@given('the webpage is loaded with the checkbox list visible')\ndef step_given_webpage_loaded(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)\n\n@given('checkboxes with data-testid \\'checkbox-1\\', \\'checkbox-3\\', \\'checkbox-5\\' are checked')\ndef step_given_checkboxes_checked(context):\n    for testid in ['checkbox-1', 'checkbox-3', 'checkbox-5']:\n        checkbox = WebDriverWait(context.driver, 10).until(\n            EC.element_to_be_clickable((By.CSS_SELECTOR, f\"[data-testid='{testid}']\"))\n        )\n        if not is_checked(checkbox):\n            checkbox.click()\n        time.sleep(1)\n\n@given('checkboxes with data-testid \\'checkbox-2\\', \\'checkbox-4\\', \\'checkbox-6\\', \\'checkbox-7\\', \\'checkbox-8\\', \\'checkbox-9\\', \\'checkbox-10\\' are unchecked')\ndef step_given_checkboxes_unchecked(context):\n    for testid in ['checkbox-2', 'checkbox-4', 'checkbox-6', 'checkbox-7', 'checkbox-8', 'checkbox-9', 'checkbox-10']:\n        checkbox = WebDriverWait(context.driver, 10).until(\n            EC.element_to_be_clickable((By.CSS_SELECTOR, f\"[data-testid='{testid}']\"))\n        )\n        if is_checked(checkbox):\n            checkbox.click()\n        time.sleep(1)\n\n@when('the user clicks the \\'Reverse Selection\\' link with data-testid \\'checkReverse\\'')\ndef step_when_click_reverse_selection(context):\n    reverse_link = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='checkReverse']\"))\n    )\n    reverse_link.click()\n    time.sleep(1)\n\n@then('checkboxes with data-testid \\'checkbox-1\\', \\'checkbox-3\\', \\'checkbox-5\\' should be unchecked')\ndef step_then_checkboxes_should_be_unchecked(context):\n    for testid in ['checkbox-1', 'checkbox-3', 'checkbox-5']:\n        checkbox = WebDriverWait(context.driver, 10).until(\n            EC.presence_of_element_located((By.CSS_SELECTOR, f\"[data-testid='{testid}']\"))\n        )\n        assert not is_checked(checkbox), f\"Checkbox {testid} should be unchecked\"\n\n@then('checkboxes with data-testid \\'checkbox-2\\', \\'checkbox-4\\', \\'checkbox-6\\', \\'checkbox-7\\', \\'checkbox-8\\', \\'checkbox-9\\', \\'checkbox-10\\' should be checked')\ndef step_then_checkboxes_should_be_checked(context):\n    for testid in ['checkbox-2', 'checkbox-4', 'checkbox-6', 'checkbox-7', 'checkbox-8', 'checkbox-9', 'checkbox-10']:\n        checkbox = WebDriverWait(context.driver, 10).until(\n            EC.presence_of_element_located((By.CSS_SELECTOR, f\"[data-testid='{testid}']\"))\n        )\n        assert is_checked(checkbox), f\"Checkbox {testid} should be checked\"\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                }
            ]
        },
        "4": {
            "requirement": {
                "description": "The web application provides a checkbox list with a 'Select All/None' functionality. The user can interact with individual checkboxes or use the 'Select All/None' checkbox to manage the selection state of all checkboxes. The system must update the state and label of the 'Select All/None' checkbox dynamically based on the selection state of individual checkboxes. Specifically: 1) When all individual checkboxes are selected, the 'Select All/None' checkbox (data-testid: 'checkAll') is checked, and its label (data-testid: 'checkAll-label') displays '全不选'. 2) When no individual checkboxes are selected, the 'Select All/None' checkbox is unchecked, and its label displays '全选'. 3) When some but not all individual checkboxes are selected, the 'Select All/None' checkbox remains unchecked, and its label displays '全选'. Additionally, the user can click the '反选' link (data-testid: 'checkReverse') to toggle the selection state of all individual checkboxes. The system must ensure that the state of the 'Select All/None' checkbox and its label are updated accordingly after any interaction. All checkboxes are identified using unique data-testid attributes (e.g., 'checkbox-1', 'checkbox-2', etc.), and the system must handle edge cases such as toggling already selected checkboxes or selecting no checkboxes."
            },
            "test_cases": [
                {
                    "test_case": [
                        "Feature: Checkbox List Interaction and Select All/None Update\n  The user can interact with individual checkboxes, and the 'Select All/None' checkbox updates its state and label accordingly.\n\n\n  Scenario: [Normal] User selects all individual checkboxes\n    Given the webpage with the checkbox list is loaded\n    When the user clicks on the checkbox with data-testid \"checkbox-1\"\n    And the user clicks on the checkbox with data-testid \"checkbox-2\"\n    And the user clicks on the checkbox with data-testid \"checkbox-3\"\n    And the user clicks on the checkbox with data-testid \"checkbox-4\"\n    And the user clicks on the checkbox with data-testid \"checkbox-5\"\n    And the user clicks on the checkbox with data-testid \"checkbox-6\"\n    And the user clicks on the checkbox with data-testid \"checkbox-7\"\n    And the user clicks on the checkbox with data-testid \"checkbox-8\"\n    And the user clicks on the checkbox with data-testid \"checkbox-9\"\n    And the user clicks on the checkbox with data-testid \"checkbox-10\"\n    Then the checkbox with data-testid \"checkAll\" should be checked\n    And the label with data-testid \"checkAll-label\" should display \"全不选\"\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the webpage with the checkbox list is loaded')\ndef step_given_webpage_loaded(context):\n    # Initialize the WebDriver and load the test page\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    context.driver.maximize_window()\n    time.sleep(1)  # Allow the page to load completely\n\n@when('the user clicks on the checkbox with data-testid \"{checkbox_id}\"')\ndef step_when_user_clicks_checkbox(context, checkbox_id):\n    # Locate the checkbox using its data-testid attribute and click it\n    checkbox = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, f\"[data-testid='{checkbox_id}']\"))\n    )\n    checkbox.click()\n    time.sleep(1)  # Pause to ensure the interaction is registered\n\n@then('the checkbox with data-testid \"{checkbox_id}\" should be checked')\ndef step_then_checkbox_should_be_checked(context, checkbox_id):\n    # Verify that the checkbox is checked\n    checkbox = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, f\"[data-testid='{checkbox_id}']\"))\n    )\n    assert checkbox.is_selected(), f\"Checkbox '{checkbox_id}' is not checked\"\n\n@then('the label with data-testid \"{label_id}\" should display \"{expected_text}\"')\ndef step_then_label_should_display(context, label_id, expected_text):\n    # Verify that the label displays the expected text\n    label = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, f\"[data-testid='{label_id}']\"))\n    )\n    actual_text = label.text.strip()\n    assert expected_text.strip() == actual_text, f\"Expected '{expected_text}', but got '{actual_text}'\"\n\ndef after_scenario(context, scenario):\n    # Close the WebDriver after the scenario is complete\n    if hasattr(context, 'driver'):\n        context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: Checkbox List Interaction and Select All/None Update\n  The user can interact with individual checkboxes, and the 'Select All/None' checkbox updates its state and label accordingly.\n\n\n  Scenario: [Edge] User selects no individual checkboxes\n    Given the webpage with the checkbox list is loaded\n    When the user ensures no checkboxes are selected\n    Then the checkbox with data-testid \"checkAll\" should not be checked\n    And the label with data-testid \"checkAll-label\" should display \"全选\"\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the webpage with the checkbox list is loaded')\ndef step_given_webpage_loaded(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)  # Allow time for the page to load\n\n@when('the user ensures no checkboxes are selected')\ndef step_when_no_checkboxes_selected(context):\n    for i in range(1, 11):\n        checkbox = WebDriverWait(context.driver, 10).until(\n            EC.presence_of_element_located((By.CSS_SELECTOR, f\"[data-testid='checkbox-{i}']\"))\n        )\n        if checkbox.is_selected():\n            checkbox.click()\n            time.sleep(1)  # Allow time for the interaction\n\n@then('the checkbox with data-testid \"checkAll\" should not be checked')\ndef step_then_checkAll_not_checked(context):\n    check_all = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='checkAll']\"))\n    )\n    assert not check_all.is_selected(), \"Expected 'checkAll' checkbox to be unchecked\"\n\n@then('the label with data-testid \"checkAll-label\" should display \"全选\"')\ndef step_then_checkAll_label_display(context):\n    check_all_label = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='checkAll-label']\"))\n    )\n    expected_text = \"全选\"\n    assert expected_text in check_all_label.text, f\"Expected label text '{expected_text}', but got '{check_all_label.text}'\"\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: Checkbox List Interaction and Select All/None Update\n  The user can interact with individual checkboxes, and the 'Select All/None' checkbox updates its state and label accordingly.\n\n\n  Scenario: [Edge] User selects some individual checkboxes\n    Given the webpage with the checkbox list is loaded\n    When the user clicks on the checkbox with data-testid \"checkbox-1\"\n    And the user clicks on the checkbox with data-testid \"checkbox-3\"\n    And the user clicks on the checkbox with data-testid \"checkbox-5\"\n    Then the checkbox with data-testid \"checkAll\" should not be checked\n    And the label with data-testid \"checkAll-label\" should display \"全选\"\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the webpage with the checkbox list is loaded')\ndef step_given_webpage_loaded(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)  # Allow time for the page to load\n\n@when('the user clicks on the checkbox with data-testid \"{checkbox_id}\"')\ndef step_when_user_clicks_checkbox(context, checkbox_id):\n    checkbox = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, f\"[data-testid='{checkbox_id}']\"))\n    )\n    checkbox.click()\n    time.sleep(1)  # Allow time for the interaction to be processed\n\n@then('the checkbox with data-testid \"checkAll\" should not be checked')\ndef step_then_checkAll_not_checked(context):\n    check_all_checkbox = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='checkAll']\")\n    assert not check_all_checkbox.is_selected(), \"Expected 'checkAll' checkbox to be unchecked\"\n\n@then('the label with data-testid \"checkAll-label\" should display \"全选\"')\ndef step_then_checkAll_label_display(context):\n    check_all_label = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='checkAll-label']\")\n    expected_text = \"全选\"\n    assert expected_text in check_all_label.text, f\"Expected label text '{expected_text}', but got '{check_all_label.text}'\"\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: Checkbox List Interaction and Select All/None Update\n  The user can interact with individual checkboxes, and the 'Select All/None' checkbox updates its state and label accordingly.\n\n\n  Scenario: [Error] User clicks an individual checkbox that is already selected\n    Given the webpage with the checkbox list is loaded\n    When the user clicks on the checkbox with data-testid \"checkbox-1\"\n    And the user clicks again on the checkbox with data-testid \"checkbox-1\"\n    Then the checkbox with data-testid \"checkAll\" should not be checked\n    And the label with data-testid \"checkAll-label\" should display \"全选\""
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\ndef is_checked(element):\n    return element.is_selected()\n\n@given('the webpage with the checkbox list is loaded')\ndef step_given_webpage_loaded(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)\n\n@when('the user clicks on the checkbox with data-testid \"{checkbox_id}\"')\ndef step_when_user_clicks_checkbox(context, checkbox_id):\n    checkbox = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, f\"[data-testid='{checkbox_id}']\"))\n    )\n    checkbox.click()\n    time.sleep(1)\n\n@when('the user clicks again on the checkbox with data-testid \"{checkbox_id}\"')\ndef step_when_user_clicks_again_checkbox(context, checkbox_id):\n    checkbox = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, f\"[data-testid='{checkbox_id}']\"))\n    )\n    checkbox.click()\n    time.sleep(1)\n\n@then('the checkbox with data-testid \"checkAll\" should not be checked')\ndef step_then_checkAll_not_checked(context):\n    check_all_checkbox = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='checkAll']\")\n    assert not is_checked(check_all_checkbox), \"Expected 'checkAll' checkbox to be unchecked\"\n\n@then('the label with data-testid \"checkAll-label\" should display \"全选\"')\ndef step_then_checkAll_label_display(context):\n    check_all_label = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='checkAll-label']\")\n    expected_text = \"全选\"\n    assert expected_text in check_all_label.text, f\"Expected label text '{expected_text}', but got '{check_all_label.text}'\"\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                }
            ]
        }
    }
}