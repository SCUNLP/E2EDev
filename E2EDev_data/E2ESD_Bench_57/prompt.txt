
    You are tasked with implementing a complete web application using HTML, JavaScript, and CSS. Your implementation must strictly follow the specifications described below.
    SUMMARY:
    {
    "overview": "This web application provides a user interface for managing a list of checkboxes. Users can select all options, deselect all options, or reverse the selection of options. The application dynamically updates the state of the 'Select All/None' checkbox and its label based on user interactions.",
    "predefined_options": "The application includes predefined options for checkbox selections, such as 'Select All', 'Deselect All', and 'Reverse Selection'. These options standardize user interactions with the checkbox list.",
    "external_resources": "No external resources such as links, images, or audio files are used in this application.",
    "external_js_libraries": "No external JavaScript libraries are used in this application; all functionality is implemented using native JavaScript."
}
    ## Functional Requirements
    Implement the following features as described. For each requirement, make sure the HTML structure, JavaScript behavior, and CSS styles match the specifications exactly.
    REQUIREMENTS:
    - Requirement 1: 
The web application provides a checkbox list with a 'Select All/None' functionality. The user can interact with the 'Select All/None' checkbox, identified by the data-testid 'checkAll'. When the user clicks this checkbox, all individual checkboxes, identified by data-testids 'checkbox-1' to 'checkbox-10', should be toggled to match the state of the 'Select All/None' checkbox. If the 'Select All/None' checkbox is checked, all individual checkboxes should be checked, and the label with data-testid 'checkAll-label' should update to '全不选'. Conversely, if the 'Select All/None' checkbox is unchecked, all individual checkboxes should be unchecked, and the label should update to '全选'. Additionally, if any individual checkbox is manually toggled, the system should automatically update the 'Select All/None' checkbox and its label to reflect whether all individual checkboxes are selected or not. The 'Reverse Selection' link, identified by data-testid 'checkReverse', allows the user to invert the selection of all individual checkboxes, and the system should update the 'Select All/None' checkbox and its label accordingly.
- Requirement 2: 
The web application provides a checkbox list functionality where users can manage the selection of multiple options efficiently. The interface includes a 'Select All/None' checkbox with the attribute data-testid 'checkAll' and a corresponding label with data-testid 'checkAll-label'. When the user clicks the 'Select All/None' checkbox, the system toggles the selection state of all individual checkboxes, which have data-testids ranging from 'checkbox-1' to 'checkbox-10'. If all checkboxes are currently selected, clicking the 'Select All/None' checkbox will deselect all individual checkboxes and update the label text to '全选'. Conversely, if any checkboxes are deselected, clicking the 'Select All/None' checkbox will select all checkboxes and change the label text to '全不选'. Additionally, the system ensures that the 'Select All/None' checkbox reflects the collective state of all individual checkboxes, automatically updating its checked status and label text based on user interactions with individual checkboxes. The 'Reverse Selection' link with data-testid 'checkReverse' allows users to invert the current selection state of all individual checkboxes, and the system will update the 'Select All/None' checkbox and label accordingly.
- Requirement 3: 
The web application provides a checkbox list with a 'Reverse Selection' link, identified by the data-testid 'checkReverse'. When the user clicks this link, the application toggles the checked state of each checkbox in the list. Specifically, if a checkbox is checked, it becomes unchecked, and if it is unchecked, it becomes checked. This functionality applies to all checkboxes with data-testids ranging from 'checkbox-1' to 'checkbox-10'. The initial state of the checkboxes can be all checked, all unchecked, or a mix of checked and unchecked states. The system ensures that the toggle operation is accurately reflected in the UI, updating the checked state of each checkbox accordingly.
- Requirement 4: 
The web application provides a checkbox list with a 'Select All/None' functionality. The user can interact with individual checkboxes or use the 'Select All/None' checkbox to manage the selection state of all checkboxes. The system must update the state and label of the 'Select All/None' checkbox dynamically based on the selection state of individual checkboxes. Specifically: 1) When all individual checkboxes are selected, the 'Select All/None' checkbox (data-testid: 'checkAll') is checked, and its label (data-testid: 'checkAll-label') displays '全不选'. 2) When no individual checkboxes are selected, the 'Select All/None' checkbox is unchecked, and its label displays '全选'. 3) When some but not all individual checkboxes are selected, the 'Select All/None' checkbox remains unchecked, and its label displays '全选'. Additionally, the user can click the '反选' link (data-testid: 'checkReverse') to toggle the selection state of all individual checkboxes. The system must ensure that the state of the 'Select All/None' checkbox and its label are updated accordingly after any interaction. All checkboxes are identified using unique data-testid attributes (e.g., 'checkbox-1', 'checkbox-2', etc.), and the system must handle edge cases such as toggling already selected checkboxes or selecting no checkboxes.

    
    ## Output Format
    Provide a clean and complete implementation including:
    1. HTML structure (including necessary `data-testid`, `id`, and `class` values).
    2. JavaScript functionality that matches the behavior described.
    3. CSS for styling according to BEM and required class names.
    4. Ensure that the text content in the components is exactly as specified in the requirements.
    Do not include any extra components or libraries not listed above. Keep your code concise, semantic, and standards-compliant.
    