{
    "summary": {
        "overview": "The Study Planner application allows users to create and manage study schedules and tasks. Users can input details for schedules and tasks, which are dynamically displayed on the page.",
        "predefined_options": "The application does not specify predefined options for inputs; users manually enter all data.",
        "external_resources": "No external resources such as links, images, or audio files are used in the provided code.",
        "external_js_libraries": "No external JavaScript libraries are referenced in the provided code."
    },
    "finegrained_rewith_test": {
        "1": {
            "requirement": {
                "description": "The web application must allow users to create a schedule through the 'Study Planner' page. Specifically, when the user fills out the 'Subject' (data-testid='subject'), 'Date' (Date picker, data-testid='date'), and 'Time' (Time picker, data-testid='time') fields in the schedule form located within the section with data-testid 'schedule-section', and clicks the 'Add Schedule' button (data-testid='add-schedule-button'), the system must validate that all fields are completed. If any field is left empty, the system should prevent the addition of a new schedule item. Upon successful validation, a new schedule item should be created and appended to the schedule list (data-testid='schedule-list'). The schedule item must display the subject, date, and time in the format 'Subject - YYYY-MM-DD at HH:MM'."
            },
            "test_cases": [
                {
                    "test_case": [
                        "Feature: Schedule Creation\n  The user can create a schedule by filling out the \"Subject\", \"Date\", and \"Time\" fields and clicking the \"Add Schedule\" button. The new schedule item should be added to the schedule list displaying the subject, date, and time.\n\n\n  Scenario: [Normal] Add a valid schedule item\n    Given the \"Study Planner\" page is loaded\n    And the \"Subject\" field with data-testid \"subject\" is empty\n    And the \"Date\" field with data-testid \"date\" is empty\n    And the \"Time\" field with data-testid \"time\" is empty\n    When the user enters \"Math\" into the \"Subject\" field with data-testid \"subject\"\n    And the user enters \"2023-10-15\" into the \"Date\" field with data-testid \"date\"\n    And the user enters \"14:00\" into the \"Time\" field with data-testid \"time\"\n    And the user clicks the \"Add Schedule\" button with data-testid \"add-schedule-button\"\n    Then a new schedule item \"Math - 2023-10-15 at 14:00\" should be added to the schedule list with data-testid \"schedule-list\"\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nfrom selenium.webdriver.common.keys import Keys\nimport time\n\nfile_path = \"index.html\"\n\n@given('the \"Study Planner\" page is loaded')\ndef step_given_study_planner_page_loaded(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)\n\n@given('the \"Subject\" field with data-testid \"subject\" is empty')\ndef step_given_subject_field_empty(context):\n    subject_field = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='subject']\"))\n    )\n    assert subject_field.get_attribute('value') == '', \"Subject field is not empty\"\n    time.sleep(1)\n\n@given('the \"Date\" field with data-testid \"date\" is empty')\ndef step_given_date_field_empty(context):\n    date_field = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='date']\"))\n    )\n    assert date_field.get_attribute('value') == '', \"Date field is not empty\"\n    time.sleep(1)\n\n@given('the \"Time\" field with data-testid \"time\" is empty')\ndef step_given_time_field_empty(context):\n    time_field = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='time']\"))\n    )\n    assert time_field.get_attribute('value') == '', \"Time field is not empty\"\n    time.sleep(1)\n\n@when('the user enters \"Math\" into the \"Subject\" field with data-testid \"subject\"')\ndef step_when_user_enters_subject(context):\n    subject_field = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='subject']\"))\n    )\n    subject_field.send_keys(\"Math\")\n    time.sleep(1)\n\n@when('the user enters \"2023-10-15\" into the \"Date\" field with data-testid \"date\"')\ndef step_when_user_enters_date(context):\n    date_field = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='date']\"))\n    )\n    date_field.send_keys(\"2023\")\n    date_field.send_keys(Keys.ARROW_RIGHT)\n    date_field.send_keys(\"10\")\n    date_field.send_keys(Keys.ARROW_RIGHT)\n    date_field.send_keys(\"15\")\n    time.sleep(1)\n\n@when('the user enters \"14:00\" into the \"Time\" field with data-testid \"time\"')\ndef step_when_user_enters_time(context):\n    time_field = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='time']\"))\n    )\n    time_field.send_keys(\"14:00\")\n    time.sleep(1)\n\n@when('the user clicks the \"Add Schedule\" button with data-testid \"add-schedule-button\"')\ndef step_when_user_clicks_add_schedule(context):\n    add_schedule_button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='add-schedule-button']\"))\n    )\n    add_schedule_button.click()\n    time.sleep(1)\n\n@then('a new schedule item \"Math - 2023-10-15 at 14:00\" should be added to the schedule list with data-testid \"schedule-list\"')\ndef step_then_schedule_item_added(context):\n    schedule_list = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='schedule-list']\"))\n    )\n    schedule_items = schedule_list.find_elements(By.TAG_NAME, \"li\")\n    expected_text = \"Math - 2023-10-15 at 14:00\"\n    assert any(expected_text in item.text for item in schedule_items), f\"Expected schedule item '{expected_text}' not found\"\n    time.sleep(1)\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: Schedule Creation\n  The user can create a schedule by filling out the \"Subject\", \"Date\", and \"Time\" fields and clicking the \"Add Schedule\" button. The new schedule item should be added to the schedule list displaying the subject, date, and time.\n\n\n  Scenario: [Edge] Add a schedule item with minimum input length\n    Given the \"Study Planner\" page is loaded\n    And the \"Subject\" field with data-testid \"subject\" is empty\n    And the \"Date\" field with data-testid \"date\" is empty\n    And the \"Time\" field with data-testid \"time\" is empty\n    When the user enters \"A\" into the \"Subject\" field with data-testid \"subject\"\n    And the user enters \"2023-01-01\" into the \"Date\" field with data-testid \"date\"\n    And the user enters \"00:00\" into the \"Time\" field with data-testid \"time\"\n    And the user clicks the \"Add Schedule\" button with data-testid \"add-schedule-button\"\n    Then a new schedule item \"A - 2023-01-01 at 00:00\" should be added to the schedule list with data-testid \"schedule-list\"\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nfrom selenium.webdriver.common.keys import Keys\nimport time\n\nfile_path = \"index.html\"\n\n@given('the \"Study Planner\" page is loaded')\ndef step_given_study_planner_page_loaded(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)\n\n@given('the \"Subject\" field with data-testid \"subject\" is empty')\ndef step_given_subject_field_empty(context):\n    subject_field = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='subject']\")\n    assert subject_field.get_attribute('value') == '', \"Subject field is not empty\"\n\n@given('the \"Date\" field with data-testid \"date\" is empty')\ndef step_given_date_field_empty(context):\n    date_field = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='date']\")\n    assert date_field.get_attribute('value') == '', \"Date field is not empty\"\n\n@given('the \"Time\" field with data-testid \"time\" is empty')\ndef step_given_time_field_empty(context):\n    time_field = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='time']\")\n    assert time_field.get_attribute('value') == '', \"Time field is not empty\"\n\n@when('the user enters \"A\" into the \"Subject\" field with data-testid \"subject\"')\ndef step_when_user_enters_subject(context):\n    subject_field = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='subject']\")\n    subject_field.send_keys(\"A\")\n    time.sleep(1)\n\n@when('the user enters \"2023-01-01\" into the \"Date\" field with data-testid \"date\"')\ndef step_when_user_enters_date(context):\n    date_field = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='date']\")\n    date_field.send_keys(\"2023\")\n    date_field.send_keys(Keys.ARROW_RIGHT)  # Move focus to the next field\n    date_field.send_keys(\"01\")\n    date_field.send_keys(Keys.ARROW_RIGHT)\n    date_field.send_keys(\"01\")\n    time.sleep(1)\n\n@when('the user enters \"00:00\" into the \"Time\" field with data-testid \"time\"')\ndef step_when_user_enters_time(context):\n    time_field = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='time']\")\n    time_field.send_keys(\"00:00\")\n    time.sleep(1)\n\n@when('the user clicks the \"Add Schedule\" button with data-testid \"add-schedule-button\"')\ndef step_when_user_clicks_add_schedule(context):\n    add_schedule_button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='add-schedule-button']\"))\n    )\n    add_schedule_button.click()\n    time.sleep(1)\n\n@then('a new schedule item \"A - 2023-01-01 at 00:00\" should be added to the schedule list with data-testid \"schedule-list\"')\ndef step_then_schedule_item_added(context):\n    schedule_list = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='schedule-list']\")\n    schedule_items = schedule_list.find_elements(By.TAG_NAME, \"li\")\n    assert any(\"A - 2023-01-01 at 00:00\" in item.text for item in schedule_items), \"Schedule item not found\"\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: Schedule Creation\n  The user can create a schedule by filling out the \"Subject\", \"Date\", and \"Time\" fields and clicking the \"Add Schedule\" button. The new schedule item should be added to the schedule list displaying the subject, date, and time.\n\n\n  Scenario: [Error] Fail to add a schedule item with missing subject\n    Given the \"Study Planner\" page is loaded\n    And the \"Subject\" field with data-testid \"subject\" is empty\n    And the \"Date\" field with data-testid \"date\" is empty\n    And the \"Time\" field with data-testid \"time\" is empty\n    When the user enters \"\" into the \"Subject\" field with data-testid \"subject\"\n    And the user enters \"2023-10-15\" into the \"Date\" field with data-testid \"date\"\n    And the user enters \"14:00\" into the \"Time\" field with data-testid \"time\"\n    And the user clicks the \"Add Schedule\" button with data-testid \"add-schedule-button\"\n    Then no new schedule item should be added to the schedule list with data-testid \"schedule-list\"\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nfrom selenium.webdriver.common.keys import Keys\nimport time\n\nfile_path = \"index.html\"\n\ndef is_schedule_item_present(driver, subject, date, time):\n    schedule_list = driver.find_element(By.CSS_SELECTOR, \"[data-testid='schedule-list']\")\n    items = schedule_list.find_elements(By.TAG_NAME, \"li\")\n    for item in items:\n        if f\"{subject} - {date} at {time}\" in item.text:\n            return True\n    return False\n\n@given('the \"Study Planner\" page is loaded')\ndef step_given_study_planner_page_loaded(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)\n\n@given('the \"Subject\" field with data-testid \"subject\" is empty')\ndef step_given_subject_field_is_empty(context):\n    subject_field = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='subject']\")\n    assert subject_field.get_attribute('value') == \"\", \"Subject field is not empty\"\n\n@given('the \"Date\" field with data-testid \"date\" is empty')\ndef step_given_date_field_is_empty(context):\n    date_field = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='date']\")\n    assert date_field.get_attribute('value') == \"\", \"Date field is not empty\"\n\n@given('the \"Time\" field with data-testid \"time\" is empty')\ndef step_given_time_field_is_empty(context):\n    time_field = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='time']\")\n    assert time_field.get_attribute('value') == \"\", \"Time field is not empty\"\n\n@when('the user enters \"{subject}\" into the \"Subject\" field with data-testid \"subject\"')\ndef step_when_user_enters_subject(context, subject):\n    subject_field = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='subject']\")\n    subject_field.clear()\n    subject_field.send_keys(subject)\n    time.sleep(1)\n\n@when('the user enters \"\" into the \"Subject\" field with data-testid \"subject\"')\ndef step_when_user_enters_empty_subject(context):\n    subject_field = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='subject']\")\n    subject_field.clear()\n    time.sleep(1)\n\n@when('the user enters \"2023-10-15\" into the \"Date\" field with data-testid \"date\"')\ndef step_when_user_enters_date(context):\n    date_field = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='date']\")\n    date_field.clear()\n    date_field.send_keys(\"2023\")\n    date_field.send_keys(Keys.ARROW_RIGHT)  # Move focus to the next field\n    date_field.send_keys(\"10\")\n    date_field.send_keys(Keys.ARROW_RIGHT)\n    date_field.send_keys(\"15\")\n    time.sleep(1)\n\n@when('the user enters \"{t}\" into the \"Time\" field with data-testid \"time\"')\ndef step_when_user_enters_time(context, t):\n    time_field = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='time']\")\n    time_field.clear()\n    time_field.send_keys(t)\n    time.sleep(1)\n\n@when('the user clicks the \"Add Schedule\" button with data-testid \"add-schedule-button\"')\ndef step_when_user_clicks_add_schedule_button(context):\n    add_schedule_button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='add-schedule-button']\"))\n    )\n    add_schedule_button.click()\n    time.sleep(1)\n\n@then('no new schedule item should be added to the schedule list with data-testid \"schedule-list\"')\ndef step_then_no_new_schedule_item_added(context):\n    assert not is_schedule_item_present(context.driver, \"\", \"2023-10-15\", \"14:00\"), \"Schedule item was incorrectly added\"\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: Schedule Creation\n  The user can create a schedule by filling out the \"Subject\", \"Date\", and \"Time\" fields and clicking the \"Add Schedule\" button. The new schedule item should be added to the schedule list displaying the subject, date, and time.\n\n\nScenario: [Error] Attempt to add a schedule item with missing date\n    Given the \"Study Planner\" page is loaded\n    And the \"Subject\" field with data-testid \"subject\" is empty\n    And the \"Date\" field with data-testid \"date\" is empty\n    And the \"Time\" field with data-testid \"time\" is empty\n    When the user enters \"Math\" into the \"Subject\" field with data-testid \"subject\"\n    And the user enters \"14:00\" into the \"Time\" field with data-testid \"time\"\n    And the user clicks the \"Add Schedule\" button with data-testid \"add-schedule-button\"\n    Then no new schedule item should be added to the schedule list with data-testid \"schedule-list\""
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\ndef is_schedule_item_present(driver, subject, time):\n    schedule_list = driver.find_element(By.CSS_SELECTOR, \"[data-testid='schedule-list']\")\n    items = schedule_list.find_elements(By.TAG_NAME, \"li\")\n    for item in items:\n        if subject in item.text and time in item.text:\n            return True\n    return False\n\n@given('the \"Study Planner\" page is loaded')\ndef step_impl(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)\n\n@given('the \"Subject\" field with data-testid \"subject\" is empty')\ndef step_impl(context):\n    subject_field = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='subject']\")\n    assert subject_field.get_attribute('value') == \"\", \"Subject field is not empty\"\n\n@given('the \"Date\" field with data-testid \"date\" is empty')\ndef step_impl(context):\n    date_field = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='date']\")\n    assert date_field.get_attribute('value') == \"\", \"Date field is not empty\"\n\n@given('the \"Time\" field with data-testid \"time\" is empty')\ndef step_impl(context):\n    time_field = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='time']\")\n    assert time_field.get_attribute('value') == \"\", \"Time field is not empty\"\n\n@when('the user enters \"Math\" into the \"Subject\" field with data-testid \"subject\"')\ndef step_impl(context):\n    subject_field = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='subject']\")\n    subject_field.send_keys(\"Math\")\n    time.sleep(1)\n\n@when('the user enters \"14:00\" into the \"Time\" field with data-testid \"time\"')\ndef step_impl(context):\n    time_field = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='time']\")\n    time_field.send_keys(\"14:00\")\n    time.sleep(1)\n\n@when('the user clicks the \"Add Schedule\" button with data-testid \"add-schedule-button\"')\ndef step_impl(context):\n    add_button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='add-schedule-button']\"))\n    )\n    add_button.click()\n    time.sleep(1)\n\n@then('no new schedule item should be added to the schedule list with data-testid \"schedule-list\"')\ndef step_impl(context):\n    assert not is_schedule_item_present(context.driver, \"Math\", \"14:00\"), \"Schedule item was incorrectly added\"\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: Schedule Creation\n  The user can create a schedule by filling out the \"Subject\", \"Date\", and \"Time\" fields and clicking the \"Add Schedule\" button. The new schedule item should be added to the schedule list displaying the subject, date, and time.\n\n\nScenario: [Error] Attempt to add a schedule item with missing time\n    Given the \"Study Planner\" page is loaded\n    And the \"Subject\" field with data-testid \"subject\" is empty\n    And the \"Date\" field with data-testid \"date\" is empty\n    And the \"Time\" field with data-testid \"time\" is empty\n    When the user enters \"Math\" into the \"Subject\" field with data-testid \"subject\"\n    And the user enters \"2023-10-15\" into the \"Date\" field with data-testid \"date\"\n    And the user clicks the \"Add Schedule\" button with data-testid \"add-schedule-button\"\n    Then no new schedule item should be added to the schedule list with data-testid \"schedule-list\""
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\ndef is_visible(element):\n    return element.is_displayed()\n\n@given('the \"Study Planner\" page is loaded')\ndef step_given_study_planner_page_loaded(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)\n\n@given('the \"Subject\" field with data-testid \"subject\" is empty')\ndef step_given_subject_field_empty(context):\n    subject_field = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='subject']\")\n    assert subject_field.get_attribute('value') == '', \"Subject field is not empty\"\n\n@given('the \"Date\" field with data-testid \"date\" is empty')\ndef step_given_date_field_empty(context):\n    date_field = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='date']\")\n    assert date_field.get_attribute('value') == '', \"Date field is not empty\"\n\n@given('the \"Time\" field with data-testid \"time\" is empty')\ndef step_given_time_field_empty(context):\n    time_field = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='time']\")\n    assert time_field.get_attribute('value') == '', \"Time field is not empty\"\n\n@when('the user enters \"Math\" into the \"Subject\" field with data-testid \"subject\"')\ndef step_when_user_enters_subject(context):\n    subject_field = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='subject']\")\n    subject_field.send_keys(\"Math\")\n    time.sleep(1)\n\n@when('the user enters \"2023-10-15\" into the \"Date\" field with data-testid \"date\"')\ndef step_when_user_enters_date(context):\n    date_field = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='date']\")\n    date_field.send_keys(\"2023-10-15\")\n    time.sleep(1)\n\n@when('the user clicks the \"Add Schedule\" button with data-testid \"add-schedule-button\"')\ndef step_when_user_clicks_add_schedule_button(context):\n    add_schedule_button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='add-schedule-button']\"))\n    )\n    add_schedule_button.click()\n    time.sleep(1)\n\n@then('no new schedule item should be added to the schedule list with data-testid \"schedule-list\"')\ndef step_then_no_new_schedule_item_added(context):\n    schedule_list = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='schedule-list']\")\n    schedule_items = schedule_list.find_elements(By.TAG_NAME, \"li\")\n    assert len(schedule_items) == 0, \"New schedule item was added\"\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                }
            ]
        },
        "2": {
            "requirement": {
                "description": "The system must allow users to add a new task to the task list by filling out the task form and clicking the 'Add Task' button. Specifically, when the 'Study Planner' page is loaded, the 'Task' input field (data-testid='task') and the 'Deadline' input field (Date picker, data-testid='deadline') must be visible and empty, and the 'Add Task' button (data-testid='add-task-button') must also be visible. The user can enter a task name in the 'Task' input field and a valid date in the 'Deadline' input field. Upon clicking the 'Add Task' button (data-testid='add-task-button'), if both fields are filled, a new task item will be added to the task list (data-testid='task-list'), displaying the task name and deadline in the format 'Task Name - Deadline: YYYY-MM-DD'. If either the 'Task' or 'Deadline' field is left empty, no new task item will be added to the task list."
            },
            "test_cases": [
                {
                    "test_case": [
                        "Feature: Add a new task to the task list\n  The system must allow users to add a new task with a deadline to the task list by filling out the task form and clicking the \"Add Task\" button.\n\n\nScenario: [Normal] Add a valid task with a valid deadline\n    Given the \"Study Planner\" page is loaded\n    And the \"Task\" input field with data-testid \"task\" is visible and empty\n    And the \"Deadline\" input field with data-testid \"deadline\" is visible and empty\n    And the \"Add Task\" button with data-testid \"add-task-button\" is visible\n    When the user enters \"Complete homework\" into the \"Task\" input field with data-testid \"task\"\n    And the user enters \"2023-12-01\" into the \"Deadline\" input field with data-testid \"deadline\"\n    And the user clicks the \"Add Task\" button with data-testid \"add-task-button\"\n    Then a new task item is added to the task list with data-testid \"task-list\"\n    And the task item displays \"Complete homework - Deadline: 2023-12-01\""
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nfrom selenium.webdriver.common.keys import Keys\nimport time\n\nfile_path = \"index.html\"\n\n@given('the \"Study Planner\" page is loaded')\ndef step_impl(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)\n\n@given('the \"Task\" input field with data-testid \"task\" is visible and empty')\ndef step_impl(context):\n    task_input = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='task']\"))\n    )\n    assert task_input.is_displayed() and task_input.get_attribute('value') == \"\", \"Task input field is not visible or not empty\"\n    time.sleep(1)\n\n@given('the \"Deadline\" input field with data-testid \"deadline\" is visible and empty')\ndef step_impl(context):\n    deadline_input = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='deadline']\"))\n    )\n    assert deadline_input.is_displayed() and deadline_input.get_attribute('value') == \"\", \"Deadline input field is not visible or not empty\"\n    time.sleep(1)\n\n@given('the \"Add Task\" button with data-testid \"add-task-button\" is visible')\ndef step_impl(context):\n    add_task_button = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='add-task-button']\"))\n    )\n    assert add_task_button.is_displayed(), \"Add Task button is not visible\"\n    time.sleep(1)\n\n@when('the user enters \"Complete homework\" into the \"Task\" input field with data-testid \"task\"')\ndef step_impl(context):\n    task_input = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='task']\")\n    task_input.send_keys(\"Complete homework\")\n    time.sleep(1)\n\n@when('the user enters \"2023-12-01\" into the \"Deadline\" input field with data-testid \"deadline\"')\ndef step_impl(context):\n    deadline_input = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='deadline']\")\n    deadline_input.send_keys(\"2023\")\n    deadline_input.send_keys(Keys.ARROW_RIGHT)\n    deadline_input.send_keys(\"12\")\n    deadline_input.send_keys(Keys.ARROW_RIGHT)\n    deadline_input.send_keys(\"01\")\n    time.sleep(1)\n\n@when('the user clicks the \"Add Task\" button with data-testid \"add-task-button\"')\ndef step_impl(context):\n    add_task_button = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='add-task-button']\")\n    add_task_button.click()\n    time.sleep(1)\n\n@then('a new task item is added to the task list with data-testid \"task-list\"')\ndef step_impl(context):\n    task_list = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='task-list']\"))\n    )\n    task_items = task_list.find_elements(By.TAG_NAME, \"li\")\n    assert len(task_items) > 0, \"No task items found in the task list\"\n    time.sleep(1)\n\n@then('the task item displays \"Complete homework - Deadline: 2023-12-01\"')\ndef step_impl(context):\n    task_list = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='task-list']\")\n    task_items = task_list.find_elements(By.TAG_NAME, \"li\")\n    task_text = \"Complete homework - Deadline: 2023-12-01\"\n    assert any(task_text in item.text for item in task_items), f\"Task item with text '{task_text}' not found\"\n    time.sleep(1)\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: Add a new task to the task list\n  The system must allow users to add a new task with a deadline to the task list by filling out the task form and clicking the \"Add Task\" button.\n\n\nScenario: [Edge] Add a task with a deadline set to today\"s date\n    Given the \"Study Planner\" page is loaded\n    And the \"Task\" input field with data-testid \"task\" is visible and empty\n    And the \"Deadline\" input field with data-testid \"deadline\" is visible and empty\n    And the \"Add Task\" button with data-testid \"add-task-button\" is visible\n    When the user enters \"Submit assignment\" into the \"Task\" input field with data-testid \"task\"\n    And the user enters \"2023-11-01\" into the \"Deadline\" input field with data-testid \"deadline\"\n    And the user clicks the \"Add Task\" button with data-testid \"add-task-button\"\n    Then a new task item is added to the task list with data-testid \"task-list\"\n    And the task item displays \"Submit assignment - Deadline: 2023-11-01\""
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nfrom selenium.webdriver.common.keys import Keys\n\nimport time\nfrom datetime import datetime\n\nfile_path = \"index.html\"\n\ndef setup_driver(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n\ndef teardown_driver(context):\n    context.driver.quit()\n\n@given('the \"Study Planner\" page is loaded')\ndef step_given_study_planner_page_loaded(context):\n    setup_driver(context)\n    WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='task-section']\"))\n    )\n    time.sleep(1)\n\n@given('the \"Task\" input field with data-testid \"task\" is visible and empty')\ndef step_given_task_input_visible_and_empty(context):\n    task_input = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='task']\"))\n    )\n    assert task_input.is_displayed(), \"Task input field is not visible\"\n    assert task_input.get_attribute('value') == \"\", \"Task input field is not empty\"\n    time.sleep(1)\n\n@given('the \"Deadline\" input field with data-testid \"deadline\" is visible and empty')\ndef step_given_deadline_input_visible_and_empty(context):\n    deadline_input = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='deadline']\"))\n    )\n    assert deadline_input.is_displayed(), \"Deadline input field is not visible\"\n    assert deadline_input.get_attribute('value') == \"\", \"Deadline input field is not empty\"\n    time.sleep(1)\n\n@given('the \"Add Task\" button with data-testid \"add-task-button\" is visible')\ndef step_given_add_task_button_visible(context):\n    add_task_button = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='add-task-button']\"))\n    )\n    assert add_task_button.is_displayed(), \"Add Task button is not visible\"\n    time.sleep(1)\n\n@when('the user enters \"Submit assignment\" into the \"Task\" input field with data-testid \"task\"')\ndef step_when_user_enters_task(context):\n    task_input = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='task']\")\n    task_input.send_keys(\"Submit assignment\")\n    time.sleep(1)\n\n@when('the user enters \"2023-11-01\" into the \"Deadline\" input field with data-testid \"deadline\"')\ndef step_when_user_enters_deadline(context):\n    deadline_input = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='deadline']\")\n    deadline_input.send_keys(\"2023\")\n    deadline_input.send_keys(Keys.ARROW_RIGHT)\n    deadline_input.send_keys(\"11\")\n    deadline_input.send_keys(Keys.ARROW_RIGHT)\n    deadline_input.send_keys(\"01\")\n    time.sleep(1)\n\n@when('the user clicks the \"Add Task\" button with data-testid \"add-task-button\"')\ndef step_when_user_clicks_add_task_button(context):\n    add_task_button = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='add-task-button']\")\n    add_task_button.click()\n    time.sleep(1)\n\n@then('a new task item is added to the task list with data-testid \"task-list\"')\ndef step_then_task_item_added(context):\n    task_list = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='task-list']\"))\n    )\n    task_items = task_list.find_elements(By.TAG_NAME, \"li\")\n    assert len(task_items) > 0, \"No task items found in the task list\"\n    time.sleep(1)\n\n@then('the task item displays \"Submit assignment - Deadline: 2023-11-01\"')\ndef step_then_task_item_displays_correct_text(context):\n    expected_text = f\"Submit assignment - Deadline: 2023-11-01\"\n    task_list = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='task-list']\")\n    task_items = task_list.find_elements(By.TAG_NAME, \"li\")\n    assert any(expected_text.lower() in item.text.lower() for item in task_items), f\"Expected text '{expected_text}' not found in task items\"\n    time.sleep(1)\n    teardown_driver(context)"
                },
                {
                    "test_case": [
                        "Feature: Add a new task to the task list\n  The system must allow users to add a new task with a deadline to the task list by filling out the task form and clicking the \"Add Task\" button.\n\n\nScenario: [Error] Fail to add a task without entering a task name\n    Given the \"Study Planner\" page is loaded\n    And the \"Task\" input field with data-testid \"task\" is visible and empty\n    And the \"Deadline\" input field with data-testid \"deadline\" is visible and empty\n    And the \"Add Task\" button with data-testid \"add-task-button\" is visible\n    When the user leaves the \"Task\" input field with data-testid \"task\" empty\n    And the user enters \"2023-12-01\" into the \"Deadline\" input field with data-testid \"deadline\"\n    And the user clicks the \"Add Task\" button with data-testid \"add-task-button\"\n    Then no new task item is added to the task list with data-testid \"task-list\""
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the \"Study Planner\" page is loaded')\ndef step_impl(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)\n\n@given('the \"Task\" input field with data-testid \"task\" is visible and empty')\ndef step_impl(context):\n    task_input = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='task']\"))\n    )\n    assert task_input.is_displayed(), \"Task input field is not visible\"\n    assert task_input.get_attribute('value') == '', \"Task input field is not empty\"\n    time.sleep(1)\n\n@given('the \"Deadline\" input field with data-testid \"deadline\" is visible and empty')\ndef step_impl(context):\n    deadline_input = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='deadline']\"))\n    )\n    assert deadline_input.is_displayed(), \"Deadline input field is not visible\"\n    assert deadline_input.get_attribute('value') == '', \"Deadline input field is not empty\"\n    time.sleep(1)\n\n@given('the \"Add Task\" button with data-testid \"add-task-button\" is visible')\ndef step_impl(context):\n    add_task_button = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='add-task-button']\"))\n    )\n    assert add_task_button.is_displayed(), \"Add Task button is not visible\"\n    time.sleep(1)\n\n@when('the user leaves the \"Task\" input field with data-testid \"task\" empty')\ndef step_impl(context):\n    task_input = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='task']\")\n    task_input.clear()\n    time.sleep(1)\n\n@when('the user enters \"2023-12-01\" into the \"Deadline\" input field with data-testid \"deadline\"')\ndef step_impl(context):\n    deadline_input = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='deadline']\")\n    deadline_input.clear()\n    deadline_input.send_keys(\"2023-12-01\")\n    time.sleep(1)\n\n@when('the user clicks the \"Add Task\" button with data-testid \"add-task-button\"')\ndef step_impl(context):\n    add_task_button = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='add-task-button']\")\n    add_task_button.click()\n    time.sleep(1)\n\n@then('no new task item is added to the task list with data-testid \"task-list\"')\ndef step_impl(context):\n    task_list = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='task-list']\")\n    task_items = task_list.find_elements(By.TAG_NAME, \"li\")\n    assert len(task_items) == 0, \"A new task item was incorrectly added to the task list\"\n    time.sleep(1)\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: Add a new task to the task list\n  The system must allow users to add a new task with a deadline to the task list by filling out the task form and clicking the \"Add Task\" button.\n\n\nScenario: [Error] Attempt to add a task without entering a deadline\n    Given the \"Study Planner\" page is loaded\n    And the \"Task\" input field with data-testid \"task\" is visible and empty\n    And the \"Deadline\" input field with data-testid \"deadline\" is visible and empty\n    And the \"Add Task\" button with data-testid \"add-task-button\" is visible\n    When the user enters \"Prepare for exam\" into the \"Task\" input field with data-testid \"task\"\n    And the user leaves the \"Deadline\" input field with data-testid \"deadline\" empty\n    And the user clicks the \"Add Task\" button with data-testid \"add-task-button\"\n    Then no new task item is added to the task list with data-testid \"task-list\""
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the \"Study Planner\" page is loaded')\ndef step_impl(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)\n\n@given('the \"Task\" input field with data-testid \"task\" is visible and empty')\ndef step_impl(context):\n    task_input = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='task']\"))\n    )\n    assert task_input.is_displayed() and task_input.get_attribute('value') == \"\", \"Task input field is not visible or not empty\"\n    time.sleep(1)\n\n@given('the \"Deadline\" input field with data-testid \"deadline\" is visible and empty')\ndef step_impl(context):\n    deadline_input = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='deadline']\"))\n    )\n    assert deadline_input.is_displayed() and deadline_input.get_attribute('value') == \"\", \"Deadline input field is not visible or not empty\"\n    time.sleep(1)\n\n@given('the \"Add Task\" button with data-testid \"add-task-button\" is visible')\ndef step_impl(context):\n    add_task_button = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='add-task-button']\"))\n    )\n    assert add_task_button.is_displayed(), \"Add Task button is not visible\"\n    time.sleep(1)\n\n@when('the user enters \"Prepare for exam\" into the \"Task\" input field with data-testid \"task\"')\ndef step_impl(context):\n    task_input = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='task']\")\n    task_input.send_keys(\"Prepare for exam\")\n    time.sleep(1)\n\n@when('the user leaves the \"Deadline\" input field with data-testid \"deadline\" empty')\ndef step_impl(context):\n    deadline_input = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='deadline']\")\n    assert deadline_input.get_attribute('value') == \"\", \"Deadline input field is not empty\"\n    time.sleep(1)\n\n@when('the user clicks the \"Add Task\" button with data-testid \"add-task-button\"')\ndef step_impl(context):\n    add_task_button = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='add-task-button']\")\n    add_task_button.click()\n    time.sleep(1)\n\n@then('no new task item is added to the task list with data-testid \"task-list\"')\ndef step_impl(context):\n    task_list = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='task-list']\")\n    task_items = task_list.find_elements(By.TAG_NAME, \"li\")\n    assert len(task_items) == 0, \"A new task item was incorrectly added to the task list\"\n    time.sleep(1)\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: Add a new task to the task list\n  The system must allow users to add a new task with a deadline to the task list by filling out the task form and clicking the \"Add Task\" button.\n\n\nScenario: [Error] Attempt to add a task with both fields empty\n    Given the \"Study Planner\" page is loaded\n    And the \"Task\" input field with data-testid \"task\" is visible and empty\n    And the \"Deadline\" input field with data-testid \"deadline\" is visible and empty\n    And the \"Add Task\" button with data-testid \"add-task-button\" is visible\n    When the user leaves the \"Task\" input field with data-testid \"task\" empty\n    And the user leaves the \"Deadline\" input field with data-testid \"deadline\" empty\n    And the user clicks the \"Add Task\" button with data-testid \"add-task-button\"\n    Then no new task item is added to the task list with data-testid \"task-list\""
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the \"Study Planner\" page is loaded')\ndef step_given_study_planner_page_loaded(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)\n\n@given('the \"Task\" input field with data-testid \"task\" is visible and empty')\ndef step_given_task_input_visible_and_empty(context):\n    task_input = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='task']\"))\n    )\n    assert task_input.is_displayed(), \"Task input field is not visible\"\n    assert task_input.get_attribute('value') == '', \"Task input field is not empty\"\n    time.sleep(1)\n\n@given('the \"Deadline\" input field with data-testid \"deadline\" is visible and empty')\ndef step_given_deadline_input_visible_and_empty(context):\n    deadline_input = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='deadline']\"))\n    )\n    assert deadline_input.is_displayed(), \"Deadline input field is not visible\"\n    assert deadline_input.get_attribute('value') == '', \"Deadline input field is not empty\"\n    time.sleep(1)\n\n@given('the \"Add Task\" button with data-testid \"add-task-button\" is visible')\ndef step_given_add_task_button_visible(context):\n    add_task_button = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='add-task-button']\"))\n    )\n    assert add_task_button.is_displayed(), \"Add Task button is not visible\"\n    time.sleep(1)\n\n@when('the user leaves the \"Task\" input field with data-testid \"task\" empty')\ndef step_when_user_leaves_task_input_empty(context):\n    task_input = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='task']\")\n    assert task_input.get_attribute('value') == '', \"Task input field is not empty\"\n    time.sleep(1)\n\n@when('the user leaves the \"Deadline\" input field with data-testid \"deadline\" empty')\ndef step_when_user_leaves_deadline_input_empty(context):\n    deadline_input = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='deadline']\")\n    assert deadline_input.get_attribute('value') == '', \"Deadline input field is not empty\"\n    time.sleep(1)\n\n@when('the user clicks the \"Add Task\" button with data-testid \"add-task-button\"')\ndef step_when_user_clicks_add_task_button(context):\n    add_task_button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='add-task-button']\"))\n    )\n    add_task_button.click()\n    time.sleep(1)\n\n@then('no new task item is added to the task list with data-testid \"task-list\"')\ndef step_then_no_new_task_item_added(context):\n    task_list = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='task-list']\")\n    task_items = task_list.find_elements(By.TAG_NAME, \"li\")\n    assert len(task_items) == 0, \"New task item was added to the task list\"\n    time.sleep(1)\n    context.driver.quit()"
                }
            ]
        },
        "3": {
            "requirement": {
                "description": "The web application must ensure that after a user successfully adds a schedule using the 'Add Schedule' button (located via data-testid 'add-schedule-button'), the input fields for 'Subject', 'Date', and 'Time' (located via data-testid 'subject', 'date', and 'time' respectively) within the schedule form (located via data-testid 'schedule-form') are reset to empty. This allows the user to enter new data without manually clearing the fields. "
            },
            "test_cases": [
                {
                    "test_case": [
                        "Feature: Schedule Form Reset Functionality\n  After a schedule is added, the system must reset the schedule form fields to be empty, allowing the user to enter new data.\n\n\nScenario: [Normal] Add a schedule and verify form reset\n    Given the \"Study Planner\" page is loaded\n    And the user enters \"Mathematics\" into the subject field with data-testid \"subject\"\n    And the user enters \"2023-10-15\" into the date field with data-testid \"date\"\n    And the user enters \"10:00\" into the time field with data-testid \"time\"\n    When the user clicks the \"Add Schedule\" button with data-testid \"add-schedule-button\"\n    Then the subject field with data-testid \"subject\" should be empty\n    And the date field with data-testid \"date\" should be empty\n    And the time field with data-testid \"time\" should be empty"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nfrom selenium.webdriver.common.keys import Keys\nimport time\n\nfile_path = \"index.html\"\n\n@given('the \"Study Planner\" page is loaded')\ndef step_given_study_planner_page_loaded(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)\n\n@given('the user enters \"{subject}\" into the subject field with data-testid \"subject\"')\ndef step_given_enter_subject(context, subject):\n    subject_field = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='subject']\"))\n    )\n    subject_field.clear()\n    subject_field.send_keys(subject)\n    time.sleep(1)\n\n@given('the user enters \"{date}\" into the date field with data-testid \"date\"')\ndef step_given_enter_date(context, date):\n    date_field = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='date']\"))\n    )\n    year, month, day = date.split('-')\n    date_field.clear()\n    date_field.send_keys(year)\n    date_field.send_keys(Keys.ARROW_RIGHT)\n    date_field.send_keys(month)\n    date_field.send_keys(Keys.ARROW_RIGHT)\n    date_field.send_keys(day)\n    time.sleep(1)\n\n@given('the user enters \"{t}\" into the time field with data-testid \"time\"')\ndef step_given_enter_time(context, t):\n    time_field = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='time']\"))\n    )\n    time_field.clear()\n    time_field.send_keys(t)\n    time.sleep(1)\n\n@when('the user clicks the \"Add Schedule\" button with data-testid \"add-schedule-button\"')\ndef step_when_click_add_schedule_button(context):\n    add_schedule_button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='add-schedule-button']\"))\n    )\n    add_schedule_button.click()\n    time.sleep(1)\n\n@then('the subject field with data-testid \"subject\" should be empty')\ndef step_then_subject_field_should_be_empty(context):\n    subject_field = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='subject']\")\n    assert subject_field.get_attribute('value') == \"\", \"Subject field is not empty\"\n\n@then('the date field with data-testid \"date\" should be empty')\ndef step_then_date_field_should_be_empty(context):\n    date_field = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='date']\")\n    assert date_field.get_attribute('value') == \"\", \"Date field is not empty\"\n\n@then('the time field with data-testid \"time\" should be empty')\ndef step_then_time_field_should_be_empty(context):\n    time_field = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='time']\")\n    assert time_field.get_attribute('value') == \"\", \"Time field is not empty\"\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: Schedule Form Reset Functionality\n  After a schedule is added, the system must reset the schedule form fields to be empty, allowing the user to enter new data.\n\n\nScenario: [Edge] Add a schedule with minimum input and verify form reset\n    Given the \"Study Planner\" page is loaded\n    And the user enters \"A\" into the subject field with data-testid \"subject\"\n    And the user enters \"2023-01-01\" into the date field with data-testid \"date\"\n    And the user enters \"00:00\" into the time field with data-testid \"time\"\n    When the user clicks the \"Add Schedule\" button with data-testid \"add-schedule-button\"\n    Then the subject field with data-testid \"subject\" should be empty\n    And the date field with data-testid \"date\" should be empty\n    And the time field with data-testid \"time\" should be empty"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nfrom selenium.webdriver.common.keys import Keys\nimport time\n\nfile_path = \"index.html\"\n\n@given('the \"Study Planner\" page is loaded')\ndef step_given_study_planner_page_loaded(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)\n\n@given('the user enters \"{subject}\" into the subject field with data-testid \"subject\"')\ndef step_given_user_enters_subject(context, subject):\n    subject_field = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='subject']\"))\n    )\n    subject_field.clear()\n    subject_field.send_keys(subject)\n    time.sleep(1)\n\n@given('the user enters \"{date}\" into the date field with data-testid \"date\"')\ndef step_given_user_enters_date(context, date):\n    date_field = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='date']\"))\n    )\n    year, month, day = date.split('-')\n    date_field.clear()\n    date_field.send_keys(year)\n    date_field.send_keys(Keys.ARROW_RIGHT)\n    date_field.send_keys(month)\n    date_field.send_keys(Keys.ARROW_RIGHT)\n    date_field.send_keys(day)\n    time.sleep(1)\n\n@given('the user enters \"{t}\" into the time field with data-testid \"time\"')\ndef step_given_user_enters_time(context, t):\n    time_field = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='time']\"))\n    )\n    time_field.clear()\n    time_field.send_keys(t)\n    time.sleep(1)\n\n@when('the user clicks the \"Add Schedule\" button with data-testid \"add-schedule-button\"')\ndef step_when_user_clicks_add_schedule_button(context):\n    add_schedule_button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='add-schedule-button']\"))\n    )\n    add_schedule_button.click()\n    time.sleep(1)\n\n@then('the subject field with data-testid \"subject\" should be empty')\ndef step_then_subject_field_should_be_empty(context):\n    subject_field = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='subject']\")\n    assert subject_field.get_attribute('value') == \"\", \"Subject field is not empty\"\n\n@then('the date field with data-testid \"date\" should be empty')\ndef step_then_date_field_should_be_empty(context):\n    date_field = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='date']\")\n    assert date_field.get_attribute('value') == \"\", \"Date field is not empty\"\n\n@then('the time field with data-testid \"time\" should be empty')\ndef step_then_time_field_should_be_empty(context):\n    time_field = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='time']\")\n    assert time_field.get_attribute('value') == \"\", \"Time field is not empty\"\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: Schedule Form Reset Functionality\n  After a schedule is added, the system must reset the schedule form fields to be empty, allowing the user to enter new data.\n\n\n  Scenario: [Error] Attempt to add a schedule with missing subject\n    Given the \"Study Planner\" page is loaded\n    And the user leaves the subject field with data-testid \"subject\" empty\n    And the user enters \"2023-10-15\" into the date field with data-testid \"date\"\n    And the user enters \"10:00\" into the time field with data-testid \"time\"\n    When the user clicks the \"Add Schedule\" button with data-testid \"add-schedule-button\"\n    Then the schedule list with data-testid \"schedule-list\" should not contain any new items\n    And the subject field with data-testid \"subject\" should remain empty\n    And the date field with data-testid \"date\" should contain \"2023-10-15\"\n    And the time field with data-testid \"time\" should contain \"10:00\"\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nfrom selenium.webdriver.common.keys import Keys\nimport time\n\nfile_path = \"index.html\"\n\n@given('the \"Study Planner\" page is loaded')\ndef step_given_study_planner_page_loaded(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)\n\n@given('the user leaves the subject field with data-testid \"subject\" empty')\ndef step_given_subject_field_empty(context):\n    subject_field = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='subject']\"))\n    )\n    subject_field.clear()\n    time.sleep(1)\n\n@given('the user enters \"2023-10-15\" into the date field with data-testid \"date\"')\ndef step_given_enter_date(context):\n    date_field = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='date']\"))\n    )\n    date_field.clear()\n    date_field.send_keys(\"2023\")\n    date_field.send_keys(Keys.ARROW_RIGHT)\n    date_field.send_keys(\"10\")\n    date_field.send_keys(Keys.ARROW_RIGHT)\n    date_field.send_keys(\"15\")\n    time.sleep(1)\n\n@given('the user enters \"10:00\" into the time field with data-testid \"time\"')\ndef step_given_enter_time(context):\n    time_field = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='time']\"))\n    )\n    time_field.clear()\n    time_field.send_keys(\"10:00\")\n    time.sleep(1)\n\n@when('the user clicks the \"Add Schedule\" button with data-testid \"add-schedule-button\"')\ndef step_when_click_add_schedule_button(context):\n    add_schedule_button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='add-schedule-button']\"))\n    )\n    add_schedule_button.click()\n    time.sleep(1)\n\n@then('the schedule list with data-testid \"schedule-list\" should not contain any new items')\ndef step_then_schedule_list_no_new_items(context):\n    schedule_list = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='schedule-list']\"))\n    )\n    items = schedule_list.find_elements(By.TAG_NAME, \"li\")\n    assert len(items) == 0, f\"Expected no new items, but found {len(items)}\"\n\n@then('the subject field with data-testid \"subject\" should remain empty')\ndef step_then_subject_field_remains_empty(context):\n    subject_field = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='subject']\"))\n    )\n    assert subject_field.get_attribute('value') == \"\", \"Expected subject field to be empty\"\n\n@then('the date field with data-testid \"date\" should contain \"2023-10-15\"')\ndef step_then_date_field_contains(context):\n    date_field = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='date']\"))\n    )\n    assert date_field.get_attribute('value') == \"2023-10-15\", \"Expected date field to contain '2023-10-15'\"\n\n@then('the time field with data-testid \"time\" should contain \"10:00\"')\ndef step_then_time_field_contains(context):\n    time_field = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='time']\"))\n    )\n    assert time_field.get_attribute('value') == \"10:00\", \"Expected time field to contain '10:00'\"\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: Schedule Form Reset Functionality\n  After a schedule is added, the system must reset the schedule form fields to be empty, allowing the user to enter new data.\n\n\n  Scenario: [Error] Attempt to add a schedule with missing date\n    Given the \"Study Planner\" page is loaded\n    And the user enters \"Mathematics\" into the subject field with data-testid \"subject\"\n    And the user leaves the date field with data-testid \"date\" empty\n    And the user enters \"10:00\" into the time field with data-testid \"time\"\n    When the user clicks the \"Add Schedule\" button with data-testid \"add-schedule-button\"\n    Then the schedule list with data-testid \"schedule-list\" should not contain any new items\n    And the subject field with data-testid \"subject\" should contain \"Mathematics\"\n    And the date field with data-testid \"date\" should remain empty\n    And the time field with data-testid \"time\" should contain \"10:00\"\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the \"Study Planner\" page is loaded')\ndef step_given_study_planner_page_loaded(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)\n\n@given('the user enters \"Mathematics\" into the subject field with data-testid \"subject\"')\ndef step_given_enter_subject(context):\n    subject_field = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='subject']\"))\n    )\n    subject_field.clear()\n    subject_field.send_keys(\"Mathematics\")\n    time.sleep(1)\n\n@given('the user leaves the date field with data-testid \"date\" empty')\ndef step_given_leave_date_empty(context):\n    date_field = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='date']\"))\n    )\n    date_field.clear()\n    time.sleep(1)\n\n@given('the user enters \"10:00\" into the time field with data-testid \"time\"')\ndef step_given_enter_time(context):\n    time_field = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='time']\"))\n    )\n    time_field.clear()\n    time_field.send_keys(\"10:00\")\n    time.sleep(1)\n\n@when('the user clicks the \"Add Schedule\" button with data-testid \"add-schedule-button\"')\ndef step_when_click_add_schedule(context):\n    add_button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='add-schedule-button']\"))\n    )\n    add_button.click()\n    time.sleep(1)\n\n@then('the schedule list with data-testid \"schedule-list\" should not contain any new items')\ndef step_then_schedule_list_no_new_items(context):\n    schedule_list = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='schedule-list']\")\n    items = schedule_list.find_elements(By.TAG_NAME, \"li\")\n    assert len(items) == 0, f\"Expected no items in schedule list, but found {len(items)}\"\n\n@then('the subject field with data-testid \"subject\" should contain \"Mathematics\"')\ndef step_then_subject_field_contains(context):\n    subject_field = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='subject']\")\n    assert subject_field.get_attribute(\"value\") == \"Mathematics\", f\"Expected 'Mathematics', but got '{subject_field.get_attribute('value')}'\"\n\n@then('the date field with data-testid \"date\" should remain empty')\ndef step_then_date_field_empty(context):\n    date_field = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='date']\")\n    assert date_field.get_attribute(\"value\") == \"\", f\"Expected empty date field, but got '{date_field.get_attribute('value')}'\"\n\n@then('the time field with data-testid \"time\" should contain \"10:00\"')\ndef step_then_time_field_contains(context):\n    time_field = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='time']\")\n    assert time_field.get_attribute(\"value\") == \"10:00\", f\"Expected '10:00', but got '{time_field.get_attribute('value')}'\"\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: Schedule Form Reset Functionality\n  After a schedule is added, the system must reset the schedule form fields to be empty, allowing the user to enter new data.\n\n\n  Scenario: [Error] Attempt to add a schedule with missing time\n    Given the \"Study Planner\" page is loaded\n    And the user enters \"Mathematics\" into the subject field with data-testid \"subject\"\n    And the user enters \"2023-10-15\" into the date field with data-testid \"date\"\n    And the user leaves the time field with data-testid \"time\" empty\n    When the user clicks the \"Add Schedule\" button with data-testid \"add-schedule-button\"\n    Then the schedule list with data-testid \"schedule-list\" should not contain any new items\n    And the subject field with data-testid \"subject\" should contain \"Mathematics\"\n    And the date field with data-testid \"date\" should contain \"2023-10-15\"\n    And the time field with data-testid \"time\" should remain empty"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nfrom selenium.webdriver.common.keys import Keys\nimport time\n\nfile_path = \"index.html\"\n\n@given('the \"Study Planner\" page is loaded')\ndef step_given_study_planner_page_loaded(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)\n\n@given('the user enters \"Mathematics\" into the subject field with data-testid \"subject\"')\ndef step_given_enter_subject(context):\n    subject_field = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='subject']\"))\n    )\n    subject_field.clear()\n    subject_field.send_keys(\"Mathematics\")\n    time.sleep(1)\n\n@given('the user enters \"2023-10-15\" into the date field with data-testid \"date\"')\ndef step_given_enter_date(context):\n    date_field = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='date']\"))\n    )\n    date_field.clear()\n    date_field.send_keys(\"2023\")\n    date_field.send_keys(Keys.ARROW_RIGHT)\n    date_field.send_keys(\"10\")\n    date_field.send_keys(Keys.ARROW_RIGHT)\n    date_field.send_keys(\"15\")\n    time.sleep(1)\n\n@given('the user leaves the time field with data-testid \"time\" empty')\ndef step_given_leave_time_empty(context):\n    time_field = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='time']\"))\n    )\n    time_field.clear()\n    time.sleep(1)\n\n@when('the user clicks the \"Add Schedule\" button with data-testid \"add-schedule-button\"')\ndef step_when_click_add_schedule(context):\n    add_schedule_button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='add-schedule-button']\"))\n    )\n    add_schedule_button.click()\n    time.sleep(1)\n\n@then('the schedule list with data-testid \"schedule-list\" should not contain any new items')\ndef step_then_check_schedule_list_empty(context):\n    schedule_list = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='schedule-list']\"))\n    )\n    items = schedule_list.find_elements(By.TAG_NAME, \"li\")\n    assert len(items) == 0, f\"Expected no items in schedule list, but found {len(items)}\"\n\n@then('the subject field with data-testid \"subject\" should contain \"Mathematics\"')\ndef step_then_check_subject_field(context):\n    subject_field = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='subject']\"))\n    )\n    assert subject_field.get_attribute(\"value\") == \"Mathematics\", \"Subject field does not contain 'Mathematics'\"\n\n@then('the date field with data-testid \"date\" should contain \"2023-10-15\"')\ndef step_then_check_date_field(context):\n    date_field = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='date']\"))\n    )\n    assert date_field.get_attribute(\"value\") == \"2023-10-15\", \"Date field does not contain '2023-10-15'\"\n\n@then('the time field with data-testid \"time\" should remain empty')\ndef step_then_check_time_field_empty(context):\n    time_field = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='time']\"))\n    )\n    assert time_field.get_attribute(\"value\") == \"\", \"Time field is not empty\"\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                }
            ]
        },
        "4": {
            "requirement": {
                "description": "The Study Planner web application must ensure that after a task is successfully added, the task form fields are reset to be empty, allowing the user to enter new data. "
            },
            "test_cases": [
                {
                    "test_case": [
                        "Feature: Task Form Reset After Submission\n  The system must reset the task form fields to be empty after a task is added, allowing the user to enter new data.\n\n\nScenario: [Normal] Task form fields reset after adding a task\n    Given the Study Planner page is loaded\n    And the user enters \"Complete assignment\" into the task field with data-testid \"task\"\n    And the user enters \"2023-10-15\" into the deadline field with data-testid \"deadline\"\n    When the user clicks the \"Add Task\" button with data-testid \"add-task-button\"\n    Then the task field with data-testid \"task\" should be empty\n    And the deadline field with data-testid \"deadline\" should be empty"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nfrom selenium.webdriver.common.keys import Keys\nimport time\n\nfile_path = \"index.html\"\n\n@given('the Study Planner page is loaded')\ndef step_given_study_planner_page_loaded(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)\n\n@given('the user enters \"{task}\" into the task field with data-testid \"task\"')\ndef step_given_user_enters_task(context, task):\n    task_field = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='task']\"))\n    )\n    task_field.clear()\n    task_field.send_keys(task)\n    time.sleep(1)\n\n@given('the user enters \"{deadline}\" into the deadline field with data-testid \"deadline\"')\ndef step_given_user_enters_deadline(context, deadline):\n    deadline_field = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='deadline']\"))\n    )\n    year,month,day = deadline.split('-')\n    deadline_field.clear()\n    deadline_field.send_keys(year)\n    deadline_field.send_keys(Keys.ARROW_RIGHT)\n    deadline_field.send_keys(month)\n    deadline_field.send_keys(Keys.ARROW_RIGHT)\n    deadline_field.send_keys(day)\n    time.sleep(1)\n\n@when('the user clicks the \"Add Task\" button with data-testid \"add-task-button\"')\ndef step_when_user_clicks_add_task_button(context):\n    add_task_button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='add-task-button']\"))\n    )\n    add_task_button.click()\n    time.sleep(1)\n\n@then('the task field with data-testid \"task\" should be empty')\ndef step_then_task_field_should_be_empty(context):\n    task_field = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='task']\"))\n    )\n    assert task_field.get_attribute('value') == \"\", \"Task field is not empty\"\n\n@then('the deadline field with data-testid \"deadline\" should be empty')\ndef step_then_deadline_field_should_be_empty(context):\n    deadline_field = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='deadline']\"))\n    )\n    assert deadline_field.get_attribute('value') == \"\", \"Deadline field is not empty\"\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: Task Form Reset After Submission\n  The system must reset the task form fields to be empty after a task is added, allowing the user to enter new data.\n\n\nScenario: [Edge Case] Task form fields are not reset when required fields are missing\n  Given the Study Planner page is loaded\n  And the user enters \"Our Task\" into the \"Task\" field with data-testid \"task\"\n  And the user leaves the \"Deadline\" field with data-testid \"deadline\" empty\n  When the user clicks the \"Add Task\" button with data-testid \"add-task-button\"\n  Then the \"Task\" field with data-testid \"task\" should still contain \"Our Task\""
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the Study Planner page is loaded')\ndef step_given_study_planner_page_loaded(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)\n\n@given('the user enters \"Our Task\" into the \"Task\" field with data-testid \"task\"')\ndef step_given_user_enters_task(context):\n    task_input = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='task']\"))\n    )\n    task_input.clear()\n    task_input.send_keys(\"Our Task\")\n    time.sleep(1)\n\n@given('the user leaves the \"Deadline\" field with data-testid \"deadline\" empty')\ndef step_given_user_leaves_deadline_empty(context):\n    deadline_input = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='deadline']\"))\n    )\n    deadline_input.clear()\n    time.sleep(1)\n\n@when('the user clicks the \"Add Task\" button with data-testid \"add-task-button\"')\ndef step_when_user_clicks_add_task_button(context):\n    add_task_button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='add-task-button']\"))\n    )\n    add_task_button.click()\n    time.sleep(1)\n\n@then('the \"Task\" field with data-testid \"task\" should still contain \"Our Task\"')\ndef step_then_task_field_should_contain_our_task(context):\n    task_input = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='task']\"))\n    )\n    assert task_input.get_attribute(\"value\") == \"Our Task\", \"Task field does not contain 'Our Task'\"\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: Task Form Reset After Submission\n  The system must reset the task form fields to be empty after a task is added, allowing the user to enter new data.\n\n\nScenario: [Edge Case] Task form fields are not reset when required fields are missing\n  Given the Study Planner page is loaded\n  And the user leaves the \"Task\" field with data-testid \"task\" empty\n  And the user enters \"2023-09-18\" into the \"Deadline\" field with data-testid \"deadline\"\n  When the user clicks the \"Add Task\" button with data-testid \"add-task-button\"\n  Then the \"Deadline\" field with data-testid \"deadline\" should still contain \"2023-09-18\""
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nfrom selenium.webdriver.common.keys import Keys\nimport time\n\nfile_path = \"index.html\"\n\n@given('the Study Planner page is loaded')\ndef step_given_study_planner_page_loaded(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)\n\n@given('the user leaves the \"Task\" field with data-testid \"task\" empty')\ndef step_given_task_field_empty(context):\n    task_input = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='task']\")\n    task_input.clear()\n    time.sleep(1)\n\n@given('the user enters \"2023-09-18\" into the \"Deadline\" field with data-testid \"deadline\"')\ndef step_given_enter_deadline(context):\n    deadline_input = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='deadline']\")\n    deadline_input.clear()\n    deadline_input.send_keys(\"2023\")\n    deadline_input.send_keys(Keys.ARROW_RIGHT)\n    deadline_input.send_keys(\"09\")\n    deadline_input.send_keys(Keys.ARROW_RIGHT)\n    deadline_input.send_keys(\"18\")\n    time.sleep(1)\n\n@when('the user clicks the \"Add Task\" button with data-testid \"add-task-button\"')\ndef step_when_click_add_task_button(context):\n    add_task_button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='add-task-button']\"))\n    )\n    add_task_button.click()\n    time.sleep(1)\n\n@then('the \"Deadline\" field with data-testid \"deadline\" should still contain \"2023-09-18\"')\ndef step_then_check_deadline_field(context):\n    deadline_input = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='deadline']\")\n    assert deadline_input.get_attribute(\"value\") == \"2023-09-18\", \"Deadline field does not contain the expected date\"\n    time.sleep(1)\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                }
            ]
        }
    }
}