{
    "summary": {
        "overview": "The Height Converter application allows users to input a height value, select the original unit and the desired conversion unit, and view the converted height. It provides a user-friendly interface for converting between various units of measurement such as Miles, Kilometers, Meters, Centimeters, and Inches.",
        "predefined_options": "The application provides predefined options for unit selection in dropdown menus, including Centimeters, Inches, Meters, Kilometers, and Miles.",
        "external_resources": "The application uses external resources such as Bootstrap for styling, linked via a CDN.",
        "external_js_libraries": "Bootstrap is used for styling, sourced from 'https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0-alpha.6/css/bootstrap.min.css'."
    },
    "finegrained_rewith_test": {
        "1": {
            "requirement": {
                "description": "When the user enters a numeric value in the height input field (data-testid='height-input'), the system must display this value in the height output section (data-testid='height-output') and make both the output row (data-testid='output-row') and the reset button (data-testid='reset-button') visible."
            },
            "test_cases": [
                {
                    "test_case": [
                        "Feature: Display Height Input Value\n  The system should display the entered height value in the output section and make the output row and reset button visible when a numeric value is entered in the height input field.\n\n\n  Scenario: [Normal] User enters a valid numeric height value\n    Given the \"Height Convertor\" page is loaded\n    And the height input field with data-testid \"height-input\" is visible\n    When the user enters the numeric value \"180\" into the height input field with data-testid \"height-input\"\n    Then the height output section with data-testid \"height-output\" should display \"180\"\n    And the output row with data-testid \"output-row\" should be visible\n    And the reset button with data-testid \"reset-button\" should be visible\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the \"Height Convertor\" page is loaded')\ndef step_impl(context):\n    # Initialize the WebDriver and load the test page\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    context.driver.maximize_window()\n    time.sleep(1)  # Allow the page to load completely\n\n@given('the height input field with data-testid \"height-input\" is visible')\ndef step_impl(context):\n    # Wait for the height input field to be visible\n    WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='height-input']\"))\n    )\n    height_input = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='height-input']\")\n    assert height_input.is_displayed(), \"Height input field is not visible\"\n\n@when('the user enters the numeric value \"180\" into the height input field with data-testid \"height-input\"')\ndef step_impl(context):\n    # Locate the height input field and enter the value \"180\"\n    height_input = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='height-input']\")\n    height_input.clear()\n    height_input.send_keys(\"180\")\n    time.sleep(1)  # Allow the input event to trigger\n\n@then('the height output section with data-testid \"height-output\" should display \"180\"')\ndef step_impl(context):\n    # Wait for the height output section to display the value\n    WebDriverWait(context.driver, 10).until(\n        EC.text_to_be_present_in_element((By.CSS_SELECTOR, \"[data-testid='height-output']\"), \"180\")\n    )\n    height_output = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='height-output']\")\n    assert \"180\" in height_output.text, f\"Expected '180' in height output, but got '{height_output.text}'\"\n\n@then('the output row with data-testid \"output-row\" should be visible')\ndef step_impl(context):\n    # Check if the output row is visible\n    output_row = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='output-row']\")\n    assert output_row.is_displayed(), \"Output row is not visible\"\n\n@then('the reset button with data-testid \"reset-button\" should be visible')\ndef step_impl(context):\n    # Check if the reset button is visible\n    reset_button = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='reset-button']\")\n    assert reset_button.is_displayed(), \"Reset button is not visible\"\n\n# Teardown step to close the browser after the test\ndef after_scenario(context, scenario):\n    if hasattr(context, 'driver'):\n        context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: Display Height Input Value\n  The system should display the entered height value in the output section and make the output row and reset button visible when a numeric value is entered in the height input field.\n\n\n  Scenario: [Edge] User enters the minimum numeric value (0) in the height input field\n    Given the \"Height Convertor\" page is loaded\n    And the height input field with data-testid \"height-input\" is visible\n    When the user enters the numeric value \"0\" into the height input field with data-testid \"height-input\"\n    Then the height output section with data-testid \"height-output\" should display \"0\"\n    And the output row with data-testid \"output-row\" should be visible\n    And the reset button with data-testid \"reset-button\" should be visible\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the \"Height Convertor\" page is loaded')\ndef step_impl(context):\n    # Initialize the WebDriver and load the test page\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    context.driver.maximize_window()\n    time.sleep(1)  # Allow the page to load completely\n\n@given('the height input field with data-testid \"height-input\" is visible')\ndef step_impl(context):\n    # Wait for the height input field to be visible\n    WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='height-input']\"))\n    )\n\n@when('the user enters the numeric value \"0\" into the height input field with data-testid \"height-input\"')\ndef step_impl(context):\n    # Locate the height input field and enter the value \"0\"\n    height_input = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='height-input']\")\n    height_input.clear()\n    height_input.send_keys(\"0\")\n    time.sleep(1)  # Allow the input event to trigger\n\n@then('the height output section with data-testid \"height-output\" should display \"0\"')\ndef step_impl(context):\n    # Wait for the height output section to be visible and verify its content\n    height_output = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='height-output']\"))\n    )\n    assert height_output.text.strip() == \"0\", f\"Expected '0', but got '{height_output.text.strip()}'\"\n\n@then('the output row with data-testid \"output-row\" should be visible')\ndef step_impl(context):\n    # Verify that the output row is visible\n    output_row = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='output-row']\")\n    assert output_row.is_displayed(), \"Output row is not visible\"\n\n@then('the reset button with data-testid \"reset-button\" should be visible')\ndef step_impl(context):\n    # Verify that the reset button is visible\n    reset_button = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='reset-button']\")\n    assert reset_button.is_displayed(), \"Reset button is not visible\"\n\n# Teardown step to close the browser after the test\ndef after_scenario(context, scenario):\n    if hasattr(context, 'driver'):\n        context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: Display Height Input Value\n  The system should display the entered height value in the output section and make the output row and reset button visible when a numeric value is entered in the height input field.\n\n\n  Scenario: [Edge] User enters a very large numeric value in the height input field\n    Given the \"Height Convertor\" page is loaded\n    And the height input field with data-testid \"height-input\" is visible\n    When the user enters a very large numeric value \"999999999\" into the height input field with data-testid \"height-input\"\n    Then the height output section with data-testid \"height-output\" should display \"999999999\"\n    And the output row with data-testid \"output-row\" should be visible\n    And the reset button with data-testid \"reset-button\" should be visible\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the \"Height Convertor\" page is loaded')\ndef step_given_page_is_loaded(context):\n    context.driver = webdriver.Chrome()  # Initialize the WebDriver\n    context.driver.get(f\"file://index.html\")\n    context.driver.maximize_window()\n    time.sleep(1)  # Allow the page to load completely\n\n@given('the height input field with data-testid \"height-input\" is visible')\ndef step_given_height_input_is_visible(context):\n    height_input = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='height-input']\"))\n    )\n    assert height_input.is_displayed(), \"Height input field is not visible\"\n\n@when('the user enters a very large numeric value \"999999999\" into the height input field with data-testid \"height-input\"')\ndef step_when_user_enters_large_value(context):\n    height_input = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='height-input']\"))\n    )\n    height_input.clear()\n    height_input.send_keys(\"999999999\")\n    time.sleep(1)  # Allow the input event to trigger\n\n@then('the height output section with data-testid \"height-output\" should display \"999999999\"')\ndef step_then_height_output_should_display_value(context):\n    height_output = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='height-output']\"))\n    )\n    assert \"999999999\" in height_output.text.strip(), f\"Expected '999999999', but got '{height_output.text.strip()}'\"\n\n@then('the output row with data-testid \"output-row\" should be visible')\ndef step_then_output_row_should_be_visible(context):\n    output_row = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='output-row']\"))\n    )\n    assert output_row.is_displayed(), \"Output row is not visible\"\n\n@then('the reset button with data-testid \"reset-button\" should be visible')\ndef step_then_reset_button_should_be_visible(context):\n    reset_button = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='reset-button']\"))\n    )\n    assert reset_button.is_displayed(), \"Reset button is not visible\"\n\n# Cleanup after the test\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: Display Height Input Value\n  The system should display the entered height value in the output section and make the output row and reset button visible when a numeric value is entered in the height input field.\n\n\nScenario: [Error] User enters a non-numeric value in the height input field\n    Given the \"Height Convertor\" page is loaded\n    And the height input field with data-testid \"height-input\" is visible\n    When the user enters a non-numeric value \"abc\" into the height input field with data-testid \"height-input\"\n    Then the height output section with data-testid \"height-output\" should not display \"abc\""
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the \"Height Convertor\" page is loaded')\ndef step_given_page_is_loaded(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)  # Allow page to load completely\n\n@given('the height input field with data-testid \"height-input\" is visible')\ndef step_given_height_input_is_visible(context):\n    height_input = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='height-input']\"))\n    )\n    assert height_input.is_displayed(), \"Height input field is not visible\"\n\n@when('the user enters a non-numeric value \"abc\" into the height input field with data-testid \"height-input\"')\ndef step_when_user_enters_non_numeric_value(context):\n    height_input = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='height-input']\"))\n    )\n    height_input.clear()\n    height_input.send_keys(\"abc\")\n    time.sleep(1)  # Allow DOM updates after input\n\n@then('the height output section with data-testid \"height-output\" should not display \"abc\"')\ndef step_then_height_output_should_not_display_abc(context):\n    height_output = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='height-output']\"))\n    )\n    assert \"abc\" not in height_output.text, f\"Height output incorrectly displays: {height_output.text}\"\n\n# Cleanup after tests\ndef after_scenario(context, scenario):\n    if hasattr(context, 'driver'):\n        context.driver.quit()"
                }
            ]
        },
        "2": {
            "requirement": {
                "description": "When the user selects an option from the first dropdown (data-testid='first-option-select')—which includes 'Select an Option' (data-testid='first-option-select'), 'Centimeters' (data-testid='first-option-centimeters'), 'Inches' (data-testid='first-option-inches'), 'Meters' (data-testid='first-option-meters'), 'Kilometers' (data-testid='first-option-kilometers'), and 'Miles' (data-testid='first-option-miles'), the system should dynamically update the input field's (data-testid='height-input') placeholder to reflect the selected unit. The placeholder should change to 'Enter [Selected Unit]...' where [Selected Unit] is the unit chosen by the user. Additionally, the height name section (data-testid='height-name') should display '[Selected Unit]:' to indicate the current unit of measurement. If the user selects the default option 'Select an Option', the input field should retain its original placeholder 'Enter Height...', and the height name section should remain empty. "
            },
            "test_cases": [
                {
                    "test_case": [
                        "Feature: Update input field placeholder and height name based on the first dropdown selection\n\n  As a user,\n  I want the input field\"s placeholder and height name section to update dynamically\n  So that I can see the selected unit reflected in the UI.\n\n\n  Scenario: [Normal] Update placeholder and height name when a valid unit is selected from the first dropdown\n    Given the webpage is loaded and the first dropdown with data-testid \"first-option-select\" is visible\n    When the user selects \"Centimeters\" from the first dropdown\n    Then the input field with data-testid \"height-input\" should have the placeholder \"Enter Centimeters...\"\n    And the height name section with data-testid \"height-name\" should display \"Centimeters:\"\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the webpage is loaded and the first dropdown with data-testid \"first-option-select\" is visible')\ndef step_given_webpage_loaded(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='first-option-select']\"))\n    )\n    time.sleep(1)\n\n@when('the user selects \"Centimeters\" from the first dropdown')\ndef step_when_select_centimeters(context):\n    first_dropdown = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='first-option-select']\")\n    first_dropdown.click()\n    time.sleep(1)\n    centimeters_option = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='first-option-select-centimeters']\")\n    centimeters_option.click()\n    time.sleep(1)\n\n@then('the input field with data-testid \"height-input\" should have the placeholder \"Enter Centimeters...\"')\ndef step_then_check_placeholder(context):\n    height_input = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='height-input']\")\n    placeholder_text = height_input.get_attribute(\"placeholder\")\n    assert placeholder_text == \"Enter Centimeters...\", f\"Expected placeholder 'Enter Centimeters...', but got '{placeholder_text}'\"\n    time.sleep(1)\n\n@then('the height name section with data-testid \"height-name\" should display \"Centimeters:\"')\ndef step_then_check_height_name(context):\n    height_name = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='height-name']\")\n    height_name_text = height_name.text\n    assert height_name_text == \"Centimeters:\", f\"Expected height name 'Centimeters:', but got '{height_name_text}'\"\n    time.sleep(1)\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: Update input field placeholder and height name based on the first dropdown selection\n\n  As a user,\n  I want the input field\"s placeholder and height name section to update dynamically\n  So that I can see the selected unit reflected in the UI.\n\n\n  Scenario: [Edge] Update placeholder and height name when the user selects the default option from the first dropdown\n    Given the webpage is loaded and the first dropdown with data-testid \"first-option-select\" is visible\n    When the user selects the default option \"Select an Option\" from the first dropdown\n    Then the input field with data-testid \"height-input\" should retain its placeholder \"Enter Height...\"\n    And the height name section with data-testid \"height-name\" should remain empty\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the webpage is loaded and the first dropdown with data-testid \"first-option-select\" is visible')\ndef step_given_webpage_loaded(context):\n    # Initialize the WebDriver\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    context.driver.maximize_window()\n\n    # Wait for the first dropdown to be visible\n    WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='first-option-select']\"))\n    )\n    time.sleep(1)  # Add a short delay for robustness\n\n@when('the user selects the default option \"Select an Option\" from the first dropdown')\ndef step_when_user_selects_default_option(context):\n    # Locate the first dropdown and select the default option\n    first_dropdown = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='first-option-select']\")\n    WebDriverWait(context.driver, 10).until(EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='first-option-select']\")))\n    first_dropdown.click()\n\n    # Select the default option\n    default_option = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='first-option-select-default']\")\n    default_option.click()\n    time.sleep(1)  # Add a short delay for robustness\n\n@then('the input field with data-testid \"height-input\" should retain its placeholder \"Enter Height...\"')\ndef step_then_input_field_placeholder(context):\n    # Locate the input field and verify its placeholder\n    input_field = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='height-input']\")\n    placeholder = input_field.get_attribute(\"placeholder\")\n    assert placeholder == \"Enter Height...\", f\"Expected placeholder 'Enter Height...', but got '{placeholder}'\"\n    time.sleep(1)  # Add a short delay for robustness\n\n@then('the height name section with data-testid \"height-name\" should remain empty')\ndef step_then_height_name_empty(context):\n    # Locate the height name section and verify it is empty\n    height_name_section = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='height-name']\")\n    height_name_text = height_name_section.text.strip()\n    assert height_name_text == \"\", f\"Expected height name section to be empty, but got '{height_name_text}'\"\n    time.sleep(1)  # Add a short delay for robustness\n\n# Cleanup after tests\ndef after_scenario(context, scenario):\n    if hasattr(context, 'driver'):\n        context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: Update input field placeholder and height name based on the first dropdown selection\n\n  As a user,\n  I want the input field\"s placeholder and height name section to update dynamically\n  So that I can see the selected unit reflected in the UI.\n\n\n  Scenario: [Error] Attempt to update placeholder and height name when the first dropdown is empty or not selected\n    Given the webpage is loaded and the first dropdown with data-testid \"first-option-select\" is visible\n    When the user does not select any option from the first dropdown\n    Then the input field with data-testid \"height-input\" should retain its placeholder \"Enter Height...\"\n    And the height name section with data-testid \"height-name\" should remain empty"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the webpage is loaded and the first dropdown with data-testid \"first-option-select\" is visible')\ndef step_given_webpage_loaded(context):\n    # Initialize the WebDriver\n    context.driver = webdriver.Chrome()\n    # Load the test page\n    context.driver.get(f\"file://index.html\")\n    # Wait for the first dropdown to be visible\n    WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='first-option-select']\"))\n    )\n    time.sleep(1)  # Allow the page to stabilize\n\n@when('the user does not select any option from the first dropdown')\ndef step_when_no_option_selected(context):\n    # Ensure no option is selected (default state)\n    first_dropdown = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='first-option-select']\")\n    selected_option = first_dropdown.find_element(By.CSS_SELECTOR, \"[data-testid='first-option-select-default']\")\n    assert selected_option.is_selected(), \"Default option should be selected\"\n    time.sleep(1)\n\n@then('the input field with data-testid \"height-input\" should retain its placeholder \"Enter Height...\"')\ndef step_then_placeholder_retains(context):\n    # Verify the placeholder text of the input field\n    height_input = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='height-input']\")\n    placeholder_text = height_input.get_attribute(\"placeholder\")\n    assert placeholder_text == \"Enter Height...\", f\"Expected placeholder to be 'Enter Height...', but got '{placeholder_text}'\"\n    time.sleep(1)\n\n@then('the height name section with data-testid \"height-name\" should remain empty')\ndef step_then_height_name_empty(context):\n    # Verify the height name section is empty\n    height_name = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='height-name']\")\n    height_name_text = height_name.text.strip()\n    assert height_name_text == \"\", f\"Expected height name section to be empty, but got '{height_name_text}'\"\n    time.sleep(1)\n\n# Teardown to close the browser after the test\ndef after_scenario(context, scenario):\n    if hasattr(context, 'driver'):\n        context.driver.quit()"
                }
            ]
        },
        "3": {
            "requirement": {
                "description": "When the user selects a unit from the second dropdown (data-testid='second-option-select', which includes 'Select' (data-testid='second-option-select-default'), 'Centimeters' (data-testid='second-option-select-centimeters'), 'Inches' (data-testid='second-option-select-inches'), 'Meters' (data-testid='second-option-select-meters'), 'Kilometers' (data-testid='second-option-select-kilometers'), and 'Miles' (data-testid='second-option-select-miles')), the system must immediately update the converted height name section (data-testid='converted-height-name') to display '[Selected Unit]:', reflecting the chosen unit. "
            },
            "test_cases": [
                {
                    "test_case": [
                        "Feature: Display Selected Unit Name in Converted Height Name Section\n  The system should display the selected unit name in the converted height name section when the user selects a unit from the second dropdown.\n\n\nScenario: [Normal] User selects a valid unit from the second dropdown\n    Given the Height Convertor page is loaded\n    And the user has selected \"Miles\" from the first dropdown with data-testid \"first-option-select\"\n    When the user selects \"Centimeters\" from the second dropdown with data-testid \"second-option-select\"\n    Then the converted height name section with data-testid \"converted-height-name\" should display \"Centimeters:\""
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\ndef is_expanded(element):\n    aria = element.get_attribute(\"aria-expanded\")\n    if aria is not None:\n        return aria == \"true\"\n\n    class_list = element.get_attribute(\"class\").split()\n    if any(cls in class_list for cls in [\"expanded\", \"open\", \"show\"]):\n        return True\n\n    data_expanded = element.get_attribute(\"data-expanded\")\n    if data_expanded is not None:\n        return data_expanded == \"true\"\n\n    return element.is_displayed()\n\ndef is_collapsed(element):\n    aria = element.get_attribute(\"aria-expanded\")\n    if aria is not None and aria.lower() == \"false\":\n        return True\n\n    class_attr = element.get_attribute(\"class\") or \"\"\n    class_list = class_attr.split()\n    if \"collapsed\" in class_list:\n        return True\n\n    data_expanded = element.get_attribute(\"data-expanded\")\n    if data_expanded is not None and data_expanded.lower() == \"false\":\n        return True\n\n    style = element.get_attribute(\"style\") or \"\"\n    if \"display: none\" in style or \"visibility: hidden\" in style or \"height: 0\" in style:\n        return True\n\n    return not element.is_displayed()\n\n@given('the Height Convertor page is loaded')\ndef step_given_height_convertor_page_loaded(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)\n\n@given('the user has selected \"Miles\" from the first dropdown with data-testid \"first-option-select\"')\ndef step_given_user_selected_miles_first_dropdown(context):\n    first_option_select = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='first-option-select']\"))\n    )\n    first_option_select.click()\n    time.sleep(1)\n    miles_option = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='first-option-select-miles']\")\n    miles_option.click()\n    time.sleep(1)\n\n@when('the user selects \"Centimeters\" from the second dropdown with data-testid \"second-option-select\"')\ndef step_when_user_selects_centimeters_second_dropdown(context):\n    second_option_select = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='second-option-select']\"))\n    )\n    second_option_select.click()\n    time.sleep(1)\n    centimeters_option = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='second-option-select-centimeters']\")\n    centimeters_option.click()\n    time.sleep(1)\n\n@then('the converted height name section with data-testid \"converted-height-name\" should display \"Centimeters:\"')\ndef step_then_converted_height_name_should_display_centimeters(context):\n    converted_height_name = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='converted-height-name']\"))\n    )\n    expected_text = \"Centimeters:\"\n    assert expected_text in converted_height_name.text, f\"Expected '{expected_text}' in '{converted_height_name.text}'\"\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                }
            ]
        },
        "4": {
            "requirement": {
                "description": "The Height Converter web app lets users convert height values between units like 'Centimeters', 'Inches', 'Meters', 'Kilometers', and 'Miles'. It includes an input field (data-testid='height-input') where users enter a height, two dropdown menus (data-testid='first-option-select' and data-testid='second-option-select') to choose the units to convert from and to, and an output section (data-testid='final-output') to show the result. The app updates the input placeholder and labels based on selected units, and shows the converted height."
            },
            "test_cases": [
                {
                    "test_case": [
                        "Feature: Height Conversion Functionality\n  The system should convert the height from the first unit to the second unit and display the result in the final output section when both units are selected and a height value is entered.\n\n\n  Scenario: [Normal] Convert height from Miles to Kilometers\n    Given the Height Convertor page is loaded\n    And the user enters \"5\" into the height input field with data-testid \"height-input\"\n    And the user selects option with data-testid \"first-option-select-miles\" from the first unit dropdown with data-testid \"first-option-select\"\n    And the user selects option with data-testid \"second-option-select-kilometers\" from the second unit dropdown with data-testid \"second-option-select\"\n    When the height is converted\n    Then the final output with data-testid \"final-output\" should display \"8.0467\"\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the Height Convertor page is loaded')\ndef step_impl(context):\n    # Initialize the WebDriver and load the test page\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    context.driver.maximize_window()\n    time.sleep(1)  # Allow the page to fully load\n\n@given('the user enters \"{height}\" into the height input field with data-testid \"height-input\"')\ndef step_impl(context, height):\n    # Locate the height input field and enter the specified height\n    height_input = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='height-input']\"))\n    )\n    height_input.clear()\n    height_input.send_keys(height)\n    time.sleep(1)\n\n@given('the user selects option with data-testid \"first-option-select-miles\" from the first unit dropdown with data-testid \"first-option-select\"')\ndef step_impl(context):\n    # Locate the first dropdown and select the specified unit\n    first_dropdown = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='first-option-select']\"))\n    )\n    first_dropdown.click()\n    time.sleep(1)\n    option = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='first-option-select-miles']\"))\n    )\n    option.click()\n    time.sleep(1)\n\n@given('the user selects option with data-testid \"second-option-select-kilometers\" from the second unit dropdown with data-testid \"second-option-select\"')\ndef step_impl(context):\n    # Locate the second dropdown and select the specified unit\n    second_dropdown = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='second-option-select']\"))\n    )\n    second_dropdown.click()\n    time.sleep(1)\n    option = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='second-option-select-kilometers']\"))\n    )\n    option.click()\n    time.sleep(1)\n\n@when('the height is converted')\ndef step_impl(context):\n    # Wait for the output row to become visible, indicating the conversion is complete\n    WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='output-row']\"))\n    )\n    time.sleep(1)\n\n@then('the final output with data-testid \"final-output\" should display \"{expected_output}\"')\ndef step_impl(context, expected_output):\n    # Locate the final output element and verify its text matches the expected output\n    final_output = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='final-output']\"))\n    )\n    actual_output = final_output.text.strip()\n    assert expected_output == actual_output, f\"Expected '{expected_output}', but got '{actual_output}'\"\n\n    # Close the browser after the test\n    context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: Height Conversion Functionality\n  The system should convert the height from the first unit to the second unit and display the result in the final output section when both units are selected and a height value is entered.\n\n\n  Scenario: [Edge] Convert height from 0 Centimeters to Inches\n    Given the Height Convertor page is loaded\n    And the user enters \"0\" into the height input field with data-testid \"height-input\"\n    And the user selects \"Centimeters\" from the first unit dropdown with data-testid \"first-option-select\"\n    And the user selects \"Inches\" from the second unit dropdown with data-testid \"second-option-select\"\n    When the height is converted\n    Then the final output with data-testid \"final-output\" should display \"0\"\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the Height Convertor page is loaded')\ndef step_given_height_convertor_page_loaded(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)\n\n@given('the user enters \"{height}\" into the height input field with data-testid \"height-input\"')\ndef step_given_user_enters_height(context, height):\n    height_input = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='height-input']\"))\n    )\n    height_input.clear()\n    height_input.send_keys(height)\n    time.sleep(1)\n\n@given('the user selects \"{unit}\" from the first unit dropdown with data-testid \"first-option-select\"')\ndef step_given_user_selects_first_unit(context, unit):\n    first_unit_select = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='first-option-select']\"))\n    )\n    first_unit_select.click()\n    option = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.XPATH, f\"//option[text()='{unit}']\"))\n    )\n    option.click()\n    time.sleep(1)\n\n@given('the user selects \"{unit}\" from the second unit dropdown with data-testid \"second-option-select\"')\ndef step_given_user_selects_second_unit(context, unit):\n    second_unit_select = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='second-option-select']\"))\n    )\n    second_unit_select.click()\n    option = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.XPATH, f\"//option[text()='{unit}']\"))\n    )\n    option.click()\n    time.sleep(1)\n\n@when('the height is converted')\ndef step_when_height_is_converted(context):\n    # The conversion happens automatically via JavaScript when inputs change\n    time.sleep(1)\n\n@then('the final output with data-testid \"final-output\" should display \"{expected_output}\"')\ndef step_then_final_output_should_display(context, expected_output):\n    final_output = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='final-output']\"))\n    )\n    actual_output = final_output.text.strip()\n    assert expected_output == actual_output, f\"Expected '{expected_output}', but got '{actual_output}'\"\n    time.sleep(1)\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: Height Conversion Functionality\n  The system should convert the height from the first unit to the second unit and display the result in the final output section when both units are selected and a height value is entered.\n\n\n  Scenario: [Error] Convert height with no units selected\n    Given the Height Convertor page is loaded\n    And the user enters \"10\" into the height input field with data-testid \"height-input\"\n    And the user selects \"Select an Option\" from the first unit dropdown with data-testid \"first-option-select\"\n    And the user selects \"Select\" from the second unit dropdown with data-testid \"second-option-select\"\n    When the height is converted\n    Then the final output with data-testid \"final-output\" should display \"10\"\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the Height Convertor page is loaded')\ndef step_given_page_loaded(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)  # Allow time for the page to load\n\n@given('the user enters \"{height}\" into the height input field with data-testid \"height-input\"')\ndef step_given_enter_height(context, height):\n    height_input = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='height-input']\"))\n    )\n    height_input.clear()\n    height_input.send_keys(height)\n    time.sleep(1)\n\n@given('the user selects \"Select an Option\" from the first unit dropdown with data-testid \"first-option-select\"')\ndef step_given_select_first_option(context):\n    first_option_select = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='first-option-select']\"))\n    )\n    first_option_select.click()\n    time.sleep(1)\n    default_option = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='first-option-select-default']\")\n    default_option.click()\n    time.sleep(1)\n\n@given('the user selects \"Select\" from the second unit dropdown with data-testid \"second-option-select\"')\ndef step_given_select_second_option(context):\n    second_option_select = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='second-option-select']\"))\n    )\n    second_option_select.click()\n    time.sleep(1)\n    default_option = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='second-option-select-default']\")\n    default_option.click()\n    time.sleep(1)\n\n@when('the height is converted')\ndef step_when_height_converted(context):\n    # Assuming conversion happens automatically on input and selection changes\n    pass\n\n@then('the final output with data-testid \"final-output\" should display \"{expected_output}\"')\ndef step_then_check_final_output(context, expected_output):\n    final_output = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='final-output']\"))\n    )\n    assert expected_output.strip() in final_output.text.strip(), f\"Expected '{expected_output}' in '{final_output.text}'\"\n    time.sleep(1)\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: Height Conversion Functionality\n  The system should convert the height from the first unit to the second unit and display the result in the final output section when both units are selected and a height value is entered.\n\n\n  Scenario: [Normal] Convert height from Meters to Centimeters\n    Given the Height Convertor page is loaded\n    And the user enters \"3\" into the height input field with data-testid \"height-input\"\n    And the user selects \"Meters\" from the first unit dropdown with data-testid \"first-option-select\"\n    And the user selects \"Centimeters\" from the second unit dropdown with data-testid \"second-option-select\"\n    When the height is converted\n    Then the final output with data-testid \"final-output\" should display \"300\"\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the Height Convertor page is loaded')\ndef step_given_height_convertor_page_loaded(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)  # Allow time for the page to load\n\n@given('the user enters \"{height}\" into the height input field with data-testid \"height-input\"')\ndef step_given_user_enters_height(context, height):\n    height_input = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='height-input']\"))\n    )\n    height_input.clear()\n    height_input.send_keys(height)\n    time.sleep(1)\n\n@given('the user selects \"{unit}\" from the first unit dropdown with data-testid \"first-option-select\"')\ndef step_given_user_selects_first_unit(context, unit):\n    first_option_select = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='first-option-select']\"))\n    )\n    first_option_select.click()\n    time.sleep(1)\n\n    # 在 first_option_select 元素内部查找 option\n    option = first_option_select.find_element(By.XPATH, f\".//option[text()='{unit}']\")\n    option.click()\n    time.sleep(1)\n\n@given('the user selects \"{unit}\" from the second unit dropdown with data-testid \"second-option-select\"')\ndef step_given_user_selects_second_unit(context, unit):\n    second_option_select = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='second-option-select']\"))\n    )\n    second_option_select.click()\n    time.sleep(1)\n\n    # 在 second_option_select 元素内部查找 option\n    option = second_option_select.find_element(By.XPATH, f\".//option[text()='{unit}']\")\n    option.click()\n    time.sleep(1)\n\n\n@when('the height is converted')\ndef step_when_height_is_converted(context):\n    # The conversion happens automatically when inputs are provided, so no action is needed here.\n    time.sleep(1)  # Wait for conversion to complete\n\n@then('the final output with data-testid \"final-output\" should display \"{expected_output}\"')\ndef step_then_final_output_should_display(context, expected_output):\n    final_output = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='final-output']\"))\n    )\n    actual_output = final_output.text.strip()\n    assert expected_output == actual_output, f\"Expected '{expected_output}', but got '{actual_output}'\"\n    time.sleep(1)\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: Height Conversion Functionality\n  The system should convert the height from the first unit to the second unit and display the result in the final output section when both units are selected and a height value is entered.\n\n\n  Scenario: [Edge] Convert height from Kilometers to Miles with a large value\n    Given the Height Convertor page is loaded\n    And the user enters \"10000\" into the height input field with data-testid \"height-input\"\n    And the user selects \"Kilometers\" from the first unit dropdown with data-testid \"first-option-select\"\n    And the user selects \"Miles\" from the second unit dropdown with data-testid \"second-option-select\"\n    When the height is converted\n    Then the final output with data-testid \"final-output\" should display \"6213.71\""
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the Height Convertor page is loaded')\ndef step_given_height_convertor_page_loaded(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)\n\n@given('the user enters \"{height_value}\" into the height input field with data-testid \"height-input\"')\ndef step_given_user_enters_height(context, height_value):\n    height_input = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='height-input']\"))\n    )\n    height_input.clear()\n    height_input.send_keys(height_value)\n    time.sleep(1)\n\n@given('the user selects \"{first_unit}\" from the first unit dropdown with data-testid \"first-option-select\"')\ndef step_given_user_selects_first_unit(context, first_unit):\n    first_option_select = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='first-option-select']\"))\n    )\n    first_option_select.click()\n    time.sleep(1)\n    option = first_option_select.find_element(By.XPATH, f\".//option[text()='{first_unit}']\")\n    option.click()\n    time.sleep(1)\n\n@given('the user selects \"{second_unit}\" from the second unit dropdown with data-testid \"second-option-select\"')\ndef step_given_user_selects_second_unit(context, second_unit):\n    second_option_select = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='second-option-select']\"))\n    )\n    second_option_select.click()\n    time.sleep(1)\n    option = second_option_select.find_element(By.XPATH, f\".//option[text()='{second_unit}']\")\n    option.click()\n    time.sleep(1)\n\n@when('the height is converted')\ndef step_when_height_is_converted(context):\n    # The conversion happens automatically when inputs are provided, so no action is needed here.\n    time.sleep(1)\n\n@then('the final output with data-testid \"final-output\" should display \"{expected_output}\"')\ndef step_then_final_output_should_display(context, expected_output):\n    final_output = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='final-output']\"))\n    )\n    actual_output = final_output.text.strip()\n    assert expected_output in actual_output, f\"Expected '{expected_output}' but got '{actual_output}'\"\n    time.sleep(1)\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                }
            ]
        },
        "5": {
            "requirement": {
                "description": "When the user clicks the reset button with data-testid 'reset-button', the system should perform the following actions: clear the height input field with data-testid 'height-input', reset the first option select with data-testid 'first-option-select' to display 'Select an Option', reset the second option select with data-testid 'second-option-select' to display 'Select', hide the output row with data-testid 'output-row', and hide the reset button itself. This functionality should work regardless of whether the user has entered valid, invalid, or no input prior to clicking the reset button."
            },
            "test_cases": [
                {
                    "test_case": [
                        "Feature: Reset Functionality\n  The system should clear all inputs and outputs, reset the form, and hide the output row and reset button when the user clicks the reset button.\n\n\n  Scenario: [Normal] Reset button clears inputs and outputs\n    Given the webpage \"Height Convertor\" is loaded\n    And the user enters \"150\" into the height input field with data-testid \"height-input\"\n    And the user selects \"Centimeters\" from the first option select with data-testid \"first-option-select\"\n    And the user selects \"Meters\" from the second option select with data-testid \"second-option-select\"\n    When the user clicks the reset button with data-testid \"reset-button\"\n    Then the height input field with data-testid \"height-input\" should be empty\n    And the output row with data-testid \"output-row\" should be hidden\n    And the reset button with data-testid \"reset-button\" should be hidden\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the webpage \"Height Convertor\" is loaded')\ndef step_given_webpage_loaded(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)\n\n@given('the user enters \"{height}\" into the height input field with data-testid \"height-input\"')\ndef step_given_user_enters_height(context, height):\n    height_input = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='height-input']\"))\n    )\n    height_input.clear()\n    height_input.send_keys(height)\n    time.sleep(1)\n\n@given('the user selects \"{option}\" from the first option select with data-testid \"first-option-select\"')\ndef step_given_user_selects_first_option(context, option):\n    first_option_select = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='first-option-select']\"))\n    )\n    first_option_select.click()\n    option_to_select = first_option_select.find_element(By.XPATH, f\".//option[text()='{option}']\")\n    option_to_select.click()\n    time.sleep(1)\n\n@given('the user selects \"{option}\" from the second option select with data-testid \"second-option-select\"')\ndef step_given_user_selects_second_option(context, option):\n    second_option_select = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='second-option-select']\"))\n    )\n    second_option_select.click()\n    option_to_select = second_option_select.find_element(By.XPATH, f\".//option[text()='{option}']\")\n    option_to_select.click()\n    time.sleep(1)\n\n@when('the user clicks the reset button with data-testid \"reset-button\"')\ndef step_when_user_clicks_reset_button(context):\n    reset_button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='reset-button']\"))\n    )\n    reset_button.click()\n    time.sleep(1)\n\n@then('the height input field with data-testid \"height-input\" should be empty')\ndef step_then_height_input_should_be_empty(context):\n    height_input = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='height-input']\")\n    assert height_input.get_attribute('value') == \"\", \"Height input field is not empty\"\n\n@then('the first option select with data-testid \"first-option-select\" should display \"Select an Option\"')\ndef step_then_first_option_should_display_select_an_option(context):\n    first_option_select = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='first-option-select']\")\n    selected_option = first_option_select.find_element(By.CSS_SELECTOR, \"option:checked\").text\n    assert selected_option == \"Select an Option\", f\"Expected 'Select an Option', but got '{selected_option}'\"\n\n@then('the second option select with data-testid \"second-option-select\" should display \"Select\"')\ndef step_then_second_option_should_display_select(context):\n    second_option_select = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='second-option-select']\")\n    selected_option = second_option_select.find_element(By.CSS_SELECTOR, \"option:checked\").text\n    assert selected_option == \"Select\", f\"Expected 'Select', but got '{selected_option}'\"\n\n@then('the output row with data-testid \"output-row\" should be hidden')\ndef step_then_output_row_should_be_hidden(context):\n    output_row = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='output-row']\")\n    assert not output_row.is_displayed(), \"Output row is not hidden\"\n\n@then('the reset button with data-testid \"reset-button\" should be hidden')\ndef step_then_reset_button_should_be_hidden(context):\n    reset_button = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='reset-button']\")\n    assert not reset_button.is_displayed(), \"Reset button is not hidden\"\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: Reset Functionality\n  The system should clear all inputs and outputs, reset the form, and hide the output row and reset button when the user clicks the reset button.\n\n\n  Scenario: [Edge] Reset button with no prior input\n    Given the webpage \"Height Convertor\" is loaded\n    When the user clicks the reset button with data-testid \"reset-button\"\n    Then the height input field with data-testid \"height-input\" should be empty\n    And the first option select with data-testid \"first-option-select\" should display \"Select an Option\"\n    And the second option select with data-testid \"second-option-select\" should display \"Select\"\n    And the output row with data-testid \"output-row\" should be hidden\n    And the reset button with data-testid \"reset-button\" should be hidden\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the webpage \"Height Convertor\" is loaded')\ndef step_given_webpage_loaded(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)  # Allow time for the page to load\n\n@when('the user clicks the reset button with data-testid \"reset-button\"')\ndef step_when_user_clicks_reset_button(context):\n    reset_button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='reset-button']\"))\n    )\n    reset_button.click()\n    time.sleep(1)  # Allow time for the reset action to take effect\n\n@then('the height input field with data-testid \"height-input\" should be empty')\ndef step_then_height_input_should_be_empty(context):\n    height_input = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='height-input']\")\n    assert height_input.get_attribute('value') == \"\", \"Height input field is not empty\"\n\n@then('the first option select with data-testid \"first-option-select\" should display \"Select an Option\"')\ndef step_then_first_option_should_display_select_an_option(context):\n    first_option_select = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='first-option-select']\")\n    selected_option = first_option_select.find_element(By.CSS_SELECTOR, \"option:checked\").text\n    assert selected_option == \"Select an Option\", f\"Expected 'Select an Option', but got '{selected_option}'\"\n\n@then('the second option select with data-testid \"second-option-select\" should display \"Select\"')\ndef step_then_second_option_should_display_select(context):\n    second_option_select = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='second-option-select']\")\n    selected_option = second_option_select.find_element(By.CSS_SELECTOR, \"option:checked\").text\n    assert selected_option == \"Select\", f\"Expected 'Select', but got '{selected_option}'\"\n\n@then('the output row with data-testid \"output-row\" should be hidden')\ndef step_then_output_row_should_be_hidden(context):\n    output_row = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='output-row']\")\n    assert not output_row.is_displayed(), \"Output row is not hidden\"\n\n@then('the reset button with data-testid \"reset-button\" should be hidden')\ndef step_then_reset_button_should_be_hidden(context):\n    reset_button = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='reset-button']\")\n    assert not reset_button.is_displayed(), \"Reset button is not hidden\"\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: Reset Functionality\n  The system should clear all inputs and outputs, reset the form, and hide the output row and reset button when the user clicks the reset button.\n\n\nScenario: [Error] Reset button after invalid input\n    Given the webpage \"Height Convertor\" is loaded\n    And the user enters \"-50\" into the height input field with data-testid \"height-input\"\n    And the user selects \"Miles\" from the first option select with data-testid \"first-option-select\"\n    And the user selects \"Centimeters\" from the second option select with data-testid \"second-option-select\"\n    When the user clicks the reset button with data-testid \"reset-button\"\n    Then the height input field with data-testid \"height-input\" should be empty\n    And the output row with data-testid \"output-row\" should be hidden\n    And the reset button with data-testid \"reset-button\" should be hidden"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the webpage \"Height Convertor\" is loaded')\ndef step_given_webpage_loaded(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)\n\n@given('the user enters \"-50\" into the height input field with data-testid \"height-input\"')\ndef step_given_user_enters_height(context):\n    height_input = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='height-input']\"))\n    )\n    height_input.clear()\n    height_input.send_keys(\"-50\")\n    time.sleep(1)\n\n@given('the user selects \"Miles\" from the first option select with data-testid \"first-option-select\"')\ndef step_given_user_selects_first_option(context):\n    first_option_select = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='first-option-select']\"))\n    )\n    first_option_select.click()\n    miles_option = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='first-option-select-miles']\")\n    miles_option.click()\n    time.sleep(1)\n\n@given('the user selects \"Centimeters\" from the second option select with data-testid \"second-option-select\"')\ndef step_given_user_selects_second_option(context):\n    second_option_select = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='second-option-select']\"))\n    )\n    second_option_select.click()\n    centimeters_option = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='second-option-select-centimeters']\")\n    centimeters_option.click()\n    time.sleep(1)\n\n@when('the user clicks the reset button with data-testid \"reset-button\"')\ndef step_when_user_clicks_reset_button(context):\n    reset_button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='reset-button']\"))\n    )\n    reset_button.click()\n    time.sleep(1)\n\n@then('the height input field with data-testid \"height-input\" should be empty')\ndef step_then_height_input_should_be_empty(context):\n    height_input = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='height-input']\")\n    assert height_input.get_attribute('value') == \"\", \"Height input field is not empty\"\n\n@then('the output row with data-testid \"output-row\" should be hidden')\ndef step_then_output_row_should_be_hidden(context):\n    output_row = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='output-row']\")\n    assert not output_row.is_displayed(), \"Output row is not hidden\"\n\n@then('the reset button with data-testid \"reset-button\" should be hidden')\ndef step_then_reset_button_should_be_hidden(context):\n    reset_button = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='reset-button']\")\n    assert not reset_button.is_displayed(), \"Reset button is not hidden\"\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                }
            ]
        }
    }
}