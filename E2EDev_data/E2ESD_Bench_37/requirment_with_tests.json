{
    "summary": {
        "overview": "The application is a text-moving tool that allows users to input text into a textarea and move it to a display area on the right by clicking a button. It provides visual feedback on the progress of the text movement through a progress indicator and a progress bar.",
        "predefined_options": "The application does not specify predefined options or default values for user inputs.",
        "external_resources": "No external resources such as links, images, or audio files are used in this application.",
        "external_js_libraries": "No external JavaScript libraries or packages are used in this application."
    },
    "finegrained_rewith_test": {
        "1": {
            "requirement": {
                "description": "The web application should allow users to transfer text from a textarea to a content display area through a button click. Specifically, when a user inputs text into the textarea with data-testid 'text-area' and clicks the button with data-testid 'move-text-button', the text should be moved to the content display area with data-testid 'content-display'. The textarea should then be cleared. The system should handle various scenarios: 1) If the textarea is empty when the button is clicked, an alert with the message '请输入文本信息' should be displayed, and no changes should occur in the content display area or textarea. 2) The system should support text input up to a maximum length of 280 characters, including special characters. 3) A progress indicator with data-testid 'progress-indicator' should update to reflect the number of characters moved relative to the total characters initially entered. Additionally, a progress bar with data-testid 'progress-bar' should visually indicate the text movement process, with each list item (data-testid 'progress-bar-item-1' to 'progress-bar-item-6') changing color sequentially during the transfer. The button should change its background color to '#ccc' during the text transfer process and revert once complete."
            },
            "test_cases": [
                {
                    "test_case": [
                        "Feature: Text Movement from Textarea to Content Display\n  The system should allow users to move text from the textarea to the content display area by clicking a button.\n\n\n  Scenario: [Normal] Move text from textarea to content display\n    Given the webpage is loaded\n    And the textarea with data-testid \"text-area\" is visible\n    And the content display area with data-testid \"content-display\" is empty\n    When the user enters \"Hello World\" into the textarea with data-testid \"text-area\"\n    And the user clicks the button with data-testid \"move-text-button\"\n    Then the content display area with data-testid \"content-display\" should contain \"Hello World\"\n    And the textarea with data-testid \"text-area\" should be empty\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\ndef is_visible(element):\n    return element.is_displayed()\n\n@given('the webpage is loaded')\ndef step_given_webpage_loaded(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)\n\n@given('the textarea with data-testid \"text-area\" is visible')\ndef step_given_textarea_visible(context):\n    textarea = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='text-area']\"))\n    )\n    assert is_visible(textarea), \"Textarea is not visible\"\n    time.sleep(1)\n\n@given('the content display area with data-testid \"content-display\" is empty')\ndef step_given_content_display_empty(context):\n    content_display = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='content-display']\")\n    assert content_display.text.strip() == \"\", \"Content display area is not empty\"\n    time.sleep(1)\n\n@when('the user enters \"Hello World\" into the textarea with data-testid \"text-area\"')\ndef step_when_user_enters_text(context):\n    textarea = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='text-area']\")\n    textarea.clear()\n    textarea.send_keys(\"Hello World\")\n    time.sleep(1)\n\n@when('the user clicks the button with data-testid \"move-text-button\"')\ndef step_when_user_clicks_button(context):\n    button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='move-text-button']\"))\n    )\n    button.click()\n    time.sleep(1)\n\n@then('the content display area with data-testid \"content-display\" should contain \"Hello World\"')\ndef step_then_content_display_contains_text(context):\n    content_display = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='content-display']\"))\n    )\n    assert \"Hello World\" in content_display.text, f\"Expected 'Hello World' in '{content_display.text}'\"\n    time.sleep(1)\n\n@then('the textarea with data-testid \"text-area\" should be empty')\ndef step_then_textarea_empty(context):\n    textarea = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='text-area']\")\n    assert textarea.text.strip() == \"\", \"Textarea is not empty\"\n    time.sleep(1)\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: Text Movement from Textarea to Content Display\n  The system should allow users to move text from the textarea to the content display area by clicking a button.\n\n\n  Scenario: [Edge] Move text with long length from textarea to content display\n    Given the webpage is loaded\n    And the textarea with data-testid \"text-area\" is visible\n    And the content display area with data-testid \"content-display\" is empty\n    When the user enters a text of 280 characters into the textarea with data-testid \"text-area\"\n    And the user clicks the button with data-testid \"move-text-button\"\n    Then the content display area with data-testid \"content-display\" should contain the 280 characters\n    And the textarea with data-testid \"text-area\" should be empty\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\ndef is_visible(element):\n    return element.is_displayed()\n\n@given('the webpage is loaded')\ndef step_given_webpage_loaded(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)\n\n@given('the textarea with data-testid \"text-area\" is visible')\ndef step_given_textarea_visible(context):\n    textarea = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='text-area']\"))\n    )\n    assert is_visible(textarea), \"Textarea is not visible\"\n    time.sleep(1)\n\n@given('the content display area with data-testid \"content-display\" is empty')\ndef step_given_content_display_empty(context):\n    content_display = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='content-display']\")\n    assert content_display.text.strip() == \"\", \"Content display area is not empty\"\n    time.sleep(1)\n\n@when('the user enters a text of 280 characters into the textarea with data-testid \"text-area\"')\ndef step_when_user_enters_text(context):\n    textarea = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='text-area']\")\n    long_text = \"a\" * 280\n    textarea.send_keys(long_text)\n    time.sleep(1)\n\n@when('the user clicks the button with data-testid \"move-text-button\"')\ndef step_when_user_clicks_button(context):\n    button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='move-text-button']\"))\n    )\n    button.click()\n    # 等待 content-display 区域 move 完所有字符（达到280个字符）\n    WebDriverWait(context.driver, 30).until(lambda driver:\n                                            len(driver.find_element(By.CSS_SELECTOR,\n                                                                    \"[data-testid='content-display']\").text) == 280\n                                            )\n\n@then('the content display area with data-testid \"content-display\" should contain the 280 characters')\ndef step_then_content_display_contains_text(context):\n    content_display = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='content-display']\"))\n    )\n    expected_text = \"a\" * 280\n    assert expected_text in content_display.text, f\"Expected text not found in content display area\"\n    time.sleep(1)\n\n@then('the textarea with data-testid \"text-area\" should be empty')\ndef step_then_textarea_empty(context):\n    textarea = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='text-area']\")\n    assert textarea.get_attribute('value') == \"\", \"Textarea is not empty\"\n    time.sleep(1)\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: Text Movement from Textarea to Content Display\n  The system should allow users to move text from the textarea to the content display area by clicking a button.\n\n\n  Scenario: [Edge] Move text with special characters from textarea to content display\n    Given the webpage is loaded\n    And the textarea with data-testid \"text-area\" is visible\n    And the content display area with data-testid \"content-display\" is empty\n    When the user enters \"!@#$%^&*()_+\" into the textarea with data-testid \"text-area\"\n    And the user clicks the button with data-testid \"move-text-button\"\n    Then the content display area with data-testid \"content-display\" should contain \"!@#$%^&*()_+\"\n    And the textarea with data-testid \"text-area\" should be empty\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\ndef is_visible(element):\n    return element.is_displayed()\n\n@given(\"the webpage is loaded\")\ndef step_given_webpage_loaded(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)  # Allow the page to load completely\n\n@given('the textarea with data-testid \"text-area\" is visible')\ndef step_given_textarea_visible(context):\n    textarea = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='text-area']\"))\n    )\n    assert is_visible(textarea), \"Textarea is not visible\"\n\n@given('the content display area with data-testid \"content-display\" is empty')\ndef step_given_content_display_empty(context):\n    content_display = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='content-display']\"))\n    )\n    assert content_display.text.strip() == \"\", f\"Expected content display to be empty, but found: {content_display.text}\"\n\n@when('the user enters \"!@#$%^&*()_+\" into the textarea with data-testid \"text-area\"')\ndef step_when_user_enters_text(context):\n    textarea = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='text-area']\"))\n    )\n    textarea.clear()\n    textarea.send_keys(\"!@#$%^&*()_+\")\n    time.sleep(1)  # Allow time for the input to be processed\n\n@when('the user clicks the button with data-testid \"move-text-button\"')\ndef step_when_user_clicks_button(context):\n    button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='move-text-button']\"))\n    )\n    button.click()\n    time.sleep(1)  # Allow time for the text movement process to start\n\n@then('the content display area with data-testid \"content-display\" should contain \"!@#$%^&*()_+\"')\ndef step_then_content_display_contains_text(context):\n    content_display = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='content-display']\"))\n    )\n    assert \"!@#$%^&*()_+\" in content_display.text, f\"Expected '!@#$%^&*()_+' in content display, but found: {content_display.text}\"\n\n@then('the textarea with data-testid \"text-area\" should be empty')\ndef step_then_textarea_is_empty(context):\n    textarea = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='text-area']\"))\n    )\n    assert textarea.get_attribute(\"value\").strip() == \"\", f\"Expected textarea to be empty, but found: {textarea.get_attribute('value')}\"\n\n# Teardown step to close the browser after tests\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: Text Movement from Textarea to Content Display\n  The system should allow users to move text from the textarea to the content display area by clicking a button.\n\n\n  Scenario: [Error] Attempt to move text when textarea is empty\n    Given the webpage is loaded\n    And the textarea with data-testid \"text-area\" is visible\n    And the content display area with data-testid \"content-display\" is empty\n    When the user clicks the button with data-testid \"move-text-button\"\n    Then an alert should be displayed with the message \"请输入文本信息\"\n    And the content display area with data-testid \"content-display\" should remain empty\n    And the textarea with data-testid \"text-area\" should remain empty"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\ndef is_visible(element):\n    return element.is_displayed()\n\n@given('the webpage is loaded')\ndef step_given_webpage_loaded(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)\n\n@given('the textarea with data-testid \"text-area\" is visible')\ndef step_given_textarea_visible(context):\n    textarea = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='text-area']\"))\n    )\n    assert is_visible(textarea), \"Textarea is not visible\"\n    time.sleep(1)\n\n@given('the content display area with data-testid \"content-display\" is empty')\ndef step_given_content_display_empty(context):\n    content_display = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='content-display']\")\n    assert content_display.text.strip() == \"\", \"Content display area is not empty\"\n    time.sleep(1)\n\n@when('the user clicks the button with data-testid \"move-text-button\"')\ndef step_when_user_clicks_button(context):\n    button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='move-text-button']\"))\n    )\n    button.click()\n    time.sleep(1)\n\n@then('an alert should be displayed with the message \"请输入文本信息\"')\ndef step_then_alert_displayed(context):\n    alert = WebDriverWait(context.driver, 10).until(EC.alert_is_present())\n    assert alert.text == \"请输入文本信息\", f\"Unexpected alert message: {alert.text}\"\n    alert.accept()\n    time.sleep(1)\n\n@then('the content display area with data-testid \"content-display\" should remain empty')\ndef step_then_content_display_remains_empty(context):\n    content_display = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='content-display']\")\n    assert content_display.text.strip() == \"\", \"Content display area is not empty\"\n    time.sleep(1)\n\n@then('the textarea with data-testid \"text-area\" should remain empty')\ndef step_then_textarea_remains_empty(context):\n    textarea = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='text-area']\")\n    assert textarea.get_attribute('value').strip() == \"\", \"Textarea is not empty\"\n    time.sleep(1)\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                }
            ]
        },
        "3": {
            "requirement": {
                "description": "The web application should allow users to move text from a textarea (data-testid='text-area', id='text') to a content display area (data-testid='content-display', id='content') by clicking a button (data-testid='move-text-button', id='button'). Upon clicking the button, if the textarea is empty, an alert with the message '请输入文本信息' should be displayed, and no further action should occur. If the textarea contains text, the button's background should change to '#ccc', and a progress bar (data-testid='progress-bar') should become visible. The text should be moved character by character from the textarea to the content display area, updating the progress indicator (data-testid='progress-indicator', strong element) to show the format 'X/Y', where X is the number of characters moved and Y is the total number of characters initially present in the textarea. The progress bar should visually indicate progress by changing the background color of its items (data-testid='progress-bar-item-1' to 'progress-bar-item-6') as the text is moved. The system should handle text up to a maximum length of 280 characters, and the progress indicator should accurately reflect the movement of special characters as well."
            },
            "test_cases": [
                {
                    "test_case": [
                        "Feature: Text Movement Progress Indicator\n  The system should update the progress indicator to reflect the number of characters moved versus the total number of characters as text is moved from the textarea to the content display area.\n\n\n  Scenario: [Normal] Move text and update progress indicator\n    Given the webpage is loaded\n    And the textarea with data-testid \"text-area\" contains the text \"Hello World\"\n    When the user clicks the button with data-testid \"move-text-button\"\n    Then the content display area with data-testid \"content-display\" should eventually contain \"Hello World\"\n    And the progress indicator with data-testid \"progress-indicator\" should eventually display \"11/11\"\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the webpage is loaded')\ndef step_given_webpage_loaded(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)\n\n@given('the textarea with data-testid \"text-area\" contains the text \"Hello World\"')\ndef step_given_textarea_contains_text(context):\n    textarea = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='text-area']\"))\n    )\n    textarea.clear()\n    textarea.send_keys(\"Hello World\")\n    time.sleep(1)\n\n@when('the user clicks the button with data-testid \"move-text-button\"')\ndef step_when_user_clicks_button(context):\n    button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='move-text-button']\"))\n    )\n    button.click()\n    time.sleep(1)\n\n@then('the content display area with data-testid \"content-display\" should eventually contain \"Hello World\"')\ndef step_then_content_display_contains_text(context):\n    content_display = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='content-display']\"))\n    )\n    WebDriverWait(context.driver, 10).until(\n        lambda driver: \"Hello World\" in content_display.text\n    )\n    assert \"Hello World\" in content_display.text, f\"Expected 'Hello World' in '{content_display.text}'\"\n    time.sleep(1)\n\n@then('the progress indicator with data-testid \"progress-indicator\" should eventually display \"11/11\"')\ndef step_then_progress_indicator_displays_correct_value(context):\n    progress_indicator = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='progress-indicator']\"))\n    )\n    WebDriverWait(context.driver, 10).until(\n        lambda driver: \"11/11\" in progress_indicator.text\n    )\n    assert \"11/11\" in progress_indicator.text, f\"Expected '11/11' in '{progress_indicator.text}'\"\n    time.sleep(1)\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: Text Movement Progress Indicator\n  The system should update the progress indicator to reflect the number of characters moved versus the total number of characters as text is moved from the textarea to the content display area.\n\n\nScenario: [Edge] Move text with maximum length character by character and update progress indicator\n    Given the webpage is loaded\n    And the textarea with data-testid \"text-area\" contains 280 characters of \"A\"\n    When the user clicks the button with data-testid \"move-text-button\"\n    Then the content display area with data-testid \"content-display\" should gradually increase from 0 to 280 characters\n    And the progress indicator with data-testid \"progress-indicator\" should gradually update from \"0/280\" to \"280/280\""
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the webpage is loaded')\ndef step_given_webpage_loaded(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)\n\n@given('the textarea with data-testid \"text-area\" contains 280 characters of \"A\"')\ndef step_given_textarea_contains_280_characters(context):\n    textarea = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='text-area']\"))\n    )\n    textarea.clear()\n    textarea.send_keys(\"A\" * 280)\n    time.sleep(1)\n\n@when('the user clicks the button with data-testid \"move-text-button\"')\ndef step_when_user_clicks_button(context):\n    button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='move-text-button']\"))\n    )\n    button.click()\n    time.sleep(1)\n\n@then('the content display area with data-testid \"content-display\" should gradually increase from 0 to 280 characters')\ndef step_then_content_display_increases(context):\n    content_display = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='content-display']\"))\n    )\n    WebDriverWait(context.driver, 30).until(\n        lambda driver: len(content_display.text) == 280\n    )\n    assert len(content_display.text) == 280, f\"Expected 280 characters, but got {len(content_display.text)}\"\n    time.sleep(1)\n\n@then('the progress indicator with data-testid \"progress-indicator\" should gradually update from \"0/280\" to \"280/280\"')\ndef step_then_progress_indicator_updates(context):\n    progress_indicator = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='progress-indicator']\"))\n    )\n    WebDriverWait(context.driver, 30).until(\n        lambda driver: progress_indicator.text == \"280/280\"\n    )\n    assert progress_indicator.text == \"280/280\", f\"Expected '280/280', but got '{progress_indicator.text}'\"\n    time.sleep(1)\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: Text Movement Progress Indicator\n  The system should update the progress indicator to reflect the number of characters moved versus the total number of characters as text is moved from the textarea to the content display area.\n\n\n  Scenario: [Edge] Move text with no characters\n    Given the webpage is loaded\n    And the textarea with data-testid \"text-area\" is empty\n    When the user clicks the button with data-testid \"move-text-button\"\n    Then an alert should be displayed with the message \"请输入文本信息\"\n    And the progress indicator with data-testid \"progress-indicator\" should display \"0/0\"\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the webpage is loaded')\ndef step_given_webpage_is_loaded(context):\n    # Initialize the Selenium WebDriver\n    context.driver = webdriver.Chrome()\n    # Load the test page\n    context.driver.get(f\"file://index.html\")\n    # Maximize the browser window\n    context.driver.maximize_window()\n    time.sleep(1)\n\n@given('the textarea with data-testid \"text-area\" is empty')\ndef step_given_textarea_is_empty(context):\n    # Locate the textarea element\n    textarea = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='text-area']\"))\n    )\n    # Clear the textarea to ensure it is empty\n    textarea.clear()\n    time.sleep(1)\n\n@when('the user clicks the button with data-testid \"move-text-button\"')\ndef step_when_user_clicks_button(context):\n    # Locate the button element\n    button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='move-text-button']\"))\n    )\n    # Click the button\n    button.click()\n    time.sleep(1)\n\n@then('an alert should be displayed with the message \"请输入文本信息\"')\ndef step_then_alert_is_displayed(context):\n    # Wait for the alert to be present\n    WebDriverWait(context.driver, 10).until(EC.alert_is_present())\n    # Switch to the alert\n    alert = context.driver.switch_to.alert\n    # Verify the alert message\n    assert alert.text == \"请输入文本信息\", f\"Expected alert message '请输入文本信息', but got '{alert.text}'\"\n    # Accept the alert\n    alert.accept()\n    time.sleep(1)\n\n@then('the progress indicator with data-testid \"progress-indicator\" should display \"0/0\"')\ndef step_then_progress_indicator_is_correct(context):\n    # Locate the progress indicator element\n    progress_indicator = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='progress-indicator']\"))\n    )\n    # Verify the progress indicator text\n    assert progress_indicator.text == \"0/0\", f\"Expected progress indicator to display '0/0', but got '{progress_indicator.text}'\"\n    time.sleep(1)\n\n# Teardown: Close the browser after the test\ndef after_scenario(context, scenario):\n    if hasattr(context, 'driver'):\n        context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: Text Movement Progress Indicator\n  The system should update the progress indicator to reflect the number of characters moved versus the total number of characters as text is moved from the textarea to the content display area.\n\n\n  Scenario: [Error] Attempt to move text with special characters\n    Given the webpage is loaded\n    And the textarea with data-testid \"text-area\" contains the text \"!@#$%^&*()\"\n    When the user clicks the button with data-testid \"move-text-button\"\n    Then the content display area with data-testid \"content-display\" should eventually contain \"!@#$%^&*()\"\n    And the progress indicator with data-testid \"progress-indicator\" should eventually display \"10/10\""
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\ndef is_visible(element):\n    return element.is_displayed()\n\n@given('the webpage is loaded')\ndef step_given_webpage_loaded(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)\n\n@given('the textarea with data-testid \"text-area\" contains the text \"!@#$%^&*()\"')\ndef step_given_textarea_contains_text(context):\n    textarea = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='text-area']\"))\n    )\n    textarea.clear()\n    textarea.send_keys(\"!@#$%^&*()\")\n    time.sleep(1)\n\n@when('the user clicks the button with data-testid \"move-text-button\"')\ndef step_when_user_clicks_button(context):\n    button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='move-text-button']\"))\n    )\n    button.click()\n    time.sleep(1)\n\n@then('the content display area with data-testid \"content-display\" should eventually contain \"!@#$%^&*()\"')\ndef step_then_content_display_contains_text(context):\n    content_display = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='content-display']\"))\n    )\n    WebDriverWait(context.driver, 10).until(\n        lambda driver: \"!@#$%^&*()\" in content_display.text\n    )\n    assert \"!@#$%^&*()\" in content_display.text, f\"Expected '!@#$%^&*()' in '{content_display.text}'\"\n    time.sleep(1)\n\n@then('the progress indicator with data-testid \"progress-indicator\" should eventually display \"10/10\"')\ndef step_then_progress_indicator_displays(context):\n    progress_indicator = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='progress-indicator']\"))\n    )\n    WebDriverWait(context.driver, 10).until(\n        lambda driver: \"10/10\" in progress_indicator.text\n    )\n    assert \"10/10\" in progress_indicator.text, f\"Expected '10/10' in '{progress_indicator.text}'\"\n    time.sleep(1)\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                }
            ]
        },
        "4": {
            "requirement": {
                "description": "When the button with data-testid 'move-text-button' is clicked, the system should change the button's background color to '#ccc' to indicate activation, provided that the textarea with data-testid 'text-area' is not empty. If the textarea is empty, the button's background color should remain unchanged, and an alert should be displayed with the message '请输入文本信息'."
            },
            "test_cases": [
                {
                    "test_case": [
                        "Feature: Button Activation Visual Feedback\n  The system should change the button's background color to '#ccc' when clicked to indicate activation.\n\n\nScenario: [Normal] Button background color changes on click\n    Given the webpage is loaded\n    And the textarea with data-testid \"text-area\" contains 10 characters of \"A\"\n    And the button with data-testid \"move-text-button\" is visible\n    When the user clicks the button with data-testid \"move-text-button\"\n    Then the button's background color should be \"#ccc\""
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\ndef is_visible(element):\n    return element.is_displayed()\n\n@given('the webpage is loaded')\ndef step_given_webpage_loaded(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)\n\n@given('the textarea with data-testid \"text-area\" contains 10 characters of \"A\"')\ndef step_given_textarea_contains_characters(context):\n    textarea = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='text-area']\"))\n    )\n    textarea.clear()\n    textarea.send_keys(\"A\" * 10)\n    time.sleep(1)\n\n@given('the button with data-testid \"move-text-button\" is visible')\ndef step_given_button_is_visible(context):\n    button = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='move-text-button']\"))\n    )\n    assert is_visible(button), \"Button is not visible\"\n    time.sleep(1)\n\n@when('the user clicks the button with data-testid \"move-text-button\"')\ndef step_when_user_clicks_button(context):\n    button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='move-text-button']\"))\n    )\n    button.click()\n\n@then('the button\\'s background color should be \"#ccc\"')\ndef step_then_button_background_color(context):\n    button = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='move-text-button']\")\n    background_color = button.value_of_css_property(\"background-color\")\n    expected_color = \"rgba(204, 204, 204, 1)\"  # Equivalent to \"#ccc\" in rgba\n    assert background_color == expected_color, f\"Expected background color '{expected_color}', but got '{background_color}'\"\n    time.sleep(1)\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: Button Activation Visual Feedback\n  The system should change the button's background color to '#ccc' when clicked to indicate activation.\n\n\nScenario: [Edge] Button click with empty text area\n    Given the webpage is loaded\n    And the text area with data-testid \"text-area\" is empty\n    And the button with data-testid \"move-text-button\" is visible\n    When the user clicks the button with data-testid \"move-text-button\"\n    Then an alert should be displayed with the message \"请输入文本信息\"\n    And the button's background color should not be \"#ccc\""
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the webpage is loaded')\ndef step_given_webpage_loaded(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)\n\n@given('the text area with data-testid \"text-area\" is empty')\ndef step_given_text_area_empty(context):\n    text_area = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='text-area']\"))\n    )\n    assert text_area.get_attribute('value') == \"\", \"Text area is not empty\"\n    time.sleep(1)\n\n@given('the button with data-testid \"move-text-button\" is visible')\ndef step_given_button_visible(context):\n    button = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='move-text-button']\"))\n    )\n    assert button.is_displayed(), \"Button is not visible\"\n    time.sleep(1)\n\n@when('the user clicks the button with data-testid \"move-text-button\"')\ndef step_when_user_clicks_button(context):\n    button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='move-text-button']\"))\n    )\n    button.click()\n    time.sleep(1)\n\n@then('the button\\'s background color should not be \"#ccc\"')\ndef step_then_button_background_color(context):\n    button = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='move-text-button']\")\n    background_color = button.value_of_css_property('background-color')\n    assert background_color != \"rgb(204, 204, 204)\", \"Button background color is '#ccc'\"\n    time.sleep(1)\n\n@then('an alert should be displayed with the message \"请输入文本信息\"')\ndef step_then_alert_displayed(context):\n    alert = WebDriverWait(context.driver, 10).until(EC.alert_is_present())\n    assert alert.text == \"请输入文本信息\", f\"Unexpected alert message: {alert.text}\"\n    alert.accept()\n    time.sleep(1)\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                }
            ]
        },
        "6": {
            "requirement": {
                "description": "The system must clear the content display area with data-testid 'content-display' each time the button with data-testid 'move-text-button' is clicked. If the text area with data-testid 'text-area' contains text, the content display area should initially be empty before displaying the text. If the text area is empty, an alert with the message '请输入文本信息' should be shown, and the content display area should remain empty."
            },
            "test_cases": [
                {
                    "test_case": [
                        "Feature: Clear content display area on button click\n  The system should clear the content display area each time the button is clicked to ensure only the current text is displayed.\n\n\nScenario: [Normal] Clear content display area when button is clicked with text input\n    Given the webpage is loaded\n    And the text area with data-testid \"text-area\" contains the text \"Hello World\"\n    When the user clicks the button with data-testid \"move-text-button\"\n    Then the text area with data-testid \"text-area\" should be empty"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\ndef is_collapsed(element):\n    aria = element.get_attribute(\"aria-expanded\")\n    if aria is not None and aria.lower() == \"false\":\n        return True\n\n    class_attr = element.get_attribute(\"class\") or \"\"\n    class_list = class_attr.split()\n    if \"collapsed\" in class_list:\n        return True\n\n    data_expanded = element.get_attribute(\"data-expanded\")\n    if data_expanded is not None and data_expanded.lower() == \"false\":\n        return True\n\n    style = element.get_attribute(\"style\") or \"\"\n    if \"display: none\" in style or \"visibility: hidden\" in style or \"height: 0\" in style:\n        return True\n\n    return not element.is_displayed()\n\n@given('the webpage is loaded')\ndef step_given_webpage_loaded(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)\n\n@given('the text area with data-testid \"text-area\" contains the text \"Hello World\"')\ndef step_given_text_area_contains_text(context):\n    text_area = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='text-area']\"))\n    )\n    text_area.clear()\n    text_area.send_keys(\"Hello World\")\n    time.sleep(1)\n\n@when('the user clicks the button with data-testid \"move-text-button\"')\ndef step_when_user_clicks_button(context):\n    move_text_button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='move-text-button']\"))\n    )\n    move_text_button.click()\n    time.sleep(1)\n\n@then('the text area with data-testid \"text-area\" should be empty')\ndef step_then_content_display_should_be_empty(context):\n    content_display = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='text-area']\"))\n    )\n    assert content_display.text.strip() == \"\", f\"Expected content display to be empty, but got '{content_display.text.strip()}'\"\n    time.sleep(1)\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: Clear content display area on button click\n  The system should clear the content display area each time the button is clicked to ensure only the current text is displayed.\n\n\nScenario: [Edge] Click button with empty text area\n    Given the webpage is loaded\n    And the text area with data-testid \"text-area\" is empty\n    When the user clicks the button with data-testid \"move-text-button\"\n    Then an alert should be displayed with the message \"请输入文本信息\"\n    And the text area with data-testid \"text-area\" should be empty"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the webpage is loaded')\ndef step_given_webpage_is_loaded(context):\n    # Initialize the Selenium WebDriver\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)  # Allow the page to load completely\n\n@then('an alert should be displayed with the message \"请输入文本信息\"')\ndef step_then_alert_should_be_displayed(context):\n    # Wait for the alert to appear\n    WebDriverWait(context.driver, 10).until(EC.alert_is_present())\n    alert = context.driver.switch_to.alert\n    assert alert.text == \"请输入文本信息\", f\"Expected alert message '请输入文本信息', but got '{alert.text}'\"\n    alert.accept()  # Close the alert\n    time.sleep(1)\n\n@then('the text area with data-testid \"text-area\" should be empty')\ndef step_then_text_area_should_be_empty(context):\n    text_area = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='text-area']\")\n    assert text_area.get_attribute(\"value\") == \"\", \"Expected text area to be empty\"\n    time.sleep(1)\n\n@when('the user clicks the button with data-testid \"move-text-button\"')\ndef step_when_user_clicks_button(context):\n    button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='move-text-button']\"))\n    )\n    button.click()\n    time.sleep(1)\n\n@given('the text area with data-testid \"text-area\" is empty')\ndef step_given_text_area_is_empty(context):\n    text_area = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='text-area']\")\n    text_area.clear()\n    assert text_area.get_attribute(\"value\") == \"\", \"Expected text area to be empty\"\n    time.sleep(1)\n\n# Teardown to close the browser after tests\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                }
            ]
        }
    }
}