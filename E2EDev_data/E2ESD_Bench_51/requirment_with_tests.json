{
    "summary": {
        "overview": "The 'Speed Typer' web application is a typing game where users type displayed words as quickly and accurately as possible within a time limit. The game tracks the user's score, adjusts the time based on difficulty, and ends when the timer reaches zero. Users can customize the difficulty level through a settings menu.",
        "predefined_options": "Difficulty levels: Easy, Medium, Hard. Each level adjusts the time added per correct word (Easy: +5s, Medium: +3s, Hard: +2s).",
        "external_resources": [
            {
                "name": "Font Awesome Icons",
                "source": "https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.1/css/all.min.css"
            },
            {
                "name": "Custom CSS",
                "source": "style.css"
            }
        ],
        "external_js_libraries": []
    },
    "finegrained_rewith_test": {
        "1": {
            "requirement": {
                "description": "The web application must provide a 'Settings' button, identifiable by the attribute data-testid='settings-btn'. When this button is clicked, it should toggle the visibility of the settings form, which is identifiable by the attribute data-testid='settings'. Initially, the settings form should be visible upon page load. The toggle functionality must handle rapid consecutive clicks, ensuring the form's visibility state changes accordingly with each click. The application should maintain a consistent user experience by ensuring the form's visibility state is accurately reflected after each interaction."
            },
            "test_cases": [
                {
                    "test_case": [
                        "Feature: Toggle Settings Form Visibility\n  The settings form should toggle between visible and hidden states when the user clicks the 'Settings' button.\n\n\n  Scenario: [Normal] Toggle settings form visibility\n    Given the Speed Typer page is loaded\n    And the settings form with data-testid \"settings\" is initially visible\n    When the user clicks the 'Settings' button with data-testid \"settings-btn\"\n    Then the settings form with data-testid \"settings\" should be hidden\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the Speed Typer page is loaded')\ndef step_impl(context):\n    # Initialize the WebDriver and load the test page\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    context.driver.maximize_window()\n    time.sleep(0.2)  # Allow the page to load fully\n\n@given('the settings form with data-testid \"settings\" is initially visible')\ndef step_impl(context):\n    # Ensure the settings form is visible\n    settings_form = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='settings']\"))\n    )\n    assert settings_form.is_displayed(), \"Settings form is not initially visible\"\n\n@when('the user clicks the \\'Settings\\' button with data-testid \"settings-btn\"')\ndef step_impl(context):\n    # Locate and click the settings button\n    settings_button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='settings-btn']\"))\n    )\n    settings_button.click()\n    time.sleep(0.2)  # Allow time for the toggle action to complete\n\n\n@then('the settings form with data-testid \"settings\" should be hidden')\ndef step_impl(context):\n    # Locate the settings form\n    settings_form = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='settings']\")\n\n    # Try multiple conditions to determine if the element is hidden\n    is_hidden_by_display = not settings_form.is_displayed()\n    class_attr = settings_form.get_attribute(\"class\") or \"\"\n    is_hidden_by_class = \"hide\" in class_attr.lower() or \"hidden\" in class_attr.lower()\n    style_attr = settings_form.get_attribute(\"style\") or \"\"\n    is_hidden_by_style = \"display: none\" in style_attr.lower() or \"visibility: hidden\" in style_attr.lower()\n\n    assert is_hidden_by_display or is_hidden_by_class or is_hidden_by_style, \\\n        \"Settings form is not hidden after clicking the button\"\n\n\n# Teardown to close the browser after the test\ndef after_scenario(context, scenario):\n    if hasattr(context, 'driver'):\n        context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: Toggle Settings Form Visibility\n  The settings form should toggle between visible and hidden states when the user clicks the 'Settings' button.\n\n\nScenario: [Normal] Toggle settings form visibility back to visible\n    Given the Speed Typer page is loaded\n    And the user clicks the 'Settings' button with data-testid \"settings-btn\" to hide the settings form\n    When the user clicks the 'Settings' button with data-testid \"settings-btn\" again\n    Then the settings form with data-testid \"settings\" should be visible"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\ndef is_visible(element):\n    return element.is_displayed()\n\n@given('the Speed Typer page is loaded')\ndef step_given_speed_typer_page_loaded(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)\n\n@given('the user clicks the \\'Settings\\' button with data-testid \"settings-btn\" to hide the settings form')\ndef step_given_user_clicks_settings_button_to_hide(context):\n    settings_button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='settings-btn']\"))\n    )\n    settings_button.click()\n    time.sleep(1)\n\n@when('the user clicks the \\'Settings\\' button with data-testid \"settings-btn\" again')\ndef step_when_user_clicks_settings_button_again(context):\n    settings_button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='settings-btn']\"))\n    )\n    settings_button.click()\n    time.sleep(1)\n\n@then('the settings form with data-testid \"settings\" should be visible')\ndef step_then_settings_form_should_be_visible(context):\n    settings_form = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='settings']\"))\n    )\n    assert is_visible(settings_form), \"Settings form is not visible\"\n    time.sleep(1)\n    context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: Toggle Settings Form Visibility\n  The settings form should toggle between visible and hidden states when the user clicks the 'Settings' button.\n\n\n  Scenario: [Edge] Rapidly clicking the 'Settings' button\n    Given the Speed Typer page is loaded\n    And the settings form with data-testid \"settings\" is initially visible\n    When the user rapidly clicks the 'Settings' button with data-testid \"settings-btn\" multiple times\n    Then the settings form with data-testid \"settings\" should toggle visibility accordingly\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\ndef is_visible(element):\n    return element.is_displayed()\n\n@given('the Speed Typer page is loaded')\ndef step_given_speed_typer_page_loaded(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)\n\n@given('the settings form with data-testid \"settings\" is initially visible')\ndef step_given_settings_form_initially_visible(context):\n    settings_form = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='settings']\"))\n    )\n    assert is_visible(settings_form), \"Settings form should be initially visible\"\n    time.sleep(1)\n\n@when('the user rapidly clicks the \\'Settings\\' button with data-testid \"settings-btn\" multiple times')\ndef step_when_user_rapidly_clicks_settings_button(context):\n    settings_button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='settings-btn']\"))\n    )\n    for _ in range(5):  # Simulate rapid clicking\n        settings_button.click()\n        time.sleep(0.2)  # Short delay to simulate rapid clicking\n\n@then('the settings form with data-testid \"settings\" should toggle visibility accordingly')\ndef step_then_settings_form_should_toggle_visibility(context):\n    settings_form = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='settings']\")\n    # Check visibility after rapid clicks\n    assert is_visible(settings_form) or not is_visible(settings_form), \"Settings form visibility should toggle\"\n    time.sleep(1)\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                }
            ]
        },
        "2": {
            "requirement": {
                "description": "The web application must provide a settings form accessible via a button with data-testid 'settings-btn'. This form should allow users to select a difficulty level (Easy, Medium, Hard) from a dropdown menu with data-testid 'difficulty-select'. Upon selection, the difficulty level must be immediately updated in the application and stored in localStorage under the key 'difficulty', ensuring persistence across sessions. The settings form should toggle visibility when the settings button is clicked, and the difficulty selection should dynamically affect game mechanics, such as time adjustments upon correct word entry. The application must initialize with the difficulty level retrieved from localStorage, defaulting to 'Medium' if no prior selection exists."
            },
            "test_cases": [
                {
                    "test_case": [
                        "Feature: Difficulty Selection in Settings Form\n  The settings form must allow the user to select a difficulty level (Easy, Medium, Hard) from a dropdown menu. The selected difficulty should be saved to localStorage and persist across sessions.\n\n\n  Scenario: [Normal] User selects a difficulty level and it is saved to localStorage\n    Given the Speed Typer page is loaded\n    When the user selects \"Hard\" from the difficulty dropdown with data-testid \"difficulty-select\"\n    Then the difficulty should be set to \"Hard\"\n    And the localStorage should contain the key \"difficulty\" with value \"Hard\"\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\ndef is_visible(element):\n    return element.is_displayed()\n\n@given('the Speed Typer page is loaded')\ndef step_given_speed_typer_page_loaded(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)\n\n\n@when('the user selects \"Hard\" from the difficulty dropdown with data-testid \"difficulty-select\"')\ndef step_when_user_selects_hard_difficulty(context):\n    difficulty_select = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='difficulty-select']\"))\n    )\n    difficulty_select.click()\n    time.sleep(1)\n    hard_option = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='difficulty-option-hard']\")\n    hard_option.click()\n    time.sleep(1)\n\n@then('the difficulty should be set to \"Hard\"')\ndef step_then_difficulty_set_to_hard(context):\n    difficulty_select = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='difficulty-select']\")\n    selected_option = difficulty_select.get_attribute(\"value\")\n    assert selected_option == \"hard\", f\"Expected difficulty to be 'hard', but got '{selected_option}'\"\n\n@then('the localStorage should contain the key \"difficulty\" with value \"Hard\"')\ndef step_then_localstorage_contains_difficulty(context):\n    difficulty = context.driver.execute_script(\"return localStorage.getItem('difficulty');\")\n    assert difficulty == \"hard\", f\"Expected localStorage difficulty to be 'hard', but got '{difficulty}'\"\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: Difficulty Selection in Settings Form\n  The settings form must allow the user to select a difficulty level (Easy, Medium, Hard) from a dropdown menu. The selected difficulty should be saved to localStorage and persist across sessions.\n\n\n  Scenario: [Edge] User changes difficulty multiple times\n    Given the Speed Typer page is loaded\n    When the user selects \"Easy\" from the difficulty dropdown with data-testid \"difficulty-select\"\n    Then the difficulty should be set to \"Easy\"\n    And the localStorage should contain the key \"difficulty\" with value \"Easy\"\n    When the user selects \"Medium\" from the difficulty dropdown with data-testid \"difficulty-select\"\n    Then the difficulty should be set to \"Medium\"\n    And the localStorage should contain the key \"difficulty\" with value \"Medium\"\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\ndef is_visible(element):\n    return element.is_displayed()\n\n@given('the Speed Typer page is loaded')\ndef step_given_speed_typer_page_loaded(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)\n\n\n@when('the user selects \"{difficulty}\" from the difficulty dropdown with data-testid \"difficulty-select\"')\ndef step_when_user_selects_difficulty(context, difficulty):\n    difficulty_select = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='difficulty-select']\"))\n    )\n    difficulty_select.click()\n    time.sleep(0.5)\n    option = context.driver.find_element(By.CSS_SELECTOR, f\"[data-testid='difficulty-option-{difficulty.lower()}']\")\n    option.click()\n    time.sleep(0.5)\n\n@then('the difficulty should be set to \"{difficulty}\"')\ndef step_then_difficulty_should_be_set(context, difficulty):\n    selected_option = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='difficulty-select']\").get_attribute(\"value\")\n    assert selected_option == difficulty.lower(), f\"Expected difficulty to be '{difficulty}', but got '{selected_option}'\"\n\n@then('the localStorage should contain the key \"difficulty\" with value \"{difficulty}\"')\ndef step_then_localstorage_contains_difficulty(context, difficulty):\n    stored_difficulty = context.driver.execute_script(\"return localStorage.getItem('difficulty');\")\n    assert stored_difficulty == difficulty.lower(), f\"Expected localStorage difficulty to be '{difficulty}', but got '{stored_difficulty}'\"\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                }
            ]
        },
        "3": {
            "requirement": {
                "description": "The application must display a random word from a predefined list in the word display area with the attribute data-testid 'word' when the game starts or when the user types the correct word into the text input field with the attribute data-testid 'text-input'. Upon loading the Speed Typer page, the game initializes by selecting a random word from the list and displaying it. If the user correctly types the displayed word within the time limit, the text input field is cleared, and a new random word is displayed. This functionality should work regardless of whether the localStorage is empty or contains a previously set difficulty level. The difficulty level affects the time increment added upon typing the correct word: 5 seconds for 'easy', 3 seconds for 'medium', and 2 seconds for 'hard'."
            },
            "test_cases": [
                {
                    "test_case": [
                        "Feature: Display Random Word\n  The application must display a random word from a predefined list in the word display area when the game starts or when the user types the correct word.\n\n\n  Scenario: [Normal] Display a random word when the game starts\n    Given the Speed Typer page is loaded\n    When the game initializes\n    Then a random word from the predefined list is displayed in the word display area with data-testid \"word\"\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the Speed Typer page is loaded')\ndef step_given_speed_typer_page_loaded(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)\n\n@when('the game initializes')\ndef step_when_game_initializes(context):\n    # Assuming the game initializes automatically upon page load\n    # Wait for the word element to be present\n    WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='word']\"))\n    )\n    time.sleep(1)\n\n@then('a random word from the predefined list is displayed in the word display area with data-testid \"word\"')\ndef step_then_random_word_displayed(context):\n    word_element = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='word']\")\n    displayed_word = word_element.text.strip()\n    \n    # List of predefined words\n    predefined_words = [\n        \"sigh\", \"tense\", \"airplane\", \"ball\", \"pies\", \"juice\", \"warlike\", \"bad\", \"north\",\n        \"dependent\", \"steer\", \"silver\", \"highfalutin\", \"superficial\", \"quince\", \"eight\",\n        \"feeble\", \"admit\", \"drag\", \"loving\"\n    ]\n    \n    assert displayed_word in predefined_words, f\"Displayed word '{displayed_word}' is not in the predefined list\"\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: Display Random Word\n  The application must display a random word from a predefined list in the word display area when the game starts or when the user types the correct word.\n\n\nScenario: [Normal] Display a new random word after typing the correct word\n    Given the Speed Typer page is loaded\n    And a random word is displayed in the word display area with data-testid \"word\"\n    When the user enters the correct word into the text input field with data-testid \"text-input\" within the time limit\n    Then the text input field should be cleared\n    And a new random word from the predefined list should be displayed in the word display area with data-testid \"word\""
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\ndef is_visible(element):\n    return element.is_displayed()\n\n@given('the Speed Typer page is loaded')\ndef step_given_speed_typer_page_loaded(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)\n\n@given('a random word is displayed in the word display area with data-testid \"word\"')\ndef step_given_random_word_displayed(context):\n    word_element = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='word']\"))\n    )\n    assert is_visible(word_element), \"Word element is not visible\"\n    context.random_word = word_element.text\n    time.sleep(1)\n\n@when('the user enters the correct word into the text input field with data-testid \"text-input\" within the time limit')\ndef step_when_user_enters_correct_word(context):\n    text_input = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='text-input']\"))\n    )\n    text_input.send_keys(context.random_word)\n    time.sleep(1)\n\n@then('the text input field should be cleared')\ndef step_then_text_input_cleared(context):\n    text_input = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='text-input']\")\n    assert text_input.get_attribute('value') == \"\", \"Text input field is not cleared\"\n    time.sleep(1)\n\n@then('a new random word from the predefined list should be displayed in the word display area with data-testid \"word\"')\ndef step_then_new_random_word_displayed(context):\n    word_element = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='word']\"))\n    )\n    new_word = word_element.text\n    assert new_word != context.random_word, \"New random word is not displayed\"\n    time.sleep(1)\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: Display Random Word\n  The application must display a random word from a predefined list in the word display area when the game starts or when the user types the correct word.\n\n\n  Scenario: [Edge] Display a random word when the game starts with an empty localStorage\n    Given the Speed Typer page is loaded with an empty localStorage\n    When the game initializes\n    Then a random word from the predefined list is displayed in the word display area with data-testid \"word\"\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the Speed Typer page is loaded with an empty localStorage')\ndef step_given_page_loaded(context):\n    # Initialize the WebDriver\n    context.driver = webdriver.Chrome()\n    # Load the test page\n    context.driver.get(f\"file://index.html\")\n    # Clear localStorage\n    context.driver.execute_script(\"localStorage.clear();\")\n    time.sleep(1)\n\n@when('the game initializes')\ndef step_when_game_initializes(context):\n    # Wait for the word element to be present\n    WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='word']\"))\n    )\n    time.sleep(1)\n\n@then('a random word from the predefined list is displayed in the word display area with data-testid \"word\"')\ndef step_then_random_word_displayed(context):\n    # Get the word element\n    word_element = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='word']\")\n    # Check if the word is displayed\n    assert word_element.is_displayed(), \"Word element is not displayed\"\n    # Validate the word content\n    displayed_word = word_element.text.strip()\n    predefined_words = [\n        \"sigh\", \"tense\", \"airplane\", \"ball\", \"pies\", \"juice\", \"warlike\", \"bad\",\n        \"north\", \"dependent\", \"steer\", \"silver\", \"highfalutin\", \"superficial\",\n        \"quince\", \"eight\", \"feeble\", \"admit\", \"drag\", \"loving\"\n    ]\n    assert displayed_word in predefined_words, f\"Displayed word '{displayed_word}' is not in the predefined list\"\n\n    # Close the WebDriver\n    context.driver.quit()"
                }
            ]
        },
        "4": {
            "requirement": {
                "description": "The Speed Typer web application must allow users to interact with the game interface as follows: Users should be able to type words into the input field identified by the attribute data-testid='text-input'. When the typed word matches the word displayed in the element with data-testid='word' within the remaining time shown in the element with data-testid='time', the input field must be cleared automatically. The score, displayed in the element with data-testid='score', should increment by 1. Subsequently, a new random word from the predefined list should be displayed in the element with data-testid='word'. If the typed word is incorrect, the input field should retain the user's input, the score should remain unchanged, and the displayed word should not change. The game should continue until the time reaches zero, at which point the game ends, displaying a message and the final score in the element with data-testid='end-game-container'. The difficulty level, which affects the time increment upon correct word entry, can be adjusted via a settings menu toggled by clicking the button with data-testid='settings-btn'. The selected difficulty is stored in localStorage under the key 'difficulty' and retrieved upon page load to set the initial game state."
            },
            "test_cases": [
                {
                    "test_case": [
                        "Feature: User can type words and score points in the Speed Typer game\n  The user must be able to type into the input field. If the typed word matches the currently displayed word within the time limit, the input field should be cleared, the score should increment by 1, and a new random word should be displayed.\n\n\nScenario: [Normal] User types the correct word within the time limit\n    Given the Speed Typer page is loaded\n    When the user enters the right word into the input field with data-testid \"text-input\" within the time limit\n    Then the input field with data-testid \"text-input\" should be cleared\n    And the score should be updated to \"1\" in the element with data-testid \"score\"\n    And a new random word should be displayed in the element with data-testid \"word\""
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\ndef is_visible(element):\n    return element.is_displayed()\n\n@given('the Speed Typer page is loaded')\ndef step_given_speed_typer_page_loaded(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='word']\"))\n    )\n    time.sleep(1)\n\n@when('the user enters the right word into the input field with data-testid \"text-input\" within the time limit')\ndef step_when_user_enters_word(context):\n    text_input = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='text-input']\"))\n    )\n    word = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='word']\").text\n    text_input.send_keys(word.strip())\n    time.sleep(1)\n\n@then('the input field with data-testid \"text-input\" should be cleared')\ndef step_then_input_field_cleared(context):\n    text_input = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='text-input']\")\n    assert text_input.get_attribute('value') == \"\", \"Input field is not cleared\"\n    time.sleep(0.5)\n\n@then('the score should be updated to \"1\" in the element with data-testid \"score\"')\ndef step_then_score_updated(context):\n    score_element = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='score']\")\n    assert score_element.text.strip() == \"1\", f\"Expected score '1', but got '{score_element.text.strip()}'\"\n    time.sleep(0.5)\n\n@then('a new random word should be displayed in the element with data-testid \"word\"')\ndef step_then_new_word_displayed(context):\n    word_element = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='word']\")\n    assert len(word_element.text.strip())>0, \"New word is not displayed\"\n    time.sleep(0.5)\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: User can type words and score points in the Speed Typer game\n  The user must be able to type into the input field. If the typed word matches the currently displayed word within the time limit, the input field should be cleared, the score should increment by 1, and a new random word should be displayed.\n\n\nScenario: [Normal] User types the correct word twice within the time limit\n    Given the Speed Typer page is loaded\n    When the user enters the correct word into the input field with data-testid \"text-input\" within the time limit\n    And the user enters the next correct word into the input field with data-testid \"text-input\" within the time limit\n    Then the input field with data-testid \"text-input\" should be cleared\n    And the score should be updated to \"2\" in the element with data-testid \"score\"\n    And a new random word should be displayed in the element with data-testid \"word\""
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the Speed Typer page is loaded')\ndef step_impl(context):\n    # Initialize the WebDriver and load the test page\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    context.driver.maximize_window()\n    time.sleep(1)  # Allow the page to fully load\n\n@when('the user enters the correct word into the input field with data-testid \"text-input\" within the time limit')\ndef step_impl(context):\n    driver = context.driver\n    # Wait for the word to be displayed\n    word_element = WebDriverWait(driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='word']\"))\n    )\n    displayed_word = word_element.text.strip()\n\n    # Find the input field and type the correct word\n    input_field = WebDriverWait(driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='text-input']\"))\n    )\n    input_field.send_keys(displayed_word)\n    input_field.send_keys(\"\\n\")  # Simulate pressing Enter\n    time.sleep(1)  # Allow time for the word to be processed\n\n@when('the user enters the next correct word into the input field with data-testid \"text-input\" within the time limit')\ndef step_impl(context):\n    driver = context.driver\n    # Wait for the next word to be displayed\n    word_element = WebDriverWait(driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='word']\"))\n    )\n    displayed_word = word_element.text.strip()\n\n    # Find the input field and type the next correct word\n    input_field = WebDriverWait(driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='text-input']\"))\n    )\n    input_field.send_keys(displayed_word)\n    input_field.send_keys(\"\\n\")  # Simulate pressing Enter\n    time.sleep(1)  # Allow time for the word to be processed\n\n@then('the input field with data-testid \"text-input\" should be cleared')\ndef step_impl(context):\n    driver = context.driver\n    # Verify that the input field is cleared\n    input_field = WebDriverWait(driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='text-input']\"))\n    )\n    assert input_field.get_attribute(\"value\") == \"\", \"Input field is not cleared\"\n\n@then('the score should be updated to \"2\" in the element with data-testid \"score\"')\ndef step_impl(context):\n    driver = context.driver\n    # Verify that the score is updated to 2\n    score_element = WebDriverWait(driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='score']\"))\n    )\n    assert score_element.text.strip() == \"2\", f\"Expected score to be '2', but got '{score_element.text.strip()}'\"\n\n@then('a new random word should be displayed in the element with data-testid \"word\"')\ndef step_impl(context):\n    driver = context.driver\n    # Verify that a new random word is displayed\n    word_element = WebDriverWait(driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='word']\"))\n    )\n    displayed_word = word_element.text.strip()\n    assert displayed_word != \"\", \"No new word is displayed\"\n\ndef after_scenario(context, scenario):\n    # Close the browser after each scenario\n    if hasattr(context, 'driver'):\n        context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: User can type words and score points in the Speed Typer game\n  The user must be able to type into the input field. If the typed word matches the currently displayed word within the time limit, the input field should be cleared, the score should increment by 1, and a new random word should be displayed.\n\n\nScenario: [Normal] User types an incorrect word within the time limit\n    Given the Speed Typer page is loaded\n    When the user enters an incorrect word \"xxxxxxx\" into the input field with data-testid \"text-input\" within the time limit\n    Then the input field with data-testid \"text-input\" should not be cleared\n    And the score should remain \"0\" in the element with data-testid \"score\"\n    And the same word should still be displayed in the element with data-testid \"word\""
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the Speed Typer page is loaded')\ndef step_given_speed_typer_page_loaded(context):\n    # Initialize the WebDriver\n    context.driver = webdriver.Chrome()\n    # Load the test page\n    context.driver.get(f\"file://index.html\")\n    # Maximize the browser window\n    context.driver.maximize_window()\n    # Wait for the page title to confirm the page is loaded\n    WebDriverWait(context.driver, 10).until(\n        EC.title_contains(\"Speed Typer\")\n    )\n    time.sleep(1)\n\n@when('the user enters an incorrect word \"xxxxxxx\" into the input field with data-testid \"text-input\" within the time limit')\ndef step_when_user_enters_incorrect_word(context):\n    # Locate the input field using data-testid\n    input_field = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='text-input']\"))\n    )\n    # Type the incorrect word into the input field\n    input_field.send_keys(\"xxxxxxx\")\n    time.sleep(1)\n\n@then('the input field with data-testid \"text-input\" should not be cleared')\ndef step_then_input_field_not_cleared(context):\n    # Locate the input field and check its value\n    input_field = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='text-input']\")\n    assert input_field.get_attribute(\"value\") == \"xxxxxxx\", \"Input field was unexpectedly cleared\"\n    time.sleep(1)\n\n@then('the score should remain \"0\" in the element with data-testid \"score\"')\ndef step_then_score_remains_zero(context):\n    # Locate the score element and check its value\n    score_element = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='score']\")\n    assert score_element.text == \"0\", f\"Expected score to be '0', but got '{score_element.text}'\"\n    time.sleep(1)\n\n@then('the same word should still be displayed in the element with data-testid \"word\"')\ndef step_then_same_word_still_displayed(context):\n    # Locate the word element and check its text\n    word_element = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='word']\")\n    displayed_word = word_element.text\n    assert displayed_word != \"xxxxxxx\", \"The displayed word should not match the incorrect input\"\n    time.sleep(1)\n\n# Teardown to close the browser after each scenario\ndef after_scenario(context, scenario):\n    if hasattr(context, 'driver'):\n        context.driver.quit()"
                }
            ]
        },
        "5": {
            "requirement": {
                "description": "When the user types the correct word into the text input field (data-testid='text-input'), the remaining time displayed in the time element (data-testid='time') should increase based on the selected difficulty level. The difficulty level is determined by the value of the difficulty select dropdown (data-testid='difficulty-select'), which can be 'easy', 'medium', or 'hard'. Specifically: 'easy' increases time by 5 seconds, 'medium' increases time by 3 seconds, and 'hard' increases time by 2 seconds. The updated time should be reflected immediately in the time element. The difficulty setting is persistently stored in localStorage under the key 'difficulty', and the application should retrieve this value on page load to initialize the difficulty select dropdown and game behavior. The word element (data-testid='word') displays the current word to be typed, and upon correct entry, the text input field is cleared, a new word is displayed, and the score element (data-testid='score') is incremented by 1."
            },
            "test_cases": [
                {
                    "test_case": [
                        "Feature: Time Increase on Correct Word Entry\n  The application should increase the remaining time based on the selected difficulty level when the user types the correct word.\n\n\nScenario: [Normal] User types the correct word on Medium difficulty\n    Given the Speed Typer page is loaded\n    And the difficulty is set to \"medium\" in the difficulty select with data-testid \"difficulty-select\"\n    And the initial time is displayed in the time element with data-testid \"time\"\n    And a word is displayed in the word element with data-testid \"word\"\n    When the user types the displayed word correctly into the text input with data-testid \"text-input\"\n    Then the time should increase by 3 seconds\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\ndef is_expanded(element):\n    aria = element.get_attribute(\"aria-expanded\")\n    if aria is not None:\n        return aria == \"true\"\n\n    class_list = element.get_attribute(\"class\").split()\n    if any(cls in class_list for cls in [\"expanded\", \"open\", \"show\"]):\n        return True\n\n    data_expanded = element.get_attribute(\"data-expanded\")\n    if data_expanded is not None:\n        return data_expanded == \"true\"\n\n    return element.is_displayed()\n\n@given('the Speed Typer page is loaded')\ndef step_impl(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)\n\n@given('the difficulty is set to \"medium\" in the difficulty select with data-testid \"difficulty-select\"')\ndef step_impl(context):\n    difficulty_select = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='difficulty-select']\"))\n    )\n    difficulty_select.click()\n    time.sleep(0.5)\n    medium_option = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='difficulty-option-medium']\")\n    medium_option.click()\n    time.sleep(1)\n\n@given('the initial time is displayed in the time element with data-testid \"time\"')\ndef step_impl(context):\n    time_element = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='time']\"))\n    )\n    context.initial_time = int(time_element.text.replace('s', ''))\n    # time.sleep(1)\n\n@given('a word is displayed in the word element with data-testid \"word\"')\ndef step_impl(context):\n    word_element = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='word']\"))\n    )\n    context.displayed_word = word_element.text\n    # time.sleep(1)\n\n@when('the user types the displayed word correctly into the text input with data-testid \"text-input\"')\ndef step_impl(context):\n    text_input = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='text-input']\"))\n    )\n    text_input.send_keys(context.displayed_word)\n    time.sleep(0.5)\n\n@then('the time should increase by 3 seconds')\ndef step_impl(context):\n    time_element = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='time']\"))\n    )\n    updated_time = int(time_element.text.replace('s', ''))\n    print(f\"Initial time: {context.initial_time}, Updated time: {updated_time}\")\n    assert updated_time < context.initial_time + 3 and updated_time > context.initial_time, f\"Expected time to be {context.initial_time + 3}, but got {updated_time}\"\n    time.sleep(1)\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: Time Increase on Correct Word Entry\n  The application should increase the remaining time based on the selected difficulty level when the user types the correct word.\n\n\nScenario: [Normal] User types the correct word on Easy difficulty\n\tGiven the Speed Typer page is loaded\n\tAnd the difficulty is set to \"easy\" in the difficulty select with data-testid \"difficulty-select\"\n\tAnd a word is displayed in the word element with data-testid \"word\"\n\tAnd the initial time is displayed in the time element with data-testid \"time\"\n\tWhen the user types the displayed word correctly into the text input with data-testid \"text-input\"\n\tThen the time should increase by 5 seconds\n\n\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\ndef is_expanded(element):\n    aria = element.get_attribute(\"aria-expanded\")\n    if aria is not None:\n        return aria == \"true\"\n\n    class_list = element.get_attribute(\"class\").split()\n    if any(cls in class_list for cls in [\"expanded\", \"open\", \"show\"]):\n        return True\n\n    data_expanded = element.get_attribute(\"data-expanded\")\n    if data_expanded is not None:\n        return data_expanded == \"true\"\n\n    return element.is_displayed()\n\n@given('the Speed Typer page is loaded')\ndef step_given_speed_typer_page_loaded(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)\n\n@given('the difficulty is set to \"easy\" in the difficulty select with data-testid \"difficulty-select\"')\ndef step_given_difficulty_set_to_easy(context):\n    difficulty_select = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='difficulty-select']\"))\n    )\n    difficulty_select.click()\n    time.sleep(1)\n    easy_option = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='difficulty-option-easy']\"))\n    )\n    easy_option.click()\n    time.sleep(1)\n\n@given('a word is displayed in the word element with data-testid \"word\"')\ndef step_given_word_displayed(context):\n    word_element = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='word']\"))\n    )\n    assert word_element.text.strip() != \"\", \"Expected a word to be displayed\"\n\n@given('the initial time is displayed in the time element with data-testid \"time\"')\ndef step_given_initial_time_displayed(context):\n    time_element = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='time']\"))\n    )\n    context.initial_time = int(time_element.text.replace(\"s\", \"\").strip())\n\n@when('the user types the displayed word correctly into the text input with data-testid \"text-input\"')\ndef step_when_user_types_correct_word(context):\n    word_element = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='word']\")\n    displayed_word = word_element.text.strip()\n    text_input = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='text-input']\")\n    text_input.send_keys(displayed_word)\n    time.sleep(0.5)\n\n@then('the time should increase by 5 seconds')\ndef step_then_time_increases(context):\n    time_element = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='time']\")\n    time.sleep(2)  # Wait for the time to update\n    updated_time = int(time_element.text.replace(\"s\", \"\").strip())\n    print(f\"Initial time: {context.initial_time}, Updated time: {updated_time}\")\n    assert updated_time < context.initial_time + 5 and updated_time > context.initial_time, f\"Expected time to increase by 5 seconds, but it increased by {updated_time - context.initial_time} seconds\"\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: Time Increase on Correct Word Entry\n  The application should increase the remaining time based on the selected difficulty level when the user types the correct word.\n\n\nScenario: [Normal] User types the correct word on Hard difficulty\n    Given the Speed Typer page is loaded\n    And the difficulty is set to \"hard\" in the difficulty select with data-testid \"difficulty-select\"\n    And the initial time is displayed as \"10s\" in the time element with data-testid \"time\"\n    And a word is displayed in the word element with data-testid \"word\"\n    When the user types the displayed word correctly into the text input with data-testid \"text-input\"\n    Then the time should increase by 2 seconds"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the Speed Typer page is loaded')\ndef step_impl(context):\n    # Initialize the WebDriver and load the test page\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    context.driver.maximize_window()\n    time.sleep(1)  # Allow the page to fully load\n\n@given('the difficulty is set to \"hard\" in the difficulty select with data-testid \"difficulty-select\"')\ndef step_impl(context):\n    driver = context.driver\n    # Locate the difficulty select dropdown and set it to \"hard\"\n    difficulty_select = WebDriverWait(driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='difficulty-select']\"))\n    )\n    difficulty_select.click()\n    time.sleep(1)  # Wait for dropdown to expand\n    hard_option = WebDriverWait(driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='difficulty-option-hard']\"))\n    )\n    hard_option.click()\n    time.sleep(1)  # Allow the selection to take effect\n\n@given('the initial time is displayed as \"10s\" in the time element with data-testid \"time\"')\ndef step_impl(context):\n    driver = context.driver\n    # Verify the initial time is displayed as \"10s\"\n    time_element = WebDriverWait(driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='time']\"))\n    )\n    assert time_element.text == \"10s\", f\"Expected initial time to be '10s', but got '{time_element.text}'\"\n\n@given('a word is displayed in the word element with data-testid \"word\"')\ndef step_impl(context):\n    driver = context.driver\n    # Verify a word is displayed in the word element\n    word_element = WebDriverWait(driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='word']\"))\n    )\n    context.displayed_word = word_element.text\n    assert context.displayed_word, \"Expected a word to be displayed, but the word element is empty\"\n\n@when('the user types the displayed word correctly into the text input with data-testid \"text-input\"')\ndef step_impl(context):\n    driver = context.driver\n    # Locate the text input and type the displayed word\n    text_input = WebDriverWait(driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='text-input']\"))\n    )\n    text_input.send_keys(context.displayed_word)\n    time.sleep(1)  # Allow the input to be processed\n\n@then('the time should increase by 2 seconds')\ndef step_impl(context):\n    driver = context.driver\n    # Verify the time has increased by 2 seconds\n    time_element = WebDriverWait(driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='time']\"))\n    )\n    updated_time = int(time_element.text.replace(\"s\", \"\"))\n    assert updated_time == 12, f\"Expected time to increase to '12s', but got '{updated_time}s'\"\n\n# Teardown to close the browser after the test\ndef after_scenario(context, scenario):\n    if hasattr(context, 'driver'):\n        context.driver.quit()"
                }
            ]
        }
    }
}