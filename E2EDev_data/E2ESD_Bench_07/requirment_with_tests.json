{
    "summary": {
        "overview": "The application is a Body Mass Index (BMI) Calculator that allows users to input their height and weight to calculate their BMI. It displays the BMI result and provides a chart categorizing BMI ranges.",
        "predefined_options": "The application does not have predefined options for height and weight inputs; users must manually enter these values.",
        "external_resources": "The application uses external resources such as Boxicons for social media icons and links to social media profiles.",
        "external_js_libraries": "The application does not explicitly use external JavaScript libraries in the provided code, but it links to a script.js file for functionality."
    },
    "finegrained_rewith_test": {
        "1": {
            "requirement": {
                "description": "The system must allow the user to input a height value in centimeters in the 'Height in cm' input field, identified by the data-testid 'height-input'. The system should accept and store this value for BMI calculation."
            },
            "test_cases": [
                {
                    "test_case": [
                        "Feature: Accept and store the 'Height in cm' input value for BMI calculation\n  The system should allow the user to input a height value in centimeters, validate it, and store it for BMI calculation.\n\n\n  Scenario: [Normal] User enters a valid height value\n    Given the BMI Calculator page is loaded\n    And the 'Height in cm' input field with data-testid 'height-input' is visible\n    When the user enters \"170\" into the 'Height in cm' input field with data-testid 'height-input'\n    Then the system should store the value \"170\" for BMI calculation\n    And the 'Height in cm' input field should display \"170\"\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the BMI Calculator page is loaded')\ndef step_given_bmi_calculator_page_loaded(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)\n\n@given('the \\'Height in cm\\' input field with data-testid \\'height-input\\' is visible')\ndef step_given_height_input_field_visible(context):\n    WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='height-input']\"))\n    )\n    time.sleep(1)\n\n@when('the user enters \"170\" into the \\'Height in cm\\' input field with data-testid \\'height-input\\'')\ndef step_when_user_enters_height(context):\n    height_input = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='height-input']\")\n    height_input.clear()\n    height_input.send_keys(\"170\")\n    time.sleep(1)\n\n@then('the system should store the value \"170\" for BMI calculation')\ndef step_then_system_stores_height_value(context):\n    height_input = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='height-input']\")\n    stored_value = height_input.get_attribute(\"value\")\n    assert stored_value == \"170\", f\"Expected height value to be '170', but got '{stored_value}'\"\n    time.sleep(1)\n\n@then('the \\'Height in cm\\' input field should display \"170\"')\ndef step_then_height_input_field_displays_value(context):\n    height_input = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='height-input']\")\n    displayed_value = height_input.get_attribute(\"value\")\n    assert displayed_value == \"170\", f\"Expected height input field to display '170', but got '{displayed_value}'\"\n    time.sleep(1)\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: Accept and store the 'Height in cm' input value for BMI calculation\n  The system should allow the user to input a height value in centimeters, validate it, and store it for BMI calculation.\n\n\n  Scenario: [Edge] User enters the minimum valid height value\n    Given the BMI Calculator page is loaded\n    And the 'Height in cm' input field with data-testid 'height-input' is visible\n    When the user enters \"1\" into the 'Height in cm' input field with data-testid 'height-input'\n    Then the system should store the value \"1\" for BMI calculation\n    And the 'Height in cm' input field should display \"1\"\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the BMI Calculator page is loaded')\ndef step_impl(context):\n    # Initialize the WebDriver and load the test page\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    context.driver.maximize_window()\n    time.sleep(1)  # Allow the page to load completely\n\n@given(\"the 'Height in cm' input field with data-testid 'height-input' is visible\")\ndef step_impl(context):\n    # Wait for the 'Height in cm' input field to be visible\n    WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='height-input']\"))\n    )\n    time.sleep(1)\n\n@when(\"the user enters \\\"1\\\" into the 'Height in cm' input field with data-testid 'height-input'\")\ndef step_impl(context):\n    # Locate the 'Height in cm' input field and enter the value \"1\"\n    height_input = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='height-input']\")\n    height_input.clear()\n    height_input.send_keys(\"1\")\n    time.sleep(1)\n\n@then('the system should store the value \"1\" for BMI calculation')\ndef step_impl(context):\n    # Verify that the value \"1\" is stored in the 'Height in cm' input field\n    height_input = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='height-input']\")\n    stored_value = height_input.get_attribute(\"value\")\n    assert stored_value == \"1\", f\"Expected stored value to be '1', but got '{stored_value}'\"\n    time.sleep(1)\n\n@then(\"the 'Height in cm' input field should display \\\"1\\\"\")\ndef step_impl(context):\n    # Verify that the 'Height in cm' input field displays the value \"1\"\n    height_input = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='height-input']\")\n    displayed_value = height_input.get_attribute(\"value\")\n    assert displayed_value == \"1\", f\"Expected displayed value to be '1', but got '{displayed_value}'\"\n    time.sleep(1)\n\n# Teardown to close the browser after the test\ndef after_scenario(context, scenario):\n    if hasattr(context, 'driver'):\n        context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: Accept and store the 'Height in cm' input value for BMI calculation\n  The system should allow the user to input a height value in centimeters, validate it, and store it for BMI calculation.\n\n\n  Scenario: [Edge] User enters the maximum valid height value\n    Given the BMI Calculator page is loaded\n    And the 'Height in cm' input field with data-testid 'height-input' is visible\n    When the user enters \"300\" into the 'Height in cm' input field with data-testid 'height-input'\n    Then the system should store the value \"300\" for BMI calculation\n    And the 'Height in cm' input field should display \"300\"\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the BMI Calculator page is loaded')\ndef step_given_bmi_calculator_page_loaded(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)\n\n@given('the \\'Height in cm\\' input field with data-testid \\'height-input\\' is visible')\ndef step_given_height_input_visible(context):\n    height_input = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='height-input']\"))\n    )\n    assert height_input.is_displayed(), \"Height input field is not visible\"\n    time.sleep(1)\n\n@when('the user enters \"300\" into the \\'Height in cm\\' input field with data-testid \\'height-input\\'')\ndef step_when_user_enters_height(context):\n    height_input = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='height-input']\")\n    height_input.clear()\n    height_input.send_keys(\"300\")\n    time.sleep(1)\n\n@then('the system should store the value \"300\" for BMI calculation')\ndef step_then_system_stores_height(context):\n    height_input = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='height-input']\")\n    stored_value = height_input.get_attribute(\"value\")\n    assert stored_value == \"300\", f\"Expected stored value '300', but got '{stored_value}'\"\n    time.sleep(1)\n\n@then('the \\'Height in cm\\' input field should display \"300\"')\ndef step_then_height_input_displays_value(context):\n    height_input = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='height-input']\")\n    displayed_value = height_input.get_attribute(\"value\")\n    assert displayed_value == \"300\", f\"Expected displayed value '300', but got '{displayed_value}'\"\n    time.sleep(1)\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: Accept and store the 'Height in cm' input value for BMI calculation\n  The system should allow the user to input a height value in centimeters, validate it, and store it for BMI calculation.\n\n\n  Scenario: [Error] User enters a non-numeric value in the height field\n    Given the BMI Calculator page is loaded\n    And the 'Height in cm' input field with data-testid 'height-input' is visible\n    When the user enters \"abc\" into the 'Height in cm' input field with data-testid 'height-input'\n    Then the system should not store the value \"abc\" for BMI calculation\n\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the BMI Calculator page is loaded')\ndef step_given_bmi_calculator_page_loaded(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)\n\n@given('the \\'Height in cm\\' input field with data-testid \\'height-input\\' is visible')\ndef step_given_height_input_field_visible(context):\n    height_input = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='height-input']\"))\n    )\n    assert height_input.is_displayed(), \"Height input field is not visible\"\n    time.sleep(1)\n\n@when('the user enters \"abc\" into the \\'Height in cm\\' input field with data-testid \\'height-input\\'')\ndef step_when_user_enters_non_numeric_value(context):\n    height_input = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='height-input']\")\n    height_input.clear()\n    height_input.send_keys(\"abc\")\n    time.sleep(1)\n\n@then('the system should not store the value \"abc\" for BMI calculation')\ndef step_then_system_should_not_store_non_numeric_value(context):\n    height_input = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='height-input']\")\n    stored_value = height_input.get_attribute(\"value\")\n    assert stored_value == \"abc\", f\"Unexpectedly stored non-numeric value: {stored_value}\"\n    time.sleep(1)\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: Accept and store the 'Height in cm' input value for BMI calculation\n  The system should allow the user to input a height value in centimeters, validate it, and store it for BMI calculation.\n\n\nScenario: [Error] User enters a negative value in the height field\n    Given the BMI Calculator page is loaded\n    And the 'Height in cm' input field with data-testid 'height-input' is visible\n    When the user enters \"-170\" into the 'Height in cm' input field with data-testid 'height-input'\n    Then the system should store the value \"-170\" for BMI calculation"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the BMI Calculator page is loaded')\ndef step_given_bmi_calculator_page_loaded(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)\n\n@given('the \\'Height in cm\\' input field with data-testid \\'height-input\\' is visible')\ndef step_given_height_input_visible(context):\n    height_input = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='height-input']\"))\n    )\n    assert height_input.is_displayed(), \"Height input field is not visible\"\n    time.sleep(1)\n\n@when('the user enters \"-170\" into the \\'Height in cm\\' input field with data-testid \\'height-input\\'')\ndef step_when_user_enters_negative_height(context):\n    height_input = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='height-input']\")\n    height_input.clear()\n    height_input.send_keys(\"-170\")\n    time.sleep(1)\n\n@then('the system should store the value \"-170\" for BMI calculation')\ndef step_then_system_stores_negative_height(context):\n    height_input = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='height-input']\")\n    stored_value = height_input.get_attribute(\"value\")\n    assert stored_value == \"-170\", f\"Expected stored value to be '-170', but got '{stored_value}'\"\n    time.sleep(1)\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: Accept and store the 'Height in cm' input value for BMI calculation\n  The system should allow the user to input a height value in centimeters, validate it, and store it for BMI calculation.\n\n\n  Scenario: [Error] User leaves the height field empty\n    Given the BMI Calculator page is loaded\n    And the 'Height in cm' input field with data-testid 'height-input' is visible\n    When the user does not enter any value into the 'Height in cm' input field with data-testid 'height-input'\n    Then the system should not store any value for BMI calculation\n    And the 'Height in cm' input field should remain empty"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given(\"the BMI Calculator page is loaded\")\ndef step_given_bmi_calculator_page_loaded(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)\n\n@given(\"the 'Height in cm' input field with data-testid 'height-input' is visible\")\ndef step_given_height_input_field_visible(context):\n    height_input = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='height-input']\"))\n    )\n    assert height_input.is_displayed(), \"Height input field is not visible\"\n    time.sleep(1)\n\n@when(\"the user does not enter any value into the 'Height in cm' input field with data-testid 'height-input'\")\ndef step_when_user_does_not_enter_height(context):\n    height_input = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='height-input']\")\n    height_input.clear()\n    time.sleep(1)\n\n@then(\"the system should not store any value for BMI calculation\")\ndef step_then_system_should_not_store_value(context):\n    height_input = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='height-input']\")\n    assert height_input.get_attribute(\"value\") == \"\", \"Height input field is not empty\"\n    time.sleep(1)\n\n@then(\"the 'Height in cm' input field should remain empty\")\ndef step_then_height_input_field_remains_empty(context):\n    height_input = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='height-input']\")\n    assert height_input.get_attribute(\"value\") == \"\", \"Height input field is not empty\"\n    time.sleep(1)\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                }
            ]
        },
        "2": {
            "requirement": {
                "description": "The system must allow the user to input a weight value in kilograms into the 'Weight in kg' input field. The input field is located in the DOM with the attribute `data-testid='weight-input'`. The system must ensure that the entered value is stored in memory for subsequent BMI calculations."
            },
            "test_cases": [
                {
                    "test_case": [
                        "Feature: Accept and store the weight input for BMI calculation\n  The system should allow the user to input a weight value in kilograms, validate it, and store it for BMI calculation.\n\n\n  Scenario: [Normal] User enters a valid weight value\n    Given the BMI Calculator page is loaded\n    And the \"Weight in kg\" input field with data-testid \"weight-input\" is visible\n    When the user enters \"70\" into the \"Weight in kg\" input field with data-testid \"weight-input\"\n    Then the \"Weight in kg\" input field with data-testid \"weight-input\" should display the value \"70\"\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\n# Placeholder for the file path\nfile_path = \"index.html\"\n\n@given('the BMI Calculator page is loaded')\ndef step_impl_bmi_calculator_page_loaded(context):\n    # Initialize the WebDriver\n    context.driver = webdriver.Chrome()\n    # Load the test page\n    context.driver.get(f\"file://index.html\")\n    # Maximize the browser window\n    context.driver.maximize_window()\n    time.sleep(1)  # Allow the page to load completely\n\n@given('the \"Weight in kg\" input field with data-testid \"weight-input\" is visible')\ndef step_impl_weight_input_field_visible(context):\n    # Wait for the \"Weight in kg\" input field to be visible\n    WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='weight-input']\"))\n    )\n    time.sleep(1)\n\n@when('the user enters \"70\" into the \"Weight in kg\" input field with data-testid \"weight-input\"')\ndef step_impl_user_enters_weight(context):\n    # Locate the \"Weight in kg\" input field\n    weight_input = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='weight-input']\")\n    # Clear any existing value and enter \"70\"\n    weight_input.clear()\n    weight_input.send_keys(\"70\")\n    time.sleep(1)\n\n@then('the \"Weight in kg\" input field with data-testid \"weight-input\" should display the value \"70\"')\ndef step_impl_weight_input_field_displays_value(context):\n    # Locate the \"Weight in kg\" input field\n    weight_input = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='weight-input']\")\n    # Verify that the input field displays the value \"70\"\n    assert weight_input.get_attribute(\"value\") == \"70\", f\"Expected value '70', but got '{weight_input.get_attribute('value')}'\"\n    time.sleep(1)\n\n# Teardown to close the browser after the test\ndef after_scenario(context, scenario):\n    if hasattr(context, 'driver'):\n        context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: Accept and store the weight input for BMI calculation\n  The system should allow the user to input a weight value in kilograms, validate it, and store it for BMI calculation.\n\n\n  Scenario: [Edge] User enters the minimum valid weight value\n    Given the BMI Calculator page is loaded\n    And the \"Weight in kg\" input field with data-testid \"weight-input\" is visible\n    When the user enters \"0.1\" into the \"Weight in kg\" input field with data-testid \"weight-input\"\n    Then the \"Weight in kg\" input field with data-testid \"weight-input\" should display the value \"0.1\"\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\ndef is_visible(element):\n    return element.is_displayed()\n\n@given('the BMI Calculator page is loaded')\ndef step_given_bmi_calculator_page_loaded(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)\n\n@given('the \"Weight in kg\" input field with data-testid \"weight-input\" is visible')\ndef step_given_weight_input_field_visible(context):\n    weight_input = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='weight-input']\"))\n    )\n    assert is_visible(weight_input), \"Weight input field is not visible\"\n    time.sleep(1)\n\n@when('the user enters \"0.1\" into the \"Weight in kg\" input field with data-testid \"weight-input\"')\ndef step_when_user_enters_weight(context):\n    weight_input = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='weight-input']\")\n    weight_input.clear()\n    weight_input.send_keys(\"0.1\")\n    time.sleep(1)\n\n@then('the \"Weight in kg\" input field with data-testid \"weight-input\" should display the value \"0.1\"')\ndef step_then_weight_input_field_should_display_value(context):\n    weight_input = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='weight-input']\")\n    assert weight_input.get_attribute(\"value\") == \"0.1\", f\"Expected value '0.1', but got '{weight_input.get_attribute('value')}'\"\n    time.sleep(1)\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: Accept and store the weight input for BMI calculation\n  The system should allow the user to input a weight value in kilograms, validate it, and store it for BMI calculation.\n\n\n  Scenario: [Edge] User enters the maximum valid weight value\n    Given the BMI Calculator page is loaded\n    And the \"Weight in kg\" input field with data-testid \"weight-input\" is visible\n    When the user enters \"500\" into the \"Weight in kg\" input field with data-testid \"weight-input\"\n    Then the \"Weight in kg\" input field with data-testid \"weight-input\" should display the value \"500\"\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the BMI Calculator page is loaded')\ndef step_given_bmi_calculator_page_loaded(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)\n\n@given('the \"Weight in kg\" input field with data-testid \"weight-input\" is visible')\ndef step_given_weight_input_visible(context):\n    weight_input = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='weight-input']\"))\n    )\n    assert weight_input.is_displayed(), \"Weight input field is not visible\"\n    time.sleep(1)\n\n@when('the user enters \"500\" into the \"Weight in kg\" input field with data-testid \"weight-input\"')\ndef step_when_user_enters_weight(context):\n    weight_input = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='weight-input']\")\n    weight_input.clear()\n    weight_input.send_keys(\"500\")\n    time.sleep(1)\n\n@then('the \"Weight in kg\" input field with data-testid \"weight-input\" should display the value \"500\"')\ndef step_then_weight_input_displays_value(context):\n    weight_input = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='weight-input']\")\n    displayed_value = weight_input.get_attribute(\"value\")\n    assert displayed_value == \"500\", f\"Expected weight input value to be '500', but got '{displayed_value}'\"\n    time.sleep(1)\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                }
            ]
        },
        "3": {
            "requirement": {
                "description": "The web application must enable users to calculate their Body Mass Index (BMI) based on their height and weight inputs using the formula BMI = weight (kg) / (height (m) * height (m)). The result must be rounded to two decimal places and displayed in the result area identified by data-testid \"result-display\" in the format \"Your BMI is <calculated_value>\". The implementation must support normal and edge scenarios, including valid numeric input, minimum non-zero values (e.g., weight = 1, height = 0.01 resulting in \"Your BMI is 10000.00\"), and maximum reasonable values (e.g., weight = 635, height = 2.72 resulting in \"Your BMI is 85.89\"). It must also handle error conditions gracefully: if either height or weight input is non-numeric, such as \"xyz\", or left empty, the result must be \"NaN\". The interface must use the specified data-testid attributes: \"weight-input\" for the weight field, \"calculate-button\" for the trigger button, and \"result-display\" for the output, and must ensure consistent behavior across all cases."
            },
            "test_cases": [
                {
                    "test_case": [
                        "Feature: BMI Calculation\n  The system calculates and displays the Body Mass Index (BMI) based on user input for height and weight, rounding the result to two decimal places.\n\n\n  Scenario: [Normal] Calculate BMI with valid height and weight inputs\n    Given the BMI Calculator page is loaded\n    And the user enters \"170\" into the height input field with data-testid \"height-input\"\n    And the user enters \"65\" into the weight input field with data-testid \"weight-input\"\n    When the user clicks the \"Calculate\" button with data-testid \"calculate-button\"\n    Then the result display area with data-testid \"result-display\" should show \"Your BMI is 22.49\"\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the BMI Calculator page is loaded')\ndef step_impl(context):\n    # Initialize the WebDriver and load the test page\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    context.driver.maximize_window()\n    # Wait for the page to fully load\n    WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='calculate-button']\"))\n    )\n\n@given('the user enters \"{height}\" into the height input field with data-testid \"height-input\"')\ndef step_impl(context, height):\n    # Locate the height input field and enter the provided height value\n    height_input = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='height-input']\"))\n    )\n    height_input.clear()\n    height_input.send_keys(height)\n    time.sleep(1)\n\n@given('the user enters \"{weight}\" into the weight input field with data-testid \"weight-input\"')\ndef step_impl(context, weight):\n    # Locate the weight input field and enter the provided weight value\n    weight_input = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='weight-input']\"))\n    )\n    weight_input.clear()\n    weight_input.send_keys(weight)\n    time.sleep(1)\n\n@when('the user clicks the \"Calculate\" button with data-testid \"calculate-button\"')\ndef step_impl(context):\n    # Locate the calculate button and click it\n    calculate_button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='calculate-button']\"))\n    )\n    calculate_button.click()\n    time.sleep(1)\n\n@then('the result display area with data-testid \"result-display\" should show \"{expected_result}\"')\ndef step_impl(context, expected_result):\n    # Locate the result display area and verify the displayed text\n    result_display = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='result-display']\"))\n    )\n    actual_result = result_display.text.strip()\n    assert expected_result in actual_result, f\"Expected '{expected_result}', but got '{actual_result}'\"\n\n# Teardown to close the browser after the test\ndef after_scenario(context, scenario):\n    if hasattr(context, 'driver'):\n        context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: BMI Calculation\n  The system calculates and displays the Body Mass Index (BMI) based on user input for height and weight, rounding the result to two decimal places.\n\n\n  Scenario: [Edge] Calculate BMI with minimum non-zero height and weight inputs\n    Given the BMI Calculator page is loaded\n    And the user enters \"1\" into the height input field with data-testid \"height-input\"\n    And the user enters \"1\" into the weight input field with data-testid \"weight-input\"\n    When the user clicks the \"Calculate\" button with data-testid \"calculate-button\"\n    Then the result display area with data-testid \"result-display\" should show \"Your BMI is 10000.00\"\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the BMI Calculator page is loaded')\ndef step_given_bmi_calculator_page_loaded(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)\n\n@given('the user enters \"{height}\" into the height input field with data-testid \"height-input\"')\ndef step_given_user_enters_height(context, height):\n    height_input = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='height-input']\"))\n    )\n    height_input.clear()\n    height_input.send_keys(height)\n    time.sleep(1)\n\n@given('the user enters \"{weight}\" into the weight input field with data-testid \"weight-input\"')\ndef step_given_user_enters_weight(context, weight):\n    weight_input = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='weight-input']\"))\n    )\n    weight_input.clear()\n    weight_input.send_keys(weight)\n    time.sleep(1)\n\n@when('the user clicks the \"Calculate\" button with data-testid \"calculate-button\"')\ndef step_when_user_clicks_calculate_button(context):\n    calculate_button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='calculate-button']\"))\n    )\n    calculate_button.click()\n    time.sleep(1)\n\n@then('the result display area with data-testid \"result-display\" should show \"Your BMI is {expected_bmi}\"')\ndef step_then_result_display_should_show_bmi(context, expected_bmi):\n    result_display = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='result-display']\"))\n    )\n    actual_text = result_display.text.strip()\n    expected_text = f\"Your BMI is {expected_bmi}\"\n    assert expected_text in actual_text, f\"Expected '{expected_text}', but got '{actual_text}'\"\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: BMI Calculation\n  The system calculates and displays the Body Mass Index (BMI) based on user input for height and weight, rounding the result to two decimal places.\n\n\n  Scenario: [Edge] Calculate BMI with maximum reasonable height and weight inputs\n    Given the BMI Calculator page is loaded\n    And the user enters \"272\" into the height input field with data-testid \"height-input\"\n    And the user enters \"635\" into the weight input field with data-testid \"weight-input\"\n    When the user clicks the \"Calculate\" button with data-testid \"calculate-button\"\n    Then the result display area with data-testid \"result-display\" should show \"Your BMI is 85.83\"\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the BMI Calculator page is loaded')\ndef step_given_bmi_calculator_page_loaded(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)\n\n@given('the user enters \"{height}\" into the height input field with data-testid \"height-input\"')\ndef step_given_user_enters_height(context, height):\n    height_input = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='height-input']\"))\n    )\n    height_input.clear()\n    height_input.send_keys(height)\n    time.sleep(1)\n\n@given('the user enters \"{weight}\" into the weight input field with data-testid \"weight-input\"')\ndef step_given_user_enters_weight(context, weight):\n    weight_input = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='weight-input']\"))\n    )\n    weight_input.clear()\n    weight_input.send_keys(weight)\n    time.sleep(1)\n\n@when('the user clicks the \"Calculate\" button with data-testid \"calculate-button\"')\ndef step_when_user_clicks_calculate_button(context):\n    calculate_button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='calculate-button']\"))\n    )\n    calculate_button.click()\n    time.sleep(1)\n\n@then('the result display area with data-testid \"result-display\" should show \"Your BMI is {expected_bmi}\"')\ndef step_then_result_display_should_show_bmi(context, expected_bmi):\n    result_display = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='result-display']\"))\n    )\n    actual_text = result_display.text.strip()\n    expected_text = f\"Your BMI is {expected_bmi}\"\n    assert expected_text in actual_text, f\"Expected '{expected_text}' but got '{actual_text}'\"\n    time.sleep(1)\n    context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: BMI Calculation\n  The system calculates and displays the Body Mass Index (BMI) based on user input for height and weight, rounding the result to two decimal places.\n\n\nScenario: [Error] Calculate BMI with non-numeric height input\n    Given the BMI Calculator page is loaded\n    And the user enters \"abc\" into the height input field with data-testid \"height-input\"\n    And the user enters \"65\" into the weight input field with data-testid \"weight-input\"\n    When the user clicks the \"Calculate\" button with data-testid \"calculate-button\"\n    Then the result display area with data-testid \"result-display\" should be NaN"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\n# Placeholder for the file path\nfile_path = \"index.html\"\n\n@given(\"the BMI Calculator page is loaded\")\ndef step_given_bmi_calculator_page_loaded(context):\n    # Initialize the WebDriver\n    context.driver = webdriver.Chrome()\n    # Load the test page\n    context.driver.get(f\"file://index.html\")\n    # Maximize the browser window\n    context.driver.maximize_window()\n    # Wait for the page title to be visible\n    WebDriverWait(context.driver, 10).until(EC.title_is(\"BMI Calculator\"))\n    time.sleep(1)\n\n@given('the user enters \"{height}\" into the height input field with data-testid \"height-input\"')\ndef step_given_user_enters_height(context, height):\n    # Locate the height input field and enter the value\n    height_input = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='height-input']\"))\n    )\n    height_input.clear()\n    height_input.send_keys(height)\n    time.sleep(1)\n\n@given('the user enters \"{weight}\" into the weight input field with data-testid \"weight-input\"')\ndef step_given_user_enters_weight(context, weight):\n    # Locate the weight input field and enter the value\n    weight_input = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='weight-input']\"))\n    )\n    weight_input.clear()\n    weight_input.send_keys(weight)\n    time.sleep(1)\n\n@when('the user clicks the \"Calculate\" button with data-testid \"calculate-button\"')\ndef step_when_user_clicks_calculate_button(context):\n    # Locate the calculate button and click it\n    calculate_button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='calculate-button']\"))\n    )\n    calculate_button.click()\n    time.sleep(1)\n\n@then('the result display area with data-testid \"result-display\" should be NaN')\ndef step_then_result_display_should_be_nan(context):\n    # Locate the result display area and verify the text\n    result_display = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='result-display']\"))\n    )\n    result_text = result_display.text.strip()\n    assert \"NaN\" in result_text, f\"Expected 'NaN' in result display, but got '{result_text}'\"\n    time.sleep(1)\n\n# Cleanup after the test\ndef after_scenario(context, scenario):\n    # Close the browser driver\n    if hasattr(context, 'driver'):\n        context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: BMI Calculation\n  The system calculates and displays the Body Mass Index (BMI) based on user input for height and weight, rounding the result to two decimal places.\n\n\nScenario: [Error] Calculate BMI with non-numeric weight input\n    Given the BMI Calculator page is loaded\n    And the user enters \"170\" into the height input field with data-testid \"height-input\"\n    And the user enters \"xyz\" into the weight input field with data-testid \"weight-input\"\n    When the user clicks the \"Calculate\" button with data-testid \"calculate-button\"\n    Then the result display area with data-testid \"result-display\" should be NaN"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the BMI Calculator page is loaded')\ndef step_given_bmi_calculator_page_loaded(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)\n\n@given('the user enters \"{height}\" into the height input field with data-testid \"height-input\"')\ndef step_given_user_enters_height(context, height):\n    height_input = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='height-input']\"))\n    )\n    height_input.clear()\n    height_input.send_keys(height)\n    time.sleep(1)\n\n@given('the user enters \"{weight}\" into the weight input field with data-testid \"weight-input\"')\ndef step_given_user_enters_weight(context, weight):\n    weight_input = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='weight-input']\"))\n    )\n    weight_input.clear()\n    weight_input.send_keys(weight)\n    time.sleep(1)\n\n@when('the user clicks the \"Calculate\" button with data-testid \"calculate-button\"')\ndef step_when_user_clicks_calculate_button(context):\n    calculate_button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='calculate-button']\"))\n    )\n    calculate_button.click()\n    time.sleep(1)\n\n@then('the result display area with data-testid \"result-display\" should be NaN')\ndef step_then_result_display_should_be_nan(context):\n    result_display = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='result-display']\"))\n    )\n    result_text = result_display.text.strip()\n    assert \"NaN\" in result_text, f\"Expected 'NaN' in '{result_text}'\"\n\n    # Close the browser driver\n    context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: BMI Calculation\n  The system calculates and displays the Body Mass Index (BMI) based on user input for height and weight, rounding the result to two decimal places.\n\n\nScenario: [Error] Calculate BMI with empty height and weight inputs\n    Given the BMI Calculator page is loaded\n    And the height input field with data-testid \"height-input\" is empty\n    And the weight input field with data-testid \"weight-input\" is empty\n    When the user clicks the \"Calculate\" button with data-testid \"calculate-button\"\n    Then the result display area with data-testid \"result-display\" should be NaN"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\ndef is_visible(element):\n    return element.is_displayed()\n\n@given('the BMI Calculator page is loaded')\ndef step_given_bmi_calculator_page_loaded(context):\n    # Initialize the WebDriver and load the test page\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)  # Allow the page to load completely\n\n@given('the height input field with data-testid \"height-input\" is empty')\ndef step_given_height_input_empty(context):\n    # Locate the height input field and ensure it is empty\n    height_input = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='height-input']\"))\n    )\n    height_input.clear()\n    assert height_input.get_attribute(\"value\") == \"\", \"Height input field is not empty\"\n    time.sleep(1)\n\n@given('the weight input field with data-testid \"weight-input\" is empty')\ndef step_given_weight_input_empty(context):\n    # Locate the weight input field and ensure it is empty\n    weight_input = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='weight-input']\"))\n    )\n    weight_input.clear()\n    assert weight_input.get_attribute(\"value\") == \"\", \"Weight input field is not empty\"\n    time.sleep(1)\n\n@when('the user clicks the \"Calculate\" button with data-testid \"calculate-button\"')\ndef step_when_user_clicks_calculate_button(context):\n    # Locate the calculate button and click it\n    calculate_button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='calculate-button']\"))\n    )\n    calculate_button.click()\n    time.sleep(1)  # Allow time for the result to be displayed\n\n@then('the result display area with data-testid \"result-display\" should be NaN')\ndef step_then_result_display_nan(context):\n    # Locate the result display area and verify its content\n    result_display = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='result-display']\"))\n    )\n    assert \"NaN\" in result_display.text, f\"Expected 'NaN' in result display, but got '{result_display.text}'\"\n    time.sleep(1)\n\n# Teardown to close the browser after the test\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                }
            ]
        },
        "4": {
            "requirement": {
                "description": "The system must display a static, responsive, and accessible table upon page load that provides users with BMI ranges and their corresponding categories for reference. The table must contain two headers—'BMI' and 'Category'—with data-testid='bmi-header' and data-testid='category-header', respectively. It must include four rows: 'less than 18.5' (data-testid='bmi-value-1') paired with 'Underweight' (data-testid='category-value-1'), 'between 18.5 and 24.9' (data-testid='bmi-value-2') with 'Ideal' (data-testid='category-value-2'), 'between 25 and 29.9' (data-testid='bmi-value-3') with 'Overweight' (data-testid='category-value-3'), and 'over 30' (data-testid='bmi-value-4') with 'Obesity' (data-testid='category-value-4'). The table must be properly formatted and remain fully visible across different screen sizes without requiring user interaction, and all elements must be accessible through their respective data-testid attributes for testing purposes."
            },
            "test_cases": [
                {
                    "test_case": [
                        "Feature: Display BMI ranges and corresponding categories for user reference\n  The system should display a table with BMI ranges and their corresponding categories (Underweight, Ideal, Overweight, Obesity) for user reference.\n\n\n  Scenario: [Normal] Verify the presence of the BMI table and its headers\n    Given the user navigates to the BMI Calculator webpage\n    Then the table with BMI ranges and categories should be visible\n    And the table header \"BMI\" should be displayed with data-testid \"bmi-header\"\n    And the table header \"Category\" should be displayed with data-testid \"category-header\"\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\n# Placeholder for the file path\nfile_path = \"index.html\"\n\n# Background setup\n@given(\"the user navigates to the BMI Calculator webpage\")\ndef step_given_user_navigates_to_bmi_calculator(context):\n    # Initialize the Selenium WebDriver\n    context.driver = webdriver.Chrome()\n    # Load the test page dynamically\n    context.driver.get(f\"file://index.html\")\n    # Maximize the browser window\n    context.driver.maximize_window()\n    time.sleep(1)  # Allow the page to load completely\n\n@then(\"the table with BMI ranges and categories should be visible\")\ndef step_then_table_with_bmi_ranges_visible(context):\n    # Wait for the table to be visible\n    table = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"table\"))\n    )\n    assert table.is_displayed(), \"BMI table is not visible\"\n\n@then('the table header \"BMI\" should be displayed with data-testid \"bmi-header\"')\ndef step_then_bmi_header_displayed(context):\n    # Locate the BMI header using data-testid\n    bmi_header = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='bmi-header']\"))\n    )\n    assert bmi_header.is_displayed(), '\"BMI\" header is not visible'\n    assert \"BMI\" in bmi_header.text.strip(), f'Expected \"BMI\" in header, but got \"{bmi_header.text.strip()}\"'\n\n@then('the table header \"Category\" should be displayed with data-testid \"category-header\"')\ndef step_then_category_header_displayed(context):\n    # Locate the Category header using data-testid\n    category_header = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='category-header']\"))\n    )\n    assert category_header.is_displayed(), '\"Category\" header is not visible'\n    assert \"Category\" in category_header.text.strip(), f'Expected \"Category\" in header, but got \"{category_header.text.strip()}\"'\n\n# Teardown\ndef after_scenario(context, scenario):\n    # Close the browser driver after the test\n    if hasattr(context, \"driver\"):\n        context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: Display BMI ranges and corresponding categories for user reference\n  The system should display a table with BMI ranges and their corresponding categories (Underweight, Ideal, Overweight, Obesity) for user reference.\n\n\n  Scenario: [Normal] Verify the BMI range and category values in the table\n    Given the user navigates to the BMI Calculator webpage\n    Then the table should contain the BMI range \"less than 18.5\" with data-testid \"bmi-value-1\"\n    And the corresponding category \"Underweight\" should be displayed with data-testid \"category-value-1\"\n    And the table should contain the BMI range \"between 18.5 and 24.9\" with data-testid \"bmi-value-2\"\n    And the corresponding category \"Ideal\" should be displayed with data-testid \"category-value-2\"\n    And the table should contain the BMI range \"between 25 and 29.9\" with data-testid \"bmi-value-3\"\n    And the corresponding category \"Overweight\" should be displayed with data-testid \"category-value-3\"\n    And the table should contain the BMI range \"over 30\" with data-testid \"bmi-value-4\"\n    And the corresponding category \"Obesity\" should be displayed with data-testid \"category-value-4\"\n"
                    ],
                    "step_code": "from behave import given, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given(\"the user navigates to the BMI Calculator webpage\")\ndef step_given_user_navigates_to_bmi_calculator(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)\n\n@then('the table should contain the BMI range \"less than 18.5\" with data-testid \"bmi-value-1\"')\ndef step_then_bmi_range_less_than_18_5(context):\n    element = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='bmi-value-1']\"))\n    )\n    expected_text = \"less than 18.5\"\n    assert expected_text.lower() in element.text.lower(), f\"Expected '{expected_text}' in '{element.text}'\"\n    time.sleep(1)\n\n@then('the corresponding category \"Underweight\" should be displayed with data-testid \"category-value-1\"')\ndef step_then_category_underweight(context):\n    element = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='category-value-1']\"))\n    )\n    expected_text = \"Underweight\"\n    assert expected_text.lower() in element.text.lower(), f\"Expected '{expected_text}' in '{element.text}'\"\n    time.sleep(1)\n\n@then('the table should contain the BMI range \"between 18.5 and 24.9\" with data-testid \"bmi-value-2\"')\ndef step_then_bmi_range_between_18_5_and_24_9(context):\n    element = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='bmi-value-2']\"))\n    )\n    expected_text = \"between 18.5 and 24.9\"\n    assert expected_text.lower() in element.text.lower(), f\"Expected '{expected_text}' in '{element.text}'\"\n    time.sleep(1)\n\n@then('the corresponding category \"Ideal\" should be displayed with data-testid \"category-value-2\"')\ndef step_then_category_ideal(context):\n    element = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='category-value-2']\"))\n    )\n    expected_text = \"Ideal\"\n    assert expected_text.lower() in element.text.lower(), f\"Expected '{expected_text}' in '{element.text}'\"\n    time.sleep(1)\n\n@then('the table should contain the BMI range \"between 25 and 29.9\" with data-testid \"bmi-value-3\"')\ndef step_then_bmi_range_between_25_and_29_9(context):\n    element = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='bmi-value-3']\"))\n    )\n    expected_text = \"between 25 and 29.9\"\n    assert expected_text.lower() in element.text.lower(), f\"Expected '{expected_text}' in '{element.text}'\"\n    time.sleep(1)\n\n@then('the corresponding category \"Overweight\" should be displayed with data-testid \"category-value-3\"')\ndef step_then_category_overweight(context):\n    element = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='category-value-3']\"))\n    )\n    expected_text = \"Overweight\"\n    assert expected_text.lower() in element.text.lower(), f\"Expected '{expected_text}' in '{element.text}'\"\n    time.sleep(1)\n\n@then('the table should contain the BMI range \"over 30\" with data-testid \"bmi-value-4\"')\ndef step_then_bmi_range_over_30(context):\n    element = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='bmi-value-4']\"))\n    )\n    expected_text = \"over 30\"\n    assert expected_text.lower() in element.text.lower(), f\"Expected '{expected_text}' in '{element.text}'\"\n    time.sleep(1)\n\n@then('the corresponding category \"Obesity\" should be displayed with data-testid \"category-value-4\"')\ndef step_then_category_obesity(context):\n    element = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='category-value-4']\"))\n    )\n    expected_text = \"Obesity\"\n    assert expected_text.lower() in element.text.lower(), f\"Expected '{expected_text}' in '{element.text}'\"\n    time.sleep(1)\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: Display BMI ranges and corresponding categories for user reference\n  The system should display a table with BMI ranges and their corresponding categories (Underweight, Ideal, Overweight, Obesity) for user reference.\n\n\n  Scenario: [Edge] Verify table visibility on different screen sizes\n    Given the user navigates to the BMI Calculator webpage\n    When the user resizes the browser window to a small screen size\n    Then the table with BMI ranges and categories should remain visible and properly formatted\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the user navigates to the BMI Calculator webpage')\ndef step_given_user_navigates_to_bmi_calculator(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)  # Allow time for the page to load\n\n@when('the user resizes the browser window to a small screen size')\ndef step_when_user_resizes_browser_window(context):\n    context.driver.set_window_size(480, 800)  # Example small screen size\n    time.sleep(1)  # Allow time for the resize to take effect\n\n@then('the table with BMI ranges and categories should remain visible and properly formatted')\ndef step_then_table_should_remain_visible(context):\n    table = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"div.chart table\"))\n    )\n    assert table.is_displayed(), \"The BMI table is not visible\"\n    time.sleep(1)  # Allow time for any potential animations or transitions\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                }
            ]
        }
    }
}