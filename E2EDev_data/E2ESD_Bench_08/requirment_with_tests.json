{
    "summary": {
        "overview": "The Library Management System allows users to search for books, add new books to their personal library, and view a list of issued books. Users can also delete books from the list and receive alerts about the status of book issuance.",
        "predefined_options": "The system provides predefined options for book types, including Fiction, Programming, and Cooking, which users can select via radio buttons.",
        "external_resources": "The application uses Bootstrap for styling and layout, and jQuery for JavaScript functionality. These resources are loaded from external CDNs.",
        "external_js_libraries": "Bootstrap (https://cdn.jsdelivr.net/npm/bootstrap@4.6.1/dist/js/bootstrap.bundle.min.js), jQuery (https://cdn.jsdelivr.net/npm/jquery@3.5.1/dist/jquery.slim.min.js)"
    },
    "finegrained_rewith_test": {
        "1": {
            "requirement": {
                "description": "The Library Management System web application must ensure proper functionality of the navbar toggler button on small screens. When the page loads with a window size small enough to hide the navigation menu, the menu should be initially collapsed. Clicking the navbar toggler button (identified by data-testid=\"navbar-toggler\") should expand the navigation menu (data-testid=\"navbarSupportedContent\"), making the menu items visible. If the menu is already expanded, clicking the toggler button again should collapse it, hiding the items. "
            },
            "test_cases": [
                {
                    "test_case": [
                        "Feature: Navbar Toggler Button Functionality\n  The navbar toggler button should expand or collapse the navigation menu when the window size is small, displaying the menu items when expanded and hiding them when collapsed.\n\n\n  Scenario: [Normal] Expand the navigation menu by clicking the navbar toggler button\n    Given the webpage \"Library Management System\" is loaded\n    And the window size is small enough to hide the navigation menu\n    And the navigation menu is initially collapsed\n    When the user clicks the navbar toggler button with data-testid \"navbar-toggler\"\n    Then the navigation menu with data-testid \"navbarSupportedContent\" should be expanded\n    And the menu items should be visible\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the webpage \"Library Management System\" is loaded')\ndef step_given_webpage_loaded(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)\n\n@given('the window size is small enough to hide the navigation menu')\ndef step_given_window_size_small(context):\n    context.driver.set_window_size(480, 800)\n    time.sleep(1)\n\n@given('the navigation menu is initially collapsed')\ndef step_given_navigation_menu_collapsed(context):\n    navbar = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='navbarSupportedContent']\")\n    assert is_collapsed(navbar), \"Expected the navigation menu to be collapsed\"\n\n@when('the user clicks the navbar toggler button with data-testid \"navbar-toggler\"')\ndef step_when_user_clicks_navbar_toggler(context):\n    toggler = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='navbar-toggler']\"))\n    )\n    toggler.click()\n    time.sleep(1)\n\n@then('the navigation menu with data-testid \"navbarSupportedContent\" should be expanded')\ndef step_then_navigation_menu_expanded(context):\n    navbar = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='navbarSupportedContent']\")\n    assert is_expanded(navbar), \"Expected the navigation menu to be expanded\"\n\n@then('the menu items should be visible')\ndef step_then_menu_items_visible(context):\n    menu_items = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='nav-link-home']\")\n    assert menu_items.is_displayed(), \"Expected menu items to be visible\"\n\ndef is_expanded(element):\n    aria = element.get_attribute(\"aria-expanded\")\n    if aria is not None:\n        return aria == \"true\"\n\n    class_list = element.get_attribute(\"class\").split()\n    if any(cls in class_list for cls in [\"expanded\", \"open\", \"show\"]):\n        return True\n\n    data_expanded = element.get_attribute(\"data-expanded\")\n    if data_expanded is not None:\n        return data_expanded == \"true\"\n\n    return element.is_displayed()\n\ndef is_collapsed(element):\n    aria = element.get_attribute(\"aria-expanded\")\n    if aria is not None and aria.lower() == \"false\":\n        return True\n\n    class_attr = element.get_attribute(\"class\") or \"\"\n    class_list = class_attr.split()\n    if \"collapsed\" in class_list:\n        return True\n\n    data_expanded = element.get_attribute(\"data-expanded\")\n    if data_expanded is not None and data_expanded.lower() == \"false\":\n        return True\n\n    style = element.get_attribute(\"style\") or \"\"\n    if \"display: none\" in style or \"visibility: hidden\" in style or \"height: 0\" in style:\n        return True\n\n    return not element.is_displayed()\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: Navbar Toggler Button Functionality\n  The navbar toggler button should expand or collapse the navigation menu when the window size is small, displaying the menu items when expanded and hiding them when collapsed.\n\n\n  Scenario: [Normal] Collapse the navigation menu by clicking the navbar toggler button again\n    Given the webpage \"Library Management System\" is loaded\n    And the window size is small enough to hide the navigation menu\n    And the navigation menu is expanded\n    When the user clicks the navbar toggler button with data-testid \"navbar-toggler\"\n    Then the navigation menu with data-testid \"navbarSupportedContent\" should be collapsed\n    And the menu items should be hidden\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\ndef is_collapsed(element):\n    aria = element.get_attribute(\"aria-expanded\")\n    if aria is not None and aria.lower() == \"false\":\n        return True\n\n    class_attr = element.get_attribute(\"class\") or \"\"\n    class_list = class_attr.split()\n    if \"collapsed\" in class_list:\n        return True\n\n    data_expanded = element.get_attribute(\"data-expanded\")\n    if data_expanded is not None and data_expanded.lower() == \"false\":\n        return True\n\n    style = element.get_attribute(\"style\") or \"\"\n    if \"display: none\" in style or \"visibility: hidden\" in style or \"height: 0\" in style:\n        return True\n\n    return not element.is_displayed()\n\n@given('the webpage \"Library Management System\" is loaded')\ndef step_given_webpage_loaded(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)\n\n@given('the window size is small enough to hide the navigation menu')\ndef step_given_window_size_small(context):\n    context.driver.set_window_size(400, 800)\n    time.sleep(1)\n\n@given('the navigation menu is expanded')\ndef step_given_navigation_menu_expanded(context):\n    navbar_toggler = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='navbar-toggler']\"))\n    )\n    navbar_toggler.click()\n    time.sleep(1)\n\n@when('the user clicks the navbar toggler button with data-testid \"navbar-toggler\"')\ndef step_when_user_clicks_navbar_toggler(context):\n    navbar_toggler = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='navbar-toggler']\"))\n    )\n    navbar_toggler.click()\n    time.sleep(1)\n\n@then('the navigation menu with data-testid \"navbarSupportedContent\" should be collapsed')\ndef step_then_navigation_menu_collapsed(context):\n    navbar_content = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='navbarSupportedContent']\")\n    assert is_collapsed(navbar_content), \"Expected the navigation menu to be collapsed\"\n\n@then('the menu items should be hidden')\ndef step_then_menu_items_hidden(context):\n    navbar_content = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='navbarSupportedContent']\")\n    assert not navbar_content.is_displayed(), \"Expected the menu items to be hidden\"\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                }
            ]
        },
        "3": {
            "requirement": {
                "description": "The system shall allow users to add a book to the library list using the form identified by my-library-form. The form includes three fields: 'User Name' (data-testid=\"user-name-input\"), 'Book Name' (data-testid=\"book-name-input\"), and 'Book Type', which includes the options 'Fiction' (data-testid=\"fiction-radio\"), 'Programming' (data-testid=\"programming-radio\"), and 'Cooking' (data-testid=\"cooking-radio\").Upon clicking the 'Add Book' button (data-testid=\"add-book-button\"), the system shall validate the inputs as follows:\n1. If either the 'User Name' or 'Book Name' field is empty, the system shall display an error alert with the message \"Oops! Book is not issued\".\n2. If the entered 'Book Name' has already been issued to another user, the system shall display an error alert with the message \"Oops! Book is already issued by [issuedUser]\".\n3. If all inputs are valid and the book has not been issued, the system shall add the entry to the list, displaying the reader’s name, book name, and genre in the table. A success alert with the message \"Success Book is issued\" shall be shown.\nThe system shall also handle edge cases such as unusually long book names and ensure that the list persists across page reloads using local storage."
            },
            "test_cases": [
                {
                    "test_case": [
                        "Feature: Add a book to the library list\n  The system should allow users to add a book to the library list by filling out the form with valid inputs.\n\n\n  Scenario: [Normal] Successfully add a book with valid inputs\n    Given the \"Library Management System\" page is loaded\n    And the user enters \"John Doe\" into the username field with data-testid \"user-name-input\"\n    And the user enters \"JavaScript Essentials\" into the book name field with data-testid \"book-name-input\"\n    And the user selects the \"Programming\" radio button with data-testid \"programming-radio\"\n    When the user clicks the \"Add Book\" button with data-testid \"add-book-button\"\n    Then the system should display a success alert with the message \"Success Book is issued\"\n    And the book should be added to the list with the reader \"John Doe\", book name \"JavaScript Essentials\", and genre \"Programming\"\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\ndef is_visible(element):\n    return element.is_displayed()\n\n@given('the \"Library Management System\" page is loaded')\ndef step_given_page_is_loaded(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)\n\n@given('the user enters \"{username}\" into the username field with data-testid \"user-name-input\"')\ndef step_given_enter_username(context, username):\n    user_name_input = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='user-name-input']\"))\n    )\n    user_name_input.clear()\n    user_name_input.send_keys(username)\n    time.sleep(1)\n\n@given('the user enters \"{bookname}\" into the book name field with data-testid \"book-name-input\"')\ndef step_given_enter_bookname(context, bookname):\n    book_name_input = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='book-name-input']\"))\n    )\n    book_name_input.clear()\n    book_name_input.send_keys(bookname)\n    time.sleep(1)\n\n@given('the user selects the \"{radio_button}\" radio button with data-testid \"{data_testid}\"')\ndef step_given_select_radio_button(context, radio_button, data_testid):\n    radio_button_element = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, f\"[data-testid='{data_testid}']\"))\n    )\n    radio_button_element.click()\n    time.sleep(1)\n\n@when('the user clicks the \"Add Book\" button with data-testid \"add-book-button\"')\ndef step_when_click_add_book(context):\n    add_book_button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='add-book-button']\"))\n    )\n    add_book_button.click()\n    time.sleep(1)\n\n@then('the system should display a success alert with the message \"Success Book is issued\"')\ndef step_then_check_success_alert(context):\n    alert_user = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='alert-user'] .alert-success\"))\n    )\n    assert \"Success\" in alert_user.text and \"Book is issued\" in alert_user.text, \\\n        f\"Expected success message not found in alert: {alert_user.text}\"\n    time.sleep(1)\n\n@then('the book should be added to the list with the reader \"{reader}\", book name \"{bookname}\", and genre \"{genre}\"')\ndef step_then_check_book_added(context, reader, bookname, genre):\n    table_body = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='table-body']\"))\n    )\n    rows = table_body.find_elements(By.TAG_NAME, \"tr\")\n    last_row = rows[-1] if rows else None\n\n    assert last_row is not None, \"No rows found in the table.\"\n    cells = last_row.find_elements(By.TAG_NAME, \"td\")\n    assert len(cells) >= 5, \"Expected at least 5 columns in the table row.\"\n\n    assert reader in cells[2].text, f\"Expected reader '{reader}' in table, but got '{cells[2].text}'\"\n    assert bookname in cells[3].text, f\"Expected book name '{bookname}' in table, but got '{cells[3].text}'\"\n    assert genre in cells[4].text, f\"Expected genre '{genre}' in table, but got '{cells[4].text}'\"\n    time.sleep(1)\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: Add a book to the library list\n  The system should allow users to add a book to the library list by filling out the form with valid inputs.\n\n\n  Scenario: [Edge] Attempt to add a book with a very long book name\n    Given the \"Library Management System\" page is loaded\n    And the user enters \"Jane Smith\" into the username field with data-testid \"user-name-input\"\n    And the user enters a very long book name \"A Comprehensive Guide to Advanced JavaScript Programming Techniques and Best Practices\" into the book name field with data-testid \"book-name-input\"\n    And the user selects the \"Fiction\" radio button with data-testid \"fiction-radio\"\n    When the user clicks the \"Add Book\" button with data-testid \"add-book-button\"\n    Then the system should display a success alert with the message \"Success Book is issued\"\n    And the book should be added to the list with the reader \"Jane Smith\", book name \"A Comprehensive Guide to Advanced JavaScript Programming Techniques and Best Practices\", and genre \"Fiction\"\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the \"Library Management System\" page is loaded')\ndef step_given_page_is_loaded(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)\n\n@given('the user enters \"Jane Smith\" into the username field with data-testid \"user-name-input\"')\ndef step_given_enter_username(context):\n    user_name_input = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='user-name-input']\"))\n    )\n    user_name_input.clear()\n    user_name_input.send_keys(\"Jane Smith\")\n    time.sleep(1)\n\n@given('the user enters a very long book name \"A Comprehensive Guide to Advanced JavaScript Programming Techniques and Best Practices\" into the book name field with data-testid \"book-name-input\"')\ndef step_given_enter_long_book_name(context):\n    book_name_input = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='book-name-input']\"))\n    )\n    book_name_input.clear()\n    book_name_input.send_keys(\"A Comprehensive Guide to Advanced JavaScript Programming Techniques and Best Practices\")\n    time.sleep(1)\n\n@given('the user selects the \"Fiction\" radio button with data-testid \"fiction-radio\"')\ndef step_given_select_fiction_radio(context):\n    fiction_radio = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='fiction-radio']\"))\n    )\n    fiction_radio.click()\n    time.sleep(1)\n\n@when('the user clicks the \"Add Book\" button with data-testid \"add-book-button\"')\ndef step_when_click_add_book_button(context):\n    add_book_button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='add-book-button']\"))\n    )\n    add_book_button.click()\n    time.sleep(1)\n\n@then('the system should display a success alert with the message \"Success Book is issued\"')\ndef step_then_check_success_alert(context):\n    alert_user = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='alert-user'] .alert-success\"))\n    )\n    assert \"Success Book is issued\" in alert_user.text, f\"Expected success message not found in alert: {alert_user.text}\"\n    time.sleep(1)\n\n@then('the book should be added to the list with the reader \"Jane Smith\", book name \"A Comprehensive Guide to Advanced JavaScript Programming Techniques and Best Practices\", and genre \"Fiction\"')\ndef step_then_check_book_added(context):\n    table_body = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='table-body']\"))\n    )\n    rows = table_body.find_elements(By.TAG_NAME, \"tr\")\n    assert len(rows) > 0, \"No rows found in the table body\"\n    last_row = rows[-1]\n    cells = last_row.find_elements(By.TAG_NAME, \"td\")\n    assert cells[2].text == \"Jane Smith\", f\"Expected reader 'Jane Smith', but got '{cells[2].text}'\"\n    assert cells[3].text == \"A Comprehensive Guide to Advanced JavaScript Programming Techniques and Best Practices\", f\"Expected book name, but got '{cells[3].text}'\"\n    assert cells[4].text == \"Fiction\", f\"Expected genre 'Fiction', but got '{cells[4].text}'\"\n    time.sleep(1)\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: Add a book to the library list\n  The system should allow users to add a book to the library list by filling out the form with valid inputs.\n\n\n  Scenario: [Error] Attempt to add a book with missing user name\n    Given the \"Library Management System\" page is loaded\n    And the user leaves the username field empty with data-testid \"user-name-input\"\n    And the user enters \"Cooking 101\" into the book name field with data-testid \"book-name-input\"\n    And the user selects the \"Cooking\" radio button with data-testid \"cooking-radio\"\n    When the user clicks the \"Add Book\" button with data-testid \"add-book-button\"\n    Then the system should display an error alert with the message \"Oops! Book is not issued\"\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the \"Library Management System\" page is loaded')\ndef step_given_page_is_loaded(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)\n\n@given('the user leaves the username field empty with data-testid \"user-name-input\"')\ndef step_given_username_field_empty(context):\n    user_name_input = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='user-name-input']\")\n    user_name_input.clear()\n    time.sleep(1)\n\n@given('the user enters \"Cooking 101\" into the book name field with data-testid \"book-name-input\"')\ndef step_given_enter_book_name(context):\n    book_name_input = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='book-name-input']\")\n    book_name_input.clear()\n    book_name_input.send_keys(\"Cooking 101\")\n    time.sleep(1)\n\n@given('the user selects the \"Cooking\" radio button with data-testid \"cooking-radio\"')\ndef step_given_select_cooking_radio(context):\n    cooking_radio = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='cooking-radio']\")\n    if not cooking_radio.is_selected():\n        cooking_radio.click()\n    time.sleep(1)\n\n@when('the user clicks the \"Add Book\" button with data-testid \"add-book-button\"')\ndef step_when_click_add_book_button(context):\n    add_book_button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='add-book-button']\"))\n    )\n    add_book_button.click()\n    time.sleep(1)\n\n@then('the system should display an error alert with the message \"Oops! Book is not issued\"')\ndef step_then_display_error_alert(context):\n    alert_user = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='alert-user']\"))\n    )\n    alert_text = alert_user.text\n    expected_message = \"Oops! Book is not issued\"\n    assert expected_message in alert_text, f\"Expected message '{expected_message}' not found in alert text '{alert_text}'\"\n    time.sleep(1)\n    context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: Add a book to the library list\n  The system should allow users to add a book to the library list by filling out the form with valid inputs.\n\n\n  Scenario: [Error] Attempt to add a book with missing book name\n    Given the \"Library Management System\" page is loaded\n    And the user enters \"Alice Johnson\" into the username field with data-testid \"user-name-input\"\n    And the user leaves the book name field empty with data-testid \"book-name-input\"\n    And the user selects the \"Fiction\" radio button with data-testid \"fiction-radio\"\n    When the user clicks the \"Add Book\" button with data-testid \"add-book-button\"\n    Then the system should display an error alert with the message \"Oops! Book is not issued\"\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the \"Library Management System\" page is loaded')\ndef step_given_page_loaded(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)\n\n@given('the user enters \"{username}\" into the username field with data-testid \"user-name-input\"')\ndef step_given_enter_username(context, username):\n    user_name_input = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='user-name-input']\"))\n    )\n    user_name_input.clear()\n    user_name_input.send_keys(username)\n    time.sleep(1)\n\n@given('the user leaves the book name field empty with data-testid \"book-name-input\"')\ndef step_given_leave_bookname_empty(context):\n    book_name_input = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='book-name-input']\"))\n    )\n    book_name_input.clear()\n    time.sleep(1)\n\n@given('the user selects the \"Fiction\" radio button with data-testid \"fiction-radio\"')\ndef step_given_select_fiction_radio(context):\n    fiction_radio = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='fiction-radio']\"))\n    )\n    fiction_radio.click()\n    time.sleep(1)\n\n@when('the user clicks the \"Add Book\" button with data-testid \"add-book-button\"')\ndef step_when_click_add_book(context):\n    add_book_button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='add-book-button']\"))\n    )\n    add_book_button.click()\n    time.sleep(1)\n\n@then('the system should display an error alert with the message \"Oops! Book is not issued\"')\ndef step_then_display_error_alert(context):\n    alert_user = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='alert-user']\"))\n    )\n    alert_text = alert_user.text.strip()\n    expected_text = \"Oops! Book is not issued\"\n    assert expected_text in alert_text, f\"Expected '{expected_text}' in '{alert_text}'\"\n    time.sleep(1)\n    context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: Add a book to the library list\n  The system should allow users to add a book to the library list by filling out the form with valid inputs.\n\n\n  Scenario: [Error] Attempt to add a book that is already issued\n    Given the \"Library Management System\" page is loaded\n    And the user enters \"Bob Brown\" into the username field with data-testid \"user-name-input\"\n    And the user enters \"JavaScript Essentials\" into the book name field with data-testid \"book-name-input\"\n    And the user selects the \"Programming\" radio button with data-testid \"programming-radio\"\n    When the user clicks the \"Add Book\" button with data-testid \"add-book-button\"\n    And the user enters \"Charlie Green\" into the username field with data-testid \"user-name-input\"\n    And the user enters \"JavaScript Essentials\" into the book name field with data-testid \"book-name-input\"\n    And the user selects the \"Programming\" radio button with data-testid \"programming-radio\"\n    When the user clicks the \"Add Book\" button with data-testid \"add-book-button\"\n    Then the system should display an error alert with the message \"Oops! Book is already issued by Bob Brown\""
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\ndef is_visible(element):\n    return element.is_displayed()\n\n@given('the \"Library Management System\" page is loaded')\ndef step_given_page_loaded(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)\n\n@given('the user enters \"{username}\" into the username field with data-testid \"user-name-input\"')\ndef step_given_enter_username(context, username):\n    user_name_input = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='user-name-input']\"))\n    )\n    user_name_input.clear()\n    user_name_input.send_keys(username)\n    time.sleep(1)\n\n@given('the user enters \"{bookname}\" into the book name field with data-testid \"book-name-input\"')\ndef step_given_enter_bookname(context, bookname):\n    book_name_input = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='book-name-input']\"))\n    )\n    book_name_input.clear()\n    book_name_input.send_keys(bookname)\n    time.sleep(1)\n\n@given('the user selects the \"{radio_button}\" radio button with data-testid \"{radio_testid}\"')\ndef step_given_select_radio_button(context, radio_button, radio_testid):\n    radio_button_element = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, f\"[data-testid='{radio_testid}']\"))\n    )\n    radio_button_element.click()\n    time.sleep(1)\n\n@when('the user clicks the \"Add Book\" button with data-testid \"add-book-button\"')\ndef step_when_click_add_book(context):\n    add_book_button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='add-book-button']\"))\n    )\n    add_book_button.click()\n    time.sleep(1)\n\n@when('the user enters \"{username}\" into the username field with data-testid \"user-name-input\"')\ndef step_when_enter_username(context, username):\n    user_name_input = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='user-name-input']\"))\n    )\n    user_name_input.clear()\n    user_name_input.send_keys(username)\n    time.sleep(1)\n\n@when('the user enters \"{bookname}\" into the book name field with data-testid \"book-name-input\"')\ndef step_when_enter_bookname(context, bookname):\n    book_name_input = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='book-name-input']\"))\n    )\n    book_name_input.clear()\n    book_name_input.send_keys(bookname)\n    time.sleep(1)\n\n@when('the user selects the \"{radio_button}\" radio button with data-testid \"{radio_testid}\"')\ndef step_when_select_radio_button(context, radio_button, radio_testid):\n    radio_button_element = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, f\"[data-testid='{radio_testid}']\"))\n    )\n    radio_button_element.click()\n    time.sleep(1)\n\n@then('the system should display an error alert with the message \"Oops! Book is already issued by {issued_user}\"')\ndef step_then_display_error_alert(context, issued_user):\n    alert_user = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='alert-user'] .alert-danger\"))\n    )\n    expected_message = f\"Oops! Book is already issued by {issued_user}\"\n    assert expected_message in alert_user.text, f\"Expected message '{expected_message}' not found in alert text '{alert_user.text}'\"\n    time.sleep(1)\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                }
            ]
        },
        "4": {
            "requirement": {
                "description": "When the user clicks the 'delete-button' associated with a specific book entry in the table, the system shall remove that book from the list and update the display accordingly. Each delete button is uniquely identified by the data-id attribute in the format 'delete-button-{index}', where {index} corresponds to the position of the book in the list. Upon deletion, the system must ensure the book entry is permanently removed from both the display and local storage, and the table must be re-rendered to reflect the updated state of the book list."
            },
            "test_cases": [
                {
                    "test_case": [
                        "Feature: Deleting a Book Entry from the Library List\n  The system should allow users to delete a book entry from the list and update the display accordingly.\n\n\n  Scenario: [Normal] Successfully deleting a book entry\n    Given the \"Library Management System\" page is loaded\n    And the book list contains an entry with \"userName\" as \"John Doe\" and \"bookName\" as \"JavaScript Basics\"\n    When the user clicks the \"delete-button-0\" associated with the first book entry\n    Then the book entry with \"userName\" as \"John Doe\" and \"bookName\" as \"JavaScript Basics\" should be removed from the list\n    And the display should be updated to reflect the removal\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\ndef is_visible(element):\n    return element.is_displayed()\n\n@given('the \"Library Management System\" page is loaded')\ndef step_given_page_is_loaded(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)\n\n@given('the book list contains an entry with \"userName\" as \"John Doe\" and \"bookName\" as \"JavaScript Basics\"')\ndef step_given_book_list_contains_entry(context):\n    # Assuming the book list is pre-populated for the test\n    # Wait for the username input field and enter \"John Doe\"\n    user_name_input = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='user-name-input']\"))\n    )\n    user_name_input.clear()\n    user_name_input.send_keys(\"John Doe\")\n    time.sleep(1)\n\n    # Enter the book name \"JavaScript Basics\"\n    book_name_input = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='book-name-input']\"))\n    )\n    book_name_input.clear()\n    book_name_input.send_keys(\"JavaScript Basics\")\n    time.sleep(1)\n\n    # Select a book type radio button (e.g., Programming)\n    radio_button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='programming-radio']\"))\n    )\n    radio_button.click()\n    time.sleep(1)\n\n    # Click the \"Add Book\" button to add the book to the list\n    add_book_button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='add-book-button']\"))\n    )\n    add_book_button.click()\n    time.sleep(1)\n\n@when('the user clicks the \"delete-button-0\" associated with the first book entry')\ndef step_when_user_clicks_delete_button(context):\n    try:\n        delete_button = WebDriverWait(context.driver, 20).until(\n            EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-id='delete-button-0']\"))\n        )\n        delete_button.click()\n        time.sleep(1)\n    except TimeoutException:\n        raise AssertionError(\"The delete button could not be found or was not visible within the specified time.\")\n\n@then('the book entry with \"userName\" as \"John Doe\" and \"bookName\" as \"JavaScript Basics\" should be removed from the list')\ndef step_then_book_entry_should_be_removed(context):\n    table_body = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='table-body']\")\n    assert \"John Doe\" not in table_body.text\n    assert \"JavaScript Basics\" not in table_body.text\n\n@then('the display should be updated to reflect the removal')\ndef step_then_display_should_be_updated(context):\n    table_body = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='table-body']\")\n    assert \"John Doe\" not in table_body.text\n    assert \"JavaScript Basics\" not in table_body.text\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: Deleting a Book Entry from the Library List\n  The system should allow users to delete a book entry from the list and update the display accordingly.\n\n\n  Scenario: [Edge] Deleting the only book entry in the list\n    Given the \"Library Management System\" page is loaded\n    And the book list contains only one entry with \"userName\" as \"Jane Smith\" and \"bookName\" as \"Python Programming\"\n    When the user clicks the \"delete-button-0\" associated with the only book entry\n    Then the book list should be empty\n    And the display should be updated to show no entries\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the \"Library Management System\" page is loaded')\ndef step_given_page_loaded(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='navbar-brand']\"))\n    )\n    time.sleep(1)\n\n@given('the book list contains only one entry with \"userName\" as \"Jane Smith\" and \"bookName\" as \"Python Programming\"')\ndef step_given_book_list_contains_one_entry(context):\n    # Simulate adding a book entry to the list\n    user_name_input = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='user-name-input']\")\n    book_name_input = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='book-name-input']\")\n    fiction_radio = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='fiction-radio']\")\n    add_book_button = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='add-book-button']\")\n\n    user_name_input.send_keys(\"Jane Smith\")\n    book_name_input.send_keys(\"Python Programming\")\n    fiction_radio.click()\n    add_book_button.click()\n    time.sleep(1)\n\n@when('the user clicks the \"delete-button-0\" associated with the only book entry')\ndef step_when_user_clicks_delete_button(context):\n    delete_button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-id='delete-button-0']\"))\n    )\n    delete_button.click()\n    time.sleep(1)\n\n@then('the book list should be empty')\ndef step_then_book_list_should_be_empty(context):\n    table_body = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='table-body']\")\n    assert table_body.text.strip() == \"\", \"Expected the book list to be empty\"\n\n@then('the display should be updated to show no entries')\ndef step_then_display_should_show_no_entries(context):\n    table_body = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='table-body']\")\n    assert table_body.text.strip() == \"\", \"Expected the display to show no entries\"\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                }
            ]
        },
        "5": {
            "requirement": {
                "description": "Upon loading the Library Management System webpage, the system must retrieve the list of books stored in the browser's local storage and display them within the table body element identified by data-testid=\"table-body\". If local storage contains one or more entries, each book must be rendered with its full details, including serial number, date of issue, reader's name, book name, and genre. If local storage is empty, the table body should remain empty to indicate no books are currently stored. The data must be stored under the listItems key as a JSON string representing an array of objects, each with userName, bookName, and type fields. For example:\nlocalStorage.setItem('listItems', JSON.stringify([{ userName: 'John Doe', bookName: 'Python Programming', type: 'Programming' }])).\nThe system must parse and display this data as if it were submitted through the form.\n\n"
            },
            "test_cases": [
                {
                    "test_case": [
                        "Feature: Display list of books from local storage on page load\n  The system should display the list of books stored in local storage in the table body when the page loads.\n\n\n  Scenario: [Normal] Display books from local storage on page load\n    Given the local storage contains a list of books with at least one book entry\n    When the user opens the Library Management System webpage\n    Then the table body with data-testid \"table-body\" should display the list of books from local storage\n"
                    ],
                    "step_code": "from behave import given, when, thenfrom selenium import webdriverfrom selenium.webdriver.common.by import Byfrom selenium.webdriver.support.ui import WebDriverWaitfrom selenium.webdriver.support import expected_conditions as ECimport timefile_path = \"index.html\"@given('the local storage contains a list of books with at least one book entry')def step_given_local_storage_contains_books(context):    # Initialize the WebDriver    context.driver = webdriver.Chrome()    context.driver.get(f\"file://index.html\")    time.sleep(1)    # Set up local storage with at least one book entry    context.driver.execute_script(\"\"\"        localStorage.setItem('listItems', JSON.stringify([            {userName: 'John Doe', bookName: 'Python Programming', type: 'Programming'}        ]));    \"\"\")    time.sleep(1)@when('the user opens the Library Management System webpage')def step_when_user_opens_webpage(context):    # Refresh the page to ensure local storage is loaded    context.driver.refresh()    time.sleep(1)@then('the table body with data-testid \"table-body\" should display the list of books from local storage')def step_then_table_body_displays_books(context):    # Wait for the table body to be visible    table_body = WebDriverWait(context.driver, 10).until(        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='table-body']\"))    )    time.sleep(1)    # Check if the table body contains the expected book entry    table_rows = table_body.find_elements(By.TAG_NAME, \"tr\")    assert len(table_rows) > 0, \"Expected at least one book entry in the table body\"    # Validate the content of the first row    first_row_cells = table_rows[0].find_elements(By.TAG_NAME, \"td\")    assert \"John Doe\" in first_row_cells[2].text, f\"Expected 'John Doe' in '{first_row_cells[2].text}'\"    assert \"Python Programming\" in first_row_cells[3].text, f\"Expected 'Python Programming' in '{first_row_cells[3].text}'\"    assert \"Programming\" in first_row_cells[4].text, f\"Expected 'Programming' in '{first_row_cells[4].text}'\"    # Close the browser driver    context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: Display list of books from local storage on page load\n  The system should display the list of books stored in local storage in the table body when the page loads.\n\n\n  Scenario: [Edge] Display no books when local storage is empty\n    Given the local storage is empty\n    When the user opens the Library Management System webpage\n    Then the table body with data-testid \"table-body\" should be empty\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given(\"the local storage is empty\")\ndef step_given_local_storage_empty(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    context.driver.execute_script(\"localStorage.clear();\")\n    time.sleep(1)\n\n@when(\"the user opens the Library Management System webpage\")\ndef step_when_user_opens_webpage(context):\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)\n\n@then('the table body with data-testid \"table-body\" should be empty')\ndef step_then_table_body_should_be_empty(context):\n    table_body = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='table-body']\"))\n    )\n    assert table_body.text.strip() == \"\", \"Expected table body to be empty\"\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                }
            ]
        }
    }
}