
    You are tasked with implementing a complete web application using HTML, JavaScript, and CSS. Your implementation must strictly follow the specifications described below.
    SUMMARY:
    {
    "overview": "The Library Management System allows users to search for books, add new books to their personal library, and view a list of issued books. Users can also delete books from the list and receive alerts about the status of book issuance.",
    "predefined_options": "The system provides predefined options for book types, including Fiction, Programming, and Cooking, which users can select via radio buttons.",
    "external_resources": "The application uses Bootstrap for styling and layout, and jQuery for JavaScript functionality. These resources are loaded from external CDNs.",
    "external_js_libraries": "Bootstrap (https://cdn.jsdelivr.net/npm/bootstrap@4.6.1/dist/js/bootstrap.bundle.min.js), jQuery (https://cdn.jsdelivr.net/npm/jquery@3.5.1/dist/jquery.slim.min.js)"
}
    ## Functional Requirements
    Implement the following features as described. For each requirement, make sure the HTML structure, JavaScript behavior, and CSS styles match the specifications exactly.
    REQUIREMENTS:
    - Requirement 1: 
The Library Management System web application must ensure proper functionality of the navbar toggler button on small screens. When the page loads with a window size small enough to hide the navigation menu, the menu should be initially collapsed. Clicking the navbar toggler button (identified by data-testid="navbar-toggler") should expand the navigation menu (data-testid="navbarSupportedContent"), making the menu items visible. If the menu is already expanded, clicking the toggler button again should collapse it, hiding the items. 
- Requirement 2: 
The system shall allow users to add a book to the library list using the form identified by my-library-form. The form includes three fields: 'User Name' (data-testid="user-name-input"), 'Book Name' (data-testid="book-name-input"), and 'Book Type', which includes the options 'Fiction' (data-testid="fiction-radio"), 'Programming' (data-testid="programming-radio"), and 'Cooking' (data-testid="cooking-radio").Upon clicking the 'Add Book' button (data-testid="add-book-button"), the system shall validate the inputs as follows:
1. If either the 'User Name' or 'Book Name' field is empty, the system shall display an error alert with the message "Oops! Book is not issued".
2. If the entered 'Book Name' has already been issued to another user, the system shall display an error alert with the message "Oops! Book is already issued by [issuedUser]".
3. If all inputs are valid and the book has not been issued, the system shall add the entry to the list, displaying the readerâ€™s name, book name, and genre in the table. A success alert with the message "Success Book is issued" shall be shown.
The system shall also handle edge cases such as unusually long book names and ensure that the list persists across page reloads using local storage.
- Requirement 3: 
When the user clicks the 'delete-button' associated with a specific book entry in the table, the system shall remove that book from the list and update the display accordingly. Each delete button is uniquely identified by the data-id attribute in the format 'delete-button-{index}', where {index} corresponds to the position of the book in the list. Upon deletion, the system must ensure the book entry is permanently removed from both the display and local storage, and the table must be re-rendered to reflect the updated state of the book list.
- Requirement 4: 
Upon loading the Library Management System webpage, the system must retrieve the list of books stored in the browser's local storage and display them within the table body element identified by data-testid="table-body". If local storage contains one or more entries, each book must be rendered with its full details, including serial number, date of issue, reader's name, book name, and genre. If local storage is empty, the table body should remain empty to indicate no books are currently stored. The data must be stored under the listItems key as a JSON string representing an array of objects, each with userName, bookName, and type fields. For example:
localStorage.setItem('listItems', JSON.stringify([{ userName: 'John Doe', bookName: 'Python Programming', type: 'Programming' }])).
The system must parse and display this data as if it were submitted through the form.



    
    ## Output Format
    Provide a clean and complete implementation including:
    1. HTML structure (including necessary `data-testid`, `id`, and `class` values).
    2. JavaScript functionality that matches the behavior described.
    3. CSS for styling according to BEM and required class names.
    4. Ensure that the text content in the components is exactly as specified in the requirements.
    Do not include any extra components or libraries not listed above. Keep your code concise, semantic, and standards-compliant.
    