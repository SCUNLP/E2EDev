{
    "summary": {
        "overview": "The application is a car rental site named EasyRent, allowing users to select a car type, specify rental duration, calculate total rental costs, and book the car through a form submission.",
        "predefined_options": "The booking form has a default rental period of 1 day. There are three car options available for selection:\nSedan: $50 per day\nSUV: $80 per day\nConvertible: $100 per day",
        "external_resources": "None specified in the provided code.",
        "external_js_libraries": "None specified in the provided code."
    },
    "finegrained_rewith_test": {
        "1": {
            "requirement": {
                "description": "When the user clicks the 'Choose Sedan' button with data-testid 'choose-sedan-button', the system must update the 'Car Type' field with data-testid 'car-type' in the booking form to display 'Sedan'. Additionally, the 'Total Price' field with data-testid 'total-price' should be cleared. This behavior should occur regardless of any previous car selections, ensuring that the 'Car Type' field accurately reflects the latest selection and the 'Total Price' field is reset to an empty state."
            },
            "test_cases": [
                {
                    "test_case": [
                        "Feature: Update Car Type and Clear Total Price on Sedan Selection\n  The system should update the 'Car Type' field to 'Sedan' and clear the 'Total Price' field when the user selects the Sedan option.\n\n\n  Scenario: [Normal] User selects the Sedan car option\n    Given the user is on the EasyRent car selection page\n    When the user clicks the \"Choose Sedan\" button with data-testid \"choose-sedan-button\"\n    Then the \"Car Type\" field with data-testid \"car-type\" should display \"Sedan\"\n    And the \"Total Price\" field with data-testid \"total-price\" should be empty\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the user is on the EasyRent car selection page')\ndef step_given_user_on_car_selection_page(context):\n    # Initialize the WebDriver and load the test page\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    context.driver.maximize_window()\n    time.sleep(1)  # Allow the page to load completely\n\n@when('the user clicks the \"Choose Sedan\" button with data-testid \"choose-sedan-button\"')\ndef step_when_user_clicks_choose_sedan_button(context):\n    # Wait for the \"Choose Sedan\" button to be clickable and click it\n    sedan_button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='choose-sedan-button']\"))\n    )\n    sedan_button.click()\n    time.sleep(1)  # Allow the action to complete\n\n@then('the \"Car Type\" field with data-testid \"car-type\" should display \"Sedan\"')\ndef step_then_car_type_field_displays_sedan(context):\n    # Wait for the \"Car Type\" field to be updated and verify its value\n    car_type_field = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='car-type']\"))\n    )\n    car_type_value = car_type_field.get_attribute(\"value\")\n    assert car_type_value == \"Sedan\", f\"Expected 'Sedan', but got '{car_type_value}'\"\n\n@then('the \"Total Price\" field with data-testid \"total-price\" should be empty')\ndef step_then_total_price_field_is_empty(context):\n    # Wait for the \"Total Price\" field to be updated and verify it is empty\n    total_price_field = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='total-price']\"))\n    )\n    total_price_value = total_price_field.get_attribute(\"value\")\n    assert total_price_value == \"\", f\"Expected an empty 'Total Price' field, but got '{total_price_value}'\"\n\ndef after_scenario(context, scenario):\n    # Close the browser after each scenario\n    if hasattr(context, 'driver'):\n        context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: Update Car Type and Clear Total Price on Sedan Selection\n  The system should update the 'Car Type' field to 'Sedan' and clear the 'Total Price' field when the user selects the Sedan option.\n\n\n  Scenario: [Edge] User selects the Sedan car option after selecting another car\n    Given the user is on the EasyRent car selection page\n    And the user clicks the \"Choose SUV\" button with data-testid \"choose-suv-button\"\n    When the user clicks the \"Choose Sedan\" button with data-testid \"choose-sedan-button\"\n    Then the \"Car Type\" field with data-testid \"car-type\" should display \"Sedan\"\n    And the \"Total Price\" field with data-testid \"total-price\" should be empty\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the user is on the EasyRent car selection page')\ndef step_given_user_on_car_selection_page(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)\n\n@given('the user clicks the \"Choose SUV\" button with data-testid \"choose-suv-button\"')\ndef step_given_user_clicks_choose_suv_button(context):\n    suv_button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='choose-suv-button']\"))\n    )\n    suv_button.click()\n    time.sleep(1)\n\n@when('the user clicks the \"Choose Sedan\" button with data-testid \"choose-sedan-button\"')\ndef step_when_user_clicks_choose_sedan_button(context):\n    sedan_button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='choose-sedan-button']\"))\n    )\n    sedan_button.click()\n    time.sleep(1)\n\n@then('the \"Car Type\" field with data-testid \"car-type\" should display \"Sedan\"')\ndef step_then_car_type_should_display_sedan(context):\n    car_type_field = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='car-type']\"))\n    )\n    assert car_type_field.get_attribute(\"value\") == \"Sedan\", f\"Expected 'Sedan', but got '{car_type_field.get_attribute('value')}'\"\n\n@then('the \"Total Price\" field with data-testid \"total-price\" should be empty')\ndef step_then_total_price_should_be_empty(context):\n    total_price_field = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='total-price']\"))\n    )\n    assert total_price_field.get_attribute(\"value\") == \"\", f\"Expected empty total price, but got '{total_price_field.get_attribute('value')}'\"\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                }
            ]
        },
        "2": {
            "requirement": {
                "description": "When the user interacts with the car selection section on the EasyRent page, specifically by clicking the 'Choose SUV' button identified by the data-testid 'choose-suv-button', the system must update the 'Car Type' input field, identified by the data-testid 'car-type', within the booking form to display 'SUV'. Additionally, the system should clear any existing value in the 'Total Price' input field, identified by the data-testid 'total-price'. This behavior should occur regardless of any prior car selection, ensuring that the 'Total Price' field is reset to an empty state upon each new car selection."
            },
            "test_cases": [
                {
                    "test_case": [
                        "Feature: Update Car Type and Clear Total Price on SUV Selection\n  The system should update the 'Car Type' field to 'SUV' and clear the 'Total Price' field when the user selects the SUV.\n\n\n  Scenario: [Normal] User selects SUV and fields update correctly\n    Given the user is on the EasyRent car selection page\n    When the user clicks the \"Choose SUV\" button with data-testid \"choose-suv-button\"\n    Then the \"Car Type\" field with data-testid \"car-type\" should display \"SUV\"\n    And the \"Total Price\" field with data-testid \"total-price\" should be empty\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the user is on the EasyRent car selection page')\ndef step_given_user_on_car_selection_page(context):\n    # Initialize the WebDriver and navigate to the test page\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    context.driver.maximize_window()\n    time.sleep(1)  # Allow the page to load completely\n\n@when('the user clicks the \"Choose SUV\" button with data-testid \"choose-suv-button\"')\ndef step_when_user_clicks_choose_suv_button(context):\n    # Wait for the SUV button to be clickable and click it\n    suv_button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='choose-suv-button']\"))\n    )\n    suv_button.click()\n    time.sleep(1)  # Allow the interaction to process\n\n@then('the \"Car Type\" field with data-testid \"car-type\" should display \"SUV\"')\ndef step_then_car_type_field_displays_suv(context):\n    # Wait for the \"Car Type\" field to be updated and verify its value\n    car_type_field = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='car-type']\"))\n    )\n    car_type_value = car_type_field.get_attribute(\"value\")\n    assert car_type_value == \"SUV\", f\"Expected 'SUV', but got '{car_type_value}'\"\n\n@then('the \"Total Price\" field with data-testid \"total-price\" should be empty')\ndef step_then_total_price_field_is_empty(context):\n    # Wait for the \"Total Price\" field to be updated and verify it is empty\n    total_price_field = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='total-price']\"))\n    )\n    total_price_value = total_price_field.get_attribute(\"value\")\n    assert total_price_value == \"\", f\"Expected empty 'Total Price', but got '{total_price_value}'\"\n\ndef after_scenario(context, scenario):\n    # Close the browser after each scenario\n    if hasattr(context, 'driver'):\n        context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: Update Car Type and Clear Total Price on SUV Selection\n  The system should update the 'Car Type' field to 'SUV' and clear the 'Total Price' field when the user selects the SUV.\n\n\n  Scenario: [Edge] User selects SUV after selecting another car\n    Given the user is on the EasyRent car selection page\n    And the user clicks the \"Choose Sedan\" button with data-testid \"choose-sedan-button\"\n    And the \"Car Type\" field with data-testid \"car-type\" displays \"Sedan\"\n    When the user clicks the \"Choose SUV\" button with data-testid \"choose-suv-button\"\n    Then the \"Car Type\" field with data-testid \"car-type\" should display \"SUV\"\n    And the \"Total Price\" field with data-testid \"total-price\" should be empty\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the user is on the EasyRent car selection page')\ndef step_user_on_car_selection_page(context):\n    # Initialize the WebDriver and load the test page\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    context.driver.maximize_window()\n    time.sleep(1)  # Allow the page to load completely\n\n@given('the user clicks the \"Choose Sedan\" button with data-testid \"choose-sedan-button\"')\ndef step_user_clicks_choose_sedan(context):\n    # Locate and click the \"Choose Sedan\" button\n    sedan_button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='choose-sedan-button']\"))\n    )\n    sedan_button.click()\n    time.sleep(1)  # Allow the interaction to process\n\n@given('the \"Car Type\" field with data-testid \"car-type\" displays \"Sedan\"')\ndef step_car_type_displays_sedan(context):\n    # Verify that the \"Car Type\" field displays \"Sedan\"\n    car_type_field = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='car-type']\"))\n    )\n    assert car_type_field.get_attribute(\"value\") == \"Sedan\", \\\n        f\"Expected 'Sedan', but got '{car_type_field.get_attribute('value')}'\"\n\n@when('the user clicks the \"Choose SUV\" button with data-testid \"choose-suv-button\"')\ndef step_user_clicks_choose_suv(context):\n    # Locate and click the \"Choose SUV\" button\n    suv_button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='choose-suv-button']\"))\n    )\n    suv_button.click()\n    time.sleep(1)  # Allow the interaction to process\n\n@then('the \"Car Type\" field with data-testid \"car-type\" should display \"SUV\"')\ndef step_car_type_displays_suv(context):\n    # Verify that the \"Car Type\" field displays \"SUV\"\n    car_type_field = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='car-type']\"))\n    )\n    assert car_type_field.get_attribute(\"value\") == \"SUV\", \\\n        f\"Expected 'SUV', but got '{car_type_field.get_attribute('value')}'\"\n\n@then('the \"Total Price\" field with data-testid \"total-price\" should be empty')\ndef step_total_price_is_empty(context):\n    # Verify that the \"Total Price\" field is empty\n    total_price_field = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='total-price']\"))\n    )\n    assert total_price_field.get_attribute(\"value\") == \"\", \\\n        f\"Expected an empty 'Total Price' field, but got '{total_price_field.get_attribute('value')}'\"\n\ndef after_scenario(context, scenario):\n    # Close the browser after each scenario\n    if hasattr(context, 'driver'):\n        context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: Update Car Type and Clear Total Price on SUV Selection\n  The system should update the 'Car Type' field to 'SUV' and clear the 'Total Price' field when the user selects the SUV.\n\n\n  Scenario: [Error] User clicks 'Choose SUV' without any prior selection\n    Given the user is on the EasyRent car selection page\n    When the user clicks the \"Choose SUV\" button with data-testid \"choose-suv-button\"\n    Then the \"Car Type\" field with data-testid \"car-type\" should display \"SUV\"\n    And the \"Total Price\" field with data-testid \"total-price\" should be empty"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the user is on the EasyRent car selection page')\ndef step_given_user_on_car_selection_page(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)\n\n@when('the user clicks the \"Choose SUV\" button with data-testid \"choose-suv-button\"')\ndef step_when_user_clicks_choose_suv_button(context):\n    suv_button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='choose-suv-button']\"))\n    )\n    suv_button.click()\n    time.sleep(1)\n\n@then('the \"Car Type\" field with data-testid \"car-type\" should display \"SUV\"')\ndef step_then_car_type_field_should_display_suv(context):\n    car_type_field = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='car-type']\"))\n    )\n    car_type_value = car_type_field.get_attribute(\"value\")\n    assert car_type_value == \"SUV\", f\"Expected 'SUV', but got '{car_type_value}'\"\n\n@then('the \"Total Price\" field with data-testid \"total-price\" should be empty')\ndef step_then_total_price_field_should_be_empty(context):\n    total_price_field = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='total-price']\"))\n    )\n    total_price_value = total_price_field.get_attribute(\"value\")\n    assert total_price_value == \"\", f\"Expected empty total price, but got '{total_price_value}'\"\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                }
            ]
        },
        "3": {
            "requirement": {
                "description": "When the user clicks the 'Choose Convertible' button with the attribute data-testid='choose-convertible-button', the system must update the 'Car Type' field, identified by data-testid='car-type', in the booking form to display 'Convertible'. Additionally, the 'Total Price' field, identified by data-testid='total-price', should be cleared and display an empty value. This functionality should work regardless of any previous car selections, ensuring that the 'Car Type' field accurately reflects the latest selection and the 'Total Price' field is reset. The system should handle scenarios where the user selects the Convertible car after previously selecting another car, ensuring the fields are updated correctly."
            },
            "test_cases": [
                {
                    "test_case": [
                        "Feature: Update Car Type and Clear Total Price on Convertible Selection\n  The system should update the 'Car Type' field to 'Convertible' and clear the 'Total Price' field when the user selects the Convertible car.\n\n\n  Scenario: [Normal] User selects Convertible car\n    Given the EasyRent car rental page is loaded\n    When the user clicks the 'Choose Convertible' button with data-testid 'choose-convertible-button'\n    Then the 'Car Type' field with data-testid 'car-type' should display 'Convertible'\n    And the 'Total Price' field with data-testid 'total-price' should be empty\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the EasyRent car rental page is loaded')\ndef step_given_page_loaded(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='car-selection']\"))\n    )\n    time.sleep(1)\n\n@when(\"the user clicks the 'Choose Convertible' button with data-testid 'choose-convertible-button'\")\ndef step_when_click_choose_convertible(context):\n    convertible_button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='choose-convertible-button']\"))\n    )\n    convertible_button.click()\n    time.sleep(1)\n\n@then(\"the 'Car Type' field with data-testid 'car-type' should display 'Convertible'\")\ndef step_then_car_type_display_convertible(context):\n    car_type_field = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='car-type']\"))\n    )\n    car_type_value = car_type_field.get_attribute(\"value\")\n    assert car_type_value == \"Convertible\", f\"Expected 'Convertible', but got '{car_type_value}'\"\n    time.sleep(1)\n\n@then(\"the 'Total Price' field with data-testid 'total-price' should be empty\")\ndef step_then_total_price_empty(context):\n    total_price_field = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='total-price']\"))\n    )\n    total_price_value = total_price_field.get_attribute(\"value\")\n    assert total_price_value == \"\", f\"Expected empty total price, but got '{total_price_value}'\"\n    time.sleep(1)\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: Update Car Type and Clear Total Price on Convertible Selection\n  The system should update the 'Car Type' field to 'Convertible' and clear the 'Total Price' field when the user selects the Convertible car.\n\n\n  Scenario: [Edge] User selects Convertible car after selecting another car\n    Given the EasyRent car rental page is loaded\n    And the user clicks the 'Choose Sedan' button with data-testid 'choose-sedan-button'\n    When the user clicks the 'Choose Convertible' button with data-testid 'choose-convertible-button'\n    Then the 'Car Type' field with data-testid 'car-type' should display 'Convertible'\n    And the 'Total Price' field with data-testid 'total-price' should be empty\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the EasyRent car rental page is loaded')\ndef step_given_page_loaded(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)  # Allow time for the page to load\n\n@given('the user clicks the \\'Choose Sedan\\' button with data-testid \\'choose-sedan-button\\'')\ndef step_given_click_choose_sedan(context):\n    sedan_button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='choose-sedan-button']\"))\n    )\n    sedan_button.click()\n    time.sleep(1)  # Allow time for the interaction to complete\n\n@when('the user clicks the \\'Choose Convertible\\' button with data-testid \\'choose-convertible-button\\'')\ndef step_when_click_choose_convertible(context):\n    convertible_button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='choose-convertible-button']\"))\n    )\n    convertible_button.click()\n    time.sleep(1)  # Allow time for the interaction to complete\n\n@then('the \\'Car Type\\' field with data-testid \\'car-type\\' should display \\'Convertible\\'')\ndef step_then_car_type_display_convertible(context):\n    car_type_field = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='car-type']\"))\n    )\n    assert car_type_field.get_attribute('value') == 'Convertible', \\\n        f\"Expected 'Convertible', but got '{car_type_field.get_attribute('value')}'\"\n\n@then('the \\'Total Price\\' field with data-testid \\'total-price\\' should be empty')\ndef step_then_total_price_empty(context):\n    total_price_field = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='total-price']\"))\n    )\n    assert total_price_field.get_attribute('value') == '', \\\n        f\"Expected total price to be empty, but got '{total_price_field.get_attribute('value')}'\"\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: Update Car Type and Clear Total Price on Convertible Selection\n  The system should update the 'Car Type' field to 'Convertible' and clear the 'Total Price' field when the user selects the Convertible car.\n\n\n  Scenario: [Error] User clicks 'Choose Convertible' without selecting any car first\n    Given the EasyRent car rental page is loaded\n    When the user clicks the 'Choose Convertible' button with data-testid 'choose-convertible-button'\n    Then the 'Car Type' field with data-testid 'car-type' should display 'Convertible'\n    And the 'Total Price' field with data-testid 'total-price' should be empty"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the EasyRent car rental page is loaded')\ndef step_given_page_is_loaded(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)  # Allow time for the page to load\n\n@when(\"the user clicks the 'Choose Convertible' button with data-testid 'choose-convertible-button'\")\ndef step_when_user_clicks_choose_convertible(context):\n    convertible_button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='choose-convertible-button']\"))\n    )\n    convertible_button.click()\n    time.sleep(1)  # Allow time for the action to be processed\n\n@then(\"the 'Car Type' field with data-testid 'car-type' should display 'Convertible'\")\ndef step_then_car_type_should_display_convertible(context):\n    car_type_field = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='car-type']\"))\n    )\n    assert car_type_field.get_attribute(\"value\") == \"Convertible\", \\\n        f\"Expected 'Convertible', but got '{car_type_field.get_attribute('value')}'\"\n\n@then(\"the 'Total Price' field with data-testid 'total-price' should be empty\")\ndef step_then_total_price_should_be_empty(context):\n    total_price_field = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='total-price']\"))\n    )\n    assert total_price_field.get_attribute(\"value\") == \"\", \\\n        f\"Expected empty total price, but got '{total_price_field.get_attribute('value')}'\"\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                }
            ]
        },
        "4": {
            "requirement": {
                "description": "The system should allow users to calculate the total rental price for a selected car model by interacting with the UI elements on the EasyRent car rental page. Users can select a car model (Sedan, SUV, or Convertible) by clicking the respective button with data-testid attributes 'choose-sedan-button', 'choose-suv-button', or 'choose-convertible-button'. Upon selection, the car type is displayed in the 'Car Type' field with data-testid 'car-type', and the 'Total Price' field with data-testid 'total-price' is cleared. Users must enter a valid number of rental days (minimum 1) in the 'Number of Days' field with data-testid 'rental-days'. When the 'Calculate Total' button with data-testid 'calculate-total-button' is clicked, the system calculates the total price by multiplying the number of days by the selected car's price per day. The calculated total is then displayed in the 'Total Price' field. If no car is selected or the number of days is invalid (e.g., zero or not entered), an alert prompts the user to select a car and enter a valid number of days. The system should handle edge cases, such as maximum integer values for days, and ensure the total price is accurately calculated and displayed."
            },
            "test_cases": [
                {
                    "test_case": [
                        "Feature: Calculate Total Rental Price\n  The system should calculate the total price based on the selected car's price per day and update the 'Total Price' field when the user enters a number in the 'Number of Days' field and clicks the 'Calculate Total' button.\n\n\n  Scenario: [Normal] Calculate total price for a selected car\n    Given the user is on the EasyRent car rental page\n    And the user selects \"Sedan\" by clicking the button with data-testid \"choose-sedan-button\"\n    And the user enters \"3\" into the 'Number of Days' field with data-testid \"rental-days\"\n    When the user clicks the 'Calculate Total' button with data-testid \"calculate-total-button\"\n    Then the 'Total Price' field with data-testid \"total-price\" should display \"$150\"\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the user is on the EasyRent car rental page')\ndef step_given_user_on_car_rental_page(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)\n\n@given('the user selects \"Sedan\" by clicking the button with data-testid \"choose-sedan-button\"')\ndef step_given_user_selects_sedan(context):\n    sedan_button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='choose-sedan-button']\"))\n    )\n    sedan_button.click()\n    time.sleep(1)\n\n@given('the user enters \"3\" into the \\'Number of Days\\' field with data-testid \"rental-days\"')\ndef step_given_user_enters_number_of_days(context):\n    rental_days_input = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='rental-days']\"))\n    )\n    rental_days_input.clear()\n    rental_days_input.send_keys(\"3\")\n    time.sleep(1)\n\n@when('the user clicks the \\'Calculate Total\\' button with data-testid \"calculate-total-button\"')\ndef step_when_user_clicks_calculate_total(context):\n    calculate_total_button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='calculate-total-button']\"))\n    )\n    calculate_total_button.click()\n    time.sleep(1)\n\n@then('the \\'Total Price\\' field with data-testid \"total-price\" should display \"$150\"')\ndef step_then_total_price_should_display(context):\n    total_price_input = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='total-price']\"))\n    )\n    expected_price = \"$150\"\n    actual_price = total_price_input.get_attribute(\"value\").strip()\n    assert expected_price == actual_price, f\"Expected '{expected_price}', but got '{actual_price}'\"\n    time.sleep(1)\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: Calculate Total Rental Price\n  The system should calculate the total price based on the selected car's price per day and update the 'Total Price' field when the user enters a number in the 'Number of Days' field and clicks the 'Calculate Total' button.\n\n\n  Scenario: [Edge] Calculate total price for zero days\n    Given the user is on the EasyRent car rental page\n    And the user selects \"SUV\" by clicking the button with data-testid \"choose-suv-button\"\n    And the user enters \"0\" into the 'Number of Days' field with data-testid \"rental-days\"\n    When the user clicks the 'Calculate Total' button with data-testid \"calculate-total-button\"\n    Then an alert should be displayed with the message \"Please select a car and enter the number of days.\"\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the user is on the EasyRent car rental page')\ndef step_given_user_on_car_rental_page(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)\n\n@given('the user selects \"SUV\" by clicking the button with data-testid \"choose-suv-button\"')\ndef step_given_user_selects_suv(context):\n    suv_button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='choose-suv-button']\"))\n    )\n    suv_button.click()\n    time.sleep(1)\n\n@given('the user enters \"0\" into the \\'Number of Days\\' field with data-testid \"rental-days\"')\ndef step_given_user_enters_zero_days(context):\n    rental_days_input = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='rental-days']\"))\n    )\n    rental_days_input.clear()\n    rental_days_input.send_keys(\"0\")\n    time.sleep(1)\n\n@when('the user clicks the \\'Calculate Total\\' button with data-testid \"calculate-total-button\"')\ndef step_when_user_clicks_calculate_total(context):\n    calculate_button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='calculate-total-button']\"))\n    )\n    calculate_button.click()\n    time.sleep(1)\n\n@then('an alert should be displayed with the message \"Please select a car and enter the number of days.\"')\ndef step_then_alert_displayed(context):\n    WebDriverWait(context.driver, 10).until(EC.alert_is_present())\n    alert = context.driver.switch_to.alert\n    assert \"Please select a car and enter the number of days.\" in alert.text\n    alert.accept()\n    time.sleep(1)\n    context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: Calculate Total Rental Price\n  The system should calculate the total price based on the selected car's price per day and update the 'Total Price' field when the user enters a number in the 'Number of Days' field and clicks the 'Calculate Total' button.\n\n\n  Scenario: [Edge] Calculate total price for maximum integer days\n    Given the user is on the EasyRent car rental page\n    And the user selects \"Convertible\" by clicking the button with data-testid \"choose-convertible-button\"\n    And the user enters \"2147483647\" into the 'Number of Days' field with data-testid \"rental-days\"\n    When the user clicks the 'Calculate Total' button with data-testid \"calculate-total-button\"\n    Then the 'Total Price' field with data-testid \"total-price\" should display \"$214748364700\"\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the user is on the EasyRent car rental page')\ndef step_given_user_on_car_rental_page(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)\n\n@given('the user selects \"Convertible\" by clicking the button with data-testid \"choose-convertible-button\"')\ndef step_given_user_selects_convertible(context):\n    convertible_button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='choose-convertible-button']\"))\n    )\n    convertible_button.click()\n    time.sleep(1)\n\n@given('the user enters \"2147483647\" into the \\'Number of Days\\' field with data-testid \"rental-days\"')\ndef step_given_user_enters_number_of_days(context):\n    rental_days_input = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='rental-days']\"))\n    )\n    rental_days_input.clear()\n    rental_days_input.send_keys(\"2147483647\")\n    time.sleep(1)\n\n@when('the user clicks the \\'Calculate Total\\' button with data-testid \"calculate-total-button\"')\ndef step_when_user_clicks_calculate_total(context):\n    calculate_total_button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='calculate-total-button']\"))\n    )\n    calculate_total_button.click()\n    time.sleep(1)\n\n@then('the \\'Total Price\\' field with data-testid \"total-price\" should display \"$214748364700\"')\ndef step_then_total_price_should_display(context):\n    total_price_input = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='total-price']\"))\n    )\n    expected_price = \"$214748364700\"\n    actual_price = total_price_input.get_attribute(\"value\").strip()\n    assert expected_price == actual_price, f\"Expected '{expected_price}', but got '{actual_price}'\"\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: Calculate Total Rental Price\n  The system should calculate the total price based on the selected car's price per day and update the 'Total Price' field when the user enters a number in the 'Number of Days' field and clicks the 'Calculate Total' button.\n\n\n  Scenario: [Error] Calculate total price without selecting a car\n    Given the user is on the EasyRent car rental page\n    And the user enters \"5\" into the 'Number of Days' field with data-testid \"rental-days\"\n    When the user clicks the 'Calculate Total' button with data-testid \"calculate-total-button\"\n    Then an alert should be displayed with the message \"Please select a car and enter the number of days.\"\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the user is on the EasyRent car rental page')\ndef step_given_user_on_car_rental_page(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)\n\n@given('the user enters \"{days}\" into the \\'Number of Days\\' field with data-testid \"rental-days\"')\ndef step_given_user_enters_days(context, days):\n    rental_days_input = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='rental-days']\"))\n    )\n    rental_days_input.clear()\n    rental_days_input.send_keys(days)\n    time.sleep(1)\n\n@when('the user clicks the \\'Calculate Total\\' button with data-testid \"calculate-total-button\"')\ndef step_when_user_clicks_calculate_total(context):\n    calculate_button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='calculate-total-button']\"))\n    )\n    calculate_button.click()\n    time.sleep(1)\n\n@then('an alert should be displayed with the message \"Please select a car and enter the number of days.\"')\ndef step_then_alert_displayed(context):\n    WebDriverWait(context.driver, 10).until(EC.alert_is_present())\n    alert = context.driver.switch_to.alert\n    assert \"Please select a car and enter the number of days.\" in alert.text\n    alert.accept()\n    time.sleep(1)\n    context.driver.quit()"
                }
            ]
        },
        "6": {
            "requirement": {
                "description": "The web application must ensure that users can only submit the booking form successfully when both a car is selected and the total price is calculated. The user interface includes a 'Book Now' button with the attribute data-testid='book-now-button' that triggers form submission. The car selection is made via buttons with data-testid attributes such as 'choose-sedan-button', 'choose-suv-button', and 'choose-convertible-button', which update the car type input field (data-testid='car-type') and clear the total price field (data-testid='total-price'). Users must input the number of rental days in the field with data-testid='rental-days', and click the 'Calculate Total' button (data-testid='calculate-total-button') to compute the total price, which is displayed in the total price field. If the user attempts to submit the form without selecting a car or calculating the total price, the system must prevent submission and display an alert with the message 'Please select a car and calculate the total price before booking.' Conversely, if both conditions are met, an alert confirming the booking, such as 'Your [Car Type] rental has been booked!', should be displayed. The form submission is handled by an event listener on the form with data-testid='rental-form'."
            },
            "test_cases": [
                {
                    "test_case": [
                        "Feature: Booking Form Submission Validation\n  The system should prevent form submission if no car is selected or if the total price is not calculated, and alert the user to select a car and calculate the total price.\n\n\n  Scenario: [Normal] Successful form submission with car selected and total price calculated\n    Given the user is on the \"Car Rental Site\" page\n    And the user clicks the \"Choose Sedan\" button with data-testid \"choose-sedan-button\"\n    And the user enters \"3\" into the number of days field with data-testid \"rental-days\"\n    And the user clicks the \"Calculate Total\" button with data-testid \"calculate-total-button\"\n    When the user clicks the \"Book Now\" button with data-testid \"book-now-button\"\n    Then an alert should display with the message \"Your Sedan rental has been booked!\"\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\ndef is_alert_present(driver):\n    try:\n        WebDriverWait(driver, 3).until(EC.alert_is_present())\n        return True\n    except:\n        return False\n\n@given('the user is on the \"Car Rental Site\" page')\ndef step_given_user_on_car_rental_site_page(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)\n\n@given('the user clicks the \"Choose Sedan\" button with data-testid \"choose-sedan-button\"')\ndef step_given_user_clicks_choose_sedan_button(context):\n    sedan_button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='choose-sedan-button']\"))\n    )\n    sedan_button.click()\n    time.sleep(1)\n\n@given('the user enters \"3\" into the number of days field with data-testid \"rental-days\"')\ndef step_given_user_enters_number_of_days(context):\n    rental_days_input = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='rental-days']\"))\n    )\n    rental_days_input.clear()\n    rental_days_input.send_keys(\"3\")\n    time.sleep(1)\n\n@given('the user clicks the \"Calculate Total\" button with data-testid \"calculate-total-button\"')\ndef step_given_user_clicks_calculate_total_button(context):\n    calculate_total_button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='calculate-total-button']\"))\n    )\n    calculate_total_button.click()\n    time.sleep(1)\n\n@when('the user clicks the \"Book Now\" button with data-testid \"book-now-button\"')\ndef step_when_user_clicks_book_now_button(context):\n    book_now_button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='book-now-button']\"))\n    )\n    book_now_button.click()\n    time.sleep(1)\n\n@then('an alert should display with the message \"Your Sedan rental has been booked!\"')\ndef step_then_alert_should_display_message(context):\n    assert is_alert_present(context.driver), \"Expected alert not present\"\n    alert = context.driver.switch_to.alert\n    assert \"Your Sedan rental has been booked!\" in alert.text, f\"Unexpected alert message: {alert.text}\"\n    alert.accept()\n    time.sleep(1)\n    context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: Booking Form Submission Validation\n  The system should prevent form submission if no car is selected or if the total price is not calculated, and alert the user to select a car and calculate the total price.\n\n\n  Scenario: [Edge] Attempt to submit form without selecting a car\n    Given the user is on the \"Car Rental Site\" page\n    And the user enters \"2\" into the number of days field with data-testid \"rental-days\"\n    When the user clicks the \"Book Now\" button with data-testid \"book-now-button\"\n    Then an alert should display with the message \"Please select a car and calculate the total price before booking.\"\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.common.alert import Alert\nimport time\n\nfile_path = \"index.html\"\n\n@given(u'the user is on the \"Car Rental Site\" page')\ndef step_impl(context):\n    context.driver = webdriver.Chrome()  # Initialize the WebDriver\n    context.driver.get(f'file://index.html')  # Navigate to the test page\n\n@given(u'the user enters \"2\" into the number of days field with data-testid \"rental-days\"')\ndef step_impl(context):\n    rental_days_input = context.driver.find_element(By.CSS_SELECTOR, '[data-testid=\"rental-days\"]')\n    rental_days_input.clear()  # Clear any existing value\n    rental_days_input.send_keys(\"2\")  # Enter the number of days\n\n@given(u'the user clicks the \"Calculate Total\" button with data-testid \"calculate-total-button\"')\ndef step_impl(context):\n    calculate_button = context.driver.find_element(By.CSS_SELECTOR, '[data-testid=\"calculate-total-button\"]')\n    calculate_button.click()  # Click the calculate total button\n\n@when(u'the user clicks the \"Book Now\" button with data-testid \"book-now-button\"')\ndef step_impl(context):\n    book_now_button = context.driver.find_element(By.CSS_SELECTOR, '[data-testid=\"book-now-button\"]')\n    book_now_button.click()  # Click the book now button\n\n@then(u'an alert should display with the message \"Please select a car and calculate the total price before booking.\"')\ndef step_impl(context):\n    alert = Alert(context.driver)\n    time.sleep(1)  # Wait for the alert to appear\n    alert_text = alert.text\n    assert alert_text == \"Please select a car and calculate the total price before booking.\", f\"Unexpected alert message: {alert_text}\"\n    alert.accept()  # Accept the alert\n    context.driver.quit()  # Close the browser"
                },
                {
                    "test_case": [
                        "Feature: Booking Form Submission Validation\n  The system should prevent form submission if no car is selected or if the total price is not calculated, and alert the user to select a car and calculate the total price.\n\n\n  Scenario: [Edge] Attempt to submit form without calculating total price\n    Given the user is on the \"Car Rental Site\" page\n    And the user clicks the \"Choose SUV\" button with data-testid \"choose-suv-button\"\n    And the user enters \"5\" into the number of days field with data-testid \"rental-days\"\n    When the user clicks the \"Book Now\" button with data-testid \"book-now-button\"\n    Then an alert should display with the message \"Please select a car and calculate the total price before booking.\"\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the user is on the \"Car Rental Site\" page')\ndef step_given_user_on_car_rental_site_page(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)\n\n@given('the user clicks the \"Choose SUV\" button with data-testid \"choose-suv-button\"')\ndef step_given_user_clicks_choose_suv_button(context):\n    suv_button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='choose-suv-button']\"))\n    )\n    suv_button.click()\n    time.sleep(1)\n\n@given('the user enters \"5\" into the number of days field with data-testid \"rental-days\"')\ndef step_given_user_enters_number_of_days(context):\n    rental_days_input = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='rental-days']\"))\n    )\n    rental_days_input.clear()\n    rental_days_input.send_keys(\"5\")\n    time.sleep(1)\n\n@when('the user clicks the \"Book Now\" button with data-testid \"book-now-button\"')\ndef step_when_user_clicks_book_now_button(context):\n    book_now_button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='book-now-button']\"))\n    )\n    book_now_button.click()\n    time.sleep(1)\n\n@then('an alert should display with the message \"Please select a car and calculate the total price before booking.\"')\ndef step_then_alert_should_display(context):\n    alert = WebDriverWait(context.driver, 10).until(EC.alert_is_present())\n    alert_text = alert.text\n    expected_message = \"Please select a car and calculate the total price before booking.\"\n    assert expected_message in alert_text, f\"Expected alert message '{expected_message}', but got '{alert_text}'\"\n    alert.accept()\n    time.sleep(1)\n    context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: Booking Form Submission Validation\n  The system should prevent form submission if no car is selected or if the total price is not calculated, and alert the user to select a car and calculate the total price.\n\n\n  Scenario: [Error] Attempt to submit form with no car selected and no total price calculated\n    Given the user is on the \"Car Rental Site\" page\n    When the user clicks the \"Book Now\" button with data-testid \"book-now-button\"\n    Then an alert should display with the message \"Please select a car and calculate the total price before booking.\""
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the user is on the \"Car Rental Site\" page')\ndef step_given_user_on_car_rental_site(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)  # Allow time for the page to load\n\n@when('the user clicks the \"Book Now\" button with data-testid \"book-now-button\"')\ndef step_when_user_clicks_book_now(context):\n    book_now_button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='book-now-button']\"))\n    )\n    book_now_button.click()\n    time.sleep(1)  # Allow time for any alert to appear\n\n@then('an alert should display with the message \"Please select a car and calculate the total price before booking.\"')\ndef step_then_alert_should_display(context):\n    alert = WebDriverWait(context.driver, 10).until(EC.alert_is_present())\n    alert_text = alert.text\n    assert alert_text == \"Please select a car and calculate the total price before booking.\", f\"Unexpected alert message: {alert_text}\"\n    alert.accept()  # Close the alert\n    time.sleep(1)  # Allow time for the alert to close\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                }
            ]
        },
        "7": {
            "requirement": {
                "description": "The web application must allow users to book a car rental through a structured process involving car selection, rental duration input, and total price calculation. The user interface should include a section with data-testid 'car-selection' containing buttons for selecting different car types ('Sedan', 'SUV', 'Convertible'), each with a corresponding price per day. Upon selection, the car type should be displayed in a readonly input field with data-testid 'car-type'. Users must input the number of rental days in a field with data-testid 'rental-days', which accepts a minimum value of 1. A button with data-testid 'calculate-total-button' should be available to compute the total rental price, displayed in a readonly field with data-testid 'total-price'. The 'Book Now' button, identified by data-testid 'book-now-button', should submit the form only if a car type is selected and the total price is calculated. Upon successful submission, the system must trigger an alert with a confirmation message, such as 'Your [Car Type] rental has been booked!', ensuring all conditions are met before booking. The booking form should prevent submission if any conditions are unmet, alerting the user to select a car and calculate the total price."
            },
            "test_cases": [
                {
                    "test_case": [
                        "Feature: Booking Confirmation Alert\n  The system should alert the user with a confirmation message when the booking form is submitted with all conditions met.\n\n\n  Scenario: [Normal] User successfully books a car rental\n    Given the user is on the \"Car Rental Site\" page\n    And the user selects \"SUV\" by clicking the button with data-testid \"choose-suv-button\"\n    And the user enters \"3\" into the number of days field with data-testid \"rental-days\"\n    And the user clicks the button with data-testid \"calculate-total-button\"\n    When the user clicks the \"Book Now\" button with data-testid \"book-now-button\"\n    Then the system should alert \"Your SUV rental has been booked!\"\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the user is on the \"Car Rental Site\" page')\ndef step_given_user_on_car_rental_site_page(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)\n\n@given('the user selects \"SUV\" by clicking the button with data-testid \"choose-suv-button\"')\ndef step_given_user_selects_suv(context):\n    suv_button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='choose-suv-button']\"))\n    )\n    suv_button.click()\n    time.sleep(1)\n\n@given('the user enters \"3\" into the number of days field with data-testid \"rental-days\"')\ndef step_given_user_enters_number_of_days(context):\n    rental_days_input = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='rental-days']\"))\n    )\n    rental_days_input.clear()\n    rental_days_input.send_keys(\"3\")\n    time.sleep(1)\n\n@given('the user clicks the button with data-testid \"calculate-total-button\"')\ndef step_given_user_clicks_calculate_total(context):\n    calculate_total_button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='calculate-total-button']\"))\n    )\n    calculate_total_button.click()\n    time.sleep(1)\n\n@when('the user clicks the \"Book Now\" button with data-testid \"book-now-button\"')\ndef step_when_user_clicks_book_now(context):\n    book_now_button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='book-now-button']\"))\n    )\n    book_now_button.click()\n    time.sleep(1)\n\n@then('the system should alert \"Your SUV rental has been booked!\"')\ndef step_then_system_should_alert(context):\n    alert = WebDriverWait(context.driver, 10).until(EC.alert_is_present())\n    alert_text = alert.text\n    expected_alert_text = \"Your SUV rental has been booked!\"\n    assert expected_alert_text in alert_text, f\"Expected alert text '{expected_alert_text}', but got '{alert_text}'\"\n    alert.accept()\n    time.sleep(1)\n    context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: Booking Confirmation Alert\n  The system should alert the user with a confirmation message when the booking form is submitted with all conditions met.\n\n\n  Scenario: [Edge] User books a car rental for the minimum number of days\n    Given the user is on the \"Car Rental Site\" page\n    And the user selects \"Sedan\" by clicking the button with data-testid \"choose-sedan-button\"\n    And the user enters \"1\" into the number of days field with data-testid \"rental-days\"\n    And the user clicks the button with data-testid \"calculate-total-button\"\n    When the user clicks the \"Book Now\" button with data-testid \"book-now-button\"\n    Then the system should alert \"Your Sedan rental has been booked!\"\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\ndef is_alert_present(driver):\n    try:\n        WebDriverWait(driver, 3).until(EC.alert_is_present())\n        return True\n    except:\n        return False\n\n@given('the user is on the \"Car Rental Site\" page')\ndef step_given_user_on_car_rental_site_page(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)\n\n@given('the user selects \"Sedan\" by clicking the button with data-testid \"choose-sedan-button\"')\ndef step_given_user_selects_sedan(context):\n    sedan_button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='choose-sedan-button']\"))\n    )\n    sedan_button.click()\n    time.sleep(1)\n\n@given('the user enters \"1\" into the number of days field with data-testid \"rental-days\"')\ndef step_given_user_enters_number_of_days(context):\n    rental_days_input = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='rental-days']\"))\n    )\n    rental_days_input.clear()\n    rental_days_input.send_keys(\"1\")\n    time.sleep(1)\n\n@given('the user clicks the button with data-testid \"calculate-total-button\"')\ndef step_given_user_clicks_calculate_total(context):\n    calculate_total_button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='calculate-total-button']\"))\n    )\n    calculate_total_button.click()\n    time.sleep(1)\n\n@when('the user clicks the \"Book Now\" button with data-testid \"book-now-button\"')\ndef step_when_user_clicks_book_now(context):\n    book_now_button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='book-now-button']\"))\n    )\n    book_now_button.click()\n    time.sleep(1)\n\n@then('the system should alert \"Your Sedan rental has been booked!\"')\ndef step_then_system_should_alert(context):\n    assert is_alert_present(context.driver), \"Expected alert not present\"\n    alert = context.driver.switch_to.alert\n    assert \"Your Sedan rental has been booked!\" in alert.text, f\"Unexpected alert text: {alert.text}\"\n    alert.accept()\n    context.driver.quit()"
                }
            ]
        }
    }
}