
    You are tasked with implementing a complete web application using HTML, JavaScript, and CSS. Your implementation must strictly follow the specifications described below.
    SUMMARY:
    {
    "overview": "The application is a car rental site named EasyRent, allowing users to select a car type, specify rental duration, calculate total rental costs, and book the car through a form submission.",
    "predefined_options": "Default value for rental days is set to 1 in the booking form.",
    "external_resources": "None specified in the provided code.",
    "external_js_libraries": "None specified in the provided code."
}
    ## Functional Requirements
    Implement the following features as described. For each requirement, make sure the HTML structure, JavaScript behavior, and CSS styles match the specifications exactly.
    REQUIREMENTS:
    - Requirement 1: 
When the user clicks the 'Choose Sedan' button with data-testid 'choose-sedan-button', the system must update the 'Car Type' field with data-testid 'car-type' in the booking form to display 'Sedan'. Additionally, the 'Total Price' field with data-testid 'total-price' should be cleared. This behavior should occur regardless of any previous car selections, ensuring that the 'Car Type' field accurately reflects the latest selection and the 'Total Price' field is reset to an empty state.
- Requirement 2: 
When the user interacts with the car selection section on the EasyRent page, specifically by clicking the 'Choose SUV' button identified by the data-testid 'choose-suv-button', the system must update the 'Car Type' input field, identified by the data-testid 'car-type', within the booking form to display 'SUV'. Additionally, the system should clear any existing value in the 'Total Price' input field, identified by the data-testid 'total-price'. This behavior should occur regardless of any prior car selection, ensuring that the 'Total Price' field is reset to an empty state upon each new car selection.
- Requirement 3: 
When the user clicks the 'Choose Convertible' button with the attribute data-testid='choose-convertible-button', the system must update the 'Car Type' field, identified by data-testid='car-type', in the booking form to display 'Convertible'. Additionally, the 'Total Price' field, identified by data-testid='total-price', should be cleared and display an empty value. This functionality should work regardless of any previous car selections, ensuring that the 'Car Type' field accurately reflects the latest selection and the 'Total Price' field is reset. The system should handle scenarios where the user selects the Convertible car after previously selecting another car, ensuring the fields are updated correctly.
- Requirement 4: 
The system should allow users to calculate the total rental price for a selected car model by interacting with the UI elements on the EasyRent car rental page. Users can select a car model (Sedan, SUV, or Convertible) by clicking the respective button with data-testid attributes 'choose-sedan-button', 'choose-suv-button', or 'choose-convertible-button'. Upon selection, the car type is displayed in the 'Car Type' field with data-testid 'car-type', and the 'Total Price' field with data-testid 'total-price' is cleared. Users must enter a valid number of rental days (minimum 1) in the 'Number of Days' field with data-testid 'rental-days'. When the 'Calculate Total' button with data-testid 'calculate-total-button' is clicked, the system calculates the total price by multiplying the number of days by the selected car's price per day. The calculated total is then displayed in the 'Total Price' field. If no car is selected or the number of days is invalid (e.g., zero or not entered), an alert prompts the user to select a car and enter a valid number of days. The system should handle edge cases, such as maximum integer values for days, and ensure the total price is accurately calculated and displayed.
- Requirement 5: 
The web application must ensure that users can only submit the booking form successfully when both a car is selected and the total price is calculated. The user interface includes a 'Book Now' button with the attribute data-testid='book-now-button' that triggers form submission. The car selection is made via buttons with data-testid attributes such as 'choose-sedan-button', 'choose-suv-button', and 'choose-convertible-button', which update the car type input field (data-testid='car-type') and clear the total price field (data-testid='total-price'). Users must input the number of rental days in the field with data-testid='rental-days', and click the 'Calculate Total' button (data-testid='calculate-total-button') to compute the total price, which is displayed in the total price field. If the user attempts to submit the form without selecting a car or calculating the total price, the system must prevent submission and display an alert with the message 'Please select a car and calculate the total price before booking.' Conversely, if both conditions are met, an alert confirming the booking, such as 'Your [Car Type] rental has been booked!', should be displayed. The form submission is handled by an event listener on the form with data-testid='rental-form'.
- Requirement 6: 
The web application must allow users to book a car rental through a structured process involving car selection, rental duration input, and total price calculation. The user interface should include a section with data-testid 'car-selection' containing buttons for selecting different car types ('Sedan', 'SUV', 'Convertible'), each with a corresponding price per day. Upon selection, the car type should be displayed in a readonly input field with data-testid 'car-type'. Users must input the number of rental days in a field with data-testid 'rental-days', which accepts a minimum value of 1. A button with data-testid 'calculate-total-button' should be available to compute the total rental price, displayed in a readonly field with data-testid 'total-price'. The 'Book Now' button, identified by data-testid 'book-now-button', should submit the form only if a car type is selected and the total price is calculated. Upon successful submission, the system must trigger an alert with a confirmation message, such as 'Your [Car Type] rental has been booked!', ensuring all conditions are met before booking. The booking form should prevent submission if any conditions are unmet, alerting the user to select a car and calculate the total price.

    
    ## Output Format
    Provide a clean and complete implementation including:
    1. HTML structure (including necessary `data-testid`, `id`, and `class` values).
    2. JavaScript functionality that matches the behavior described.
    3. CSS for styling according to BEM and required class names.
    4. Ensure that the text content in the components is exactly as specified in the requirements.
    Do not include any extra components or libraries not listed above. Keep your code concise, semantic, and standards-compliant.
    