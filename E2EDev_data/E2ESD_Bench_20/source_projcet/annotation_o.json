{
    "1": {
        "requirement": {
            "description": "When the user clicks on the 'Register Car' tab button (identified by the attribute data-testid='register-tab-button'), the system must display the 'Register a Car' form (identified by the attribute data-testid='register-tab-content') and hide the 'View All Registrations' table (identified by the attribute data-testid='view-tab-content'). The system should ensure that the 'Register a Car' form remains visible even after multiple consecutive clicks on the 'Register Car' tab button. Additionally, the 'View All Registrations' table must remain hidden during this interaction. The visibility of the tabs and their content should be toggled dynamically based on the active tab button, with the active tab button visually highlighted using the 'active' class.",
            "related_elements": [
                "(\"By.CSS_SELECTOR\", \"[data-testid='register-tab-content']\", \"Container for the 'Register a Car' form\")",
                "(By.CSS_SELECTOR, \"[data-testid='register-tab-content']\", \"Form for registering a car\")",
                "(By.CSS_SELECTOR, \"[data-testid='register-tab-button']\", \"Button to open the 'Register Car' tab\")",
                "(By.CSS_SELECTOR, \"[data-testid='view-tab-content']\", \"Table displaying all car registrations\")",
                "(\"By.CSS_SELECTOR\", \"[data-testid='register-tab-content']\", \"Container for the 'Register Car' table\")",
                "(\"By.CSS_SELECTOR\", \"[data-testid='register-tab-button']\", \"Button to switch to the 'Register Car' tab\")",
                "(\"By.CSS_SELECTOR\", \"[data-testid='view-tab-content']\", \"Container for the 'View All Registrations' table\")"
            ]
        },
        "concise_requirement": "When the user clicks on the 'Register Car' tab button, the system should display the 'Register a Car' form and hide the 'View All Registrations' table.",
        "test_cases": [
            {
                "test_case": [
                    "Feature: Display the \"Register a Car\" form when the \"Register Car\" tab button is clicked\n\n  Purpose: Ensure that clicking the \"Register Car\" tab button displays the \"Register a Car\" form and hides the \"View All Registrations\" table.\n\n\n  Scenario: [Normal] Display \"Register a Car\" form when \"Register Car\" tab button is clicked\n    Given the webpage is loaded and the \"Register Car\" table is visible\n    When the user clicks on the \"Register Car\" tab button with data-testid \"register-tab-button\"\n    Then the \"Register a Car\" form with data-testid \"register-tab-content\" should be visible\n    And the \"View All Registrations\" table with data-testid \"view-tab-content\" should be hidden\n"
                ],
                "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\n# Placeholder for dynamic file path\nfile_path = \"/Users/lingyao/PycharmProjects/E2ESD_data_construct/data/Ourdatas/LJY_TEST_NEW2/E2ESD_Bench_20/index.html\"\n\n@given('the webpage is loaded and the \"Register Car\" table is visible')\ndef step_given_webpage_loaded(context):\n    # Initialize the WebDriver\n    context.driver = webdriver.Chrome()\n    context.driver.maximize_window()\n    # Load the test page\n    context.driver.get(f\"file://{file_path}\")\n    time.sleep(1)  # Allow the page to load completely\n\n    # Verify that the \"View All Registrations\" table is visible\n    view_tab_content = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='register-tab-content']\"))\n    )\n    assert view_tab_content.is_displayed(), \"The 'Register Car' table is not visible.\"\n\n@when('the user clicks on the \"Register Car\" tab button with data-testid \"register-tab-button\"')\ndef step_when_click_register_tab(context):\n    # Locate and click the \"Register Car\" tab button\n    register_tab_button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='register-tab-button']\"))\n    )\n    register_tab_button.click()\n    time.sleep(1)  # Allow the tab switch animation to complete\n\n@then('the \"Register a Car\" form with data-testid \"register-tab-content\" should be visible')\ndef step_then_register_form_visible(context):\n    # Verify that the \"Register a Car\" form is visible\n    register_tab_content = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='register-tab-content']\"))\n    )\n    assert register_tab_content.is_displayed(), \"The 'Register a Car' form is not visible.\"\n\n@then('the \"View All Registrations\" table with data-testid \"view-tab-content\" should be hidden')\ndef step_then_view_table_hidden(context):\n    # Verify that the \"View All Registrations\" table is hidden\n    view_tab_content = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='view-tab-content']\"))\n    )\n    assert not view_tab_content.is_displayed(), \"The 'View All Registrations' table is still visible.\"\n\n# Cleanup after the test\ndef after_scenario(context, scenario):\n    if hasattr(context, 'driver'):\n        context.driver.quit()"
            },
            {
                "test_case": [
                    "Feature: Display the \"Register a Car\" form when the \"Register Car\" tab button is clicked\n\n  Purpose: Ensure that clicking the \"Register Car\" tab button displays the \"Register a Car\" form and hides the \"View All Registrations\" table.\n\n\nScenario: [Edge] Ensure \"Register a Car\" form remains visible after multiple clicks on \"Register Car\" tab button\n   Given the webpage is loaded and the \"Register Car\" table is visible\n   When the user clicks on the \"Register Car\" tab button with data-testid \"register-tab-button\" multiple times\n   Then the \"Register a Car\" form with data-testid \"register-tab-content\" should remain visible\n   And the \"View All Registrations\" table with data-testid \"view-tab-content\" should remain hidden"
                ],
                "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"/Users/lingyao/PycharmProjects/E2ESD_data_construct/data/Ourdatas/LJY_TEST_NEW2/E2ESD_Bench_20/index.html\"\n\n@given('the webpage is loaded and the \"Register Car\" table is visible')\ndef step_given_webpage_loaded(context):\n    # Initialize the WebDriver and load the test page\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://{file_path}\")\n    context.driver.maximize_window()\n    \n    # Wait for the \"Register Car\" tab button to be visible\n    WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='register-tab-button']\"))\n    )\n    time.sleep(1)  # Allow time for the page to fully load\n\n@when('the user clicks on the \"Register Car\" tab button with data-testid \"register-tab-button\" multiple times')\ndef step_when_user_clicks_register_tab(context):\n    # Locate the \"Register Car\" tab button\n    register_tab_button = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='register-tab-button']\")\n    \n    # Click the button multiple times\n    for _ in range(3):\n        register_tab_button.click()\n        time.sleep(1)  # Allow time for the UI to update\n\n@then('the \"Register a Car\" form with data-testid \"register-tab-content\" should remain visible')\ndef step_then_register_form_visible(context):\n    # Locate the \"Register a Car\" form\n    register_form = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='register-tab-content']\")\n    \n    # Assert that the form is visible\n    assert register_form.is_displayed(), \"The 'Register a Car' form is not visible.\"\n\n@then('the \"View All Registrations\" table with data-testid \"view-tab-content\" should remain hidden')\ndef step_then_view_table_hidden(context):\n    # Locate the \"View All Registrations\" table\n    view_table = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='view-tab-content']\")\n    \n    # Assert that the table is not visible\n    assert not view_table.is_displayed(), \"The 'View All Registrations' table is visible.\"\n\n# Teardown to close the browser after the test\ndef after_scenario(context, scenario):\n    if hasattr(context, 'driver'):\n        context.driver.quit()"
            }
        ]
    },
    "2": {
        "requirement": {
            "description": "When the user clicks the 'View All Registrations' tab button (located via data-testid='view-tab-button'), the system should update the UI as follows: the 'View All Registrations' table (located via data-testid='view-tab-content') should become visible, and the 'Register a Car' form (located via data-testid='register-tab-content') should be hidden. Additionally, the 'View All Registrations' tab button should have the 'active' class applied, while the 'Register Car' tab button (located via data-testid='register-tab-button') should have the 'active' class removed. If the user clicks the 'View All Registrations' tab button multiple times, the system should maintain the visibility of the 'View All Registrations' table and the hidden state of the 'Register a Car' form without any changes to the active class states.",
            "related_elements": [
                "(\"By.CSS_SELECTOR\", \"[data-testid='register-tab-content']\", \"Container for the 'Register a Car' form\")",
                "(\"By.CSS_SELECTOR\", \"[data-testid='view-tab-button']\", \"Button to switch to the 'View All Registrations' tab\")",
                "(\"By.CSS_SELECTOR\", \"[data-testid='view-tab-content']\", \"Container for the 'View All Registrations' table\")",
                "(\"By.CSS_SELECTOR\", \"[data-testid='register-tab-button']\", \"Button to switch to the 'Register a Car' tab\")"
            ]
        },
        "concise_requirement": "When the user clicks the \"View All Registrations\" tab button, the system should display the \"View All Registrations\" table and hide the initially visible \"Register a Car\" form.",
        "test_cases": [
            {
                "test_case": [
                    "Feature: View All Registrations Tab Functionality\n  The system should display the \"View All Registrations\" table and hide the \"Register a Car\" form when the user clicks the \"View All Registrations\" tab button.\n\n\n  Scenario: [Normal] User switches to the \"View All Registrations\" tab\n    Given the \"Register a Car\" form is visible with data-testid \"register-tab-content\" and the \"View All Registrations\" table is hidden with data-testid \"view-tab-content\"\n    When the user clicks the \"View All Registrations\" tab button with data-testid \"view-tab-button\"\n    Then the \"View All Registrations\" table with data-testid \"view-tab-content\" should become visible\n    And the \"Register a Car\" form with data-testid \"register-tab-content\" should be hidden\n    And the \"View All Registrations\" tab button with data-testid \"view-tab-button\" should have the \"active\" class\n    And the \"Register Car\" tab button with data-testid \"register-tab-button\" should not have the \"active\" class\n"
                ],
                "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"/Users/lingyao/PycharmProjects/E2ESD_data_construct/data/Ourdatas/LJY_TEST_NEW2/E2ESD_Bench_20/index.html\"\n\ndef is_visible(element):\n    return element.is_displayed()\n\n@given('the \"Register a Car\" form is visible with data-testid \"register-tab-content\" and the \"View All Registrations\" table is hidden with data-testid \"view-tab-content\"')\ndef step_given_register_form_visible(context):\n    # Initialize the WebDriver and load the test page\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://{file_path}\")\n    time.sleep(1)  # Allow the page to load\n\n    # Verify \"Register a Car\" form is visible\n    register_form = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='register-tab-content']\"))\n    )\n    assert is_visible(register_form), \"Register a Car form is not visible\"\n\n    # Verify \"View All Registrations\" table is hidden\n    view_table = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='view-tab-content']\")\n    assert not is_visible(view_table), \"View All Registrations table is not hidden\"\n\n@when('the user clicks the \"View All Registrations\" tab button with data-testid \"view-tab-button\"')\ndef step_when_click_view_tab(context):\n    # Click the \"View All Registrations\" tab button\n    view_tab_button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='view-tab-button']\"))\n    )\n    view_tab_button.click()\n    time.sleep(1)  # Allow the tab switch to complete\n\n@then('the \"View All Registrations\" table with data-testid \"view-tab-content\" should become visible')\ndef step_then_view_table_visible(context):\n    # Verify \"View All Registrations\" table is visible\n    view_table = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='view-tab-content']\"))\n    )\n    assert is_visible(view_table), \"View All Registrations table is not visible\"\n\n@then('the \"Register a Car\" form with data-testid \"register-tab-content\" should be hidden')\ndef step_then_register_form_hidden(context):\n    # Verify \"Register a Car\" form is hidden\n    register_form = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='register-tab-content']\")\n    assert not is_visible(register_form), \"Register a Car form is not hidden\"\n\n@then('the \"View All Registrations\" tab button with data-testid \"view-tab-button\" should have the \"active\" class')\ndef step_then_view_tab_active(context):\n    # Verify \"View All Registrations\" tab button has the \"active\" class\n    view_tab_button = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='view-tab-button']\")\n    class_list = view_tab_button.get_attribute(\"class\").split()\n    assert \"active\" in class_list, \"View All Registrations tab button does not have the 'active' class\"\n\n@then('the \"Register Car\" tab button with data-testid \"register-tab-button\" should not have the \"active\" class')\ndef step_then_register_tab_not_active(context):\n    # Verify \"Register Car\" tab button does not have the \"active\" class\n    register_tab_button = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='register-tab-button']\")\n    class_list = register_tab_button.get_attribute(\"class\").split()\n    assert \"active\" not in class_list, \"Register Car tab button has the 'active' class\"\n\n# Teardown after tests\ndef after_scenario(context, scenario):\n    context.driver.quit()"
            },
            {
                "test_case": [
                    "Feature: View All Registrations Tab Functionality\n  The system should display the \"View All Registrations\" table and hide the \"Register a Car\" form when the user clicks the \"View All Registrations\" tab button.\n\n\n  Scenario: [Edge] User clicks the \"View All Registrations\" tab button multiple times\n    Given the \"Register a Car\" form is visible with data-testid \"register-tab-content\" and the \"View All Registrations\" table is hidden with data-testid \"view-tab-content\"\n    When the user clicks the \"View All Registrations\" tab button with data-testid \"view-tab-button\" multiple times\n    Then the \"View All Registrations\" table with data-testid \"view-tab-content\" should remain visible\n    And the \"Register a Car\" form with data-testid \"register-tab-content\" should remain hidden\n    And the \"View All Registrations\" tab button with data-testid \"view-tab-button\" should have the \"active\" class\n    And the \"Register Car\" tab button with data-testid \"register-tab-button\" should not have the \"active\" class\n"
                ],
                "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"/Users/lingyao/PycharmProjects/E2ESD_data_construct/data/Ourdatas/LJY_TEST_NEW2/E2ESD_Bench_20/index.html\"\n\n@given('the \"Register a Car\" form is visible with data-testid \"register-tab-content\" and the \"View All Registrations\" table is hidden with data-testid \"view-tab-content\"')\ndef step_given_register_form_visible(context):\n    # Initialize the WebDriver and load the test page\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://{file_path}\")\n    time.sleep(1)  # Allow the page to load\n\n    # Ensure the \"Register a Car\" form is visible\n    register_form = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='register-tab-content']\"))\n    )\n    assert register_form.is_displayed(), \"The 'Register a Car' form is not visible.\"\n\n    # Ensure the \"View All Registrations\" table is hidden\n    view_table = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='view-tab-content']\")\n    assert not view_table.is_displayed(), \"The 'View All Registrations' table is not hidden.\"\n\n@when('the user clicks the \"View All Registrations\" tab button with data-testid \"view-tab-button\" multiple times')\ndef step_when_user_clicks_view_tab(context):\n    # Locate the \"View All Registrations\" tab button\n    view_tab_button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='view-tab-button']\"))\n    )\n\n    # Click the button multiple times\n    for _ in range(3):\n        view_tab_button.click()\n        time.sleep(1)  # Allow the UI to update\n\n@then('the \"View All Registrations\" table with data-testid \"view-tab-content\" should remain visible')\ndef step_then_view_table_visible(context):\n    # Ensure the \"View All Registrations\" table is visible\n    view_table = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='view-tab-content']\"))\n    )\n    assert view_table.is_displayed(), \"The 'View All Registrations' table is not visible.\"\n\n@then('the \"Register a Car\" form with data-testid \"register-tab-content\" should remain hidden')\ndef step_then_register_form_hidden(context):\n    # Ensure the \"Register a Car\" form is hidden\n    register_form = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='register-tab-content']\")\n    assert not register_form.is_displayed(), \"The 'Register a Car' form is not hidden.\"\n\n@then('the \"View All Registrations\" tab button with data-testid \"view-tab-button\" should have the \"active\" class')\ndef step_then_view_tab_active(context):\n    # Ensure the \"View All Registrations\" tab button has the \"active\" class\n    view_tab_button = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='view-tab-button']\")\n    class_list = view_tab_button.get_attribute(\"class\").split()\n    assert \"active\" in class_list, \"The 'View All Registrations' tab button does not have the 'active' class.\"\n\n@then('the \"Register Car\" tab button with data-testid \"register-tab-button\" should not have the \"active\" class')\ndef step_then_register_tab_not_active(context):\n    # Ensure the \"Register Car\" tab button does not have the \"active\" class\n    register_tab_button = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='register-tab-button']\")\n    class_list = register_tab_button.get_attribute(\"class\").split()\n    assert \"active\" not in class_list, \"The 'Register Car' tab button has the 'active' class.\"\n\n# Teardown to close the browser after the test\ndef after_scenario(context, scenario):\n    if hasattr(context, 'driver'):\n        context.driver.quit()"
            }
        ]
    },
    "3": {
        "requirement": {
            "description": "When the user interacts with the 'Register a Car' form in the 'Car Registration System' web application, the following requirements must be met: \n\n1. The form must include the following fields with their respective attributes: \n   - 'Owner's Name' field, located by data-testid 'owner-name-input', which accepts text input. \n   - 'Car Model' field, located by data-testid 'car-model-input', which accepts text input. \n   - 'License Number' field, located by data-testid 'license-number-input', which accepts text input. \n   - 'Registration Date' field, located by data-testid 'registration-date-input', which accepts a date input. \n\n2. When the user clicks the 'Save Registration' button, located by data-testid 'submit-button', the system must validate that all fields are filled. \n\n3. The following scenarios must be handled: \n   - If all fields are filled: \n     - The system must save the registration data in localStorage under the key 'registrations'. \n     - The registration data must include the following properties: 'ownerName', 'carModel', 'licenseNumber', and 'registrationDate'. \n     - The saved registration must be displayed in the 'All Registrations' table, located by data-testid 'registration-table', with each property displayed in its respective column. \n     - The form must be reset, clearing all input fields. \n   - If any field is empty: \n     - The system must display an alert with the message 'Please fill out all fields.' \n\n4. The system must handle edge cases, including: \n   - Submitting the form with one or more fields empty, which must trigger the alert. \n   - Submitting the form with all fields empty, which must also trigger the alert. \n\n5. The system must ensure that the 'Save Registration' button is functional only when the 'Register a Car' tab is active, as determined by the presence of the 'active' class on the tab button located by data-testid 'register-tab-button'.",
            "related_elements": [
                "(\"By.CSS_SELECTOR\", \"[data-testid='owner-name-input']\", \"Input field for the owner's name\")",
                "(\"By.CSS_SELECTOR\", \"[data-testid='registration-table']\", \"Table displaying all saved car registrations\")",
                "(\"By.CSS_SELECTOR\", \"[data-testid='car-model-input']\", \"Input field for the car model\")",
                "(\"By.CSS_SELECTOR\", \"[data-testid='license-number-input']\", \"Input field for the license number\")",
                "(\"By.CSS_SELECTOR\", \"[data-testid='submit-button']\", \"Button to save the car registration form\")",
                "(\"By.CSS_SELECTOR\", \"[data-testid='register-tab-content']\", \"Content area for the 'Register a Car' form\")",
                "(\"By.CSS_SELECTOR\", \"[data-testid='registration-date-input']\", \"Input field for the registration date\")",
                "(\"By.TAG_NAME\", \"td\", \"Cell element in a table row\")",
                "(\"By.TAG_NAME\", \"tr\", \"Row element in the registration table\")",
                "(\"By.CSS_SELECTOR\", \"[data-testid='view-tab-button']\", \"Button to switch to the 'View All Registrations' tab\")",
                "(\"By.CSS_SELECTOR\", \"[data-testid='register-tab-button']\", \"Button to activate the 'Register a Car' tab\")",
                "(\"By.CSS_SELECTOR\", \"[data-testid='submit-button']\", \"Button to save the car registration\")",
                "(\"By.CSS_SELECTOR\", \"[data-testid='registration-form']\", \"Form for registering a car\")"
            ]
        },
        "concise_requirement": "When the user fills out the 'Owner's Name', 'Car Model', 'License Number', and 'Registration Date' fields in the 'Register a Car' form and clicks the 'Save Registration' button, the system should validate that all fields are filled. If any field is empty, the system should display an alert prompting the user to fill out all fields.",
        "test_cases": [
            {
                "test_case": [
                    "Feature: Validate form submission in the \"Register a Car\" form\n  The system should ensure that all fields in the \"Register a Car\" form are filled before allowing the user to save the registration. If any field is empty, an alert should be displayed prompting the user to fill out all fields.\n\n\nScenario: [Normal] User fills out all fields and submits the form successfully\n    Given the \"Register a Car\" tab is active and the form is displayed\n    When the user enters \"John Doe\" into the Owner's Name field with data-testid \"owner-name-input\"\n    And the user enters \"Toyota Corolla\" into the Car Model field with data-testid \"car-model-input\"\n    And the user enters \"ABC123\" into the License Number field with data-testid \"license-number-input\"\n    And the user selects \"2023-10-01\" as the Registration Date in the field with data-testid \"registration-date-input\"\n    And the user clicks the Save Registration button with data-testid \"submit-button\"\n    Then the system should save the registration and display it in the \"All Registrations\" table with data-testid \"registration-table\"\n    And the form should be reset with all fields cleared"
                ],
                "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nfrom selenium.webdriver.common.keys import Keys\nimport time\n\nfile_path = \"/Users/lingyao/PycharmProjects/E2ESD_data_construct/data/Ourdatas/LJY_TEST_NEW2/E2ESD_Bench_20/index.html\"\n\n@given('the \"Register a Car\" tab is active and the form is displayed')\ndef step_given_register_tab_active(context):\n    # Initialize the WebDriver and load the test page\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://{file_path}\")\n    context.driver.maximize_window()\n\n    # Ensure the \"Register a Car\" tab is active\n    register_tab_button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='register-tab-button']\"))\n    )\n    register_tab_button.click()\n    time.sleep(1)\n\n    # Verify the \"Register a Car\" form is displayed\n    register_tab_content = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='register-tab-content']\"))\n    )\n    assert register_tab_content.is_displayed(), \"The 'Register a Car' form is not displayed.\"\n\n@when('the user enters \"John Doe\" into the Owner\\'s Name field with data-testid \"owner-name-input\"')\ndef step_when_enter_owner_name(context):\n    owner_name_input = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='owner-name-input']\"))\n    )\n    owner_name_input.clear()\n    owner_name_input.send_keys(\"John Doe\")\n    time.sleep(1)\n\n@when('the user enters \"Toyota Corolla\" into the Car Model field with data-testid \"car-model-input\"')\ndef step_when_enter_car_model(context):\n    car_model_input = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='car-model-input']\"))\n    )\n    car_model_input.clear()\n    car_model_input.send_keys(\"Toyota Corolla\")\n    time.sleep(1)\n\n@when('the user enters \"ABC123\" into the License Number field with data-testid \"license-number-input\"')\ndef step_when_enter_license_number(context):\n    license_number_input = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='license-number-input']\"))\n    )\n    license_number_input.clear()\n    license_number_input.send_keys(\"ABC123\")\n    time.sleep(1)\n\n@when('the user selects \"2023-10-01\" as the Registration Date in the field with data-testid \"registration-date-input\"')\ndef step_when_select_registration_date(context):\n    registration_date_input = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='registration-date-input']\"))\n    )\n    registration_date_input.clear()\n    registration_date_input.send_keys(\"2023\")\n    registration_date_input.send_keys(Keys.ARROW_RIGHT)\n    registration_date_input.send_keys(\"10\")\n    registration_date_input.send_keys(Keys.ARROW_RIGHT)\n    registration_date_input.send_keys(\"01\")\n    time.sleep(1)\n\n@when('the user clicks the Save Registration button with data-testid \"submit-button\"')\ndef step_when_click_save_registration(context):\n    save_button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='submit-button']\"))\n    )\n    save_button.click()\n    time.sleep(1)\n\n@then('the system should save the registration and display it in the \"All Registrations\" table with data-testid \"registration-table\"')\ndef step_then_verify_registration_saved(context):\n    # Switch to the \"View All Registrations\" tab\n    view_tab_button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='view-tab-button']\"))\n    )\n    view_tab_button.click()\n    time.sleep(1)\n\n    # Verify the registration is displayed in the table\n    registration_table = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='registration-table']\"))\n    )\n    table_rows = registration_table.find_elements(By.TAG_NAME, \"tr\")\n    assert len(table_rows) > 1, \"No registrations found in the table.\"\n\n    # Verify the last row contains the expected data\n    last_row = table_rows[-1]\n    cells = last_row.find_elements(By.TAG_NAME, \"td\")\n    assert cells[0].text == \"John Doe\", f\"Expected 'John Doe', but got '{cells[0].text}'\"\n    assert cells[1].text == \"Toyota Corolla\", f\"Expected 'Toyota Corolla', but got '{cells[1].text}'\"\n    assert cells[2].text == \"ABC123\", f\"Expected 'ABC123', but got '{cells[2].text}'\"\n    assert cells[3].text == \"2023-10-01\", f\"Expected '2023-10-01', but got '{cells[3].text}'\"\n\n@then('the form should be reset with all fields cleared')\ndef step_then_verify_form_reset(context):\n    # Verify all fields in the form are cleared\n    owner_name_input = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='owner-name-input']\")\n    car_model_input = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='car-model-input']\")\n    license_number_input = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='license-number-input']\")\n    registration_date_input = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='registration-date-input']\")\n\n    assert owner_name_input.get_attribute(\"value\") == \"\", \"Owner's Name field is not cleared.\"\n    assert car_model_input.get_attribute(\"value\") == \"\", \"Car Model field is not cleared.\"\n    assert license_number_input.get_attribute(\"value\") == \"\", \"License Number field is not cleared.\"\n    assert registration_date_input.get_attribute(\"value\") == \"\", \"Registration Date field is not cleared.\"\n\n    # Close the browser after the test\n    context.driver.quit()"
            },
            {
                "test_case": [
                    "Feature: Validate form submission in the \"Register a Car\" form\n  The system should ensure that all fields in the \"Register a Car\" form are filled before allowing the user to save the registration. If any field is empty, an alert should be displayed prompting the user to fill out all fields.\n\n\nScenario: [Edge] User submits the form with one field empty\n    Given the \"Register a Car\" tab is active and the form is displayed\n    When the user enters \"John Doe\" into the Owner\u2018s Name field with data-testid \"owner-name-input\"\n    And the user enters \"Toyota Corolla\" into the Car Model field with data-testid \"car-model-input\"\n    And the user leaves the License Number field with data-testid \"license-number-input\" empty\n    And the user selects \"2023-10-01\" as the Registration Date in the field with data-testid \"registration-date-input\"\n    And the user clicks the Save Registration button with data-testid \"submit-button\"\n    Then the system should display an alert with the message \"Please fill out all fields.\""
                ],
                "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nfrom selenium.webdriver.common.keys import Keys\nimport time\n\nfile_path = \"/Users/lingyao/PycharmProjects/E2ESD_data_construct/data/Ourdatas/LJY_TEST_NEW2/E2ESD_Bench_20/index.html\"\n\n@given('the \"Register a Car\" tab is active and the form is displayed')\ndef step_given_register_tab_active(context):\n    # Initialize the WebDriver\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://{file_path}\")\n    \n    # Wait for the \"Register a Car\" tab to be active\n    WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='register-tab-button']\"))\n    )\n    \n    # Ensure the \"Register a Car\" tab is active\n    register_tab_button = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='register-tab-button']\")\n    if not register_tab_button.get_attribute(\"class\").strip().endswith(\"active\"):\n        register_tab_button.click()\n        time.sleep(1)  # Allow time for the tab to activate\n\n    # Ensure the form is displayed\n    WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='registration-form']\"))\n    )\n\n@when('the user enters \"John Doe\" into the Owner\u2018s Name field with data-testid \"owner-name-input\"')\ndef step_when_enter_owner_name(context):\n    owner_name_input = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='owner-name-input']\")\n    owner_name_input.clear()\n    owner_name_input.send_keys(\"John Doe\")\n    time.sleep(1)\n\n@when('the user enters \"Toyota Corolla\" into the Car Model field with data-testid \"car-model-input\"')\ndef step_when_enter_car_model(context):\n    car_model_input = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='car-model-input']\")\n    car_model_input.clear()\n    car_model_input.send_keys(\"Toyota Corolla\")\n    time.sleep(1)\n\n@when('the user leaves the License Number field with data-testid \"license-number-input\" empty')\ndef step_when_leave_license_number_empty(context):\n    license_number_input = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='license-number-input']\")\n    license_number_input.clear()\n    time.sleep(1)\n\n@when('the user selects \"2023-10-01\" as the Registration Date in the field with data-testid \"registration-date-input\"')\ndef step_when_select_registration_date(context):\n    registration_date_input = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='registration-date-input']\")\n    registration_date_input.clear()\n    registration_date_input.send_keys(\"2023\")\n    registration_date_input.send_keys(Keys.ARROW_RIGHT)\n    registration_date_input.send_keys(\"10\")\n    registration_date_input.send_keys(Keys.ARROW_RIGHT)\n    registration_date_input.send_keys(\"01\")\n    time.sleep(1)\n\n@when('the user clicks the Save Registration button with data-testid \"submit-button\"')\ndef step_when_click_save_registration(context):\n    submit_button = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='submit-button']\")\n    WebDriverWait(context.driver, 10).until(EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='submit-button']\")))\n    submit_button.click()\n    time.sleep(1)\n\n@then('the system should display an alert with the message \"Please fill out all fields.\"')\ndef step_then_display_alert(context):\n    pass\n\n    # Close the browser\n    context.driver.quit()"
            },
            {
                "test_case": [
                    "Feature: Validate form submission in the \"Register a Car\" form\n  The system should ensure that all fields in the \"Register a Car\" form are filled before allowing the user to save the registration. If any field is empty, an alert should be displayed prompting the user to fill out all fields.\n\n\nScenario: [Error] User submits the form with all fields empty\n    Given the \"Register a Car\" tab is active and the form is displayed\n    When the user leaves the Owner\u2019s Name field with data-testid \"owner-name-input\" empty\n    And the user leaves the Car Model field with data-testid \"car-model-input\" empty\n    And the user leaves the License Number field with data-testid \"license-number-input\" empty\n    And the user leaves the Registration Date field with data-testid \"registration-date-input\" empty\n    And the user clicks the Save Registration button with data-testid \"submit-button\"\n    Then the system should display an alert with the message \"Please fill out all fields.\""
                ],
                "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"/Users/lingyao/PycharmProjects/E2ESD_data_construct/data/Ourdatas/LJY_TEST_NEW2/E2ESD_Bench_20/index.html\"\n\n@given('the \"Register a Car\" tab is active and the form is displayed')\ndef step_given_register_tab_active(context):\n    # Initialize the WebDriver\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://{file_path}\")\n    context.driver.maximize_window()\n\n    # Ensure the \"Register a Car\" tab is active\n    register_tab_button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='register-tab-button']\"))\n    )\n    if not register_tab_button.get_attribute(\"class\").strip().endswith(\"active\"):\n        register_tab_button.click()\n        time.sleep(1)\n\n    # Ensure the form is displayed\n    register_tab_content = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='register-tab-content']\"))\n    )\n    assert register_tab_content.is_displayed(), \"The 'Register a Car' form is not displayed.\"\n\n@when('the user leaves the Owner\u2019s Name field with data-testid \"owner-name-input\" empty')\ndef step_when_leave_owner_name_empty(context):\n    owner_name_input = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='owner-name-input']\"))\n    )\n    owner_name_input.clear()\n    time.sleep(1)\n\n@when('the user leaves the Car Model field with data-testid \"car-model-input\" empty')\ndef step_when_leave_car_model_empty(context):\n    car_model_input = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='car-model-input']\"))\n    )\n    car_model_input.clear()\n    time.sleep(1)\n\n@when('the user leaves the License Number field with data-testid \"license-number-input\" empty')\ndef step_when_leave_license_number_empty(context):\n    license_number_input = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='license-number-input']\"))\n    )\n    license_number_input.clear()\n    time.sleep(1)\n\n@when('the user leaves the Registration Date field with data-testid \"registration-date-input\" empty')\ndef step_when_leave_registration_date_empty(context):\n    registration_date_input = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='registration-date-input']\"))\n    )\n    registration_date_input.clear()\n    time.sleep(1)\n\n@when('the user clicks the Save Registration button with data-testid \"submit-button\"')\ndef step_when_click_save_registration(context):\n    submit_button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='submit-button']\"))\n    )\n    submit_button.click()\n    time.sleep(1)\n\n@then('the system should display an alert with the message \"Please fill out all fields.\"')\ndef step_then_display_alert_message(context):\n    # Wait for the alert to be present\n    pass\n\n    # Close the browser\n    context.driver.quit()"
            }
        ]
    },
    "5": {
        "requirement": {
            "description": "When the user navigates to the 'View All Registrations' tab by clicking the button with data-testid 'view-tab-button', the system should dynamically populate the table with data-testid 'registration-table' with all saved registrations from local storage. The 'View All Registrations' tab content with data-testid 'view-tab-content' should become active, displaying each registration as a row in the table. Each row should include the Owner's Name, Car Model, License Number, and Registration Date. If local storage contains no registrations, the table should contain no rows, and the table body should be empty. The system should ensure that the 'View All Registrations' tab content is visible and the 'Register Car' tab content is hidden upon navigation.",
            "related_elements": [
                "(By.CSS_SELECTOR, \"[data-testid='registration-table'] tbody\", \"Table body for displaying registration entries\")",
                "(By.TAG_NAME, \"tr\", \"Table rows within the registration table body\")",
                "(By.CSS_SELECTOR, \"[data-testid='register-tab-button']\", \"Button to activate the 'Register Car' tab\")",
                "(By.CSS_SELECTOR, \"[data-testid='view-tab-button']\", \"'View All Registrations' tab button\")",
                "(By.CSS_SELECTOR, \"tbody tr\", \"Rows within the registration table\")",
                "(By.TAG_NAME, \"td\", \"Cells within a table row\")",
                "(By.CSS_SELECTOR, \"[data-testid='registration-table']\", \"Table displaying registration data\")",
                "(By.CSS_SELECTOR, \"[data-testid='view-tab-button']\", \"Button to switch to the 'View All Registrations' tab\")",
                "(By.CSS_SELECTOR, \"[data-testid='view-tab-content'].active\", \"Active 'View All Registrations' tab content\")",
                "(By.CSS_SELECTOR, \"[data-testid='view-tab-content']\", \"Content area for the 'View All Registrations' tab\")",
                "(By.CSS_SELECTOR, \"[data-testid='register-tab-button'].active\", \"Active 'Register Car' tab button\")"
            ]
        },
        "concise_requirement": "When the user navigates to the 'View All Registrations' tab, the system should dynamically populate the table with all saved registrations from local storage.",
        "test_cases": [
            {
                "test_case": [
                    "Feature: View All Registrations Tab\n  The system should dynamically populate the table with all saved registrations from local storage when the user navigates to the \"View All Registrations\" tab.\n\n  Scenario: [Normal] Populate table with saved registrations on tab navigation\n    Given the webpage is loaded\n    And local storage contains the following registrations:\n      | Owner's Name | Car Model       | License Number | Registration Date |\n      | John Doe     | Toyota Corolla  | ABC123         | 2023-10-01        |\n      | Jane Smith   | Honda Civic     | XYZ789         | 2023-10-02        |\n    When the user clicks the \"View All Registrations\" tab button with data-testid \"view-tab-button\"\n    Then the content with data-testid \"view-tab-content\" should be visible\n    And the table with data-testid \"registration-table\" should contain the following rows:\n      | Owner's Name | Car Model       | License Number | Registration Date |\n      | John Doe     | Toyota Corolla  | ABC123         | 2023-10-01        |\n      | Jane Smith   | Honda Civic     | XYZ789         | 2023-10-02        |\n"
                ],
                "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\nimport json\n\nfile_path = \"/Users/lingyao/PycharmProjects/E2ESD_data_construct/data/Ourdatas/LJY_TEST_NEW2/E2ESD_Bench_20/index.html\"\n\n@given('the webpage is loaded')\ndef step_impl(context):\n    # Initialize the WebDriver\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://{file_path}\")\n    context.driver.maximize_window()\n    \n    # Wait for the \"Register Car\" tab to be active\n    WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='register-tab-button'].active\"))\n    )\n    time.sleep(1)\n\n@given('local storage contains the following registrations')\ndef step_impl(context):\n    # Parse the table of registrations from the Gherkin step\n    registrations = []\n    for row in context.table:\n        registrations.append({\n            \"ownerName\": row[\"Owner's Name\"],\n            \"carModel\": row[\"Car Model\"],\n            \"licenseNumber\": row[\"License Number\"],\n            \"registrationDate\": row[\"Registration Date\"]\n        })\n    \n    # Inject the registrations into local storage\n    context.driver.execute_script(\"window.localStorage.setItem('registrations', arguments[0]);\", json.dumps(registrations))\n    context.driver.get(f\"file://{file_path}\")\n    context.driver.maximize_window()\n    time.sleep(1)\n\n@when('the user clicks the \"View All Registrations\" tab button with data-testid \"view-tab-button\"')\ndef step_impl(context):\n    # Locate and click the \"View All Registrations\" tab button\n    view_tab_button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='view-tab-button']\"))\n    )\n    view_tab_button.click()\n    time.sleep(1)\n\n@then('the content with data-testid \"view-tab-content\" should be visible')\ndef step_impl(context):\n    # Verify that the \"View All Registrations\" tab content is active\n    view_tab_content = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='view-tab-content'].active\"))\n    )\n    assert view_tab_content.is_displayed(), \"The 'View All Registrations' tab content is not active.\"\n    time.sleep(1)\n\n\n@then('the table with data-testid \"registration-table\" should contain the following rows')\ndef step_impl(context):\n    # Locate the registration table\n    table = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='registration-table']\"))\n    )\n\n    # Get all rows from the table body\n    rows = table.find_elements(By.CSS_SELECTOR, \"tbody tr\")\n\n    # Convert context.table to a list of rows\n    expected_rows = [row for row in context.table]\n\n    assert len(rows) == len(expected_rows), f\"Expected {len(expected_rows)} rows, but found {len(rows)}.\"\n\n    # Validate each row's content\n    for i, row in enumerate(expected_rows):\n        table_row = rows[i]\n        cells = table_row.find_elements(By.TAG_NAME, \"td\")\n\n        assert row[\"Owner's Name\"] == cells[0].text.strip(), f\"Row {i + 1}: Owner's Name mismatch.\"\n        assert row[\"Car Model\"] == cells[1].text.strip(), f\"Row {i + 1}: Car Model mismatch.\"\n        assert row[\"License Number\"] == cells[2].text.strip(), f\"Row {i + 1}: License Number mismatch.\"\n        assert row[\"Registration Date\"] == cells[3].text.strip(), f\"Row {i + 1}: Registration Date mismatch.\"\n\n    time.sleep(1)\n\n# Teardown to close the browser after the test\ndef after_scenario(context, scenario):\n    if hasattr(context, 'driver'):\n        context.driver.quit()"
            },
            {
                "test_case": [
                    "Feature: View All Registrations Tab\n  The system should dynamically populate the table with all saved registrations from local storage when the user navigates to the \"View All Registrations\" tab.\n\n\n  Scenario: [Edge] Navigate to \"View All Registrations\" tab with no saved registrations\n    Given the webpage is loaded and the \"Register Car\" tab is active\n    And local storage contains no registrations\n    When the user clicks the \"View All Registrations\" tab button with data-testid \"view-tab-button\"\n    Then the \"View All Registrations\" tab content with data-testid \"view-tab-content\" becomes active\n    And the table with data-testid \"registration-table\" contains no rows\n    And the table body is empty\n"
                ],
                "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"/Users/lingyao/PycharmProjects/E2ESD_data_construct/data/Ourdatas/LJY_TEST_NEW2/E2ESD_Bench_20/index.html\"\n\n@given('the webpage is loaded and the \"Register Car\" tab is active')\ndef step_given_webpage_loaded(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file:///Users/lingyao/PycharmProjects/E2ESD_data_construct/data/Ourdatas/LJY_TEST_NEW2/E2ESD_Bench_20/index.html\")\n    time.sleep(1)  # Allow time for page load\n\n    # Verify \"Register Car\" tab is active\n    register_tab_button = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='register-tab-button']\"))\n    )\n    assert 'active' in register_tab_button.get_attribute('class'), \"Register Car tab is not active\"\n\n@given('local storage contains no registrations')\ndef step_given_no_registrations_in_local_storage(context):\n    context.driver.execute_script(\"localStorage.setItem('registrations', JSON.stringify([]));\")\n    time.sleep(1)  # Allow time for local storage update\n\n@when('the user clicks the \"View All Registrations\" tab button with data-testid \"view-tab-button\"')\ndef step_when_user_clicks_view_tab(context):\n    view_tab_button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='view-tab-button']\"))\n    )\n    view_tab_button.click()\n    time.sleep(1)  # Allow time for tab switch\n\n@then('the \"View All Registrations\" tab content with data-testid \"view-tab-content\" becomes active')\ndef step_then_view_tab_content_active(context):\n    view_tab_content = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='view-tab-content']\"))\n    )\n    assert 'active' in view_tab_content.get_attribute('class'), \"View All Registrations tab content is not active\"\n\n@then('the table with data-testid \"registration-table\" contains no rows')\ndef step_then_table_contains_no_rows(context):\n    registration_table = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='registration-table'] tbody\"))\n    )\n    rows = registration_table.find_elements(By.TAG_NAME, \"tr\")\n    assert len(rows) == 0, \"Table contains rows when it should be empty\"\n\n@then('the table body is empty')\ndef step_then_table_body_empty(context):\n    registration_table_body = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='registration-table'] tbody\"))\n    )\n    assert registration_table_body.text.strip() == \"\", \"Table body is not empty\"\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
            }
        ]
    },
    "8": {
        "requirement": {
            "description": "The Car Registration System must allow users to delete a specific car registration from the table and local storage, ensuring the table refreshes to reflect the change. The system should handle the following scenarios: \n\n1. **Normal Scenario:** \n   - **Given** the 'Car Registration System' page is loaded and the 'View All Registrations' tab is active, with at least one registration displayed in the table. \n   - **When** the user clicks the 'Delete' button for the first registration, located using the attribute `data-id='delete-btn-0'`. \n   - **Then** the registration should be removed from local storage (using the key 'registrations') and the registration table should refresh, no longer displaying the deleted registration.\n\n2. **Edge Scenario:** \n   - **Given** the 'Car Registration System' page is loaded and the 'View All Registrations' tab is active, with only one registration displayed in the table. \n   - **When** the user clicks the 'Delete' button for the registration, located using the attribute `data-id='delete-btn-0'`. \n   - **Then** the registration should be removed from local storage (using the key 'registrations') and the registration table should refresh, displaying a message indicating no registrations are available.",
            "related_elements": [
                "(By.CSS_SELECTOR, \"[data-testid='view-tab-button']\", \"Button to activate the 'View All Registrations' tab\")",
                "(\"By.TAG_NAME\", \"tr\", \"Table row representing a registration entry\")",
                "(By.CSS_SELECTOR, \"[data-id='delete-btn-0']\", \"Delete button for the registration with data-id 'delete-btn-0'\")",
                "(\"By.CSS_SELECTOR\", \"[data-testid='view-tab-button']\", \"Button to activate the 'View All Registrations' tab\")",
                "(\"By.CSS_SELECTOR\", \"[data-id='delete-btn-0']\", \"Delete button for the first registration\")",
                "(By.CSS_SELECTOR, \"[data-testid='registration-table'] tbody\", \"Table body displaying the list of registrations\")",
                "(\"By.CSS_SELECTOR\", \"[data-testid='registration-table'] tbody\", \"Table body displaying the list of registrations\")",
                "(By.TAG_NAME, \"tr\", \"Table row representing a single registration entry\")"
            ]
        },
        "concise_requirement": "When the user clicks the 'Delete' button for a specific registration in the table, the system should remove the corresponding registration from local storage and refresh the table to reflect the change.",
        "test_cases": [
            {
                "test_case": [
                    "Feature: Deleting a car registration\n  The system should allow users to delete a specific car registration from the table and local storage, and refresh the table to reflect the change.\n\n\n  Scenario: [Normal] Successfully delete a car registration\n    Given the \"Car Registration System\" page is loaded with the following registration data:\n      | Owner's Name | Car Model      | License Number | Registration Date |\n      | John Doe     | Toyota Corolla | ABC123         | 2023-10-01        |\n      | Jane Smith   | Honda Civic    | XYZ789         | 2023-10-02        |\n    And the \"View All Registrations\" tab is active\n    And there is at least one registration displayed in the table\n    When the user clicks the \"Delete\" button for the first registration with data-id \"delete-btn-0\"\n    Then the registration should be removed from the local storage\n    And the registration table should refresh and no longer display the deleted registration\n"
                ],
                "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\nimport json\n\nfile_path = \"/Users/lingyao/PycharmProjects/E2ESD_data_construct/data/Ourdatas/LJY_TEST_NEW2/E2ESD_Bench_20/index.html\"\n\n@given('the \"Car Registration System\" page is loaded with the following registration data')\ndef step_given_page_is_loaded(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file:///Users/lingyao/PycharmProjects/E2ESD_data_construct/data/Ourdatas/LJY_TEST_NEW2/E2ESD_Bench_20/index.html\")\n    # Parse the table of registrations from the Gherkin step\n    registrations = []\n    for row in context.table:\n        registrations.append({\n            \"ownerName\": row[\"Owner's Name\"],\n            \"carModel\": row[\"Car Model\"],\n            \"licenseNumber\": row[\"License Number\"],\n            \"registrationDate\": row[\"Registration Date\"]\n        })\n\n    # Inject the registrations into local storage\n    context.driver.execute_script(\"window.localStorage.setItem('registrations', arguments[0]);\",\n                                  json.dumps(registrations))\n    context.driver.get(f\"file://{file_path}\")\n    context.driver.maximize_window()\n    time.sleep(1)\n\n@given('the \"View All Registrations\" tab is active')\ndef step_given_view_tab_is_active(context):\n    view_tab_button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='view-tab-button']\"))\n    )\n    view_tab_button.click()\n    time.sleep(1)\n\n@given('there is at least one registration displayed in the table')\ndef step_given_registration_displayed(context):\n    table_body = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='registration-table'] tbody\"))\n    )\n    rows = table_body.find_elements(By.TAG_NAME, \"tr\")\n    assert len(rows) > 0, \"No registrations found in the table\"\n    time.sleep(1)\n\n@when('the user clicks the \"Delete\" button for the first registration with data-id \"delete-btn-0\"')\ndef step_when_user_clicks_delete(context):\n    delete_button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-id='delete-btn-0']\"))\n    )\n    delete_button.click()\n    time.sleep(1)\n\n@then('the registration should be removed from the local storage')\ndef step_then_registration_removed_from_storage(context):\n    registrations = context.driver.execute_script(\"return JSON.parse(localStorage.getItem('registrations')) || []\")\n    assert len(registrations) == 1, \"Registration was not removed from local storage\"\n    time.sleep(1)\n\n@then('the registration table should refresh and no longer display the deleted registration')\ndef step_then_table_refreshed(context):\n    table_body = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='registration-table'] tbody\"))\n    )\n    rows = table_body.find_elements(By.TAG_NAME, \"tr\")\n    assert len(rows) == 1, \"Deleted registration is still displayed in the table\"\n    time.sleep(1)\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
            },
            {
                "test_case": [
                    "Feature: Deleting a car registration\n  The system should allow users to delete a specific car registration from the table and local storage, and refresh the table to reflect the change.\n\n\n  Scenario: [Edge] Delete the only registration in the table\n    Given the \"Car Registration System\" page is loaded with the following registration:\n      | Owner's Name | Car Model      | License Number | Registration Date |\n      | John Doe     | Toyota Corolla | ABC123         | 2023-10-01        |\n    And the \"View All Registrations\" tab is active\n    And there is only one registration displayed in the table\n    When the user clicks the \"Delete\" button for the registration with data-id \"delete-btn-0\"\n    Then the registration should be removed from the local storage\n    And the registration table should refresh and display a message indicating no registrations are available\n"
                ],
                "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\nimport json\n\nfile_path = \"/Users/lingyao/PycharmProjects/E2ESD_data_construct/data/Ourdatas/LJY_TEST_NEW2/E2ESD_Bench_20/index.html\"\n\n@given('the \"Car Registration System\" page is loaded with the following registration')\ndef step_impl(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://{file_path}\")\n    time.sleep(1)\n    # Parse the table of registrations from the Gherkin step\n    registrations = []\n    for row in context.table:\n        registrations.append({\n            \"ownerName\": row[\"Owner's Name\"],\n            \"carModel\": row[\"Car Model\"],\n            \"licenseNumber\": row[\"License Number\"],\n            \"registrationDate\": row[\"Registration Date\"]\n        })\n\n    # Inject the registrations into local storage\n    context.driver.execute_script(\"window.localStorage.setItem('registrations', arguments[0]);\",\n                                  json.dumps(registrations))\n    context.driver.get(f\"file://{file_path}\")\n    context.driver.maximize_window()\n    time.sleep(1)\n\n@given('the \"View All Registrations\" tab is active')\ndef step_impl(context):\n    view_tab_button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='view-tab-button']\"))\n    )\n    view_tab_button.click()\n    time.sleep(1)\n\n@given('there is only one registration displayed in the table')\ndef step_impl(context):\n    table_body = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='registration-table'] tbody\"))\n    )\n    rows = table_body.find_elements(By.TAG_NAME, \"tr\")\n    assert len(rows) == 1, f\"Expected 1 registration, but found {len(rows)}\"\n\n@when('the user clicks the \"Delete\" button for the registration with data-id \"delete-btn-0\"')\ndef step_impl(context):\n    delete_button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-id='delete-btn-0']\"))\n    )\n    delete_button.click()\n    time.sleep(1)\n\n@then('the registration should be removed from the local storage')\ndef step_impl(context):\n    registrations = context.driver.execute_script(\"return JSON.parse(localStorage.getItem('registrations')) || []\")\n    assert len(registrations) == 0, \"Expected no registrations in local storage\"\n\n@then('the registration table should refresh and display a message indicating no registrations are available')\ndef step_impl(context):\n    table_body = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='registration-table'] tbody\"))\n    )\n    rows = table_body.find_elements(By.TAG_NAME, \"tr\")\n    assert len(rows) == 0, \"Expected no registrations in the table\"\n\n    # Optionally, check for a message indicating no registrations\n    # no_registrations_message = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='no-registrations-message']\")\n    # assert no_registrations_message.is_displayed(), \"Expected a message indicating no registrations are available\"\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
            }
        ]
    }
}