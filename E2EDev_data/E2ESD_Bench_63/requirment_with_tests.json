{
    "summary": {
        "overview": "This web application allows users to calculate the Least Common Multiple (LCM) and Highest Common Factor (HCF) of two numbers. Users can input two numbers, trigger the calculation, and view the results along with an indication of whether the result is even or odd. The application provides a responsive and interactive user interface with visual feedback.",
        "predefined_options": "No predefined options are available; users manually input two numbers for LCM or HCF calculations.",
        "external_resources": [
            {
                "name": "Logo",
                "source": "./public/img/logo.jfif"
            },
            {
                "name": "CSS Stylesheet",
                "source": "./public/css/style.css"
            },
            {
                "name": "Main JavaScript File",
                "source": "./public/js/main.js"
            }
        ],
        "external_js_libraries": [
            {
                "name": "jQuery",
                "source": "https://cdnjs.cloudflare.com/ajax/libs/jquery/3.6.0/jquery.min.js"
            }
        ]
    },
    "finegrained_rewith_test": {
        "1": {
            "requirement": {
                "description": "Upon loading the webpage, the user should see two buttons: one labeled 'Click here to find LCM of two numbers.' with data-testid 'lcm-button', and another labeled 'Click here to find HCF of two numbers.' with data-testid 'hcf-button'. When the user clicks the 'lcm-button', the LCM input form, identified by the class 'resultboxLcm', should smoothly slide into view using a slow animation, while simultaneously ensuring that the HCF input form, identified by the class 'resultboxHcf', is hidden from view. This interaction should be seamless and intuitive, providing immediate visual feedback to the user by toggling the visibility of the respective forms."
            },
            "test_cases": [
                {
                    "test_case": [
                        "Feature: Display LCM Input Form and Hide HCF Input Form\n  The purpose of this feature is to ensure that when the user clicks the \"Click here to find LCM of two numbers.\" button, the LCM input form is displayed, and the HCF input form is hidden.\n\n\nScenario: [Normal] Display LCM form and hide HCF form on button click\n    Given the webpage is loaded\n    And the LCM button with data-testid 'lcm-button' is visible\n    When the user clicks the LCM button with data-testid 'lcm-button'\n    Then the LCM input form with class 'resultboxLcm' should be visible\n    And the HCF input form with class 'resultboxHcf' should be hidden"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given(\"the webpage is loaded\")\ndef step_given_webpage_loaded(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)\n\n@given(\"the LCM button with data-testid 'lcm-button' is visible\")\ndef step_given_lcm_button_visible(context):\n    lcm_button = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='lcm-button']\"))\n    )\n    assert lcm_button.is_displayed(), \"LCM button is not visible\"\n\n@when(\"the user clicks the LCM button with data-testid 'lcm-button'\")\ndef step_when_user_clicks_lcm_button(context):\n    lcm_button = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='lcm-button']\")\n    WebDriverWait(context.driver, 10).until(EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='lcm-button']\")))\n    lcm_button.click()\n    time.sleep(1)\n\n@then(\"the LCM input form with class 'resultboxLcm' should be visible\")\ndef step_then_lcm_form_visible(context):\n    lcm_form = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \".resultboxLcm\"))\n    )\n    assert lcm_form.is_displayed(), \"LCM input form is not visible\"\n\n\n@then(\"the HCF input form with class 'resultboxHcf' should be hidden\")\ndef step_then_hcf_form_hidden(context):\n    hcf_form = context.driver.find_element(By.CSS_SELECTOR, \".resultboxHcf\")\n    assert not hcf_form.is_displayed(), \"HCF input form is not hidden\"\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                }
            ]
        },
        "2": {
            "requirement": {
                "description": "When the user clicks the button with data-testid 'hcf-button', labeled 'Click here to find HCF of two numbers.', the HCF input form with class 'resultboxHcf' should be displayed using a slide toggle animation, and the LCM input form with class 'resultboxLcm' should be hidden by sliding up. If the HCF button is clicked multiple times, the HCF input form should toggle its visibility, ensuring it remains hidden if clicked twice consecutively. The LCM input form should remain hidden regardless of the number of clicks on the HCF button."
            },
            "test_cases": [
                {
                    "test_case": [
                        "Feature: Display HCF input form and hide LCM input form when the HCF button is clicked\n  The purpose of this feature is to ensure that clicking the \"Click here to find HCF of two numbers.\" button displays the HCF input form and hides the LCM input form.\n\n\n  Scenario: [Normal] Display HCF input form and hide LCM input form when HCF button is clicked\n    Given the webpage is loaded and visible\n    And the HCF button with data-testid \"hcf-button\" is visible\n    And the LCM input form with class \"resultboxLcm\" is hidden\n    And the HCF input form with class \"resultboxHcf\" is hidden\n    When the user clicks the HCF button with data-testid \"hcf-button\"\n    Then the HCF input form with class \"resultboxHcf\" should be displayed\n    And the LCM input form with class \"resultboxLcm\" should be hidden\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\ndef is_collapsed(element):\n    aria = element.get_attribute(\"aria-expanded\")\n    if aria is not None and aria.lower() == \"false\":\n        return True\n\n    class_attr = element.get_attribute(\"class\") or \"\"\n    class_list = class_attr.split()\n    if \"collapsed\" in class_list:\n        return True\n\n    data_expanded = element.get_attribute(\"data-expanded\")\n    if data_expanded is not None and data_expanded.lower() == \"false\":\n        return True\n\n    style = element.get_attribute(\"style\") or \"\"\n    if \"display: none\" in style or \"visibility: hidden\" in style or \"height: 0\" in style:\n        return True\n\n    return not element.is_displayed()\n\n@given('the webpage is loaded and visible')\ndef step_given_webpage_loaded(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)\n\n@given('the HCF button with data-testid \"hcf-button\" is visible')\ndef step_given_hcf_button_visible(context):\n    hcf_button = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='hcf-button']\"))\n    )\n    assert hcf_button.is_displayed(), \"HCF button is not visible\"\n    time.sleep(1)\n\n@given('the LCM input form with class \"resultboxLcm\" is hidden')\ndef step_given_lcm_form_hidden(context):\n    lcm_form = context.driver.find_element(By.CSS_SELECTOR, \".resultboxLcm\")\n    assert is_collapsed(lcm_form), \"LCM input form is not hidden\"\n    time.sleep(1)\n\n@given('the HCF input form with class \"resultboxHcf\" is hidden')\ndef step_given_hcf_form_hidden(context):\n    hcf_form = context.driver.find_element(By.CSS_SELECTOR, \".resultboxHcf\")\n    assert is_collapsed(hcf_form), \"HCF input form is not hidden\"\n    time.sleep(1)\n\n@when('the user clicks the HCF button with data-testid \"hcf-button\"')\ndef step_when_user_clicks_hcf_button(context):\n    hcf_button = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='hcf-button']\")\n    hcf_button.click()\n    time.sleep(1)\n\n@then('the HCF input form with class \"resultboxHcf\" should be displayed')\ndef step_then_hcf_form_displayed(context):\n    hcf_form = context.driver.find_element(By.CSS_SELECTOR, \".resultboxHcf\")\n    assert not is_collapsed(hcf_form), \"HCF input form is not displayed\"\n    time.sleep(1)\n\n@then('the LCM input form with class \"resultboxLcm\" should be hidden')\ndef step_then_lcm_form_hidden(context):\n    lcm_form = context.driver.find_element(By.CSS_SELECTOR, \".resultboxLcm\")\n    assert is_collapsed(lcm_form), \"LCM input form is not hidden\"\n    time.sleep(1)\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: Display HCF input form and hide LCM input form when the HCF button is clicked\n  The purpose of this feature is to ensure that clicking the \"Click here to find HCF of two numbers.\" button displays the HCF input form and hides the LCM input form.\n\n\nScenario: [Edge] Ensure HCF input form remains displayed when HCF button is clicked multiple times\n    Given the webpage is loaded and visible\n    And the HCF button with data-testid \"hcf-button\" is visible\n    And the LCM input form with class \"resultboxLcm\" is hidden\n    And the HCF input form with class \"resultboxHcf\" is hidden\n    When the user clicks the HCF button with data-testid \"hcf-button\" twice\n    Then the HCF input form with class \"resultboxHcf\" should remain hidden\n    And the LCM input form with class \"resultboxLcm\" should remain hidden"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\n# Path to the local HTML file\nfile_path = \"index.html\"\n\n@given(\"the webpage is loaded and visible\")\ndef step_given_webpage_loaded(context):\n    # Initialize the WebDriver and load the test page\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)  # Allow time for the page to load\n\n@given('the HCF button with data-testid \"hcf-button\" is visible')\ndef step_given_hcf_button_visible(context):\n    # Wait for the HCF button to be visible\n    hcf_button = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='hcf-button']\"))\n    )\n    assert hcf_button.is_displayed(), \"HCF button is not visible\"\n\n@given('the LCM input form with class \"resultboxLcm\" is hidden')\ndef step_given_lcm_form_hidden(context):\n    # Check that the LCM input form is hidden\n    lcm_form = context.driver.find_element(By.CSS_SELECTOR, \".resultboxLcm\")\n    assert not lcm_form.is_displayed(), \"LCM input form is not hidden\"\n\n@given('the HCF input form with class \"resultboxHcf\" is hidden')\ndef step_given_hcf_form_hidden(context):\n    # Check that the HCF input form is hidden\n    hcf_form = context.driver.find_element(By.CSS_SELECTOR, \".resultboxHcf\")\n    assert not hcf_form.is_displayed(), \"HCF input form is not hidden\"\n\n@when('the user clicks the HCF button with data-testid \"hcf-button\" twice')\ndef step_when_user_clicks_hcf_button_twice(context):\n    # Find the HCF button and click it twice\n    hcf_button = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='hcf-button']\")\n    hcf_button.click()\n    time.sleep(1)  # Allow time for the UI to update\n    hcf_button.click()\n    time.sleep(1)\n\n@then('the HCF input form with class \"resultboxHcf\" should remain hidden')\ndef step_then_hcf_form_remains_hidden(context):\n    # Verify that the HCF input form is still hidden\n    hcf_form = context.driver.find_element(By.CSS_SELECTOR, \".resultboxHcf\")\n    assert not hcf_form.is_displayed(), \"HCF input form is not hidden\"\n\n@then('the LCM input form with class \"resultboxLcm\" should remain hidden')\ndef step_then_lcm_form_remains_hidden(context):\n    # Verify that the LCM input form is still hidden\n    lcm_form = context.driver.find_element(By.CSS_SELECTOR, \".resultboxLcm\")\n    assert not lcm_form.is_displayed(), \"LCM input form is not hidden\"\n\n# Ensure the browser is closed after each scenario\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                }
            ]
        },
        "3": {
            "requirement": {
                "description": "The user must be able to input two numbers into the LCM form using the input fields labeled 'Num1...' and 'Num2...', with the following behaviors and validations: The input fields are identified by the attributes data-testid='lcm-num1-input' and data-testid='lcm-num2-input'. The user can input positive integers, zero, or negative integers into these fields. The application must handle edge cases such as both fields containing the same number, one field containing zero, or one field containing a negative number. The input values must persist in the respective fields after entry, and the UI should display the entered values accurately. Any invalid input (e.g., non-numeric values) should be rejected, and the fields should remain empty or display an error message. The LCM form must be visible and accessible when the webpage is loaded."
            },
            "test_cases": [
                {
                    "test_case": [
                        "Feature: Input two numbers in the LCM form\n  The user should be able to input two numbers in the LCM form using the input fields labeled 'Num1...' and 'Num2...'.\n\n\n  Scenario: [Normal] User inputs valid numbers in the LCM form\n    Given the webpage is loaded\n    And the LCM form is visible\n    When the user enters '12' into the input field with data-testid 'lcm-num1-input'\n    And the user enters '18' into the input field with data-testid 'lcm-num2-input'\n    Then the input field with data-testid 'lcm-num1-input' should contain '12'\n    And the input field with data-testid 'lcm-num2-input' should contain '18'\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given(\"the webpage is loaded\")\ndef step_given_webpage_loaded(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)\n\n@given(\"the LCM form is visible\")\ndef step_given_lcm_form_visible(context):\n\n    # click to show\n    lcm_btn = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='lcm-button']\"))\n    )\n    lcm_btn.click()\n    time.sleep(0.5)\n\n@when(\"the user enters '12' into the input field with data-testid 'lcm-num1-input'\")\ndef step_when_user_enters_num1(context):\n    num1_input = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='lcm-num1-input']\"))\n    )\n    num1_input.clear()\n    num1_input.send_keys(\"12\")\n    time.sleep(0.5)\n\n@when(\"the user enters '18' into the input field with data-testid 'lcm-num2-input'\")\ndef step_when_user_enters_num2(context):\n    num2_input = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='lcm-num2-input']\"))\n    )\n    num2_input.clear()\n    num2_input.send_keys(\"18\")\n    time.sleep(0.5)\n\n@then(\"the input field with data-testid 'lcm-num1-input' should contain '12'\")\ndef step_then_num1_input_contains(context):\n    num1_input = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='lcm-num1-input']\")\n    assert num1_input.get_attribute(\"value\") == \"12\", f\"Expected '12', but got '{num1_input.get_attribute('value')}'\"\n\n\n@then(\"the input field with data-testid 'lcm-num2-input' should contain '18'\")\ndef step_then_num2_input_contains(context):\n    num2_input = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='lcm-num2-input']\")\n    assert num2_input.get_attribute(\"value\") == \"18\", f\"Expected '18', but got '{num2_input.get_attribute('value')}'\"\n\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: Input two numbers in the LCM form\n  The user should be able to input two numbers in the LCM form using the input fields labeled 'Num1...' and 'Num2...'.\n\n\n  Scenario: [Edge] User inputs the same number in both fields in the LCM form\n    Given the webpage is loaded\n    And the LCM form is visible\n    When the user enters '7' into the input field with data-testid 'lcm-num1-input'\n    And the user enters '7' into the input field with data-testid 'lcm-num2-input'\n    Then the input field with data-testid 'lcm-num1-input' should contain '7'\n    And the input field with data-testid 'lcm-num2-input' should contain '7'\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given(\"the webpage is loaded\")\ndef step_given_webpage_is_loaded(context):\n    # Initialize the WebDriver and load the test page\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    context.driver.maximize_window()\n    time.sleep(1)  # Allow the page to load completely\n\n@given(\"the LCM form is visible\")\ndef step_given_lcm_form_is_visible(context):\n    # Wait for the LCM form to be visible\n    lcm_btn = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='lcm-button']\"))\n    )\n    lcm_btn.click()\n    time.sleep(1)  # Allow the form to load completely\n\n@when(\"the user enters '7' into the input field with data-testid 'lcm-num1-input'\")\ndef step_when_user_enters_7_in_lcm_num1(context):\n    # Locate the input field and enter the value '7'\n    num1_input = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='lcm-num1-input']\"))\n    )\n    num1_input.clear()\n    num1_input.send_keys(\"7\")\n    time.sleep(0.5)\n\n@when(\"the user enters '7' into the input field with data-testid 'lcm-num2-input'\")\ndef step_when_user_enters_7_in_lcm_num2(context):\n    # Locate the input field and enter the value '7'\n    num2_input = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='lcm-num2-input']\"))\n    )\n    num2_input.clear()\n    num2_input.send_keys(\"7\")\n    time.sleep(0.5)\n\n@then(\"the input field with data-testid 'lcm-num1-input' should contain '7'\")\ndef step_then_lcm_num1_should_contain_7(context):\n    # Verify the value in the input field\n    num1_input = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='lcm-num1-input']\"))\n    )\n    assert num1_input.get_attribute(\"value\") == \"7\", f\"Expected '7', but got '{num1_input.get_attribute('value')}'\"\n\n@then(\"the input field with data-testid 'lcm-num2-input' should contain '7'\")\ndef step_then_lcm_num2_should_contain_7(context):\n    # Verify the value in the input field\n    num2_input = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='lcm-num2-input']\"))\n    )\n    assert num2_input.get_attribute(\"value\") == \"7\", f\"Expected '7', but got '{num2_input.get_attribute('value')}'\"\n\n# Teardown to close the browser after the test\ndef after_scenario(context, scenario):\n    if hasattr(context, \"driver\"):\n        context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: Input two numbers in the LCM form\n  The user should be able to input two numbers in the LCM form using the input fields labeled 'Num1...' and 'Num2...'.\n\n\n  Scenario: [Edge] User inputs zero in one of the fields in the LCM form\n    Given the webpage is loaded\n    And the LCM form is visible\n    When the user enters '0' into the input field with data-testid 'lcm-num1-input'\n    And the user enters '15' into the input field with data-testid 'lcm-num2-input'\n    Then the input field with data-testid 'lcm-num1-input' should contain '0'\n    And the input field with data-testid 'lcm-num2-input' should contain '15'\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the webpage is loaded')\ndef step_given_webpage_loaded(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)  # Allow time for the page to load\n\n@given('the LCM form is visible')\ndef step_given_lcm_form_visible(context):\n    lcm_button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='lcm-button']\"))\n    )\n    lcm_button.click()\n    time.sleep(1)  # Allow time for the form to appear\n\n@when('the user enters \\'0\\' into the input field with data-testid \\'lcm-num1-input\\'')\ndef step_when_user_enters_zero_in_lcm_num1(context):\n    num1_input = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='lcm-num1-input']\")\n    num1_input.clear()\n    num1_input.send_keys('0')\n    time.sleep(0.5)\n\n@when('the user enters \\'15\\' into the input field with data-testid \\'lcm-num2-input\\'')\ndef step_when_user_enters_fifteen_in_lcm_num2(context):\n    num2_input = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='lcm-num2-input']\")\n    num2_input.clear()\n    num2_input.send_keys('15')\n    time.sleep(0.5)\n\n@then('the input field with data-testid \\'lcm-num1-input\\' should contain \\'0\\'')\ndef step_then_lcm_num1_should_contain_zero(context):\n    num1_input = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='lcm-num1-input']\")\n    assert num1_input.get_attribute('value') == '0', f\"Expected '0', but got '{num1_input.get_attribute('value')}'\"\n\n@then('the input field with data-testid \\'lcm-num2-input\\' should contain \\'15\\'')\ndef step_then_lcm_num2_should_contain_fifteen(context):\n    num2_input = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='lcm-num2-input']\")\n    assert num2_input.get_attribute('value') == '15', f\"Expected '15', but got '{num2_input.get_attribute('value')}'\"\n\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: Input two numbers in the LCM form\n  The user should be able to input two numbers in the LCM form using the input fields labeled 'Num1...' and 'Num2...'.\n\n\n  Scenario: [Error] User inputs a negative number in the LCM form\n    Given the webpage is loaded\n    And the LCM form is visible\n    When the user enters '-5' into the input field with data-testid 'lcm-num1-input'\n    And the user enters '10' into the input field with data-testid 'lcm-num2-input'\n    Then the input field with data-testid 'lcm-num1-input' should contain '-5'\n    And the input field with data-testid 'lcm-num2-input' should contain '10'\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given(\"the webpage is loaded\")\ndef step_given_webpage_loaded(context):\n    # Initialize the WebDriver and load the test page\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)  # Allow the page to load completely\n\n@given(\"the LCM form is visible\")\ndef step_given_lcm_form_visible(context):\n    # Ensure the LCM form is visible\n    lcm_button = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='lcm-button']\"))\n    )\n    lcm_button.click()\n    time.sleep(1)  # Allow the form to load\n\n@when(\"the user enters '-5' into the input field with data-testid 'lcm-num1-input'\")\ndef step_when_user_enters_negative_num1(context):\n    # Locate the input field and enter '-5'\n    num1_input = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='lcm-num1-input']\"))\n    )\n    num1_input.clear()\n    num1_input.send_keys(\"-5\")\n    time.sleep(0.5)\n\n@when(\"the user enters '10' into the input field with data-testid 'lcm-num2-input'\")\ndef step_when_user_enters_positive_num2(context):\n    # Locate the input field and enter '10'\n    num2_input = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='lcm-num2-input']\"))\n    )\n    num2_input.clear()\n    num2_input.send_keys(\"10\")\n    time.sleep(0.5)\n\n@then(\"the input field with data-testid 'lcm-num1-input' should contain '-5'\")\ndef step_then_num1_input_contains_negative(context):\n    # Verify the input field contains '-5'\n    num1_input = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='lcm-num1-input']\"))\n    )\n    assert num1_input.get_attribute(\"value\") == \"-5\", f\"Expected '-5', but got '{num1_input.get_attribute('value')}'\"\n\n\n@then(\"the input field with data-testid 'lcm-num2-input' should contain '10'\")\ndef step_then_num2_input_contains_positive(context):\n    # Verify the input field contains '10'\n    num2_input = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='lcm-num2-input']\"))\n    )\n    assert num2_input.get_attribute(\"value\") == \"10\", f\"Expected '10', but got '{num2_input.get_attribute('value')}'\"\n\n\n# Cleanup after the test\ndef after_scenario(context, scenario):\n    if hasattr(context, 'driver'):\n        context.driver.quit()"
                }
            ]
        },
        "4": {
            "requirement": {
                "description": "The user must be able to input two numbers into the HCF form using the input fields with placeholders 'Num1...' and 'Num2...', identified by data-testid attributes 'hcf-num1-input' and 'hcf-num2-input', respectively. Upon loading the webpage, the user should see a button with the text 'Click here to find HCF of two numbers.' and data-testid 'hcf-button'. Clicking this button should reveal the HCF form. The form must accept any valid integer inputs, including edge cases such as both fields having the same number or one field having zero. The input values should be accurately reflected in their respective fields upon entry."
            },
            "test_cases": [
                {
                    "test_case": [
                        "Feature: HCF Form Input Functionality\n  The user should be able to input two numbers in the HCF form using the input fields labeled 'Num1...' and 'Num2...'.\n\n\n  Scenario: [Normal] User inputs valid numbers into the HCF form\n    Given the webpage is loaded\n    And the user sees the button with text \"Click here to find HCF of two numbers.\" and data-testid \"hcf-button\"\n    When the user clicks the button with data-testid \"hcf-button\"\n    And the user enters \"12\" into the input field with data-testid \"hcf-num1-input\"\n    And the user enters \"18\" into the input field with data-testid \"hcf-num2-input\"\n    Then the input field with data-testid \"hcf-num1-input\" should have the value \"12\"\n    And the input field with data-testid \"hcf-num2-input\" should have the value \"18\"\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the webpage is loaded')\ndef step_given_webpage_loaded(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)\n\n@given('the user sees the button with text \"Click here to find HCF of two numbers.\" and data-testid \"hcf-button\"')\ndef step_given_user_sees_hcf_button(context):\n    hcf_button = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='hcf-button']\"))\n    )\n    assert \"Click here to find HCF of two numbers.\" in hcf_button.text\n\n@when('the user clicks the button with data-testid \"hcf-button\"')\ndef step_when_user_clicks_hcf_button(context):\n    hcf_button = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='hcf-button']\")\n    hcf_button.click()\n    time.sleep(1)\n\n@when('the user enters \"12\" into the input field with data-testid \"hcf-num1-input\"')\ndef step_when_user_enters_num1(context):\n    num1_input = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='hcf-num1-input']\")\n    num1_input.clear()\n    num1_input.send_keys(\"12\")\n    time.sleep(1)\n\n@when('the user enters \"18\" into the input field with data-testid \"hcf-num2-input\"')\ndef step_when_user_enters_num2(context):\n    num2_input = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='hcf-num2-input']\")\n    num2_input.clear()\n    num2_input.send_keys(\"18\")\n    time.sleep(1)\n\n@then('the input field with data-testid \"hcf-num1-input\" should have the value \"12\"')\ndef step_then_check_num1_value(context):\n    num1_input = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='hcf-num1-input']\")\n    assert num1_input.get_attribute(\"value\") == \"12\"\n\n@then('the input field with data-testid \"hcf-num2-input\" should have the value \"18\"')\ndef step_then_check_num2_value(context):\n    num2_input = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='hcf-num2-input']\")\n    assert num2_input.get_attribute(\"value\") == \"18\"\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: HCF Form Input Functionality\n  The user should be able to input two numbers in the HCF form using the input fields labeled 'Num1...' and 'Num2...'.\n\n\n  Scenario: [Edge] User inputs the same number into both HCF form fields\n    Given the webpage is loaded\n    And the user sees the button with text \"Click here to find HCF of two numbers.\" and data-testid \"hcf-button\"\n    When the user clicks the button with data-testid \"hcf-button\"\n    And the user enters \"7\" into the input field with data-testid \"hcf-num1-input\"\n    And the user enters \"7\" into the input field with data-testid \"hcf-num2-input\"\n    Then the input field with data-testid \"hcf-num1-input\" should have the value \"7\"\n    And the input field with data-testid \"hcf-num2-input\" should have the value \"7\"\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\ndef is_visible(element):\n    return element.is_displayed()\n\n@given(\"the webpage is loaded\")\ndef step_given_webpage_loaded(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)  # Allow the page to load completely\n\n@given('the user sees the button with text \"Click here to find HCF of two numbers.\" and data-testid \"hcf-button\"')\ndef step_given_user_sees_hcf_button(context):\n    hcf_button = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='hcf-button']\"))\n    )\n    assert \"Click here to find HCF of two numbers.\" in hcf_button.text, f\"Expected button text not found: {hcf_button.text}\"\n\n@when('the user clicks the button with data-testid \"hcf-button\"')\ndef step_when_user_clicks_hcf_button(context):\n    hcf_button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='hcf-button']\"))\n    )\n    hcf_button.click()\n    time.sleep(1)  # Allow the UI to update\n\n@when('the user enters \"7\" into the input field with data-testid \"hcf-num1-input\"')\ndef step_when_user_enters_num1(context):\n    num1_input = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='hcf-num1-input']\"))\n    )\n    num1_input.clear()\n    num1_input.send_keys(\"7\")\n    time.sleep(1)  # Allow the input to register\n\n@when('the user enters \"7\" into the input field with data-testid \"hcf-num2-input\"')\ndef step_when_user_enters_num2(context):\n    num2_input = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='hcf-num2-input']\"))\n    )\n    num2_input.clear()\n    num2_input.send_keys(\"7\")\n    time.sleep(1)  # Allow the input to register\n\n@then('the input field with data-testid \"hcf-num1-input\" should have the value \"7\"')\ndef step_then_num1_input_has_value(context):\n    num1_input = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='hcf-num1-input']\"))\n    )\n    assert num1_input.get_attribute(\"value\") == \"7\", f\"Expected value '7', but got '{num1_input.get_attribute('value')}'\"\n\n@then('the input field with data-testid \"hcf-num2-input\" should have the value \"7\"')\ndef step_then_num2_input_has_value(context):\n    num2_input = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='hcf-num2-input']\"))\n    )\n    assert num2_input.get_attribute(\"value\") == \"7\", f\"Expected value '7', but got '{num2_input.get_attribute('value')}'\"\n\n# Teardown to close the browser after tests\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: HCF Form Input Functionality\n  The user should be able to input two numbers in the HCF form using the input fields labeled 'Num1...' and 'Num2...'.\n\n\n  Scenario: [Edge] User inputs zero into one of the HCF form fields\n    Given the webpage is loaded\n    And the user sees the button with text \"Click here to find HCF of two numbers.\" and data-testid \"hcf-button\"\n    When the user clicks the button with data-testid \"hcf-button\"\n    And the user enters \"0\" into the input field with data-testid \"hcf-num1-input\"\n    And the user enters \"15\" into the input field with data-testid \"hcf-num2-input\"\n    Then the input field with data-testid \"hcf-num1-input\" should have the value \"0\"\n    And the input field with data-testid \"hcf-num2-input\" should have the value \"15\"\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the webpage is loaded')\ndef step_given_webpage_loaded(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)\n\n@given('the user sees the button with text \"Click here to find HCF of two numbers.\" and data-testid \"hcf-button\"')\ndef step_given_user_sees_hcf_button(context):\n    hcf_button = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='hcf-button']\"))\n    )\n    assert \"Click here to find HCF of two numbers.\" in hcf_button.text\n\n@when('the user clicks the button with data-testid \"hcf-button\"')\ndef step_when_user_clicks_hcf_button(context):\n    hcf_button = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='hcf-button']\")\n    hcf_button.click()\n    time.sleep(1)\n\n@when('the user enters \"0\" into the input field with data-testid \"hcf-num1-input\"')\ndef step_when_user_enters_zero_in_hcf_num1(context):\n    num1_input = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='hcf-num1-input']\")\n    num1_input.clear()\n    num1_input.send_keys(\"0\")\n    time.sleep(1)\n\n@when('the user enters \"15\" into the input field with data-testid \"hcf-num2-input\"')\ndef step_when_user_enters_fifteen_in_hcf_num2(context):\n    num2_input = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='hcf-num2-input']\")\n    num2_input.clear()\n    num2_input.send_keys(\"15\")\n    time.sleep(1)\n\n@then('the input field with data-testid \"hcf-num1-input\" should have the value \"0\"')\ndef step_then_hcf_num1_should_have_value_zero(context):\n    num1_input = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='hcf-num1-input']\")\n    assert num1_input.get_attribute(\"value\") == \"0\"\n\n@then('the input field with data-testid \"hcf-num2-input\" should have the value \"15\"')\ndef step_then_hcf_num2_should_have_value_fifteen(context):\n    num2_input = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='hcf-num2-input']\")\n    assert num2_input.get_attribute(\"value\") == \"15\"\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                }
            ]
        },
        "5": {
            "requirement": {
                "description": "When the user clicks the 'Calculate' button in the LCM form, the system should calculate the LCM of the two input numbers entered in the fields with data-testid 'lcm-num1-input' and 'lcm-num2-input'. The result should be displayed in the area with data-testid 'lcm-result-display'. The button with data-testid 'lcm-button' should be clicked to reveal the LCM form. If either input field is empty, the result area should remain unchanged. The system should also indicate whether the calculated LCM is even or odd by adjusting the opacity of elements with data-testid 'lcm-even-display' and 'lcm-odd-display'. The form should handle normal cases, such as both inputs being positive integers, and edge cases, such as one input being empty."
            },
            "test_cases": [
                {
                    "test_case": [
                        "Feature: Calculate LCM of two input numbers\n  The system should calculate the LCM of two numbers entered in the LCM form and display the result in the designated result area when the user clicks the \"Calculate\" button.\n\n\nScenario: [Normal] Calculate LCM of two positive integers\n    Given the user is on the \"LCM and HCF\" page\n    And the user sees the button with data-testid \"lcm-button\"\n    When the user clicks the button with data-testid \"lcm-button\"\n    And the user enters \"12\" into the input field with data-testid \"lcm-num1-input\"\n    And the user enters \"18\" into the input field with data-testid \"lcm-num2-input\"\n    And the user clicks the \"Calculate\" button with data-testid \"lcm-submit-button\"\n    Then the result area with data-testid \"lcm-result-display\" should display \"LCM of 12 and 18 is 36\""
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\n# Placeholder for the file path\nfile_path = \"index.html\"\n\n@given('the user is on the \"LCM and HCF\" page')\ndef step_user_on_lcm_hcf_page(context):\n    # Initialize the WebDriver and navigate to the test page\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    context.driver.maximize_window()\n    time.sleep(1)  # Allow the page to load completely\n\n@given('the user sees the button with data-testid \"lcm-button\"')\ndef step_user_sees_lcm_button(context):\n    # Wait for the LCM button to be visible\n    lcm_button = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='lcm-button']\"))\n    )\n    assert lcm_button.is_displayed(), \"LCM button is not visible\"\n\n@when('the user clicks the button with data-testid \"lcm-button\"')\ndef step_user_clicks_lcm_button(context):\n    # Click the LCM button\n    lcm_button = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='lcm-button']\")\n    lcm_button.click()\n    time.sleep(1)  # Allow the LCM form to toggle into view\n\n@when('the user enters \"12\" into the input field with data-testid \"lcm-num1-input\"')\ndef step_user_enters_num1(context):\n    # Enter \"12\" into the first input field\n    num1_input = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='lcm-num1-input']\")\n    num1_input.clear()\n    num1_input.send_keys(\"12\")\n    time.sleep(1)\n\n@when('the user enters \"18\" into the input field with data-testid \"lcm-num2-input\"')\ndef step_user_enters_num2(context):\n    # Enter \"18\" into the second input field\n    num2_input = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='lcm-num2-input']\")\n    num2_input.clear()\n    num2_input.send_keys(\"18\")\n    time.sleep(1)\n\n@when('the user clicks the \"Calculate\" button with data-testid \"lcm-submit-button\"')\ndef step_user_clicks_calculate_button(context):\n    # Click the \"Calculate\" button\n    calculate_button = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='lcm-submit-button']\")\n    calculate_button.click()\n    time.sleep(1)  # Allow the calculation result to be displayed\n\n@then('the result area with data-testid \"lcm-result-display\" should display \"LCM of 12 and 18 is 36\"')\ndef step_verify_lcm_result(context):\n    # Verify the result displayed in the result area\n    result_display = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='lcm-result-display']\"))\n    )\n    expected_result = \"LCM of 12 and 18 is 36\"\n    assert expected_result in result_display.text, f\"Expected '{expected_result}', but got '{result_display.text}'\"\n\n# Hook for cleanup after each scenario\ndef after_scenario(context, scenario):\n    # Close the browser driver\n    if hasattr(context, 'driver'):\n        context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: Calculate LCM of two input numbers\n  The system should calculate the LCM of two numbers entered in the LCM form and display the result in the designated result area when the user clicks the \"Calculate\" button.\n\n\nScenario: [Normal] Calculate LCM of two positive integers\n    Given the user is on the \"LCM and HCF\" page\n    And the user sees the button with data-testid \"lcm-button\"\n    When the user clicks the button with data-testid \"lcm-button\"\n    And the user enters \"1\" into the input field with data-testid \"lcm-num1-input\"\n    And the user enters \"15\" into the input field with data-testid \"lcm-num2-input\"\n    And the user clicks the \"Calculate\" button with data-testid \"lcm-submit-button\"\n    Then the result area with data-testid \"lcm-result-display\" should display \"LCM of 1 and 15 is 15\""
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\ndef is_visible(driver, element):\n    return driver.execute_script(\"return arguments[0].offsetWidth > 0 && arguments[0].offsetHeight > 0;\", element)\n\n@given('the user is on the \"LCM and HCF\" page')\ndef step_given_user_on_lcm_hcf_page(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)  # Allow page to load\n\n@given('the user sees the button with data-testid \"lcm-button\"')\ndef step_given_user_sees_lcm_button(context):\n    lcm_button = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='lcm-button']\"))\n    )\n    assert is_visible(context.driver, lcm_button), \"LCM button is not visible\"\n\n@when('the user clicks the button with data-testid \"lcm-button\"')\ndef step_when_user_clicks_lcm_button(context):\n    lcm_button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='lcm-button']\"))\n    )\n    lcm_button.click()\n    time.sleep(1)  # Allow UI updates\n\n@when('the user enters \"1\" into the input field with data-testid \"lcm-num1-input\"')\ndef step_when_user_enters_num1(context):\n    num1_input = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='lcm-num1-input']\"))\n    )\n    num1_input.clear()\n    num1_input.send_keys(\"1\")\n    time.sleep(1)  # Allow input processing\n\n@when('the user enters \"15\" into the input field with data-testid \"lcm-num2-input\"')\ndef step_when_user_enters_num2(context):\n    num2_input = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='lcm-num2-input']\"))\n    )\n    num2_input.clear()\n    num2_input.send_keys(\"15\")\n    time.sleep(1)  # Allow input processing\n\n@when('the user clicks the \"Calculate\" button with data-testid \"lcm-submit-button\"')\ndef step_when_user_clicks_calculate_button(context):\n    calculate_button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='lcm-submit-button']\"))\n    )\n    calculate_button.click()\n    time.sleep(1)  # Allow calculation processing\n\n@then('the result area with data-testid \"lcm-result-display\" should display \"LCM of 1 and 15 is 15\"')\ndef step_then_result_displayed(context):\n    result_display = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='lcm-result-display']\"))\n    )\n    expected_text = \"LCM of 1 and 15 is 15\"\n    assert expected_text.strip() in result_display.text.strip(), f\"Expected '{expected_text}' but got '{result_display.text}'\"\n\n    # Close the browser driver\n    context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: Calculate LCM of two input numbers\n  The system should calculate the LCM of two numbers entered in the LCM form and display the result in the designated result area when the user clicks the \"Calculate\" button.\n\n\nScenario: [Normal] Calculate LCM of two positive integers\n    Given the user is on the \"LCM and HCF\" page\n    And the user sees the button with data-testid \"lcm-button\"\n    When the user clicks the button with data-testid \"lcm-button\"\n    And the user enters \"7\" into the input field with data-testid \"lcm-num1-input\"\n    And the user enters \"7\" into the input field with data-testid \"lcm-num2-input\"\n    And the user clicks the \"Calculate\" button with data-testid \"lcm-submit-button\"\n    Then the result area with data-testid \"lcm-result-display\" should display \"LCM of 7 and 7 is 7\""
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the user is on the \"LCM and HCF\" page')\ndef step_user_on_lcm_hcf_page(context):\n    # Initialize the WebDriver and navigate to the test page\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    context.driver.maximize_window()\n    time.sleep(1)  # Allow the page to load completely\n\n@given('the user sees the button with data-testid \"lcm-button\"')\ndef step_user_sees_lcm_button(context):\n    # Wait for the LCM button to be visible\n    lcm_button = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='lcm-button']\"))\n    )\n    assert lcm_button.is_displayed(), \"LCM button is not visible\"\n\n@when('the user clicks the button with data-testid \"lcm-button\"')\ndef step_user_clicks_lcm_button(context):\n    # Click the LCM button\n    lcm_button = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='lcm-button']\")\n    lcm_button.click()\n    time.sleep(1)  # Allow the LCM form to toggle into view\n\n@when('the user enters \"7\" into the input field with data-testid \"lcm-num1-input\"')\ndef step_user_enters_num1(context):\n    # Enter \"7\" into the first input field\n    num1_input = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='lcm-num1-input']\")\n    num1_input.clear()\n    num1_input.send_keys(\"7\")\n    time.sleep(1)\n\n@when('the user enters \"7\" into the input field with data-testid \"lcm-num2-input\"')\ndef step_user_enters_num2(context):\n    # Enter \"7\" into the second input field\n    num2_input = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='lcm-num2-input']\")\n    num2_input.clear()\n    num2_input.send_keys(\"7\")\n    time.sleep(1)\n\n@when('the user clicks the \"Calculate\" button with data-testid \"lcm-submit-button\"')\ndef step_user_clicks_calculate_button(context):\n    # Click the \"Calculate\" button\n    calculate_button = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='lcm-submit-button']\")\n    calculate_button.click()\n    time.sleep(1)  # Allow the calculation result to be displayed\n\n@then('the result area with data-testid \"lcm-result-display\" should display \"LCM of 7 and 7 is 7\"')\ndef step_verify_lcm_result(context):\n    # Verify the result displayed in the result area\n    result_display = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='lcm-result-display']\"))\n    )\n    expected_result = \"LCM of 7 and 7 is 7\"\n    assert expected_result in result_display.text, f\"Expected '{expected_result}', but got '{result_display.text}'\"\n\n    # Close the browser after the test\n    context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: Calculate LCM of two input numbers\n  The system should calculate the LCM of two numbers entered in the LCM form and display the result in the designated result area when the user clicks the \"Calculate\" button.\n\n\nScenario: [Normal] Calculate LCM when one input is empty\n    Given the user is on the \"LCM and HCF\" page\n    And the user sees the button with data-testid \"lcm-button\"\n    When the user clicks the button with data-testid \"lcm-button\"\n    And the user enters \"7\" into the input field with data-testid \"lcm-num1-input\"\n    And the user leaves the input field with data-testid \"lcm-num2-input\" empty\n    And the user clicks the \"Calculate\" button with data-testid \"lcm-submit-button\"\n    Then the result area with data-testid \"lcm-result-display\" should remain empty"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the user is on the \"LCM and HCF\" page')\ndef step_user_on_lcm_hcf_page(context):\n    # Initialize the WebDriver and navigate to the test page\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    context.driver.maximize_window()\n    time.sleep(1)\n\n@given('the user sees the button with data-testid \"lcm-button\"')\ndef step_user_sees_lcm_button(context):\n    # Wait for the LCM button to be visible\n    lcm_button = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='lcm-button']\"))\n    )\n    assert lcm_button.is_displayed(), \"LCM button is not visible\"\n    time.sleep(1)\n\n@when('the user clicks the button with data-testid \"lcm-button\"')\ndef step_user_clicks_lcm_button(context):\n    # Click the LCM button\n    lcm_button = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='lcm-button']\")\n    lcm_button.click()\n    time.sleep(1)\n\n@when('the user enters \"7\" into the input field with data-testid \"lcm-num1-input\"')\ndef step_user_enters_7_in_lcm_num1(context):\n    # Enter \"7\" into the first input field\n    num1_input = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='lcm-num1-input']\")\n    num1_input.clear()\n    num1_input.send_keys(\"7\")\n    time.sleep(1)\n\n@when('the user leaves the input field with data-testid \"lcm-num2-input\" empty')\ndef step_user_leaves_lcm_num2_empty(context):\n    # Ensure the second input field is empty\n    num2_input = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='lcm-num2-input']\")\n    num2_input.clear()\n    assert num2_input.get_attribute(\"value\") == \"\", \"Second input field is not empty\"\n    time.sleep(1)\n\n@when('the user clicks the \"Calculate\" button with data-testid \"lcm-submit-button\"')\ndef step_user_clicks_calculate_button(context):\n    # Click the \"Calculate\" button\n    calculate_button = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='lcm-submit-button']\")\n    calculate_button.click()\n    time.sleep(1)\n\n@then('the result area with data-testid \"lcm-result-display\" should remain empty')\ndef step_result_area_should_remain_empty(context):\n    # Verify that the result area is empty\n    result_display = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='lcm-result-display']\")\n    assert result_display.text.strip() == \"\", f\"Expected result area to be empty, but got '{result_display.text.strip()}'\"\n    time.sleep(1)\n\n# Teardown after all steps\ndef after_scenario(context, scenario):\n    if hasattr(context, 'driver'):\n        context.driver.quit()"
                }
            ]
        },
        "6": {
            "requirement": {
                "description": "The web application must allow users to calculate the Highest Common Factor (HCF) of two numbers through a user-friendly interface. Upon loading the webpage, users should see a button labeled 'Click here to find HCF of two numbers.' with the attribute data-testid='hcf-button'. When this button is clicked, the HCF input form should be displayed, allowing users to enter two numbers into input fields with data-testid attributes 'hcf-num1-input' and 'hcf-num2-input'. After entering valid positive integers, users can click the 'Calculate' button with data-testid='hcf-submit-button'. The system should then compute the HCF of the entered numbers and display the result in the paragraph element with data-testid='hcf-result-display'. The result should be formatted as 'HCF of [num1] and [num2] is [result]'. Additionally, the system should visually indicate whether the calculated HCF is even or odd by adjusting the opacity of elements with data-testid 'hcf-even-display' and 'hcf-odd-display'. If the HCF is even, 'hcf-even-display' should have full opacity, and 'hcf-odd-display' should have reduced opacity, and vice versa if the HCF is odd."
            },
            "test_cases": [
                {
                    "test_case": [
                        "Feature: Calculate HCF of two numbers\n  The system should calculate the HCF of two input numbers when the user clicks the 'Calculate' button in the HCF form and display the result in the designated result area.\n\n\nScenario: [Normal] Calculate HCF for valid positive integers\n    Given the webpage is loaded\n        And the user sees the button with data-testid \"hcf-button\"\n    And the user clicks the button with data-testid \"hcf-button\"\n    And the user enters \"12\" into the first input field with data-testid \"hcf-num1-input\"\n    And the user enters \"18\" into the second input field with data-testid \"hcf-num2-input\"\n    When the user clicks the \"Calculate\" button with data-testid \"hcf-submit-button\"\n    Then the result area with data-testid \"hcf-result-display\" should display \"HCF of 12 and 18 is 6\""
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the webpage is loaded')\ndef step_given_webpage_loaded(context):\n    context.driver = webdriver.Chrome()  # Initialize the WebDriver\n    context.driver.get(f\"file://index.html\")\n    context.driver.maximize_window()\n    time.sleep(1)  # Allow the page to load completely\n\n@given('the user sees the button with data-testid \"hcf-button\"')\ndef step_given_user_sees_hcf_button(context):\n    hcf_button = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='hcf-button']\"))\n    )\n    assert hcf_button.is_displayed(), \"HCF button is not visible\"\n\n@given('the user clicks the button with data-testid \"hcf-button\"')\ndef step_given_user_clicks_hcf_button(context):\n    hcf_button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='hcf-button']\"))\n    )\n    hcf_button.click()\n    time.sleep(1)  # Allow the UI to update after the click\n\n@given('the user enters \"12\" into the first input field with data-testid \"hcf-num1-input\"')\ndef step_given_user_enters_first_number(context):\n    num1_input = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='hcf-num1-input']\"))\n    )\n    num1_input.clear()\n    num1_input.send_keys(\"12\")\n    time.sleep(1)  # Allow the input to be processed\n\n@given('the user enters \"18\" into the second input field with data-testid \"hcf-num2-input\"')\ndef step_given_user_enters_second_number(context):\n    num2_input = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='hcf-num2-input']\"))\n    )\n    num2_input.clear()\n    num2_input.send_keys(\"18\")\n    time.sleep(1)  # Allow the input to be processed\n\n@when('the user clicks the \"Calculate\" button with data-testid \"hcf-submit-button\"')\ndef step_when_user_clicks_calculate_button(context):\n    calculate_button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='hcf-submit-button']\"))\n    )\n    calculate_button.click()\n    time.sleep(1)  # Allow the calculation to complete\n\n@then('the result area with data-testid \"hcf-result-display\" should display \"HCF of 12 and 18 is 6\"')\ndef step_then_result_displayed(context):\n    result_display = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='hcf-result-display']\"))\n    )\n    expected_text = \"HCF of 12 and 18 is 6\"\n    assert expected_text.strip() in result_display.text.strip(), f\"Expected '{expected_text}' but got '{result_display.text}'\"\n\n# Teardown step to close the browser after the test\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: Calculate HCF of two numbers\n  The system should calculate the HCF of two input numbers when the user clicks the 'Calculate' button in the HCF form and display the result in the designated result area.\n\n\nScenario: [Normal] Calculate HCF for valid positive integers\n    Given the webpage is loaded\n        And the user sees the button with data-testid \"hcf-button\"\n    And the user clicks the button with data-testid \"hcf-button\"\n    And the user enters \"1\" into the first input field with data-testid \"hcf-num1-input\"\n    And the user enters \"23\" into the second input field with data-testid \"hcf-num2-input\"\n    When the user clicks the \"Calculate\" button with data-testid \"hcf-submit-button\"\n    Then the result area with data-testid \"hcf-result-display\" should display \"HCF of 1 and 23 is 1\""
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given(\"the webpage is loaded\")\ndef step_given_webpage_loaded(context):\n    context.driver = webdriver.Chrome()  # Initialize the WebDriver\n    context.driver.get(f\"file://index.html\")\n    context.driver.maximize_window()\n    time.sleep(1)  # Allow the page to load completely\n\n@given('the user sees the button with data-testid \"hcf-button\"')\ndef step_given_user_sees_hcf_button(context):\n    hcf_button = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='hcf-button']\"))\n    )\n    assert hcf_button.is_displayed(), \"HCF button is not visible\"\n\n@given('the user clicks the button with data-testid \"hcf-button\"')\ndef step_given_user_clicks_hcf_button(context):\n    hcf_button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='hcf-button']\"))\n    )\n    hcf_button.click()\n    time.sleep(1)  # Allow the HCF form to toggle into view\n\n@given('the user enters \"1\" into the first input field with data-testid \"hcf-num1-input\"')\ndef step_given_user_enters_first_hcf_input(context):\n    num1_input = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='hcf-num1-input']\"))\n    )\n    num1_input.clear()\n    num1_input.send_keys(\"1\")\n    time.sleep(1)  # Allow input to be processed\n\n@given('the user enters \"23\" into the second input field with data-testid \"hcf-num2-input\"')\ndef step_given_user_enters_second_hcf_input(context):\n    num2_input = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='hcf-num2-input']\"))\n    )\n    num2_input.clear()\n    num2_input.send_keys(\"23\")\n    time.sleep(1)  # Allow input to be processed\n\n@when('the user clicks the \"Calculate\" button with data-testid \"hcf-submit-button\"')\ndef step_when_user_clicks_hcf_submit_button(context):\n    submit_button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='hcf-submit-button']\"))\n    )\n    submit_button.click()\n    time.sleep(1)  # Allow calculation to complete\n\n@then('the result area with data-testid \"hcf-result-display\" should display \"HCF of 1 and 23 is 1\"')\ndef step_then_result_area_displays_hcf(context):\n    result_display = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='hcf-result-display']\"))\n    )\n    expected_text = \"HCF of 1 and 23 is 1\"\n    assert expected_text.strip() in result_display.text.strip(), f\"Expected '{expected_text}' but got '{result_display.text}'\"\n\n# Teardown after the test\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: Calculate HCF of two numbers\n  The system should calculate the HCF of two input numbers when the user clicks the 'Calculate' button in the HCF form and display the result in the designated result area.\n\n\nScenario: [Normal] Calculate HCF for valid positive integers\n    Given the webpage is loaded\n        And the user sees the button with data-testid \"hcf-button\"\n    And the user clicks the button with data-testid \"hcf-button\"\n    And the user enters \"15\" into the first input field with data-testid \"hcf-num1-input\"\n    And the user enters \"15\" into the second input field with data-testid \"hcf-num2-input\"\n    When the user clicks the \"Calculate\" button with data-testid \"hcf-submit-button\"\n    Then the result area with data-testid \"hcf-result-display\" should display \"HCF of 15 and 15 is 15\""
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the webpage is loaded')\ndef step_impl(context):\n    # Initialize the WebDriver and load the test page\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    context.driver.maximize_window()\n    time.sleep(1)  # Allow time for the page to load\n\n@given('the user sees the button with data-testid \"hcf-button\"')\ndef step_impl(context):\n    # Wait for the HCF button to be visible\n    WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='hcf-button']\"))\n    )\n    hcf_button = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='hcf-button']\")\n    assert hcf_button.is_displayed(), \"HCF button is not visible\"\n\n@given('the user clicks the button with data-testid \"hcf-button\"')\ndef step_impl(context):\n    # Click the HCF button\n    hcf_button = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='hcf-button']\")\n    hcf_button.click()\n    time.sleep(1)  # Allow time for the HCF form to appear\n\n@given('the user enters \"15\" into the first input field with data-testid \"hcf-num1-input\"')\ndef step_impl(context):\n    # Enter \"15\" into the first HCF input field\n    num1_input = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='hcf-num1-input']\")\n    num1_input.clear()\n    num1_input.send_keys(\"15\")\n    time.sleep(1)\n\n@given('the user enters \"15\" into the second input field with data-testid \"hcf-num2-input\"')\ndef step_impl(context):\n    # Enter \"15\" into the second HCF input field\n    num2_input = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='hcf-num2-input']\")\n    num2_input.clear()\n    num2_input.send_keys(\"15\")\n    time.sleep(1)\n\n@when('the user clicks the \"Calculate\" button with data-testid \"hcf-submit-button\"')\ndef step_impl(context):\n    # Click the \"Calculate\" button\n    calculate_button = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='hcf-submit-button']\")\n    calculate_button.click()\n    time.sleep(1)  # Allow time for the result to be calculated and displayed\n\n@then('the result area with data-testid \"hcf-result-display\" should display \"HCF of 15 and 15 is 15\"')\ndef step_impl(context):\n    # Verify the result displayed in the result area\n    result_display = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='hcf-result-display']\"))\n    )\n    expected_result = \"HCF of 15 and 15 is 15\"\n    assert expected_result in result_display.text, f\"Expected '{expected_result}', but got '{result_display.text}'\"\n\n    # Close the browser after the test\n    context.driver.quit()"
                }
            ]
        },
        "7": {
            "requirement": {
                "description": "After calculating the LCM, the system must dynamically indicate whether the result is even or odd by adjusting the opacity of the 'even' and 'odd' indicators in the LCM section. Specifically, when the LCM result is even, the 'even' indicator (data-testid='lcm-even-display') must have full opacity (1), and the 'odd' indicator (data-testid='lcm-odd-display') must have reduced opacity (0.5). Conversely, when the LCM result is odd, the 'odd' indicator must have full opacity (1), and the 'even' indicator must have reduced opacity (0.5). The calculation is triggered by clicking the 'Calculate' button (data-testid='lcm-submit-button') after entering valid numeric inputs into the first and second LCM input fields (data-testid='lcm-num1-input' and data-testid='lcm-num2-input'). The LCM result must be displayed in the designated result area (data-testid='lcm-result-display') in the format 'LCM of [num1] and [num2] is [result]'."
            },
            "test_cases": [
                {
                    "test_case": [
                        "Feature: Indicate whether the LCM result is even or odd\n  The system should determine if the calculated LCM is even or odd and adjust the opacity of the 'even' and 'odd' indicators in the LCM section accordingly.\n\n\nScenario: [Normal] Display 'even' indicator with full opacity when LCM is even\n    Given the user is on the LCM and HCF calculator page\n    And the user clicks the \"Click here to find LCM of two numbers.\" button with data-testid \"lcm-button\"\n    And the LCM input fields with data-testid \"lcm-num1-input\" and \"lcm-num2-input\" are visible\n    When the user enters \"4\" into the first LCM input field with data-testid \"lcm-num1-input\"\n    And the user enters \"6\" into the second LCM input field with data-testid \"lcm-num2-input\"\n    And the user clicks the \"Calculate\" button with data-testid \"lcm-submit-button\"\n    Then the 'even' indicator with data-testid \"lcm-even-display\" should have full opacity (1)\n    And the 'odd' indicator with data-testid \"lcm-odd-display\" should have reduced opacity (0.5)"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the user is on the LCM and HCF calculator page')\ndef step_given_user_on_calculator_page(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)\n\n@given('the user clicks the \"Click here to find LCM of two numbers.\" button with data-testid \"lcm-button\"')\ndef step_given_user_clicks_lcm_button(context):\n    lcm_button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='lcm-button']\"))\n    )\n    lcm_button.click()\n    time.sleep(1)\n\n@given('the LCM input fields with data-testid \"lcm-num1-input\" and \"lcm-num2-input\" are visible')\ndef step_given_lcm_input_fields_visible(context):\n    num1_input = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='lcm-num1-input']\"))\n    )\n    num2_input = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='lcm-num2-input']\"))\n    )\n    assert num1_input.is_displayed() and num2_input.is_displayed(), \"LCM input fields are not visible\"\n    time.sleep(1)\n\n@when('the user enters \"4\" into the first LCM input field with data-testid \"lcm-num1-input\"')\ndef step_when_user_enters_first_lcm_input(context):\n    num1_input = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='lcm-num1-input']\")\n    num1_input.clear()\n    num1_input.send_keys(\"4\")\n    time.sleep(1)\n\n@when('the user enters \"6\" into the second LCM input field with data-testid \"lcm-num2-input\"')\ndef step_when_user_enters_second_lcm_input(context):\n    num2_input = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='lcm-num2-input']\")\n    num2_input.clear()\n    num2_input.send_keys(\"6\")\n    time.sleep(1)\n\n@when('the user clicks the \"Calculate\" button with data-testid \"lcm-submit-button\"')\ndef step_when_user_clicks_calculate_button(context):\n    calculate_button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='lcm-submit-button']\"))\n    )\n    calculate_button.click()\n    time.sleep(1)\n\n@then('the \\'even\\' indicator with data-testid \"lcm-even-display\" should have full opacity (1)')\ndef step_then_even_indicator_full_opacity(context):\n    even_display = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='lcm-even-display']\")\n    opacity = context.driver.execute_script(\"return window.getComputedStyle(arguments[0]).getPropertyValue('opacity');\", even_display)\n    assert opacity == \"1\", f\"Expected opacity 1, but got {opacity}\"\n    time.sleep(1)\n\n@then('the \\'odd\\' indicator with data-testid \"lcm-odd-display\" should have reduced opacity (0.5)')\ndef step_then_odd_indicator_reduced_opacity(context):\n    odd_display = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='lcm-odd-display']\")\n    opacity = context.driver.execute_script(\"return window.getComputedStyle(arguments[0]).getPropertyValue('opacity');\", odd_display)\n    assert opacity == \"0.5\", f\"Expected opacity 0.5, but got {opacity}\"\n    time.sleep(1)\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: Indicate whether the LCM result is even or odd\n  The system should determine if the calculated LCM is even or odd and adjust the opacity of the 'even' and 'odd' indicators in the LCM section accordingly.\n\n\nScenario: [Normal] Display 'odd' indicator with full opacity when LCM is odd\n    Given the user is on the LCM and HCF calculator page\n    And the user clicks the \"Click here to find LCM of two numbers.\" button with data-testid \"lcm-button\"\n    And the LCM input fields with data-testid \"lcm-num1-input\" and \"lcm-num2-input\" are visible\n    When the user enters \"3\" into the first LCM input field with data-testid \"lcm-num1-input\"\n    And the user enters \"5\" into the second LCM input field with data-testid \"lcm-num2-input\"\n    And the user clicks the \"Calculate\" button with data-testid \"lcm-submit-button\"\n    Then the 'odd' indicator with data-testid \"lcm-odd-display\" should have full opacity (1)\n    And the 'even' indicator with data-testid \"lcm-even-display\" should have reduced opacity (0.5)"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the user is on the LCM and HCF calculator page')\ndef step_given_user_on_calculator_page(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)\n\n@given('the user clicks the \"Click here to find LCM of two numbers.\" button with data-testid \"lcm-button\"')\ndef step_given_user_clicks_lcm_button(context):\n    lcm_button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='lcm-button']\"))\n    )\n    lcm_button.click()\n    time.sleep(1)\n\n@given('the LCM input fields with data-testid \"lcm-num1-input\" and \"lcm-num2-input\" are visible')\ndef step_given_lcm_input_fields_visible(context):\n    num1_input = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='lcm-num1-input']\"))\n    )\n    num2_input = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='lcm-num2-input']\"))\n    )\n    assert num1_input.is_displayed() and num2_input.is_displayed()\n\n@when('the user enters \"3\" into the first LCM input field with data-testid \"lcm-num1-input\"')\ndef step_when_user_enters_first_lcm_input(context):\n    num1_input = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='lcm-num1-input']\")\n    num1_input.clear()\n    num1_input.send_keys(\"3\")\n    time.sleep(1)\n\n@when('the user enters \"5\" into the second LCM input field with data-testid \"lcm-num2-input\"')\ndef step_when_user_enters_second_lcm_input(context):\n    num2_input = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='lcm-num2-input']\")\n    num2_input.clear()\n    num2_input.send_keys(\"5\")\n    time.sleep(1)\n\n@when('the user clicks the \"Calculate\" button with data-testid \"lcm-submit-button\"')\ndef step_when_user_clicks_calculate_button(context):\n    calculate_button = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='lcm-submit-button']\")\n    calculate_button.click()\n    time.sleep(1)\n\n@then('the \\'odd\\' indicator with data-testid \"lcm-odd-display\" should have full opacity (1)')\ndef step_then_odd_indicator_full_opacity(context):\n    odd_display = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='lcm-odd-display']\")\n    opacity = context.driver.execute_script(\"return window.getComputedStyle(arguments[0]).getPropertyValue('opacity');\", odd_display)\n    assert opacity == \"1\", f\"Expected opacity 1, but got {opacity}\"\n\n@then('the \\'even\\' indicator with data-testid \"lcm-even-display\" should have reduced opacity (0.5)')\ndef step_then_even_indicator_reduced_opacity(context):\n    even_display = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='lcm-even-display']\")\n    opacity = context.driver.execute_script(\"return window.getComputedStyle(arguments[0]).getPropertyValue('opacity');\", even_display)\n    assert opacity == \"0.5\", f\"Expected opacity 0.5, but got {opacity}\"\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                }
            ]
        },
        "8": {
            "requirement": {
                "description": "Upon calculating the HCF using the form in the HCF section, the system must dynamically adjust the opacity of the 'even' and 'odd' indicators based on the parity of the result. Specifically, when the user clicks the button with data-testid 'hcf-button', the HCF section should become visible, allowing the user to input two numbers into fields with data-testid 'hcf-num1-input' and 'hcf-num2-input'. After clicking the submit button with data-testid 'hcf-submit-button', the system should determine the HCF of the entered numbers. If the HCF is even, the element with data-testid 'hcf-even-display' should have its opacity set to '1', while the element with data-testid 'hcf-odd-display' should have its opacity set to '0.5'. Conversely, if the HCF is odd, the element with data-testid 'hcf-odd-display' should have its opacity set to '1', and the element with data-testid 'hcf-even-display' should have its opacity set to '0.5'. This functionality should handle normal cases, such as different numbers, as well as edge cases, such as identical numbers."
            },
            "test_cases": [
                {
                    "test_case": [
                        "Feature: HCF Calculation Result Indicator\n  The system should indicate whether the calculated HCF is even or odd by adjusting the opacity of the 'even' and 'odd' indicators in the HCF section.\n\n\nScenario: [Normal] Calculate HCF and display even indicator\n    Given the webpage is loaded\n    And the user clicks the button with data-testid \"hcf-button\"\n    And the HCF section is visible\n    When the user enters \"8\" into the input field with data-testid \"hcf-num1-input\"\n    And the user enters \"12\" into the input field with data-testid \"hcf-num2-input\"\n    And the user clicks the submit button with data-testid \"hcf-submit-button\"\n    Then the element with data-testid \"hcf-even-display\" should have opacity \"1\"\n    And the element with data-testid \"hcf-odd-display\" should have opacity \"0.5\""
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the webpage is loaded')\ndef step_given_webpage_loaded(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)\n\n@given('the user clicks the button with data-testid \"hcf-button\"')\ndef step_given_click_hcf_button(context):\n    hcf_button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='hcf-button']\"))\n    )\n    hcf_button.click()\n    time.sleep(1)\n\n@given('the HCF section is visible')\ndef step_given_hcf_section_visible(context):\n    hcf_section = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \".resultboxHcf\"))\n    )\n    assert hcf_section.is_displayed(), \"HCF section is not visible\"\n    time.sleep(1)\n\n@when('the user enters \"{num1}\" into the input field with data-testid \"hcf-num1-input\"')\ndef step_when_enter_num1(context, num1):\n    num1_input = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='hcf-num1-input']\"))\n    )\n    num1_input.clear()\n    num1_input.send_keys(num1)\n    time.sleep(1)\n\n@when('the user enters \"{num2}\" into the input field with data-testid \"hcf-num2-input\"')\ndef step_when_enter_num2(context, num2):\n    num2_input = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='hcf-num2-input']\"))\n    )\n    num2_input.clear()\n    num2_input.send_keys(num2)\n    time.sleep(1)\n\n@when('the user clicks the submit button with data-testid \"hcf-submit-button\"')\ndef step_when_click_hcf_submit(context):\n    hcf_submit_button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='hcf-submit-button']\"))\n    )\n    hcf_submit_button.click()\n    time.sleep(1)\n\n@then('the element with data-testid \"hcf-even-display\" should have opacity \"1\"')\ndef step_then_even_display_opacity(context):\n    even_display = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='hcf-even-display']\"))\n    )\n    opacity = context.driver.execute_script(\"return window.getComputedStyle(arguments[0]).opacity;\", even_display)\n    assert opacity == \"1\", f\"Expected opacity '1', but got '{opacity}'\"\n\n@then('the element with data-testid \"hcf-odd-display\" should have opacity \"0.5\"')\ndef step_then_odd_display_opacity(context):\n    odd_display = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='hcf-odd-display']\"))\n    )\n    opacity = context.driver.execute_script(\"return window.getComputedStyle(arguments[0]).opacity;\", odd_display)\n    assert opacity == \"0.5\", f\"Expected opacity '0.5', but got '{opacity}'\"\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: HCF Calculation Result Indicator\n  The system should indicate whether the calculated HCF is even or odd by adjusting the opacity of the 'even' and 'odd' indicators in the HCF section.\n\n\nScenario: [Normal] Calculate HCF and display odd indicator\n    Given the webpage is loaded\n    And the user clicks the button with data-testid \"hcf-button\"\n    And the HCF section is visible\n    When the user enters \"9\" into the input field with data-testid \"hcf-num1-input\"\n    And the user enters \"15\" into the input field with data-testid \"hcf-num2-input\"\n    And the user clicks the submit button with data-testid \"hcf-submit-button\"\n    Then the element with data-testid \"hcf-odd-display\" should have opacity \"1\"\n    And the element with data-testid \"hcf-even-display\" should have opacity \"0.5\""
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the webpage is loaded')\ndef step_given_webpage_loaded(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)\n\n@given('the user clicks the button with data-testid \"hcf-button\"')\ndef step_given_click_hcf_button(context):\n    hcf_button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='hcf-button']\"))\n    )\n    hcf_button.click()\n    time.sleep(1)\n\n@given('the HCF section is visible')\ndef step_given_hcf_section_visible(context):\n    hcf_section = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \".resultboxHcf\"))\n    )\n    assert hcf_section.is_displayed(), \"HCF section is not visible\"\n    time.sleep(1)\n\n@when('the user enters \"9\" into the input field with data-testid \"hcf-num1-input\"')\ndef step_when_enter_num1(context):\n    num1_input = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='hcf-num1-input']\"))\n    )\n    num1_input.clear()\n    num1_input.send_keys(\"9\")\n    time.sleep(1)\n\n@when('the user enters \"15\" into the input field with data-testid \"hcf-num2-input\"')\ndef step_when_enter_num2(context):\n    num2_input = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='hcf-num2-input']\"))\n    )\n    num2_input.clear()\n    num2_input.send_keys(\"15\")\n    time.sleep(1)\n\n@when('the user clicks the submit button with data-testid \"hcf-submit-button\"')\ndef step_when_click_submit_button(context):\n    submit_button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='hcf-submit-button']\"))\n    )\n    submit_button.click()\n    time.sleep(1)\n\n@then('the element with data-testid \"hcf-odd-display\" should have opacity \"1\"')\ndef step_then_check_odd_display_opacity(context):\n    odd_display = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='hcf-odd-display']\"))\n    )\n    opacity = context.driver.execute_script(\"return window.getComputedStyle(arguments[0]).opacity;\", odd_display)\n    assert opacity == \"1\", f\"Expected opacity '1', but got '{opacity}'\"\n    time.sleep(1)\n\n@then('the element with data-testid \"hcf-even-display\" should have opacity \"0.5\"')\ndef step_then_check_even_display_opacity(context):\n    even_display = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='hcf-even-display']\"))\n    )\n    opacity = context.driver.execute_script(\"return window.getComputedStyle(arguments[0]).opacity;\", even_display)\n    assert opacity == \"0.5\", f\"Expected opacity '0.5', but got '{opacity}'\"\n    time.sleep(1)\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: HCF Calculation Result Indicator\n  The system should indicate whether the calculated HCF is even or odd by adjusting the opacity of the 'even' and 'odd' indicators in the HCF section.\n\n\nScenario: [Edge] Calculate HCF for identical numbers\n    Given the webpage is loaded\n    And the user clicks the button with data-testid \"hcf-button\"\n    And the HCF section is visible\n    When the user enters \"10\" into the input field with data-testid \"hcf-num1-input\"\n    And the user enters \"10\" into the input field with data-testid \"hcf-num2-input\"\n    And the user clicks the submit button with data-testid \"hcf-submit-button\"\n    Then the element with data-testid \"hcf-even-display\" should have opacity \"1\"\n    And the element with data-testid \"hcf-odd-display\" should have opacity \"0.5\""
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the webpage is loaded')\ndef step_given_webpage_loaded(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)\n\n@given('the user clicks the button with data-testid \"hcf-button\"')\ndef step_given_click_hcf_button(context):\n    hcf_button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='hcf-button']\"))\n    )\n    hcf_button.click()\n    time.sleep(1)\n\n@given('the HCF section is visible')\ndef step_given_hcf_section_visible(context):\n    hcf_section = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \".resultboxHcf\"))\n    )\n    assert hcf_section.is_displayed(), \"HCF section is not visible\"\n    time.sleep(1)\n\n@when('the user enters \"{num}\" into the input field with data-testid \"hcf-num1-input\"')\ndef step_when_enter_num1(context, num):\n    num1_input = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='hcf-num1-input']\"))\n    )\n    num1_input.clear()\n    num1_input.send_keys(num)\n    time.sleep(1)\n\n@when('the user enters \"{num}\" into the input field with data-testid \"hcf-num2-input\"')\ndef step_when_enter_num2(context, num):\n    num2_input = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='hcf-num2-input']\"))\n    )\n    num2_input.clear()\n    num2_input.send_keys(num)\n    time.sleep(1)\n\n@when('the user clicks the submit button with data-testid \"hcf-submit-button\"')\ndef step_when_click_hcf_submit(context):\n    hcf_submit_button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='hcf-submit-button']\"))\n    )\n    hcf_submit_button.click()\n    time.sleep(1)\n\n@then('the element with data-testid \"hcf-even-display\" should have opacity \"1\"')\ndef step_then_even_display_opacity(context):\n    even_display = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='hcf-even-display']\"))\n    )\n    opacity = context.driver.execute_script(\"return window.getComputedStyle(arguments[0]).opacity;\", even_display)\n    assert opacity == \"1\", f\"Expected opacity '1', but got '{opacity}'\"\n    time.sleep(1)\n\n@then('the element with data-testid \"hcf-odd-display\" should have opacity \"0.5\"')\ndef step_then_odd_display_opacity(context):\n    odd_display = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='hcf-odd-display']\"))\n    )\n    opacity = context.driver.execute_script(\"return window.getComputedStyle(arguments[0]).opacity;\", odd_display)\n    assert opacity == \"0.5\", f\"Expected opacity '0.5', but got '{opacity}'\"\n    time.sleep(1)\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                }
            ]
        }
    }
}