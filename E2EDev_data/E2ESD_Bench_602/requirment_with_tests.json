{
    "summary": {
        "overview": "The Random Number Generator application allows users to generate a random number within a specified range. Users can input minimum and maximum values, generate a random number, and copy the result to the clipboard.",
        "predefined_options": "Default minimum value is set to 1 and maximum value is set to 100 if no input is provided.",
        "external_resources": "Google Fonts for Poppins font family (https://fonts.googleapis.com/css2?family=Poppins:wght@400;600&display=swap).",
        "external_js_libraries": "None specified."
    },
    "finegrained_rewith_test": {
        "1": {
            "requirement": {
                "description": "The system must allow the user to enter a numerical value in the 'Min' input field, identified by the data-testid 'min'. This value should be accepted and stored as the minimum range for generating a random number. The input field should handle both positive and negative numerical values. If a non-numerical value is entered, the field should default to '1', which is the placeholder value. The system should ensure that the input field reflects the user's input accurately, and any invalid input should not alter the default value."
            },
            "test_cases": [
                {
                    "test_case": [
                        "Feature: REQ-001 - Minimum Range Input for Random Number Generation\n  The system should accept and store a numerical value entered by the user in the 'Min' input field as the minimum range for generating a random number.\n\n\nScenario: [Normal] User enters a valid numerical value in the 'Min' input field\n    Given the Random Number Generator page is loaded\n    And the 'Min' input field with data-testid 'min' is present\n    When the user enters '10' into the 'Min' input field with data-testid 'min'\n    Then the 'Min' input field with data-testid 'min' should have the value '10'"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\n# Placeholder for the file path\nfile_path = \"index.html\"\n\n@given('the Random Number Generator page is loaded')\ndef step_given_page_is_loaded(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)  # Allow time for the page to load\n\n@given('the \\'Min\\' input field with data-testid \\'min\\' is present')\ndef step_given_min_input_field_is_present(context):\n    WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='min']\"))\n    )\n\n@when('the user enters \\'10\\' into the \\'Min\\' input field with data-testid \\'min\\'')\ndef step_when_user_enters_value_into_min_input(context):\n    min_input = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='min']\")\n    min_input.clear()\n    min_input.send_keys('10')\n    time.sleep(1)  # Allow time for the input to be processed\n\n@then('the \\'Min\\' input field with data-testid \\'min\\' should have the value \\'10\\'')\ndef step_then_min_input_field_should_have_value(context):\n    min_input = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='min']\")\n    assert min_input.get_attribute('value') == '10', \"The 'Min' input field does not have the expected value '10'.\"\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: REQ-001 - Minimum Range Input for Random Number Generation\n  The system should accept and store a numerical value entered by the user in the 'Min' input field as the minimum range for generating a random number.\n\n\nScenario: [Normal] User enters a valid numerical value in the 'Min' input field\n    Given the Random Number Generator page is loaded\n    And the 'Min' input field with data-testid 'min' is present\n    When the user enters '1' into the 'Min' input field with data-testid 'min'\n    Then the 'Min' input field with data-testid 'min' should have the value '1'"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the Random Number Generator page is loaded')\ndef step_given_page_is_loaded(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)\n\n@given('the \\'Min\\' input field with data-testid \\'min\\' is present')\ndef step_given_min_input_field_is_present(context):\n    WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='min']\"))\n    )\n    time.sleep(1)\n\n@when('the user enters \\'1\\' into the \\'Min\\' input field with data-testid \\'min\\'')\ndef step_when_user_enters_value_into_min_input(context):\n    min_input = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='min']\")\n    min_input.clear()\n    min_input.send_keys('1')\n    time.sleep(1)\n\n@then('the \\'Min\\' input field with data-testid \\'min\\' should have the value \\'1\\'')\ndef step_then_min_input_field_should_have_value(context):\n    min_input = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='min']\")\n    assert min_input.get_attribute('value') == '1', f\"Expected value '1', but got '{min_input.get_attribute('value')}'\"\n    time.sleep(1)\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: REQ-001 - Minimum Range Input for Random Number Generation\n  The system should accept and store a numerical value entered by the user in the 'Min' input field as the minimum range for generating a random number.\n\n\nScenario: [Normal] User enters a valid negative value in the 'Min' input field\n    Given the Random Number Generator page is loaded\n    And the 'Min' input field with data-testid 'min' is present\n    When the user enters '-5' into the 'Min' input field with data-testid 'min'\n    Then the 'Min' input field with data-testid 'min' should have the value '-5'"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the Random Number Generator page is loaded')\ndef step_given_page_is_loaded(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)\n\n@given('the \\'Min\\' input field with data-testid \\'min\\' is present')\ndef step_given_min_input_field_is_present(context):\n    WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='min']\"))\n    )\n    time.sleep(1)\n\n@when('the user enters \\'-5\\' into the \\'Min\\' input field with data-testid \\'min\\'')\ndef step_when_user_enters_value_into_min_input(context):\n    min_input = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='min']\")\n    min_input.clear()\n    min_input.send_keys('-5')\n    time.sleep(1)\n\n@then('the \\'Min\\' input field with data-testid \\'min\\' should have the value \\'-5\\'')\ndef step_then_min_input_field_should_have_value(context):\n    min_input = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='min']\")\n    assert min_input.get_attribute('value') == '-5', f\"Expected value '-5', but got '{min_input.get_attribute('value')}'\"\n    time.sleep(1)\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: REQ-001 - Minimum Range Input for Random Number Generation\n  The system should accept and store a numerical value entered by the user in the 'Min' input field as the minimum range for generating a random number.\n\n\nScenario: [Error] User enters a non-numerical value in the 'Min' input field\n    Given the Random Number Generator page is loaded\n    And the 'Min' input field with data-testid 'min' is present\n    When the user enters 'abc' into the 'Min' input field with data-testid 'min'\n    Then the 'Min' input field with data-testid 'min' should remain the value '1'"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given(\"the Random Number Generator page is loaded\")\ndef step_given_page_loaded(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)\n\n@given(\"the 'Min' input field with data-testid 'min' is present\")\ndef step_given_min_input_present(context):\n    WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='min']\"))\n    )\n    time.sleep(1)\n\n@when(\"the user enters 'abc' into the 'Min' input field with data-testid 'min'\")\ndef step_when_user_enters_abc(context):\n    min_input = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='min']\")\n    min_input.clear()\n    min_input.send_keys(\"abc\")\n    time.sleep(1)\n\n@then(\"the 'Min' input field with data-testid 'min' should remain the value '1'\")\ndef step_then_min_input_remains_one(context):\n    min_input = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='min']\")\n    value = min_input.get_attribute(\"value\")\n    assert value == \"1\", f\"Expected '1', but got '{value}'\"\n    time.sleep(1)\n    context.driver.quit()"
                }
            ]
        },
        "2": {
            "requirement": {
                "description": "The web application should allow users to define the maximum range for generating a random number by entering a numerical value in the 'Max' input field. The 'Max' input field is identified by the attribute data-testid='max'. When a valid numerical value is entered, it should be stored as the maximum range. If a non-numerical value is entered, the field should default to the initial value of '100'. The application should visually display the generated random number within the specified range in the element with data-testid='random-number-display'. The 'Generate Random Number' button, identified by data-testid='generate-random-number-button', should trigger the generation of a random number, which is then displayed with a temporary scaling effect. Additionally, the 'Copy to Clipboard' button, identified by data-testid='copy-to-clipboard-button', should allow users to copy the displayed random number to the clipboard, temporarily changing the button text to 'Copied!' for feedback."
            },
            "test_cases": [
                {
                    "test_case": [
                        "Feature: Accept and store user-defined maximum range for random number generation\n\n\nScenario: [Normal] User enters a valid numerical value in the 'Max' input field\n    Given the Random Number Generator page is loaded\n    And the 'Max' input field with data-testid 'max' is visible\n    When the user enters '150' into the 'Max' input field with data-testid 'max'\nThen the 'Max' input field with data-testid 'max' should have the value '150'"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the Random Number Generator page is loaded')\ndef step_given_page_loaded(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)\n\n@given('the \\'Max\\' input field with data-testid \\'max\\' is visible')\ndef step_given_max_input_visible(context):\n    max_input = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='max']\"))\n    )\n    assert max_input.is_displayed(), \"Max input field is not visible\"\n    time.sleep(1)\n\n@when('the user enters \\'150\\' into the \\'Max\\' input field with data-testid \\'max\\'')\ndef step_when_user_enters_max_value(context):\n    max_input = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='max']\")\n    max_input.clear()\n    max_input.send_keys(\"150\")\n    time.sleep(1)\n\n@then('the \\'Max\\' input field with data-testid \\'max\\' should have the value \\'150\\'')\ndef step_then_max_input_has_value(context):\n    max_input = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='max']\")\n    assert max_input.get_attribute(\"value\") == \"150\", f\"Expected value '150', but got '{max_input.get_attribute('value')}'\"\n    time.sleep(1)\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: Accept and store user-defined maximum range for random number generation\n\n\nScenario: [Normal] User enters a valid numerical value in the 'Max' input field\n    Given the Random Number Generator page is loaded\n    And the 'Max' input field with data-testid 'max' is visible\n    When the user enters '50' into the 'Max' input field with data-testid 'max'\nThen the 'Max' input field with data-testid 'max' should have the value '50'"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\n# Placeholder for the file path\nfile_path = \"index.html\"\n\n@given('the Random Number Generator page is loaded')\ndef step_given_page_is_loaded(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)  # Allow time for the page to load\n\n@given('the \\'Max\\' input field with data-testid \\'max\\' is visible')\ndef step_given_max_input_visible(context):\n    max_input = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='max']\"))\n    )\n    assert max_input.is_displayed(), \"Max input field is not visible\"\n    time.sleep(1)\n\n@when('the user enters \\'50\\' into the \\'Max\\' input field with data-testid \\'max\\'')\ndef step_when_user_enters_value_in_max_input(context):\n    max_input = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='max']\")\n    max_input.clear()\n    max_input.send_keys(\"50\")\n    time.sleep(1)\n\n@then('the \\'Max\\' input field with data-testid \\'max\\' should have the value \\'50\\'')\ndef step_then_max_input_should_have_value(context):\n    max_input = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='max']\")\n    assert max_input.get_attribute(\"value\") == \"50\", \"Max input field does not have the expected value '50'\"\n    time.sleep(1)\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: Accept and store user-defined maximum range for random number generation\n\n\nScenario: [Error] User enters a non-numerical value in the 'Max' input field\n    Given the Random Number Generator page is loaded\n    And the 'Max' input field with data-testid 'max' is present\n    When the user enters 'abc' into the 'Max' input field with data-testid 'max'\nThen the 'Max' input field with data-testid 'max' should remain the value '100'"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the Random Number Generator page is loaded')\ndef step_given_page_loaded(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)\n\n@given('the \\'Max\\' input field with data-testid \\'max\\' is present')\ndef step_given_max_input_present(context):\n    WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='max']\"))\n    )\n    time.sleep(1)\n\n@when('the user enters \\'abc\\' into the \\'Max\\' input field with data-testid \\'max\\'')\ndef step_when_user_enters_abc(context):\n    max_input = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='max']\")\n    max_input.clear()\n    max_input.send_keys(\"abc\")\n    time.sleep(1)\n\n@then('the \\'Max\\' input field with data-testid \\'max\\' should remain the value \\'100\\'')\ndef step_then_max_input_remains_100(context):\n    max_input = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='max']\")\n    assert max_input.get_attribute(\"value\") == \"100\", f\"Expected '100', but got '{max_input.get_attribute('value')}'\"\n    time.sleep(1)\n    context.driver.quit()"
                }
            ]
        },
        "3": {
            "requirement": {
                "description": "The web application should allow users to generate a random number by interacting with the UI as follows: The page should load with a title 'Random Number Generator' and contain input fields for 'Min' and 'Max' values, each with data-testid attributes 'min' and 'max', defaulting to '1' and '100' respectively. When the user clicks the 'Generate Random Number' button (data-testid 'generate-random-number-button'), the system should generate a random number between the specified 'Min' and 'Max' values and display it in the 'randomNumber' display element (data-testid 'random-number-display'). If 'Min' and 'Max' are equal, the display should show that value. If 'Min' is greater than 'Max', the system should still generate a number between the two values, treating them as a range. If non-numeric values are entered, the system should default to using '1' and '100' as the range. The displayed number should briefly scale up in size for visual emphasis. Additionally, a 'Copy to Clipboard' button (data-testid 'copy-to-clipboard-button') should allow users to copy the displayed number to the clipboard, temporarily changing the button text to 'Copied!' for user feedback."
            },
            "test_cases": [
                {
                    "test_case": [
                        "Feature: Random Number Generation\n  The system should generate a random number between specified 'Min' and 'Max' values and display it when the user clicks the 'Generate Random Number' button.\n\n\n  Scenario: [Normal] Generate random number within default range\n    Given the webpage is loaded with the title \"Random Number Generator\"\n    And the 'Min' input field with data-testid 'min' has a value of \"1\"\n    And the 'Max' input field with data-testid 'max' has a value of \"100\"\n    When the user clicks the 'Generate Random Number' button with data-testid 'generate-random-number-button'\n    Then the 'randomNumber' display element with data-testid 'random-number-display' should show a number between \"1\" and \"100\"\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the webpage is loaded with the title \"Random Number Generator\"')\ndef step_given_webpage_loaded(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    WebDriverWait(context.driver, 10).until(\n        EC.title_is(\"Random Number Generator\")\n    )\n    time.sleep(1)\n\n@given('the \\'Min\\' input field with data-testid \\'min\\' has a value of \"1\"')\ndef step_given_min_input_value(context):\n    min_input = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='min']\"))\n    )\n    assert min_input.get_attribute(\"value\") == \"1\", f\"Expected '1', but got '{min_input.get_attribute('value')}'\"\n    time.sleep(1)\n\n@given('the \\'Max\\' input field with data-testid \\'max\\' has a value of \"100\"')\ndef step_given_max_input_value(context):\n    max_input = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='max']\"))\n    )\n    assert max_input.get_attribute(\"value\") == \"100\", f\"Expected '100', but got '{max_input.get_attribute('value')}'\"\n    time.sleep(1)\n\n@when('the user clicks the \\'Generate Random Number\\' button with data-testid \\'generate-random-number-button\\'')\ndef step_when_click_generate_button(context):\n    generate_button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='generate-random-number-button']\"))\n    )\n    generate_button.click()\n    time.sleep(1)\n\n@then('the \\'randomNumber\\' display element with data-testid \\'random-number-display\\' should show a number between \"1\" and \"100\"')\ndef step_then_random_number_display(context):\n    random_number_display = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='random-number-display']\"))\n    )\n    random_number = int(random_number_display.text)\n    assert 1 <= random_number <= 100, f\"Expected number between 1 and 100, but got '{random_number}'\"\n    time.sleep(1)\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: Random Number Generation\n  The system should generate a random number between specified 'Min' and 'Max' values and display it when the user clicks the 'Generate Random Number' button.\n\n\n  Scenario: [Edge] Generate random number with 'Min' and 'Max' set to the same value\n    Given the webpage is loaded with the title \"Random Number Generator\"\n    And the user enters \"50\" into the 'Min' input field with data-testid 'min'\n    And the user enters \"50\" into the 'Max' input field with data-testid 'max'\n    When the user clicks the 'Generate Random Number' button with data-testid 'generate-random-number-button'\n    Then the 'randomNumber' display element with data-testid 'random-number-display' should show \"50\"\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the webpage is loaded with the title \"Random Number Generator\"')\ndef step_impl(context):\n    # Initialize the WebDriver and load the test page\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    WebDriverWait(context.driver, 10).until(\n        EC.title_is(\"Random Number Generator\")\n    )\n    time.sleep(1)  # Allow time for the page to fully load\n\n@given('the user enters \"{value}\" into the \\'Min\\' input field with data-testid \\'min\\'')\ndef step_impl(context, value):\n    min_input = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='min']\"))\n    )\n    min_input.clear()\n    min_input.send_keys(value)\n    time.sleep(1)\n\n@given('the user enters \"{value}\" into the \\'Max\\' input field with data-testid \\'max\\'')\ndef step_impl(context, value):\n    max_input = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='max']\"))\n    )\n    max_input.clear()\n    max_input.send_keys(value)\n    time.sleep(1)\n\n@when('the user clicks the \\'Generate Random Number\\' button with data-testid \\'generate-random-number-button\\'')\ndef step_impl(context):\n    generate_button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='generate-random-number-button']\"))\n    )\n    generate_button.click()\n    time.sleep(1)\n\n@then('the \\'randomNumber\\' display element with data-testid \\'random-number-display\\' should show \"{expected_value}\"')\ndef step_impl(context, expected_value):\n    random_number_display = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='random-number-display']\"))\n    )\n    actual_value = random_number_display.text.strip()\n    assert actual_value == expected_value, f\"Expected '{expected_value}', but got '{actual_value}'\"\n    time.sleep(1)\n\n# Teardown to close the browser after tests\ndef after_scenario(context, scenario):\n    if hasattr(context, 'driver'):\n        context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: Random Number Generation\n  The system should generate a random number between specified 'Min' and 'Max' values and display it when the user clicks the 'Generate Random Number' button.\n\n\n  Scenario: [Edge] Generate random number with 'Min' greater than 'Max'\n    Given the webpage is loaded with the title \"Random Number Generator\"\n    And the user enters \"100\" into the 'Min' input field with data-testid 'min'\n    And the user enters \"1\" into the 'Max' input field with data-testid 'max'\n    When the user clicks the 'Generate Random Number' button with data-testid 'generate-random-number-button'\n    Then the 'randomNumber' display element with data-testid 'random-number-display' should show a number between \"1\" and \"100\"\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the webpage is loaded with the title \"Random Number Generator\"')\ndef step_impl(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    WebDriverWait(context.driver, 10).until(\n        EC.title_is(\"Random Number Generator\")\n    )\n    time.sleep(1)\n\n@given('the user enters \"{min_value}\" into the \\'Min\\' input field with data-testid \\'min\\'')\ndef step_impl(context, min_value):\n    min_input = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='min']\"))\n    )\n    min_input.clear()\n    min_input.send_keys(min_value)\n    time.sleep(1)\n\n@given('the user enters \"{max_value}\" into the \\'Max\\' input field with data-testid \\'max\\'')\ndef step_impl(context, max_value):\n    max_input = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='max']\"))\n    )\n    max_input.clear()\n    max_input.send_keys(max_value)\n    time.sleep(1)\n\n@when('the user clicks the \\'Generate Random Number\\' button with data-testid \\'generate-random-number-button\\'')\ndef step_impl(context):\n    generate_button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='generate-random-number-button']\"))\n    )\n    generate_button.click()\n    time.sleep(1)\n\n@then('the \\'randomNumber\\' display element with data-testid \\'random-number-display\\' should show a number between \"{min_value}\" and \"{max_value}\"')\ndef step_impl(context, min_value, max_value):\n    random_number_display = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='random-number-display']\"))\n    )\n    displayed_number = int(random_number_display.text)\n    assert int(min_value) <= displayed_number <= int(max_value), \\\n        f\"Expected a number between {min_value} and {max_value}, but got {displayed_number}\"\n    time.sleep(1)\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: Random Number Generation\n  The system should generate a random number between specified 'Min' and 'Max' values and display it when the user clicks the 'Generate Random Number' button.\n\n\n  Scenario: [Error] Generate random number with non-numeric 'Min' and 'Max' values\n    Given the webpage is loaded with the title \"Random Number Generator\"\n    And the user enters \"abc\" into the 'Min' input field with data-testid 'min'\n    And the user enters \"xyz\" into the 'Max' input field with data-testid 'max'\n    When the user clicks the 'Generate Random Number' button with data-testid 'generate-random-number-button'\n    Then the 'randomNumber' display element with data-testid 'random-number-display' should show a number between \"1\" and \"100\""
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the webpage is loaded with the title \"Random Number Generator\"')\ndef step_given_webpage_loaded(context):\n    context.driver = webdriver.Chrome()  # Initialize the WebDriver\n    context.driver.get(f\"file://index.html\")  # Load the test page\n    WebDriverWait(context.driver, 10).until(\n        EC.title_is(\"Random Number Generator\")\n    )\n    time.sleep(1)  # Allow the page to fully load\n\n@given('the user enters \"abc\" into the \\'Min\\' input field with data-testid \\'min\\'')\ndef step_given_enter_min_value(context):\n    min_input = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='min']\"))\n    )\n    min_input.clear()\n    min_input.send_keys(\"abc\")\n    time.sleep(1)\n\n@given('the user enters \"xyz\" into the \\'Max\\' input field with data-testid \\'max\\'')\ndef step_given_enter_max_value(context):\n    max_input = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='max']\"))\n    )\n    max_input.clear()\n    max_input.send_keys(\"xyz\")\n    time.sleep(1)\n\n@when('the user clicks the \\'Generate Random Number\\' button with data-testid \\'generate-random-number-button\\'')\ndef step_when_click_generate_button(context):\n    generate_button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='generate-random-number-button']\"))\n    )\n    generate_button.click()\n    time.sleep(1)\n\n@then('the \\'randomNumber\\' display element with data-testid \\'random-number-display\\' should show a number between \"1\" and \"100\"')\ndef step_then_validate_random_number(context):\n    random_number_display = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='random-number-display']\"))\n    )\n    random_number_text = random_number_display.text.strip()\n    try:\n        random_number = int(random_number_text)\n        assert 1 <= random_number <= 100, f\"Random number {random_number} is not between 1 and 100\"\n    except ValueError:\n        assert False, f\"Displayed value '{random_number_text}' is not a valid number\"\n\n    time.sleep(1)\n\n# Teardown to close the browser after the test\ndef after_scenario(context, scenario):\n    if hasattr(context, 'driver'):\n        context.driver.quit()"
                }
            ]
        },
        "6": {
            "requirement": {
                "description": "The web application must allow users to generate a random number within a specified range using input fields with data-testid 'min' and 'max'. Upon clicking the 'Generate Random Number' button with data-testid 'generate-random-number-button', the system should display the generated number in the element with data-testid 'random-number-display', applying a temporary scale transformation for visual emphasis. Users can copy the displayed random number to the clipboard by clicking the 'Copy to Clipboard' button with data-testid 'copy-to-clipboard-button'. After copying, the button text must change to 'Copied!' for 2000 milliseconds before reverting to 'Copy to Clipboard'. The system should handle edge cases, such as when the random number is zero, ensuring consistent functionality and user feedback."
            },
            "test_cases": [
                {
                    "test_case": [
                        "Feature: Copy Random Number to Clipboard and Button Text Change\n  The system should change the 'Copy to Clipboard' button text to 'Copied!' for 2000 milliseconds after copying the random number to the clipboard, and then revert it back to 'Copy to Clipboard'.\n\n\n  Scenario: [Normal] Copy random number and verify button text change\n    Given the Random Number Generator page is loaded\n    And the user sees the \"Copy to Clipboard\" button with text \"Copy to Clipboard\" with data-testid \"copy-to-clipboard-button\"\n    When the user clicks the \"Copy to Clipboard\" button with data-testid \"copy-to-clipboard-button\"\n    Then the button text should change to \"Copied!\" with data-testid \"copy-to-clipboard-button\"\n    And after 2000 milliseconds, the button text should revert back to \"Copy to Clipboard\" with data-testid \"copy-to-clipboard-button\"\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the Random Number Generator page is loaded')\ndef step_impl(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)\n\n@given('the user sees the \"Copy to Clipboard\" button with text \"Copy to Clipboard\" with data-testid \"copy-to-clipboard-button\"')\ndef step_impl(context):\n    copy_button = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='copy-to-clipboard-button']\"))\n    )\n    assert copy_button.text == \"Copy to Clipboard\", f\"Expected button text 'Copy to Clipboard', but got '{copy_button.text}'\"\n    time.sleep(1)\n\n@when('the user clicks the \"Copy to Clipboard\" button with data-testid \"copy-to-clipboard-button\"')\ndef step_impl(context):\n    copy_button = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='copy-to-clipboard-button']\")\n    copy_button.click()\n    time.sleep(1)\n\n@then('the button text should change to \"Copied!\" with data-testid \"copy-to-clipboard-button\"')\ndef step_impl(context):\n    copy_button = WebDriverWait(context.driver, 10).until(\n        EC.text_to_be_present_in_element((By.CSS_SELECTOR, \"[data-testid='copy-to-clipboard-button']\"), \"Copied!\")\n    )\n    assert copy_button, \"Button text did not change to 'Copied!'\"\n    time.sleep(1)\n\n@then('after 2000 milliseconds, the button text should revert back to \"Copy to Clipboard\" with data-testid \"copy-to-clipboard-button\"')\ndef step_impl(context):\n    time.sleep(2)  # Wait for 2000 milliseconds\n    copy_button = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='copy-to-clipboard-button']\")\n    assert copy_button.text == \"Copy to Clipboard\", f\"Expected button text 'Copy to Clipboard', but got '{copy_button.text}'\"\n    time.sleep(1)\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: Copy Random Number to Clipboard and Button Text Change\n  The system should change the 'Copy to Clipboard' button text to 'Copied!' for 2000 milliseconds after copying the random number to the clipboard, and then revert it back to 'Copy to Clipboard'.\n\n\n  Scenario: [Edge] Copy random number when the random number is zero\n    Given the Random Number Generator page is loaded\n    And the random number displayed is \"0\" with data-testid \"random-number-display\"\n    When the user clicks the \"Copy to Clipboard\" button with data-testid \"copy-to-clipboard-button\"\n    Then the button text should change to \"Copied!\" with data-testid \"copy-to-clipboard-button\"\n    And after 2000 milliseconds, the button text should revert back to \"Copy to Clipboard\" with data-testid \"copy-to-clipboard-button\"\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the Random Number Generator page is loaded')\ndef step_given_page_is_loaded(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)\n\n@given('the random number displayed is \"0\" with data-testid \"random-number-display\"')\ndef step_given_random_number_displayed_is_zero(context):\n    random_number_display = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='random-number-display']\"))\n    )\n    assert random_number_display.text.strip() == \"0\", f\"Expected '0', but got '{random_number_display.text.strip()}'\"\n    time.sleep(1)\n\n@when('the user clicks the \"Copy to Clipboard\" button with data-testid \"copy-to-clipboard-button\"')\ndef step_when_user_clicks_copy_button(context):\n    copy_button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='copy-to-clipboard-button']\"))\n    )\n    copy_button.click()\n    time.sleep(1)\n\n@then('the button text should change to \"Copied!\" with data-testid \"copy-to-clipboard-button\"')\ndef step_then_button_text_changes_to_copied(context):\n    copy_button = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='copy-to-clipboard-button']\"))\n    )\n    assert copy_button.text.strip() == \"Copied!\", f\"Expected 'Copied!', but got '{copy_button.text.strip()}'\"\n    time.sleep(1)\n\n@then('after 2000 milliseconds, the button text should revert back to \"Copy to Clipboard\" with data-testid \"copy-to-clipboard-button\"')\ndef step_then_button_text_reverts(context):\n    time.sleep(2)  # Wait for 2000 milliseconds\n    copy_button = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='copy-to-clipboard-button']\"))\n    )\n    assert copy_button.text.strip() == \"Copy to Clipboard\", f\"Expected 'Copy to Clipboard', but got '{copy_button.text.strip()}'\"\n    time.sleep(1)\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                }
            ]
        }
    }
}