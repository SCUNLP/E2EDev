{
    "summary": {
        "overview": "The application is a simple Todo List that allows users to add, complete, and delete tasks. Users can enter tasks into an input field, view them in a list, and interact with each task to mark it as completed or remove it.",
        "predefined_options": "The application does not have predefined options for tasks; users manually enter each task.",
        "external_resources": "The application uses external resources for styling and functionality, including 'style.css' for CSS and 'script.js' for JavaScript.",
        "external_js_libraries": "No external JavaScript libraries are explicitly mentioned in the provided code."
    },
    "finegrained_rewith_test": {
        "1": {
            "requirement": {
                "description": "The web application allows users to add tasks to a todo list. When the user types a task into the input field (data-testid='todo-input') and submits the form (data-testid='todo-form'), the system adds the task to the todo list (data-testid='todo-list'). The input field is cleared after submission. The system trims spaces, accepts special characters, and prevents empty tasks. "
            },
            "test_cases": [
                {
                    "test_case": [
                        "Feature: Add a task to the todo list\n  The user should be able to add a task to the todo list by typing into the input field and submitting the form.\n\n\n  Scenario: [Normal] Add a task to the todo list\n    Given the \"Todo List\" page is loaded\n    And the input field with data-testid \"todo-input\" is visible\n    When the user enters \"Buy groceries\" into the input field with data-testid \"todo-input\"\n    And the user submits the form with data-testid \"todo-form\"\n    Then a new todo item with text \"Buy groceries\" should be added to the list with data-testid \"todo-list\"\n    And the input field with data-testid \"todo-input\" should be cleared\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the \"Todo List\" page is loaded')\ndef step_given_page_is_loaded(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)\n\n@given('the input field with data-testid \"todo-input\" is visible')\ndef step_given_input_field_is_visible(context):\n    input_field = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='todo-input']\"))\n    )\n    assert input_field.is_displayed(), \"Input field is not visible\"\n\n@when('the user enters \"Buy groceries\" into the input field with data-testid \"todo-input\"')\ndef step_when_user_enters_text(context):\n    input_field = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='todo-input']\")\n    input_field.clear()\n    input_field.send_keys(\"Buy groceries\")\n    time.sleep(1)\n\n@when('the user submits the form with data-testid \"todo-form\"')\ndef step_when_user_submits_form(context):\n    form = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='todo-form']\")\n    form.submit()\n    time.sleep(1)\n\n@then('a new todo item with text \"Buy groceries\" should be added to the list with data-testid \"todo-list\"')\ndef step_then_todo_item_should_be_added(context):\n    todo_list = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='todo-list']\")\n    todo_items = todo_list.find_elements(By.TAG_NAME, \"li\")\n    assert any(\"Buy groceries\" in item.text for item in todo_items), \"Todo item 'Buy groceries' not found in the list\"\n\n@then('the input field with data-testid \"todo-input\" should be cleared')\ndef step_then_input_field_should_be_cleared(context):\n    input_field = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='todo-input']\")\n    assert input_field.get_attribute(\"value\") == \"\", \"Input field is not cleared\"\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: Add a task to the todo list\n  The user should be able to add a task to the todo list by typing into the input field and submitting the form.\n\n\n  Scenario: [Edge] Add a task with leading and trailing spaces\n    Given the \"Todo List\" page is loaded\n    And the input field with data-testid \"todo-input\" is visible\n    When the user enters \"   Walk the dog   \" into the input field with data-testid \"todo-input\"\n    And the user submits the form with data-testid \"todo-form\"\n    Then a new todo item with text \"Walk the dog\" should be added to the list with data-testid \"todo-list\"\n    And the input field with data-testid \"todo-input\" should be cleared\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the \"Todo List\" page is loaded')\ndef step_given_page_is_loaded(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)\n\n@given('the input field with data-testid \"todo-input\" is visible')\ndef step_given_input_field_is_visible(context):\n    input_field = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='todo-input']\"))\n    )\n    assert input_field.is_displayed(), \"Input field is not visible\"\n    time.sleep(1)\n\n@when('the user enters \"   Walk the dog   \" into the input field with data-testid \"todo-input\"')\ndef step_when_user_enters_text(context):\n    input_field = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='todo-input']\")\n    input_field.clear()\n    input_field.send_keys(\"   Walk the dog   \")\n    time.sleep(1)\n\n@when('the user submits the form with data-testid \"todo-form\"')\ndef step_when_user_submits_form(context):\n    form = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='todo-form']\")\n    form.submit()\n    time.sleep(1)\n\n@then('a new todo item with text \"Walk the dog\" should be added to the list with data-testid \"todo-list\"')\ndef step_then_todo_item_should_be_added(context):\n    todo_list = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='todo-list']\"))\n    )\n    todo_items = todo_list.find_elements(By.TAG_NAME, \"li\")\n    assert any(\"Walk the dog\" in item.text for item in todo_items), \"Todo item 'Walk the dog' not found in the list\"\n    time.sleep(1)\n\n@then('the input field with data-testid \"todo-input\" should be cleared')\ndef step_then_input_field_should_be_cleared(context):\n    input_field = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='todo-input']\")\n    assert input_field.get_attribute('value') == \"\", \"Input field is not cleared\"\n    time.sleep(1)\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: Add a task to the todo list\n  The user should be able to add a task to the todo list by typing into the input field and submitting the form.\n\n\n  Scenario: [Edge] Add a task with special characters\n    Given the \"Todo List\" page is loaded\n    And the input field with data-testid \"todo-input\" is visible\n    When the user enters \"!@#$%^&*()_+\" into the input field with data-testid \"todo-input\"\n    And the user submits the form with data-testid \"todo-form\"\n    Then a new todo item with text \"!@#$%^&*()_+\" should be added to the list with data-testid \"todo-list\"\n    And the input field with data-testid \"todo-input\" should be cleared\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the \"Todo List\" page is loaded')\ndef step_given_page_loaded(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)\n\n@given('the input field with data-testid \"todo-input\" is visible')\ndef step_given_input_field_visible(context):\n    input_field = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='todo-input']\"))\n    )\n    assert input_field.is_displayed(), \"Input field is not visible\"\n    time.sleep(1)\n\n@when('the user enters \"!@#$%^&*()_+\" into the input field with data-testid \"todo-input\"')\ndef step_when_user_enters_special_characters(context):\n    input_field = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='todo-input']\")\n    input_field.send_keys(\"!@#$%^&*()_+\")\n    time.sleep(1)\n\n@when('the user submits the form with data-testid \"todo-form\"')\ndef step_when_user_submits_form(context):\n    form = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='todo-form']\")\n    form.submit()\n    time.sleep(1)\n\n@then('a new todo item with text \"!@#$%^&*()_+\" should be added to the list with data-testid \"todo-list\"')\ndef step_then_todo_item_added(context):\n    todo_list = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='todo-list']\"))\n    )\n    todo_items = todo_list.find_elements(By.TAG_NAME, \"li\")\n    assert any(\"!@#$%^&*()_+\" in item.text for item in todo_items), \"Todo item with special characters not found\"\n    time.sleep(1)\n\n@then('the input field with data-testid \"todo-input\" should be cleared')\ndef step_then_input_field_cleared(context):\n    input_field = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='todo-input']\")\n    assert input_field.get_attribute(\"value\") == \"\", \"Input field is not cleared\"\n    time.sleep(1)\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: Add a task to the todo list\n  The user should be able to add a task to the todo list by typing into the input field and submitting the form.\n\n\n  Scenario: [Error] Add an empty task\n    Given the \"Todo List\" page is loaded\n    And the input field with data-testid \"todo-input\" is visible\n    When the user enters \"\" into the input field with data-testid \"todo-input\"\n    And the user submits the form with data-testid \"todo-form\"\n    Then no new todo item should be added to the list with data-testid \"todo-list\"\n    And the input field with data-testid \"todo-input\" should remain empty"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\ndef is_visible(element):\n    return element.is_displayed()\n\n@given('the \"Todo List\" page is loaded')\ndef step_given_page_is_loaded(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)\n\n@given('the input field with data-testid \"todo-input\" is visible')\ndef step_given_input_field_is_visible(context):\n    input_field = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='todo-input']\"))\n    )\n    assert is_visible(input_field), \"Input field is not visible\"\n\n@when('the user enters \"\" into the input field with data-testid \"todo-input\"')\ndef step_when_user_enters_empty_string(context):\n    input_field = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='todo-input']\")\n    input_field.clear()\n    input_field.send_keys(\"\")\n    time.sleep(1)\n\n@when('the user submits the form with data-testid \"todo-form\"')\ndef step_when_user_submits_form(context):\n    form = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='todo-form']\")\n    form.submit()\n    time.sleep(1)\n\n@then('no new todo item should be added to the list with data-testid \"todo-list\"')\ndef step_then_no_new_todo_item_added(context):\n    todo_list = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='todo-list']\")\n    todos = todo_list.find_elements(By.TAG_NAME, \"li\")\n    assert len(todos) == 0, f\"Expected no todos, but found {len(todos)}\"\n\n@then('the input field with data-testid \"todo-input\" should remain empty')\ndef step_then_input_field_remains_empty(context):\n    input_field = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='todo-input']\")\n    assert input_field.get_attribute('value') == \"\", \"Input field is not empty\"\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                }
            ]
        },
        "3": {
            "requirement": {
                "description": "The web application must allow users to toggle the 'completed' status of a todo item by clicking on it. On page load, todos stored in localStorage under the key 'todos' should be displayed. Each todo is a list item ('li') in the 'todos' list. Clicking a todo toggles its 'completed' class, visually updating its status. The changes must be saved to localStorage to persist across page reloads."
            },
            "test_cases": [
                {
                    "test_case": [
                        "Feature: Toggle Todo Completion Status\n  The system should allow users to toggle the \"completed\" status of a todo item by clicking on it, visually indicating its completion.\n\n\n  Scenario: [Normal] Toggle completion status of a single todo item\n    Given the \"Todo List\" page is loaded\n    And a todo item with text \"Buy groceries\" is present in the list\n    When the user clicks on the todo item with text \"Buy groceries\"\n    Then the todo item with text \"Buy groceries\" should have the class \"completed\"\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\ndef is_completed(element):\n    return \"completed\" in element.get_attribute(\"class\").split()\n\n@given('the \"Todo List\" page is loaded')\ndef step_given_todo_list_page_loaded(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)\n\n@given('a todo item with text \"Buy groceries\" is present in the list')\ndef step_given_todo_item_present(context):\n    input_element = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='todo-input']\"))\n    )\n    input_element.send_keys(\"Buy groceries\")\n    time.sleep(1)\n    \n    form_element = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='todo-form']\"))\n    )\n    form_element.submit()\n    time.sleep(1)\n\n@when('the user clicks on the todo item with text \"Buy groceries\"')\ndef step_when_user_clicks_todo_item(context):\n    todo_item = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.XPATH, \"//li[text()='Buy groceries']\"))\n    )\n    todo_item.click()\n    time.sleep(1)\n\n@then('the todo item with text \"Buy groceries\" should have the class \"completed\"')\ndef step_then_todo_item_should_have_completed_class(context):\n    todo_item = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.XPATH, \"//li[text()='Buy groceries']\"))\n    )\n    assert is_completed(todo_item), \"Expected todo item to have class 'completed'\"\n    time.sleep(1)\n    context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: Toggle Todo Completion Status\n  The system should allow users to toggle the \"completed\" status of a todo item by clicking on it, visually indicating its completion.\n\n\n  Scenario: [Edge] Toggle completion status of multiple todo items\n    Given the \"Todo List\" page is loaded\n    And todo items with texts \"Buy groceries\" and \"Walk the dog\" are present in the list\n    When the user clicks on the todo item with text \"Buy groceries\"\n    And the user clicks on the todo item with text \"Walk the dog\"\n    Then the todo item with text \"Buy groceries\" should have the class \"completed\"\n    And the todo item with text \"Walk the dog\" should have the class \"completed\"\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\ndef is_completed(element):\n    return \"completed\" in element.get_attribute(\"class\").split()\n\n@given('the \"Todo List\" page is loaded')\ndef step_given_todo_list_page_loaded(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)\n\n@given('todo items with texts \"Buy groceries\" and \"Walk the dog\" are present in the list')\ndef step_given_todo_items_present(context):\n    todos = [\n        {\"text\": \"Buy groceries\", \"completed\": False},\n        {\"text\": \"Walk the dog\", \"completed\": False}\n    ]\n    for todo in todos:\n        input_element = WebDriverWait(context.driver, 10).until(\n            EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='todo-input']\"))\n        )\n        input_element.clear()\n        input_element.send_keys(todo[\"text\"])\n        form_element = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='todo-form']\")\n        form_element.submit()\n        time.sleep(1)\n\n@when('the user clicks on the todo item with text \"Buy groceries\"')\ndef step_when_user_clicks_buy_groceries(context):\n    todo_element = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.XPATH, \"//li[text()='Buy groceries']\"))\n    )\n    todo_element.click()\n    time.sleep(1)\n\n@when('the user clicks on the todo item with text \"Walk the dog\"')\ndef step_when_user_clicks_walk_the_dog(context):\n    todo_element = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.XPATH, \"//li[text()='Walk the dog']\"))\n    )\n    todo_element.click()\n    time.sleep(1)\n\n@then('the todo item with text \"Buy groceries\" should have the class \"completed\"')\ndef step_then_buy_groceries_completed(context):\n    todo_element = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.XPATH, \"//li[text()='Buy groceries']\"))\n    )\n    assert is_completed(todo_element), \"Expected 'Buy groceries' to be completed\"\n\n@then('the todo item with text \"Walk the dog\" should have the class \"completed\"')\ndef step_then_walk_the_dog_completed(context):\n    todo_element = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.XPATH, \"//li[text()='Walk the dog']\"))\n    )\n    assert is_completed(todo_element), \"Expected 'Walk the dog' to be completed\"\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: Toggle Todo Completion Status\n  The system should allow users to toggle the \"completed\" status of a todo item by clicking on it, visually indicating its completion.\n\n\n  Scenario: [Edge] Toggle completion status back to incomplete\n    Given the \"Todo List\" page is loaded\n    And a todo item with text \"Buy groceries\" is present in the list\n    And the todo item with text \"Buy groceries\" has the class \"completed\"\n    When the user clicks on the todo item with text \"Buy groceries\"\n    Then the todo item with text \"Buy groceries\" should not have the class \"completed\"\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\ndef is_completed(element):\n    return \"completed\" in element.get_attribute(\"class\").split()\n\n@given('the \"Todo List\" page is loaded')\ndef step_given_page_is_loaded(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)\n\n@given('a todo item with text \"Buy groceries\" is present in the list')\ndef step_given_todo_item_present(context):\n    input_box = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='todo-input']\"))\n    )\n    input_box.send_keys(\"Buy groceries\")\n    time.sleep(1)\n    form = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='todo-form']\")\n    form.submit()\n    time.sleep(1)\n\n@given('the todo item with text \"Buy groceries\" has the class \"completed\"')\ndef step_given_todo_item_completed(context):\n    todo_item = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.XPATH, \"//li[text()='Buy groceries']\"))\n    )\n    if not is_completed(todo_item):\n        todo_item.click()\n        time.sleep(1)\n\n@when('the user clicks on the todo item with text \"Buy groceries\"')\ndef step_when_user_clicks_todo_item(context):\n    todo_item = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.XPATH, \"//li[text()='Buy groceries']\"))\n    )\n    todo_item.click()\n    time.sleep(1)\n\n@then('the todo item with text \"Buy groceries\" should not have the class \"completed\"')\ndef step_then_todo_item_not_completed(context):\n    todo_item = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.XPATH, \"//li[text()='Buy groceries']\"))\n    )\n    assert not is_completed(todo_item), \"The todo item should not have the class 'completed'\"\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                }
            ]
        },
        "4": {
            "requirement": {
                "description": "The system must allow users to remove todo items by right-clicking on them, ensuring the default context menu is suppressed. This applies to all items, including completed ones, and works even when there's only one item in the list. After removal, the 'todos' list in localStorage must be updated to reflect the change. The todo items are represented as `<li>` elements within the `<ul>` element with the attribute `data-testid='todo-list'`. The removal process involves updating the `localStorage` variable named 'todos' to reflect the current state of the list after any item is removed."
            },
            "test_cases": [
                {
                    "test_case": [
                        "Feature: Remove Todo Item on Right-Click\n  The system should remove a todo item from the list when the user right-clicks on it, preventing the default context menu from appearing.\n\n\n  Scenario: [Normal] Remove a single todo item by right-clicking\n    Given the \"Todo List\" page is loaded\n    And the user has added a todo item with text \"Buy groceries\"\n    When the user right-clicks on the todo item with text \"Buy groceries\" in the list\n    Then the todo item with text \"Buy groceries\" should be removed from the list\n    And the default context menu should not appear\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the \"Todo List\" page is loaded')\ndef step_given_todo_list_page_loaded(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)\n\n@given('the user has added a todo item with text \"Buy groceries\"')\ndef step_given_user_added_todo_item(context):\n    input_box = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='todo-input']\"))\n    )\n    input_box.send_keys(\"Buy groceries\")\n    time.sleep(1)\n    \n    form = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='todo-form']\")\n    form.submit()\n    time.sleep(1)\n\n@when('the user right-clicks on the todo item with text \"Buy groceries\" in the list')\ndef step_when_user_right_clicks_todo_item(context):\n    todo_item = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.XPATH, \"//li[text()='Buy groceries']\"))\n    )\n    context.driver.execute_script(\"arguments[0].dispatchEvent(new MouseEvent('contextmenu', {bubbles: true}));\", todo_item)\n    time.sleep(1)\n\n@then('the todo item with text \"Buy groceries\" should be removed from the list')\ndef step_then_todo_item_removed(context):\n    todo_items = context.driver.find_elements(By.XPATH, \"//li[text()='Buy groceries']\")\n    assert len(todo_items) == 0, \"The todo item 'Buy groceries' was not removed from the list.\"\n\n@then('the default context menu should not appear')\ndef step_then_default_context_menu_not_appear(context):\n    # This step is more about ensuring the right-click action does not trigger the default context menu.\n    # Since Selenium does not directly interact with the OS-level context menu, this step is more about\n    # ensuring the right-click action was handled by the JavaScript code.\n    # We assume the absence of the todo item confirms the custom right-click behavior was executed.\n    pass\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: Remove Todo Item on Right-Click\n  The system should remove a todo item from the list when the user right-clicks on it, preventing the default context menu from appearing.\n\n\n  Scenario: [Edge] Right-click on a completed todo item\n    Given the \"Todo List\" page is loaded\n    And the user has added a completed todo item with text \"Read book\"\n    When the user right-clicks on the completed todo item with text \"Read book\" in the list\n    Then the completed todo item with text \"Read book\" should be removed from the list\n    And the default context menu should not appear\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\ndef is_element_present(driver, by, value):\n    try:\n        driver.find_element(by, value)\n        return True\n    except:\n        return False\n\n@given('the \"Todo List\" page is loaded')\ndef step_given_todo_list_page_loaded(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)\n\n@given('the user has added a completed todo item with text \"Read book\"')\ndef step_given_user_added_completed_todo_item(context):\n    form = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='todo-form']\"))\n    )\n    input_box = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='todo-input']\")\n    input_box.send_keys(\"Read book\")\n    form.submit()\n    time.sleep(1)\n\n    # Mark the todo as completed\n    todo_item = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.XPATH, \"//li[contains(text(), 'Read book')]\"))\n    )\n    todo_item.click()\n    time.sleep(1)\n\n@when('the user right-clicks on the completed todo item with text \"Read book\" in the list')\ndef step_when_user_right_clicks_on_completed_todo_item(context):\n    todo_item = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.XPATH, \"//li[contains(text(), 'Read book')]\"))\n    )\n    context.driver.execute_script(\"arguments[0].dispatchEvent(new MouseEvent('contextmenu', {bubbles: true}));\", todo_item)\n    time.sleep(1)\n\n@then('the completed todo item with text \"Read book\" should be removed from the list')\ndef step_then_todo_item_should_be_removed(context):\n    assert not is_element_present(context.driver, By.XPATH, \"//li[contains(text(), 'Read book')]\"), \"Todo item 'Read book' was not removed\"\n\n@then('the default context menu should not appear')\ndef step_then_default_context_menu_should_not_appear(context):\n    # This step is more about ensuring the right-click action was handled by the script\n    # Since Selenium cannot directly verify the absence of the context menu, we assume the script handles it correctly\n    pass\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: Remove Todo Item on Right-Click\n  The system should remove a todo item from the list when the user right-clicks on it, preventing the default context menu from appearing.\n\n\n  Scenario: [Edge] Right-click on the only todo item in the list\n    Given the \"Todo List\" page is loaded\n    And the user has added a single todo item with text \"Walk the dog\"\n    When the user right-clicks on the todo item with text \"Walk the dog\" in the list\n    Then the todo item with text \"Walk the dog\" should be removed from the list\n    And the list should be empty\n    And the default context menu should not appear\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the \"Todo List\" page is loaded')\ndef step_given_page_is_loaded(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)\n\n@given('the user has added a single todo item with text \"Walk the dog\"')\ndef step_given_add_single_todo_item(context):\n    input_element = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='todo-input']\"))\n    )\n    input_element.send_keys(\"Walk the dog\")\n    time.sleep(1)\n    \n    form_element = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='todo-form']\")\n    form_element.submit()\n    time.sleep(1)\n\n@when('the user right-clicks on the todo item with text \"Walk the dog\" in the list')\ndef step_when_right_click_todo_item(context):\n    todo_item = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.XPATH, \"//li[text()='Walk the dog']\"))\n    )\n    context.driver.execute_script(\"arguments[0].dispatchEvent(new MouseEvent('contextmenu', {bubbles: true, cancelable: true}));\", todo_item)\n    time.sleep(1)\n\n@then('the todo item with text \"Walk the dog\" should be removed from the list')\ndef step_then_todo_item_removed(context):\n    todo_list = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='todo-list']\")\n    assert \"Walk the dog\" not in todo_list.text, \"Todo item 'Walk the dog' was not removed\"\n\n@then('the list should be empty')\ndef step_then_list_should_be_empty(context):\n    todo_list = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='todo-list']\")\n    assert todo_list.text.strip() == \"\", \"Todo list is not empty\"\n\n@then('the default context menu should not appear')\ndef step_then_no_default_context_menu(context):\n    # This step is more about ensuring the right-click action doesn't trigger the default context menu.\n    # Since Selenium doesn't directly interact with the OS-level context menu, this step is more about ensuring no errors occur.\n    # If needed, JavaScript can be used to check if the context menu event was prevented.\n    pass\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                }
            ]
        },
        "5": {
            "requirement": {
                "description": "Upon loading the todo list page, the system must retrieve the todos from localStorage using the 'todos' key. Each todo item is displayed as a list item (<li>) within the unordered list with data-testid='todo-list'. The completion status is reflected by the presence or absence of the 'completed' class on the list item. If a todo is completed in localStorage, the 'completed' class is applied; otherwise, it is absent. If localStorage is empty, no items are displayed. The data should be parsed as JSON to reconstruct the list."
            },
            "test_cases": [
                {
                    "test_case": [
                        "Feature: Display Todos from Local Storage on Page Load\n  The system should retrieve and display the list of todos from local storage, maintaining their completion status when the page is loaded.\n\n\n  Scenario: [Normal] Display todos from local storage on page load\n    Given the local storage contains todos with text \"Buy milk\" and \"Read book\"\n      And the todo \"Buy milk\" is marked as completed\n    When the user loads the todo list page\n    Then the todo list should display \"Buy milk\" with a completed status\n      And the todo list should display \"Read book\" with an incomplete status\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\nimport json\n\nfile_path = \"index.html\"\n\ndef load_local_storage(driver, todos):\n    driver.execute_script(\"window.localStorage.setItem('todos', arguments[0]);\", json.dumps(todos))\n\n@given('the local storage contains todos with text \"Buy milk\" and \"Read book\"')\ndef step_given_local_storage_contains_todos(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    todos = [\n        {\"text\": \"Buy milk\", \"completed\": True},\n        {\"text\": \"Read book\", \"completed\": False}\n    ]\n    load_local_storage(context.driver, todos)\n    time.sleep(1)\n\n@given('the todo \"Buy milk\" is marked as completed')\ndef step_given_todo_buy_milk_completed(context):\n    # This step is already handled in the previous step by setting the completed status in local storage\n    pass\n\n@when('the user loads the todo list page')\ndef step_when_user_loads_page(context):\n    context.driver.refresh()\n    time.sleep(1)\n\n@then('the todo list should display \"Buy milk\" with a completed status')\ndef step_then_display_buy_milk_completed(context):\n    WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='todo-list'] li\"))\n    )\n    todos = context.driver.find_elements(By.CSS_SELECTOR, \"[data-testid='todo-list'] li\")\n    buy_milk_todo = next((todo for todo in todos if \"Buy milk\" in todo.text), None)\n    assert buy_milk_todo is not None, \"Todo 'Buy milk' not found\"\n    assert \"completed\" in buy_milk_todo.get_attribute(\"class\"), \"'Buy milk' is not marked as completed\"\n\n@then('the todo list should display \"Read book\" with an incomplete status')\ndef step_then_display_read_book_incomplete(context):\n    todos = context.driver.find_elements(By.CSS_SELECTOR, \"[data-testid='todo-list'] li\")\n    read_book_todo = next((todo for todo in todos if \"Read book\" in todo.text), None)\n    assert read_book_todo is not None, \"Todo 'Read book' not found\"\n    assert \"completed\" not in read_book_todo.get_attribute(\"class\"), \"'Read book' is incorrectly marked as completed\"\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: Display Todos from Local Storage on Page Load\n  The system should retrieve and display the list of todos from local storage, maintaining their completion status when the page is loaded.\n\n\n  Scenario: [Edge] Display todos when local storage is empty\n    Given the local storage is empty\n    When the user loads the todo list page\n    Then the todo list should be empty\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\ndef setup_driver(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n\ndef teardown_driver(context):\n    context.driver.quit()\n\n@given(\"the local storage is empty\")\ndef step_given_local_storage_empty(context):\n    setup_driver(context)\n    context.driver.execute_script(\"localStorage.clear();\")\n    time.sleep(1)\n\n@when(\"the user loads the todo list page\")\ndef step_when_user_loads_page(context):\n    # Assuming the page is already loaded in the setup\n    pass\n\n@then(\"the todo list should be empty\")\ndef step_then_todo_list_should_be_empty(context):\n    todos_list = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='todo-list']\"))\n    )\n    time.sleep(1)\n    assert len(todos_list.find_elements(By.TAG_NAME, \"li\")) == 0, \"Expected todo list to be empty\"\n    teardown_driver(context)"
                }
            ]
        }
    }
}