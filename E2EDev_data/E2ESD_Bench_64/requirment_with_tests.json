{
    "summary": {
        "overview": "The application is a simple number guessing game where users try to guess a randomly generated number between 1 and 20. Users receive feedback on their guesses and can track their score and highscore. The game can be restarted at any time.",
        "predefined_options": "The application defines predefined options, including a number range from 1 to 20 and initial score values, with the score starting at 20 and the high score at 0. (The correct answer is set to 13.)",
        "external_resources": "No external resources such as links, images, or audio files are used in the application.",
        "external_js_libraries": "No external JavaScript libraries are used; the application relies on vanilla JavaScript."
    },
    "finegrained_rewith_test": {
        "1": {
            "requirement": {
                "description": "The 'Guess My Number!' web application should allow users to interact with the game through a user interface consisting of specific elements. The user interface includes an input field with the attribute data-testid 'guess-input' for entering a number between 1 and 20, and a 'Check!' button with the attribute data-testid 'check-button' for submitting the guess. Upon clicking the 'Check!' button, the system should validate the input number. If the input field is empty, the system should display the message '‚õîÔ∏è No number!' in the element with data-testid 'game-message'. If a number is entered, the system should compare the input against a randomly generated secret number (between 1 and 20) and display a message in the element with data-testid 'game-message' indicating whether the guess is 'üìà Too high!', 'üìâ Too low!', or 'üéâ Correct Number!'. The game should also update the score displayed in the element with data-testid 'current-score', decrementing it by 1 for each incorrect guess, and reset it to 0 if the user loses the game. If the user guesses the correct number, the background color of the page should change to '#60b347', and the width of the element with data-testid 'hidden-number' should expand to '30rem'. The highscore should be updated in the element with data-testid 'highscore-value' if the current score exceeds the previous highscore. Additionally, the 'Again!' button with data-testid 'again-button' should reset the game state, including the score, secret number, input field, and UI styles, allowing the user to play again."
            },
            "test_cases": [
                {
                    "test_case": [
                        "Feature: Validate user input and display appropriate messages in the \"Guess My Number!\" game\n\n\nScenario: [Normal] User enters a valid number and checks it\n    Given the \"Guess My Number!\" page is loaded\n    And the user sees the input field with data-testid \"guess-input\"\n    And the user sees the \"Check!\" button with data-testid \"check-button\"\n    When the user enters the number 10 into the input field with data-testid \"guess-input\"\n    And the user clicks the \"Check!\" button with data-testid \"check-button\"\n    Then the system should display a message in data-testid \"game-message\" indicating whether the guess is too high, too low, or correct"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the \"Guess My Number!\" page is loaded')\ndef step_given_page_loaded(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)\n\n@given('the user sees the input field with data-testid \"guess-input\"')\ndef step_given_input_field_visible(context):\n    input_field = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='guess-input']\"))\n    )\n    assert input_field.is_displayed(), \"Input field is not visible\"\n    time.sleep(1)\n\n@given('the user sees the \"Check!\" button with data-testid \"check-button\"')\ndef step_given_check_button_visible(context):\n    check_button = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='check-button']\"))\n    )\n    assert check_button.is_displayed(), '\"Check!\" button is not visible'\n    time.sleep(1)\n\n@when('the user enters the number 10 into the input field with data-testid \"guess-input\"')\ndef step_when_user_enters_number(context):\n    input_field = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='guess-input']\")\n    input_field.clear()\n    input_field.send_keys(\"10\")\n    time.sleep(1)\n\n@when('the user clicks the \"Check!\" button with data-testid \"check-button\"')\ndef step_when_user_clicks_check_button(context):\n    check_button = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='check-button']\")\n    WebDriverWait(context.driver, 10).until(EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='check-button']\")))\n    check_button.click()\n    time.sleep(1)\n\n@then('the system should display a message in data-testid \"game-message\" indicating whether the guess is too high, too low, or correct')\ndef step_then_display_message(context):\n    message_element = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='game-message']\"))\n    )\n    message_text = message_element.text.strip().lower()\n    assert any(keyword in message_text for keyword in [\"too high\", \"too low\", \"correct\"]), f\"Unexpected message: {message_text}\"\n    time.sleep(1)\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: Validate user input and display appropriate messages in the \"Guess My Number!\" game\n\n\nScenario: [Normal] User enters a valid number and checks it\n    Given the \"Guess My Number!\" page is loaded\n    And the user sees the input field with data-testid \"guess-input\"\n    And the user sees the \"Check!\" button with data-testid \"check-button\"\n    When the user enters the number 1 into the input field with data-testid \"guess-input\"\n    And the user clicks the \"Check!\" button with data-testid \"check-button\"\n    Then the system should display a message in data-testid \"game-message\" indicating whether the guess is too high, too low, or correct"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\ndef is_visible(element):\n    return element.is_displayed()\n\n@given('the \"Guess My Number!\" page is loaded')\ndef step_given_page_loaded(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)  # Allow the page to load completely\n\n@given('the user sees the input field with data-testid \"guess-input\"')\ndef step_given_input_field_visible(context):\n    input_field = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='guess-input']\"))\n    )\n    assert is_visible(input_field), \"Input field is not visible\"\n\n@given('the user sees the \"Check!\" button with data-testid \"check-button\"')\ndef step_given_check_button_visible(context):\n    check_button = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='check-button']\"))\n    )\n    assert is_visible(check_button), \"Check button is not visible\"\n\n@when('the user enters the number 1 into the input field with data-testid \"guess-input\"')\ndef step_when_user_enters_number(context):\n    input_field = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='guess-input']\"))\n    )\n    input_field.clear()\n    input_field.send_keys(\"1\")\n    time.sleep(1)  # Allow the input to register\n\n@when('the user clicks the \"Check!\" button with data-testid \"check-button\"')\ndef step_when_user_clicks_check_button(context):\n    check_button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='check-button']\"))\n    )\n    check_button.click()\n    time.sleep(1)  # Allow the click action to process\n\n@then('the system should display a message in data-testid \"game-message\" indicating whether the guess is too high, too low, or correct')\ndef step_then_validate_message(context):\n    game_message = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='game-message']\"))\n    )\n    assert is_visible(game_message), \"Game message is not visible\"\n    message_text = game_message.text.strip()\n    assert message_text in [\"üìà Too high!\", \"üìâ Too low!\", \"üéâ Correct Number!\"], f\"Unexpected message: {message_text}\"\n\n# Teardown to close the browser after the test\ndef after_scenario(context, scenario):\n    if hasattr(context, 'driver'):\n        context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: Validate user input and display appropriate messages in the \"Guess My Number!\" game\n\n\nScenario: [Normal] User enters a valid number and checks it\n    Given the \"Guess My Number!\" page is loaded\n    And the user sees the input field with data-testid \"guess-input\"\n    And the user sees the \"Check!\" button with data-testid \"check-button\"\n    When the user enters the number 20 into the input field with data-testid \"guess-input\"\n    And the user clicks the \"Check!\" button with data-testid \"check-button\"\n    Then the system should display a message in data-testid \"game-message\" indicating whether the guess is too high, too low, or correct"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the \"Guess My Number!\" page is loaded')\ndef step_given_page_loaded(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)\n\n@given('the user sees the input field with data-testid \"guess-input\"')\ndef step_given_input_field_visible(context):\n    input_field = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='guess-input']\"))\n    )\n    assert input_field.is_displayed(), \"Input field is not visible\"\n    time.sleep(1)\n\n@given('the user sees the \"Check!\" button with data-testid \"check-button\"')\ndef step_given_check_button_visible(context):\n    check_button = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='check-button']\"))\n    )\n    assert check_button.is_displayed(), \"Check button is not visible\"\n    time.sleep(1)\n\n@when('the user enters the number 20 into the input field with data-testid \"guess-input\"')\ndef step_when_user_enters_number(context):\n    input_field = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='guess-input']\")\n    input_field.clear()\n    input_field.send_keys(\"20\")\n    time.sleep(1)\n\n@when('the user clicks the \"Check!\" button with data-testid \"check-button\"')\ndef step_when_user_clicks_check_button(context):\n    check_button = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='check-button']\")\n    check_button.click()\n    time.sleep(1)\n\n@then('the system should display a message in data-testid \"game-message\" indicating whether the guess is too high, too low, or correct')\ndef step_then_display_message(context):\n    message_element = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='game-message']\"))\n    )\n    message_text = message_element.text.strip().lower()\n    expected_messages = [\"too high\", \"too low\", \"correct number\"]\n    assert any(expected_message in message_text for expected_message in expected_messages), f\"Unexpected message: {message_text}\"\n    time.sleep(1)\n    context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: Validate user input and display appropriate messages in the \"Guess My Number!\" game\n\n\n  Scenario: [Error] User does not enter any number and checks it\n    Given the \"Guess My Number!\" page is loaded\n    And the user sees the input field with data-testid \"guess-input\"\n    And the user sees the \"Check!\" button with data-testid \"check-button\"\n    When the user leaves the input field with data-testid \"guess-input\" empty\n    And the user clicks the \"Check!\" button with data-testid \"check-button\"\n    Then the system should display the message \"‚õîÔ∏è No number!\" in the element with data-testid \"game-message\""
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the \"Guess My Number!\" page is loaded')\ndef step_given_page_loaded(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)\n\n@given('the user sees the input field with data-testid \"guess-input\"')\ndef step_given_user_sees_input_field(context):\n    input_field = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='guess-input']\"))\n    )\n    assert input_field.is_displayed(), \"Input field is not visible\"\n    time.sleep(1)\n\n@given('the user sees the \"Check!\" button with data-testid \"check-button\"')\ndef step_given_user_sees_check_button(context):\n    check_button = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='check-button']\"))\n    )\n    assert check_button.is_displayed(), \"Check button is not visible\"\n    time.sleep(1)\n\n@when('the user leaves the input field with data-testid \"guess-input\" empty')\ndef step_when_user_leaves_input_empty(context):\n    input_field = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='guess-input']\")\n    input_field.clear()\n    time.sleep(1)\n\n@when('the user clicks the \"Check!\" button with data-testid \"check-button\"')\ndef step_when_user_clicks_check_button(context):\n    check_button = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='check-button']\")\n    check_button.click()\n    time.sleep(1)\n\n@then('the system should display the message \"‚õîÔ∏è No number!\" in the element with data-testid \"game-message\"')\ndef step_then_system_displays_no_number_message(context):\n    message_element = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='game-message']\"))\n    )\n    expected_message = \"‚õîÔ∏è No number!\"\n    assert expected_message in message_element.text, f\"Expected message '{expected_message}' but got '{message_element.text}'\"\n    time.sleep(1)\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                }
            ]
        },
        "2": {
            "requirement": {
                "description": "When the user correctly guesses the secret number by entering it into the input field with data-testid 'guess-input' and clicking the 'Check!' button with data-testid 'check-button', the system should perform the following actions: display the message 'üéâ Correct Number!' in the element with data-testid 'game-message', reveal the secret number in the element with data-testid 'hidden-number', change the background color of the body to '#60b347', and increase the width of the element with data-testid 'hidden-number' to '30rem'. Additionally, if the current score is higher than the highscore, update the highscore displayed in the element with data-testid 'highscore-value'."
            },
            "test_cases": [
                {
                    "test_case": [
                        "Feature: Correct Guess Handling\n  The system should correctly handle the scenario when the user guesses the secret number.\n\n\nScenario: [Normal] User correctly guesses the secret number\n    Given the webpage \"Guess My Number!\" is loaded\n    And the secret number is set to 13\n    And the user enters \"13\" into the input field with data-testid \"guess-input\"\n    When the user clicks the \"Check!\" button with data-testid \"check-button\"\n    Then the message displayed should be \"üéâ Correct Number!\" with data-testid \"game-message\"\n    And the hidden number should be revealed as \"13\" with data-testid \"hidden-number\"\n    And the background color should change to green"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the webpage \"Guess My Number!\" is loaded')\ndef step_impl_load_webpage(context):\n    # Initialize the WebDriver and load the test page\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    context.driver.maximize_window()\n    time.sleep(1)  # Allow the page to load fully\n\n@given('the secret number is set to 13')\ndef step_impl_set_secret_number(context):\n    # Use JavaScript to set the secret number to 13\n    context.driver.execute_script(\"secretNumber = 13;\")\n    time.sleep(1)\n\n@given('the user enters \"13\" into the input field with data-testid \"guess-input\"')\ndef step_impl_enter_guess(context):\n    # Locate the input field and enter the value \"13\"\n    guess_input = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='guess-input']\"))\n    )\n    guess_input.clear()\n    guess_input.send_keys(\"13\")\n    time.sleep(1)\n\n@when('the user clicks the \"Check!\" button with data-testid \"check-button\"')\ndef step_impl_click_check_button(context):\n    # Locate and click the \"Check!\" button\n    check_button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='check-button']\"))\n    )\n    check_button.click()\n    time.sleep(1)\n\n@then('the message displayed should be \"üéâ Correct Number!\" with data-testid \"game-message\"')\ndef step_impl_verify_message(context):\n    # Verify the message displayed\n    game_message = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='game-message']\"))\n    )\n    assert \"üéâ Correct Number!\" in game_message.text, f\"Expected 'üéâ Correct Number!', but got '{game_message.text}'\"\n\n@then('the hidden number should be revealed as \"13\" with data-testid \"hidden-number\"')\ndef step_impl_verify_hidden_number(context):\n    # Verify the hidden number is revealed as \"13\"\n    hidden_number = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='hidden-number']\"))\n    )\n    assert hidden_number.text == \"13\", f\"Expected hidden number to be '13', but got '{hidden_number.text}'\"\n\n@then('the background color should change to green')\ndef step_impl_verify_background_color(context):\n    # Verify the background color of the page is green\n    body = context.driver.find_element(By.TAG_NAME, \"body\")\n    background_color = body.value_of_css_property(\"background-color\")\n    assert background_color == \"rgb(96, 179, 71)\" or background_color == \"rgba(96, 179, 71, 1)\", f\"Expected background color to be green, but got '{background_color}'\"\n\n# Teardown to close the browser after the test\ndef after_scenario(context, scenario):\n    if hasattr(context, 'driver'):\n        context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: Correct Guess Handling\n  The system should correctly handle the scenario when the user guesses the secret number.\n\n\nScenario: [Edge] User guesses the secret number on the first attempt\n    Given the webpage \"Guess My Number!\" is loaded\n    And the secret number is set to 1\n    And the user enters \"1\" into the input field with data-testid \"guess-input\"\n    When the user clicks the \"Check!\" button with data-testid \"check-button\"\n    Then the message displayed should be \"üéâ Correct Number!\" with data-testid \"game-message\"\n    And the hidden number should be revealed as \"1\" with data-testid \"hidden-number\"\n    And the background color should change to green"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the webpage \"Guess My Number!\" is loaded')\ndef step_given_webpage_loaded(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)\n\n@given('the secret number is set to 1')\ndef step_given_secret_number_set(context):\n    context.driver.execute_script(\"window.secretNumber = 1;\")\n    time.sleep(1)\n\n@given('the user enters \"1\" into the input field with data-testid \"guess-input\"')\ndef step_given_user_enters_number(context):\n    guess_input = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='guess-input']\"))\n    )\n    guess_input.clear()\n    guess_input.send_keys(\"1\")\n    time.sleep(1)\n\n@when('the user clicks the \"Check!\" button with data-testid \"check-button\"')\ndef step_when_user_clicks_check_button(context):\n    check_button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='check-button']\"))\n    )\n    check_button.click()\n    time.sleep(1)\n\n@then('the message displayed should be \"üéâ Correct Number!\" with data-testid \"game-message\"')\ndef step_then_message_displayed(context):\n    game_message = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='game-message']\"))\n    )\n    expected_message = \"üéâ Correct Number!\"\n    assert expected_message in game_message.text, f\"Expected '{expected_message}' but got '{game_message.text}'\"\n\n@then('the hidden number should be revealed as \"1\" with data-testid \"hidden-number\"')\ndef step_then_hidden_number_revealed(context):\n    hidden_number = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='hidden-number']\"))\n    )\n    expected_number = \"1\"\n    assert expected_number == hidden_number.text, f\"Expected '{expected_number}' but got '{hidden_number.text}'\"\n\n@then('the background color should change to green')\ndef step_then_background_color_change(context):\n    body_element = context.driver.find_element(By.TAG_NAME, \"body\")\n    expected_color = \"rgb(96, 179, 71)\"  # Corresponds to #60b347\n    actual_color = body_element.value_of_css_property(\"background-color\")\n    assert expected_color == actual_color, f\"Expected background color '{expected_color}' but got '{actual_color}'\"\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                }
            ]
        },
        "3": {
            "requirement": {
                "description": "When the user enters a guess into the input field with data-testid 'guess-input' and clicks the 'Check!' button with data-testid 'check-button', the system should evaluate the guess against a randomly generated secret number between 1 and 20. If the guess is greater than the secret number, the message 'üìà Too high!' should be displayed using the element with data-testid 'game-message'. If the guess is less than the secret number, the message 'üìâ Too low!' should be displayed. In both scenarios, the score, initially set at 20, should be decreased by 1 and updated in the element with data-testid 'current-score'. This logic should handle all valid guesses, including edge cases such as guessing the number 1 or 20."
            },
            "test_cases": [
                {
                    "test_case": [
                        "Feature: Incorrect Guess Handling\n  The system should provide feedback and adjust the score when the user makes an incorrect guess.\n\n\nScenario: [Normal] User guesses a number greater than the secret number\n    Given the webpage \"Guess My Number!\" is loaded\n    And the current score is 20\n    And the user enters \"15\" into the guess input field with data-testid \"guess-input\"\n    When the user clicks the \"Check!\" button with data-testid \"check-button\"\n    Then the message displayed with data-testid \"game-message\" should be \"üìà Too high!\"\n    And the current score displayed with data-testid \"current-score\" should be 19"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the webpage \"Guess My Number!\" is loaded')\ndef step_given_webpage_loaded(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)\n\n@given('the current score is 20')\ndef step_given_current_score_is_20(context):\n    score_element = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='current-score']\"))\n    )\n    assert score_element.text == \"20\", f\"Expected score to be 20, but got {score_element.text}\"\n\n@given('the user enters \"15\" into the guess input field with data-testid \"guess-input\"')\ndef step_given_user_enters_guess(context):\n    guess_input = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='guess-input']\"))\n    )\n    guess_input.clear()\n    guess_input.send_keys(\"15\")\n    time.sleep(1)\n\n@when('the user clicks the \"Check!\" button with data-testid \"check-button\"')\ndef step_when_user_clicks_check_button(context):\n    check_button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='check-button']\"))\n    )\n    check_button.click()\n    time.sleep(1)\n\n@then('the message displayed with data-testid \"game-message\" should be \"üìà Too high!\"')\ndef step_then_message_should_be_too_high(context):\n    message_element = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='game-message']\"))\n    )\n    expected_message = \"üìà Too high!\"\n    assert expected_message in message_element.text, f\"Expected message '{expected_message}', but got '{message_element.text}'\"\n\n@then('the current score displayed with data-testid \"current-score\" should be 19')\ndef step_then_current_score_should_be_19(context):\n    score_element = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='current-score']\"))\n    )\n    expected_score = \"19\"\n    assert score_element.text == expected_score, f\"Expected score to be {expected_score}, but got {score_element.text}\"\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: Incorrect Guess Handling\n  The system should provide feedback and adjust the score when the user makes an incorrect guess.\n\n\nScenario: [Normal] User guesses a number less than the secret number\n    Given the webpage \"Guess My Number!\" is loaded\n    And the current score is 20\n    And the user enters \"10\" into the guess input field with data-testid \"guess-input\"\n    When the user clicks the \"Check!\" button with data-testid \"check-button\"\n    Then the message displayed with data-testid \"game-message\" should be \"üìâ Too low!\"\n    And the current score displayed with data-testid \"current-score\" should be 19"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the webpage \"Guess My Number!\" is loaded')\ndef step_given_webpage_loaded(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)\n\n@given('the current score is 20')\ndef step_given_current_score_is_20(context):\n    score_element = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='current-score']\"))\n    )\n    assert score_element.text == \"20\", f\"Expected score to be 20, but got {score_element.text}\"\n    time.sleep(1)\n\n@given('the user enters \"10\" into the guess input field with data-testid \"guess-input\"')\ndef step_given_user_enters_guess(context):\n    guess_input = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='guess-input']\"))\n    )\n    guess_input.clear()\n    guess_input.send_keys(\"10\")\n    time.sleep(1)\n\n@when('the user clicks the \"Check!\" button with data-testid \"check-button\"')\ndef step_when_user_clicks_check_button(context):\n    check_button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='check-button']\"))\n    )\n    check_button.click()\n    time.sleep(1)\n\n@then('the message displayed with data-testid \"game-message\" should be \"üìâ Too low!\"')\ndef step_then_message_should_be_too_low(context):\n    message_element = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='game-message']\"))\n    )\n    expected_message = \"üìâ Too low!\"\n    assert expected_message in message_element.text, f\"Expected message '{expected_message}', but got '{message_element.text}'\"\n    time.sleep(1)\n\n@then('the current score displayed with data-testid \"current-score\" should be 19')\ndef step_then_current_score_should_be_19(context):\n    score_element = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='current-score']\"))\n    )\n    assert score_element.text == \"19\", f\"Expected score to be 19, but got {score_element.text}\"\n    time.sleep(1)\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: Incorrect Guess Handling\n  The system should provide feedback and adjust the score when the user makes an incorrect guess.\n\n\nScenario: [Edge] User guesses the number 1\n    Given the webpage \"Guess My Number!\" is loaded\n    And the current score is 20\n    And the user enters \"1\" into the guess input field with data-testid \"guess-input\"\n    When the user clicks the \"Check!\" button with data-testid \"check-button\"\n    Then the message displayed with data-testid \"game-message\" should be \"üìâ Too low!\"\n    And the current score displayed with data-testid \"current-score\" should be 19"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the webpage \"Guess My Number!\" is loaded')\ndef step_given_webpage_loaded(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)\n\n@given('the current score is 20')\ndef step_given_current_score_is_20(context):\n    score_element = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='current-score']\"))\n    )\n    assert score_element.text == \"20\", f\"Expected score to be 20, but got {score_element.text}\"\n    time.sleep(1)\n\n@given('the user enters \"1\" into the guess input field with data-testid \"guess-input\"')\ndef step_given_user_enters_guess(context):\n    guess_input = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='guess-input']\"))\n    )\n    guess_input.clear()\n    guess_input.send_keys(\"1\")\n    time.sleep(1)\n\n@when('the user clicks the \"Check!\" button with data-testid \"check-button\"')\ndef step_when_user_clicks_check_button(context):\n    check_button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='check-button']\"))\n    )\n    check_button.click()\n    time.sleep(1)\n\n@then('the message displayed with data-testid \"game-message\" should be \"üìâ Too low!\"')\ndef step_then_message_should_be_too_low(context):\n    message_element = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='game-message']\"))\n    )\n    expected_message = \"üìâ Too low!\"\n    assert expected_message in message_element.text, f\"Expected message '{expected_message}', but got '{message_element.text}'\"\n    time.sleep(1)\n\n@then('the current score displayed with data-testid \"current-score\" should be 19')\ndef step_then_current_score_should_be_19(context):\n    score_element = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='current-score']\"))\n    )\n    assert score_element.text == \"19\", f\"Expected score to be 19, but got {score_element.text}\"\n    time.sleep(1)\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                }
            ]
        },
        "4": {
            "requirement": {
                "description": "When the user interacts with the 'Guess My Number!' web application, if the user's score reaches 0 after clicking the 'Check!' button (identified by data-testid 'check-button'), the system must update the UI to reflect the game loss. Specifically, the message element (identified by data-testid 'game-message') should display the text 'üí• You lost the game!', and the score element (identified by data-testid 'current-score') should be updated to show a score of 0. This behavior should occur regardless of the number of attempts made, ensuring that the user is clearly informed of their loss once their score depletes to zero."
            },
            "test_cases": [
                {
                    "test_case": [
                        "Feature: Display loss message and set score to 0 when user's score reaches 0\n  The system should inform the user they have lost the game and set the score to 0 when their score reaches 0 after a guess.\n\n\nScenario: [Normal] User loses the game when score reaches 0\n  Given the \"Guess My Number!\" webpage is loaded\n    And the user enters the number 10 into the input field with data-testid \"guess-input\"\n  When the user clicks the \"Check!\" button with data-testid \"check-button\" 20 times quickly\n  Then the message displayed should be \"üí• You lost the game!\" with data-testid \"game-message\"\n    And the score displayed should be 0 with data-testid \"current-score\""
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the \"Guess My Number!\" webpage is loaded')\ndef step_given_webpage_loaded(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)\n\n@given('the user enters the number 10 into the input field with data-testid \"guess-input\"')\ndef step_given_enter_number(context):\n    guess_input = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='guess-input']\"))\n    )\n    guess_input.clear()\n    guess_input.send_keys(\"10\")\n    time.sleep(1)\n\n@when('the user clicks the \"Check!\" button with data-testid \"check-button\" 20 times quickly')\ndef step_when_click_check_button(context):\n    check_button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='check-button']\"))\n    )\n    for _ in range(20):\n        check_button.click()\n        time.sleep(0.1)  # Short sleep to simulate quick clicks\n\n@then('the message displayed should be \"üí• You lost the game!\" with data-testid \"game-message\"')\ndef step_then_check_loss_message(context):\n    game_message = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='game-message']\"))\n    )\n    expected_message = \"üí• You lost the game!\"\n    assert expected_message in game_message.text, f\"Expected '{expected_message}' but got '{game_message.text}'\"\n    time.sleep(1)\n\n@then('the score displayed should be 0 with data-testid \"current-score\"')\ndef step_then_check_score(context):\n    current_score = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='current-score']\"))\n    )\n    expected_score = \"0\"\n    assert expected_score == current_score.text, f\"Expected score '{expected_score}' but got '{current_score.text}'\"\n    time.sleep(1)\n    context.driver.quit()"
                }
            ]
        },
        "5": {
            "requirement": {
                "description": "The 'Guess My Number!' web application must display a hint indicating the valid input range '(Between 1 and 20)' near the guess input field. This hint should be visible at all times, regardless of browser window resizing, and should be associated with the element having the attribute data-testid='range-info'. The hint serves to guide users in entering a number within the specified range, ensuring clarity and preventing invalid inputs."
            },
            "test_cases": [
                {
                    "test_case": [
                        "Feature: Display hint for user input range on the \"Guess My Number!\" page\n\n\n  Scenario: [Normal] Display hint for user input range\n    Given the \"Guess My Number!\" page is loaded\n    When the user views the page\n    Then the text \"(Between 1 and 20)\" should be displayed near the guess input field with data-testid \"range-info\"\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the \"Guess My Number!\" page is loaded')\ndef step_given_page_is_loaded(context):\n    # Initialize the WebDriver\n    context.driver = webdriver.Chrome()\n    # Load the test page\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)  # Allow time for the page to load\n\n@when('the user views the page')\ndef step_when_user_views_page(context):\n    # This step is implicit as viewing the page is part of loading it\n    pass\n\n@then('the text \"(Between 1 and 20)\" should be displayed near the guess input field with data-testid \"range-info\"')\ndef step_then_check_range_info_displayed(context):\n    # Wait for the range info element to be visible\n    range_info = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='range-info']\"))\n    )\n    # Check if the text is correct\n    expected_text = \"(Between 1 and 20)\"\n    assert expected_text in range_info.text, f\"Expected '{expected_text}' in '{range_info.text}'\"\n    time.sleep(1)\n\ndef after_scenario(context, scenario):\n    # Close the browser after each scenario\n    context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: Display hint for user input range on the \"Guess My Number!\" page\n\n\n  Scenario: [Edge] Verify hint visibility when the page is resized\n    Given the \"Guess My Number!\" page is loaded\n    When the user resizes the browser window\n    Then the text \"(Between 1 and 20)\" should remain visible near the guess input field with data-testid \"range-info\"\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\ndef is_visible(element):\n    return element.is_displayed()\n\n@given('the \"Guess My Number!\" page is loaded')\ndef step_given_page_is_loaded(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)  # Allow time for the page to load\n\n@when('the user resizes the browser window')\ndef step_when_user_resizes_window(context):\n    context.driver.set_window_size(800, 600)\n    time.sleep(1)  # Allow time for the resize effect\n\n@then('the text \"(Between 1 and 20)\" should remain visible near the guess input field with data-testid \"range-info\"')\ndef step_then_text_should_remain_visible(context):\n    range_info_element = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='range-info']\"))\n    )\n    assert is_visible(range_info_element), \"The range info text is not visible\"\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                }
            ]
        },
        "6": {
            "requirement": {
                "description": "When the user clicks the 'Again!' button with the data-testid 'again-button', the system should reset the game by performing the following actions: generate a new secret number between 1 and 20, reset the score to 20 and update the score display in the element with data-testid 'current-score', clear the input field with data-testid 'guess-input', set the hidden number display with data-testid 'hidden-number' to '?', change the background color of the body to '#222', and reset the width of the hidden number display to '15rem'. These actions ensure the game is restored to its initial state, ready for a new round of play."
            },
            "test_cases": [
                {
                    "test_case": [
                        "Feature: Game Reset Functionality\n  The system should reset the game when the user clicks the 'Again!' button, ensuring all game parameters are restored to their initial state.\n\n\nScenario: [Normal] Resetting the game using the 'Again!' button\n    Given the webpage \"Guess My Number!\" is loaded\n    And the user has made some guesses\n    When the user clicks the 'Again!' button with data-testid 'again-button'\n    Then the score should be reset to 20 and displayed in the element with data-testid 'current-score'\n    And the input field with data-testid 'guess-input' should be cleared\n    And the hidden number display with data-testid 'hidden-number' should show '?'\n    And the background color of the body should be '#222'"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the webpage \"Guess My Number!\" is loaded')\ndef step_impl(context):\n    # Initialize the WebDriver and load the test page\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    context.driver.maximize_window()\n    time.sleep(1)  # Allow the page to load completely\n\n@given('the user has made some guesses')\ndef step_impl(context):\n    # Simulate the user making a guess\n    guess_input = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='guess-input']\"))\n    )\n    guess_input.clear()\n    guess_input.send_keys(\"10\")  # Enter a guess\n    time.sleep(1)\n\n    check_button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='check-button']\"))\n    )\n    check_button.click()  # Click the \"Check!\" button\n    time.sleep(1)\n\n@when('the user clicks the \\'Again!\\' button with data-testid \\'again-button\\'')\ndef step_impl(context):\n    # Click the \"Again!\" button to reset the game\n    again_button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='again-button']\"))\n    )\n    again_button.click()\n    time.sleep(1)\n\n@then('the score should be reset to 20 and displayed in the element with data-testid \\'current-score\\'')\ndef step_impl(context):\n    # Verify that the score is reset to 20\n    current_score = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='current-score']\"))\n    )\n    assert current_score.text == \"20\", f\"Expected score to be '20', but got '{current_score.text}'\"\n\n@then('the input field with data-testid \\'guess-input\\' should be cleared')\ndef step_impl(context):\n    # Verify that the input field is cleared\n    guess_input = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='guess-input']\"))\n    )\n    assert guess_input.get_attribute(\"value\") == \"\", \"Expected input field to be cleared\"\n\n@then('the hidden number display with data-testid \\'hidden-number\\' should show \\'?\\'')\ndef step_impl(context):\n    # Verify that the hidden number display shows '?'\n    hidden_number = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='hidden-number']\"))\n    )\n    assert hidden_number.text == \"?\", f\"Expected hidden number to be '?', but got '{hidden_number.text}'\"\n\n@then('the background color of the body should be \\'#222\\'')\ndef step_impl(context):\n    # Verify that the background color of the body is '#222'\n    body = context.driver.find_element(By.TAG_NAME, \"body\")\n    background_color = body.value_of_css_property(\"background-color\")\n    assert background_color == \"rgba(34, 34, 34, 1)\", f\"Expected background color to be '#222', but got '{background_color}'\"\n\n# Teardown to close the browser after the test\ndef after_scenario(context, scenario):\n    if hasattr(context, 'driver'):\n        context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: Game Reset Functionality\n  The system should reset the game when the user clicks the 'Again!' button, ensuring all game parameters are restored to their initial state.\n\n\nScenario: [Edge] Resetting the game immediately after starting\n    Given the webpage \"Guess My Number!\" is loaded\n    When the user clicks the 'Again!' button with data-testid 'again-button' without making any guesses\n    Then the score should remain 20 and be displayed in the element with data-testid 'current-score'\n    And the input field with data-testid 'guess-input' should be cleared\n    And the hidden number display with data-testid 'hidden-number' should show '?'\n    And the background color of the body should be '#222'"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the webpage \"Guess My Number!\" is loaded')\ndef step_given_webpage_loaded(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)\n\n@when(\"the user clicks the 'Again!' button with data-testid 'again-button' without making any guesses\")\ndef step_when_user_clicks_again_button(context):\n    again_button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='again-button']\"))\n    )\n    again_button.click()\n    time.sleep(1)\n\n@then(\"the score should remain 20 and be displayed in the element with data-testid 'current-score'\")\ndef step_then_score_should_remain_20(context):\n    score_element = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='current-score']\"))\n    )\n    assert score_element.text.strip() == \"20\", f\"Expected score '20', but got '{score_element.text.strip()}'\"\n\n@then(\"the input field with data-testid 'guess-input' should be cleared\")\ndef step_then_input_field_should_be_cleared(context):\n    guess_input = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='guess-input']\"))\n    )\n    assert guess_input.get_attribute(\"value\") == \"\", \"Expected input field to be cleared\"\n\n@then(\"the hidden number display with data-testid 'hidden-number' should show '?'\")\ndef step_then_hidden_number_should_show_question_mark(context):\n    hidden_number = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='hidden-number']\"))\n    )\n    assert hidden_number.text.strip() == \"?\", f\"Expected hidden number '?', but got '{hidden_number.text.strip()}'\"\n\n@then(\"the background color of the body should be '#222'\")\ndef step_then_background_color_should_be_222(context):\n    body_element = context.driver.find_element(By.TAG_NAME, \"body\")\n    background_color = body_element.value_of_css_property(\"background-color\")\n    assert background_color == \"rgba(34, 34, 34, 1)\", f\"Expected background color '#222', but got '{background_color}'\"\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                }
            ]
        }
    }
}