{
    "summary": {
        "overview": "This web application is a custom video player that allows users to play, pause, skip, adjust volume, change playback speed, seek using a progress bar, and toggle fullscreen mode. The interface is designed to provide intuitive controls for video playback.",
        "predefined_options": "Predefined options include default values for volume (1.0), playback rate (1.0), and progress bar starting at 0%. Skip buttons are preset to skip -10 seconds backward and 25 seconds forward. Structurally, the player consists of a container element (.player) that wraps both the video playback area and the control interface, and a video element (.player__video.viewer) where the actual playback occurs.",
        "external_resources": [
            {
                "name": "Video file",
                "source": "./video.mp4"
            }
        ],
        "external_js_libraries": []
    },
    "finegrained_rewith_test": {
        "1": {
            "requirement": {
                "description": "The video player starts in a paused state. Users can toggle between play and pause by clicking the video element (class='viewer') or the Play/Pause button (data-testid='toggle-play-button'). The button icon displays '►' when paused and '❚ ❚' when playing. Rapid clicks will stabilize the video in either playing or paused state, with the icon reflecting the final state. The video listens for 'click', 'play', and 'pause' events to toggle and update the button icon. The video plays when toggled from paused and pauses when toggled from playing."
            },
            "test_cases": [
                {
                    "test_case": [
                        "Feature: Video Play/Pause Toggle\n  The video player should toggle between play and pause states when the user interacts with the video or the Play/Pause button. The button icon should update accordingly.\n\n\n  Scenario: [Normal] Toggle play/pause by clicking the video\n    Given the video player page is loaded\n    And the video is currently paused\n    When the user clicks on the video with class \"viewer\"\n    Then the video should start playing\n    And the Play/Pause button with data-testid \"toggle-play-button\" should display the icon \"❚ ❚\"\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given(\"the video player page is loaded\")\ndef step_impl(context):\n    # Initialize the WebDriver and load the test page\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    context.driver.maximize_window()\n    time.sleep(1)  # Allow the page to load completely\n\n@given(\"the video is currently paused\")\ndef step_impl(context):\n    # Ensure the video is paused\n    video_element = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \".player__video.viewer\"))\n    )\n    is_paused = context.driver.execute_script(\"return arguments[0].paused;\", video_element)\n    if not is_paused:\n        context.driver.execute_script(\"arguments[0].pause();\", video_element)\n    time.sleep(1)\n\n@when('the user clicks on the video with class \"viewer\"')\ndef step_impl(context):\n    # Click on the video element to toggle play/pause\n    video_element = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \".player__video.viewer\"))\n    )\n    video_element.click()\n    time.sleep(1)\n\n@then(\"the video should start playing\")\ndef step_impl(context):\n    # Verify that the video is playing\n    video_element = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \".player__video.viewer\"))\n    )\n    is_paused = context.driver.execute_script(\"return arguments[0].paused;\", video_element)\n    assert not is_paused, \"The video is not playing as expected.\"\n\n@then('the Play/Pause button with data-testid \"toggle-play-button\" should display the icon \"❚ ❚\"')\ndef step_impl(context):\n    # Verify that the Play/Pause button displays the correct icon\n    toggle_button = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='toggle-play-button']\"))\n    )\n    button_text = toggle_button.text.strip()\n    assert button_text == \"❚ ❚\", f\"Expected button text '❚ ❚', but got '{button_text}'\"\n\n# Teardown to close the browser after the test\ndef after_scenario(context, scenario):\n    if hasattr(context, \"driver\"):\n        context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: Video Play/Pause Toggle\n  The video player should toggle between play and pause states when the user interacts with the video or the Play/Pause button. The button icon should update accordingly.\n\n\n  Scenario: [Normal] Toggle play/pause by clicking the Play/Pause button\n    Given the video player page is loaded\n    And the video is currently paused\n    When the user clicks on the Play/Pause button with data-testid \"toggle-play-button\"\n    Then the video should start playing\n    And the Play/Pause button should display the icon \"❚ ❚\"\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given(\"the video player page is loaded\")\ndef step_given_video_player_page_loaded(context):\n    # Initialize the WebDriver and load the test page\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    context.driver.maximize_window()\n    time.sleep(1)  # Allow the page to fully load\n\n@given(\"the video is currently paused\")\ndef step_given_video_is_paused(context):\n    # Locate the video element and ensure it is paused\n    video_element = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \".player__video.viewer\"))\n    )\n    is_paused = context.driver.execute_script(\"return arguments[0].paused;\", video_element)\n    assert is_paused is True , \"Video is not paused initially\"\n\n@when('the user clicks on the Play/Pause button with data-testid \"toggle-play-button\"')\ndef step_when_user_clicks_play_pause_button(context):\n    # Locate the Play/Pause button and click it\n    play_pause_button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='toggle-play-button']\"))\n    )\n    play_pause_button.click()\n    time.sleep(1)  # Allow time for the video state to change\n\n@then(\"the video should start playing\")\ndef step_then_video_should_start_playing(context):\n    video_element = context.driver.find_element(By.CSS_SELECTOR, \".player__video.viewer\")\n    is_paused = context.driver.execute_script(\"return arguments[0].paused;\", video_element)\n    assert is_paused is False, \"Video did not pause\"\n\n@then('the Play/Pause button should display the icon \"❚ ❚\"')\ndef step_then_play_pause_button_icon(context):\n    # Verify that the Play/Pause button icon has updated\n    play_pause_button = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='toggle-play-button']\"))\n    )\n    assert play_pause_button.text.strip() == \"❚ ❚\", f\"Expected icon '❚ ❚', but got '{play_pause_button.text.strip()}'\"\n\n# Teardown to close the browser after the test\ndef after_scenario(context, scenario):\n    if hasattr(context, \"driver\"):\n        context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: Video Play/Pause Toggle\n  The video player should toggle between play and pause states when the user interacts with the video or the Play/Pause button. The button icon should update accordingly.\n\n\n  Scenario: [Edge] Rapidly clicking the Play/Pause button\n    Given the video player page is loaded\n    And the video is currently paused\n    When the user rapidly clicks the Play/Pause button with data-testid \"toggle-play-button\" multiple times\n    Then the video should eventually be in a consistent state of either playing or paused\n    And the Play/Pause button should display the correct icon for the final state\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given(\"the video player page is loaded\")\ndef step_given_video_player_page_loaded(context):\n    # Initialize the WebDriver and load the test page\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    context.driver.maximize_window()\n    time.sleep(1)  # Allow the page to fully load\n\n@given(\"the video is currently paused\")\ndef step_given_video_is_paused(context):\n    # Ensure the video is paused\n    video_element = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \".player__video.viewer\"))\n    )\n    is_paused = context.driver.execute_script(\"return arguments[0].paused;\", video_element)\n    assert is_paused is True, \"Video is not paused initially\"\n\n@when('the user rapidly clicks the Play/Pause button with data-testid \"toggle-play-button\" multiple times')\ndef step_when_user_rapidly_clicks_play_pause(context):\n    # Locate the Play/Pause button and click it multiple times\n    toggle_button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='toggle-play-button']\"))\n    )\n    for _ in range(5):  # Simulate rapid clicks\n        toggle_button.click()\n        time.sleep(0.5)  # Short delay between clicks\n\n@then(\"the video should eventually be in a consistent state of either playing or paused\")\ndef step_then_video_consistent_state(context):\n    # Check the final state of the video\n    video_element = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \".player__video.viewer\"))\n    )\n    is_paused = context.driver.execute_script(\"return arguments[0].paused;\", video_element)\n    assert is_paused is False, \"Video is not in a consistent state\"\n\n@then(\"the Play/Pause button should display the correct icon for the final state\")\ndef step_then_button_correct_icon(context):\n    # Verify the button icon matches the video state\n    toggle_button = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='toggle-play-button']\"))\n    )\n    video_element = context.driver.find_element(By.CSS_SELECTOR, \".player__video.viewer\")\n    is_paused = context.driver.execute_script(\"return arguments[0].paused;\", video_element)\n    expected_icon = \"►\" if is_paused else \"❚ ❚\"\n    assert toggle_button.text.strip() == expected_icon, f\"Button icon mismatch: expected '{expected_icon}', got '{toggle_button.text.strip()}'\"\n    context.driver.quit()\n\n# Teardown step to close the browser\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                }
            ]
        },
        "2": {
            "requirement": {
                "description": "The video player allows users to rewind or fast-forward using the Skip Backward (data-testid='skip-backward-button') and Skip Forward (data-testid='skip-forward-button') buttons. Clicking Skip Backward rewinds by 10 seconds, and Skip Forward fast-forwards by 25 seconds. The buttons use data-skip attributes to adjust currentTime, ensuring it doesn't exceed the video's duration or go below 0 seconds."
            },
            "test_cases": [
                {
                    "test_case": [
                        "Feature: Video Skip Controls\n  The user should be able to rewind or fast-forward the video by clicking the Skip Backward or Skip Forward buttons.\n\n\n  Scenario: [Normal] Rewind video by 10 seconds using the Skip Backward button\n    Given the webpage is loaded and the video player is visible\n    And the video is playing with a current time of 30 seconds\n    When the user clicks the Skip Backward button with data-testid \"skip-backward-button\"\n    Then the video should rewind by 10 seconds\n    And the video\"s current time should be 20 seconds\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nfrom selenium.webdriver import ActionChains\nimport time\n\nfile_path = \"index.html\"\n\n@given(\"the webpage is loaded and the video player is visible\")\ndef step_given_webpage_loaded(context):\n    # Initialize the WebDriver and load the test page\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    context.driver.maximize_window()\n    \n    # Wait for the video player to be visible\n    WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \".player__video.viewer\"))\n    )\n    time.sleep(1)\n\n@given(\"the video is playing with a current time of 30 seconds\")\ndef step_given_video_playing(context):\n    # Locate the video element\n    video = context.driver.find_element(By.CSS_SELECTOR, \".player__video.viewer\")\n    \n    # Play the video and set its current time to 30 seconds\n    context.driver.execute_script(\"arguments[0].play(); arguments[0].currentTime = 30;\", video)\n    time.sleep(1)\n\n@when('the user clicks the Skip Backward button with data-testid \"skip-backward-button\"')\ndef step_when_click_skip_backward(context):\n    # Locate the Skip Backward button and click it\n    player = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \".player\"))\n    )\n    ActionChains(context.driver).move_to_element(player).perform()\n    skip_backward_button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='skip-backward-button']\"))\n    )\n    skip_backward_button.click()\n    time.sleep(1)\n\n@then(\"the video should rewind by 10 seconds\")\ndef step_then_video_rewind(context):\n    # Locate the video element and verify its current time\n    video = context.driver.find_element(By.CSS_SELECTOR, \".player__video.viewer\")\n    current_time = context.driver.execute_script(\"return arguments[0].currentTime;\", video)\n    \n    # Assert that the video has rewound by 10 seconds\n    assert current_time == 20, f\"Expected video time to be 20 seconds, but got {current_time}\"\n\n@then('the video\"s current time should be 20 seconds')\ndef step_then_video_time_20_seconds(context):\n    # Locate the video element and verify its current time\n    video = context.driver.find_element(By.CSS_SELECTOR, \".player__video.viewer\")\n    current_time = context.driver.execute_script(\"return arguments[0].currentTime;\", video)\n    \n    # Assert that the video time is 20 seconds\n    assert current_time == 20, f\"Expected video time to be 20 seconds, but got {current_time}\"\n    context.driver.quit()\n\n# Hook for cleanup after each scenario\ndef after_scenario(context, scenario):\n    if hasattr(context, \"driver\"):\n        context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: Video Skip Controls\n  The user should be able to rewind or fast-forward the video by clicking the Skip Backward or Skip Forward buttons.\n\n\nScenario: [Normal] Fast-forward video by 25 seconds using the Skip Forward button\n    Given the webpage is loaded and the video player is visible\n    And the video is playing with a current time of 30 seconds\n    When the user clicks the Skip Forward button with data-testid \"skip-forward-button\"\n    Then the video’s current time should be 55 seconds"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given(\"the webpage is loaded and the video player is visible\")\ndef step_impl(context):\n    # Initialize the WebDriver and load the test page\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    context.driver.maximize_window()\n\n    # Wait for the video player to be visible\n    WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \".player__video.viewer\"))\n    )\n    time.sleep(1)\n\n@given(\"the video is playing with a current time of 30 seconds\")\ndef step_impl(context):\n    # Locate the video element\n    video = context.driver.find_element(By.CSS_SELECTOR, \".player__video.viewer\")\n\n    # Play the video if it is paused\n    if video.get_attribute(\"paused\") == \"true\":\n        toggle_button = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='toggle-play-button']\")\n        toggle_button.click()\n        time.sleep(1)\n\n    # Set the video current time to 30 seconds using JavaScript\n    context.driver.execute_script(\"arguments[0].currentTime = 30;\", video)\n    time.sleep(1)\n\n@when('the user clicks the Skip Forward button with data-testid \"skip-forward-button\"')\ndef step_impl(context):\n    # Locate and click the Skip Forward button\n    skip_forward_button = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='skip-forward-button']\")\n    WebDriverWait(context.driver, 10).until(EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='skip-forward-button']\")))\n    skip_forward_button.click()\n    time.sleep(1)\n\n@then(\"the video’s current time should be 55 seconds\")\ndef step_impl(context):\n    # Locate the video element\n    video = context.driver.find_element(By.CSS_SELECTOR, \".player__video.viewer\")\n\n    # Wait for the video time to update\n    WebDriverWait(context.driver, 10).until(\n        lambda driver: float(context.driver.execute_script(\"return arguments[0].currentTime;\", video)) >= 55\n    )\n\n    # Verify the video current time is approximately 55 seconds\n    current_time = float(context.driver.execute_script(\"return arguments[0].currentTime;\", video))\n    assert abs(current_time - 55) < 2, f\"Expected video time to be 55 seconds, but got {current_time}\"\n\n    # Close the browser\n    context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: Video Skip Controls\n  The user should be able to rewind or fast-forward the video by clicking the Skip Backward or Skip Forward buttons.\n\n\n  Scenario: [Edge] Rewind video by 10 seconds when the current time is less than 10 seconds\n    Given the webpage is loaded and the video player is visible\n    And the video is playing with a current time of 5 seconds\n    When the user clicks the Skip Backward button with data-testid \"skip-backward-button\"\n    Then the video's current time should be 0 seconds\n    And the video should not rewind beyond the start of the video\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nfrom selenium.webdriver import ActionChains\nimport time\n\nfile_path = \"index.html\"\n\n@given(\"the webpage is loaded and the video player is visible\")\ndef step_impl(context):\n    # Initialize the WebDriver and load the test page\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    context.driver.maximize_window()\n\n    # Wait for the video player to be visible\n    WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \".player__video.viewer\"))\n    )\n    time.sleep(1)\n\n@given(\"the video is playing with a current time of 5 seconds\")\ndef step_impl(context):\n    # Locate the video element\n    video = context.driver.find_element(By.CSS_SELECTOR, \".player__video.viewer\")\n\n    # Play the video\n    context.driver.execute_script(\"arguments[0].play();\", video)\n    time.sleep(1)\n\n    # Set the video current time to 5 seconds\n    context.driver.execute_script(\"arguments[0].currentTime = 5;\", video)\n    time.sleep(1)\n\n@when('the user clicks the Skip Backward button with data-testid \"skip-backward-button\"')\ndef step_impl(context):\n    # Locate the Skip Backward button and click it\n    player = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \".player\"))\n    )\n    ActionChains(context.driver).move_to_element(player).perform()\n    skip_backward_button = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='skip-backward-button']\")\n    WebDriverWait(context.driver, 10).until(EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='skip-backward-button']\")))\n    skip_backward_button.click()\n    time.sleep(1)\n\n@then('the video\\'s current time should be 0 seconds')\ndef step_impl(context):\n    # Locate the video element and verify its current time\n    video = context.driver.find_element(By.CSS_SELECTOR, \".player__video.viewer\")\n    current_time = context.driver.execute_script(\"return arguments[0].currentTime;\", video)\n    assert current_time == 0, f\"Expected video current time to be 0 seconds, but got {current_time}\"\n\n@then(\"the video should not rewind beyond the start of the video\")\ndef step_impl(context):\n    # Locate the video element and verify it does not rewind beyond 0 seconds\n    video = context.driver.find_element(By.CSS_SELECTOR, \".player__video.viewer\")\n    current_time = context.driver.execute_script(\"return arguments[0].currentTime;\", video)\n    assert current_time >= 0, f\"Video rewound beyond the start: current time is {current_time}\"\n\n# Teardown to close the browser after the test\ndef after_scenario(context, scenario):\n    if hasattr(context, \"driver\"):\n        context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: Video Skip Controls\n  The user should be able to rewind or fast-forward the video by clicking the Skip Backward or Skip Forward buttons.\n\n\nScenario: [Edge] Fast-forward video by 25 seconds when the remaining duration is less than 25 seconds\n    Given the webpage is loaded and the video player is visible\n    And the video is currently 5 seconds away from ending\n    When the user clicks the Skip Forward button with data-testid \"skip-forward-button\"\n    Then the video should advance to the end"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nfrom selenium.webdriver import ActionChains\nimport time\n\nfile_path = \"index.html\"\n\n@given(\"the webpage is loaded and the video player is visible\")\ndef step_given_webpage_loaded(context):\n    # Initialize the WebDriver and load the test page\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    context.driver.maximize_window()\n\n    # Wait for the video player to be visible\n    WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \".player__video.viewer\"))\n    )\n    time.sleep(1)  # Improve test robustness\n\n@given(\"the video is currently 5 seconds away from ending\")\ndef step_given_video_near_end(context):\n    # Locate the video element\n    video = context.driver.find_element(By.CSS_SELECTOR, \".player__video.viewer\")\n\n    # Set the video current time to 5 seconds before the end\n    video_duration = context.driver.execute_script(\"return arguments[0].duration;\", video)\n    context.driver.execute_script(f\"arguments[0].currentTime = {video_duration - 5};\", video)\n    time.sleep(1)  # Improve test robustness\n\n@when('the user clicks the Skip Forward button with data-testid \"skip-forward-button\"')\ndef step_when_user_clicks_skip_forward(context):\n    # Locate the Skip Forward button and click it\n    player = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \".player\"))\n    )\n    ActionChains(context.driver).move_to_element(player).perform()\n    skip_forward_button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='skip-forward-button']\"))\n    )\n    skip_forward_button.click()\n    time.sleep(1)  # Improve test robustness\n\n@then(\"the video should advance to the end\")\ndef step_then_video_advances_to_end(context):\n    # Locate the video element\n    video = context.driver.find_element(By.CSS_SELECTOR, \".player__video.viewer\")\n\n    # Wait for the video to reach the end\n    WebDriverWait(context.driver, 10).until(\n        lambda driver: context.driver.execute_script(\"return arguments[0].currentTime;\", video) >= \n        context.driver.execute_script(\"return arguments[0].duration;\", video)\n    )\n    time.sleep(1)  # Improve test robustness\n\n    # Validate that the video has reached the end\n    current_time = context.driver.execute_script(\"return arguments[0].currentTime;\", video)\n    duration = context.driver.execute_script(\"return arguments[0].duration;\", video)\n    assert current_time >= duration, f\"Expected video to be at the end, but current time is {current_time}\"\n\n    # Close the WebDriver\n    context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: Video Skip Controls\n  The user should be able to rewind or fast-forward the video by clicking the Skip Backward or Skip Forward buttons.\n\n\n  Scenario: [Error] Click Skip Backward button when the video is paused\n    Given the webpage is loaded and the video player is visible\n    And the video is paused with a current time of 30 seconds\n    When the user clicks the Skip Backward button with data-testid \"skip-backward-button\"\n    Then the video should rewind by 10 seconds\n    And the video's current time should be 20 seconds\n    And the video should remain paused\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nfrom selenium.webdriver import ActionChains\nimport time\n\nfile_path = \"index.html\"\n\n@given(\"the webpage is loaded and the video player is visible\")\ndef step_given_webpage_loaded(context):\n    # Initialize the WebDriver and load the test page\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    context.driver.maximize_window()\n    \n    # Wait for the video player to be visible\n    WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \".player__video.viewer\"))\n    )\n    time.sleep(1)\n\n@given(\"the video is paused with a current time of 30 seconds\")\ndef step_given_video_paused(context):\n    # Locate the video element\n    video = context.driver.find_element(By.CSS_SELECTOR, \".player__video.viewer\")\n    \n    # Pause the video if it's playing\n    if not video.get_attribute(\"paused\"):\n        toggle_button = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='toggle-play-button']\")\n        toggle_button.click()\n        time.sleep(1)\n    \n    # Set the video current time to 30 seconds using JavaScript\n    context.driver.execute_script(\"arguments[0].currentTime = 30;\", video)\n    time.sleep(1)\n\n@when('the user clicks the Skip Backward button with data-testid \"skip-backward-button\"')\ndef step_when_click_skip_backward(context):\n    # Locate and click the Skip Backward button\n    player = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \".player\"))\n    )\n    ActionChains(context.driver).move_to_element(player).perform()\n    skip_backward_button = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='skip-backward-button']\")\n    WebDriverWait(context.driver, 10).until(EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='skip-backward-button']\")))\n    skip_backward_button.click()\n    time.sleep(1)\n\n@then(\"the video should rewind by 10 seconds\")\ndef step_then_video_rewind(context):\n    # Locate the video element and verify the current time\n    video = context.driver.find_element(By.CSS_SELECTOR, \".player__video.viewer\")\n    current_time = context.driver.execute_script(\"return arguments[0].currentTime;\", video)\n    assert current_time == 20, f\"Expected video time to be 20 seconds, but got {current_time}\"\n\n@then(\"the video's current time should be 20 seconds\")\ndef step_then_video_current_time(context):\n    # Locate the video element and verify the current time\n    video = context.driver.find_element(By.CSS_SELECTOR, \".player__video.viewer\")\n    current_time = context.driver.execute_script(\"return arguments[0].currentTime;\", video)\n    assert current_time == 20, f\"Expected video time to be 20 seconds, but got {current_time}\"\n\n@then(\"the video should remain paused\")\ndef step_then_video_paused(context):\n    # Locate the video element and verify it is paused\n    video = context.driver.find_element(By.CSS_SELECTOR, \".player__video.viewer\")\n    is_paused = context.driver.execute_script(\"return arguments[0].paused;\", video)\n    assert is_paused, \"Expected video to remain paused, but it is playing\"\n\ndef after_scenario(context, scenario):\n    # Close the browser driver after the scenario\n    if context.driver:\n        context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: Video Skip Controls\n  The user should be able to rewind or fast-forward the video by clicking the Skip Backward or Skip Forward buttons.\n\n\n  Scenario: [Error] Click Skip Forward button when the video is paused\n    Given the webpage is loaded and the video player is visible\n    And the video is paused with a current time of 30 seconds\n    When the user clicks the Skip Forward button with data-testid 'skip-forward-button'\n    Then the video should fast-forward by 25 seconds\n    And the video's current time should be 55 seconds\n    And the video should remain paused"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nfrom selenium.webdriver import ActionChains\nimport time\n\nfile_path = \"index.html\"\n\n@given(\"the webpage is loaded and the video player is visible\")\ndef step_given_webpage_loaded(context):\n    # Initialize the WebDriver and load the test page\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    context.driver.maximize_window()\n    \n    # Wait for the video player to be visible\n    WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \".player__video.viewer\"))\n    )\n    time.sleep(1)  # Improve test robustness\n\n@given(\"the video is paused with a current time of 30 seconds\")\ndef step_given_video_paused(context):\n    # Locate the video element\n    video = context.driver.find_element(By.CSS_SELECTOR, \".player__video.viewer\")\n    \n    # Pause the video if it's playing\n    if not video.get_attribute(\"paused\"):\n        toggle_button = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='toggle-play-button']\")\n        toggle_button.click()\n        time.sleep(1)  # Ensure the video is paused\n    \n    # Set the video current time to 30 seconds using JavaScript\n    context.driver.execute_script(\"arguments[0].currentTime = 30;\", video)\n    time.sleep(1)  # Ensure the current time is set\n\n@when(\"the user clicks the Skip Forward button with data-testid 'skip-forward-button'\")\ndef step_when_click_skip_forward(context):\n    # Locate and click the Skip Forward button\n    player = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \".player\"))\n    )\n    ActionChains(context.driver).move_to_element(player).perform()\n    skip_forward_button = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='skip-forward-button']\")\n    WebDriverWait(context.driver, 10).until(EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='skip-forward-button']\")))\n    skip_forward_button.click()\n    time.sleep(1)  # Ensure the button click is processed\n\n@then(\"the video should fast-forward by 25 seconds\")\ndef step_then_video_fast_forward(context):\n    # Verify the video current time has increased by 25 seconds\n    video = context.driver.find_element(By.CSS_SELECTOR, \".player__video.viewer\")\n    current_time = context.driver.execute_script(\"return arguments[0].currentTime;\", video)\n    expected_time = 55  # 30 seconds + 25 seconds\n    assert abs(current_time - expected_time) < 0.5, f\"Expected current time to be {expected_time}, but got {current_time}\"\n\n@then(\"the video's current time should be 55 seconds\")\ndef step_then_video_current_time(context):\n    # Verify the video's current time is exactly 55 seconds\n    video = context.driver.find_element(By.CSS_SELECTOR, \".player__video.viewer\")\n    current_time = context.driver.execute_script(\"return arguments[0].currentTime;\", video)\n    expected_time = 55\n    assert abs(current_time - expected_time) < 0.5, f\"Expected current time to be {expected_time}, but got {current_time}\"\n\n@then(\"the video should remain paused\")\ndef step_then_video_remain_paused(context):\n    # Verify the video is still paused\n    video = context.driver.find_element(By.CSS_SELECTOR, \".player__video.viewer\")\n    is_paused = context.driver.execute_script(\"return arguments[0].paused;\", video)\n    assert is_paused, \"Expected the video to remain paused, but it is playing\"\n    context.driver.quit()\n\ndef after_scenario(context, scenario):\n    # Close the browser driver after each scenario\n    context.driver.quit()"
                }
            ]
        },
        "3": {
            "requirement": {
                "description": "When the user interacts with the Volume slider (identified by the attribute data-testid='volume-slider'), the video's audio level should update to match the slider value. The slider allows values ranging from 0 (mute) to 1 (maximum volume) in increments of 0.05. The slider's value should be reflected in the video's 'volume' property, and the slider's UI element must be updated in real-time to reflect the current volume level. The slider is located within the '.player__controls' div and is identified by the 'player__slider' class and the 'data-testid' attribute. Any changes to the slider should trigger the 'handleRangeUpdate' function in the JavaScript code to update the video's volume property."
            },
            "test_cases": [
                {
                    "test_case": [
                        "Feature: Adjusting the Volume Slider to Control Video Audio Level\n  The user should be able to adjust the volume slider to control the video\"s audio level, ranging from 0 (mute) to 1 (maximum volume).\n\n\nScenario: [Normal] Adjusting the volume slider to set the audio level to 0.5\n    Given the webpage is loaded and the video player is visible\n    And the volume slider with data-testid \"volume-slider\" is set to 1 (maximum volume)\n    When the user moves the volume slider to 0.5\n    Then the video's audio level should update to 0.5"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given(\"the webpage is loaded and the video player is visible\")\ndef step_given_webpage_loaded(context):\n    # Initialize the WebDriver and load the test page\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    context.driver.maximize_window()\n    \n    # Wait for the video player to be visible\n    WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \".player__video.viewer\"))\n    )\n    time.sleep(1)\n\n@given('the volume slider with data-testid \"volume-slider\" is set to 1 (maximum volume)')\ndef step_given_volume_slider_max(context):\n    # Locate the volume slider and ensure its value is set to 1\n    volume_slider = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='volume-slider']\"))\n    )\n    assert volume_slider.get_attribute(\"value\") == \"1\", \"Volume slider is not set to maximum (1)\"\n    time.sleep(1)\n\n@when(\"the user moves the volume slider to 0.5\")\ndef step_when_user_moves_volume_slider(context):\n    # Locate the volume slider and set its value to 0.5\n    volume_slider = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='volume-slider']\"))\n    )\n    # 设置 value 并手动触发 change 事件\n    context.driver.execute_script(\"\"\"\n            arguments[0].value = 0.5;\n            arguments[0].dispatchEvent(new Event('input', { bubbles: true }));\n            arguments[0].dispatchEvent(new Event('change', { bubbles: true }));\n        \"\"\", volume_slider)\n    time.sleep(1)\n\n@then(\"the video's audio level should update to 0.5\")\ndef step_then_audio_level_updated(context):\n    # Verify the video element's volume attribute is updated to 0.5\n    video_element = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \".player__video.viewer\"))\n    )\n    # Use JavaScript to retrieve the volume property of the video element\n    volume = context.driver.execute_script(\"return arguments[0].volume;\", video_element)\n    assert volume == 0.5, f\"Video audio level did not update to 0.5, current volume: {volume}\"\n    context.driver.quit()\n\n# Teardown after the test\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: Adjusting the Volume Slider to Control Video Audio Level\n  The user should be able to adjust the volume slider to control the video\"s audio level, ranging from 0 (mute) to 1 (maximum volume).\n\n\nScenario: [Edge] Adjusting the volume slider to mute the audio (0)\n    Given the webpage is loaded and the video player is visible\n    And the volume slider with data-testid \"volume-slider\" is set to 1 (maximum volume)\n    When the user moves the volume slider to 0\n    Then the video’s audio level should update to 0"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the webpage is loaded and the video player is visible')\ndef step_impl(context):\n    # Initialize the WebDriver\n    context.driver = webdriver.Chrome()\n    # Load the test page\n    context.driver.get(f\"file://index.html\")\n    # Wait for the video player to be visible\n    WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \".player__video.viewer\"))\n    )\n    time.sleep(1)  # Allow time for the page to fully load\n\n@given('the volume slider with data-testid \"volume-slider\" is set to 1 (maximum volume)')\ndef step_impl(context):\n    # Locate the volume slider\n    volume_slider = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='volume-slider']\"))\n    )\n    # Verify the initial value is set to 1\n    assert volume_slider.get_attribute(\"value\") == \"1\", \"Volume slider is not set to maximum (1)\"\n    time.sleep(1)\n\n@when('the user moves the volume slider to 0')\ndef step_impl(context):\n    # Locate the volume slider\n    volume_slider = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='volume-slider']\"))\n    )\n    # Set the volume slider to 0\n    context.driver.execute_script(\"arguments[0].value = 0;\", volume_slider)\n    # Trigger the change event\n    context.driver.execute_script(\"arguments[0].dispatchEvent(new Event('change'));\", volume_slider)\n    time.sleep(1)\n\n@then('the video’s audio level should update to 0')\ndef step_impl(context):\n    # Locate the video element\n    video = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \".player__video.viewer\"))\n    )\n    # Verify the video's volume is set to 0\n    volume_level = context.driver.execute_script(\"return arguments[0].volume;\", video)\n    assert volume_level == 0, f\"Expected video volume to be 0, but got {volume_level}\"\n    time.sleep(1)\n\n# Teardown to close the browser after the test\ndef after_scenario(context, scenario):\n    if hasattr(context, 'driver'):\n        context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: Adjusting the Volume Slider to Control Video Audio Level\n  The user should be able to adjust the volume slider to control the video\"s audio level, ranging from 0 (mute) to 1 (maximum volume).\n\n\nScenario: [Edge] Adjusting the volume slider to maximum volume (1)\n    Given the webpage is loaded and the video player is visible\n    And the volume slider with data-testid \"volume-slider\" is set to 0.5\n    When the user moves the volume slider to 1\n    Then the video’s audio level should update to 1"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given(\"the webpage is loaded and the video player is visible\")\ndef step_given_webpage_loaded(context):\n    # Initialize the WebDriver and load the test page\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    context.driver.maximize_window()\n    \n    # Wait for the video player to be visible\n    WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \".player__video.viewer\"))\n    )\n    time.sleep(1)\n\n@given('the volume slider with data-testid \"volume-slider\" is set to 0.5')\ndef step_given_volume_slider_set(context):\n    # Locate the volume slider and set its value to 0.5\n    volume_slider = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='volume-slider']\"))\n    )\n    context.driver.execute_script(\"arguments[0].value = 0.5;\", volume_slider)\n    time.sleep(1)\n\n@when(\"the user moves the volume slider to 1\")\ndef step_when_user_moves_slider(context):\n    # Locate the volume slider and set its value to 1\n    volume_slider = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='volume-slider']\"))\n    )\n    context.driver.execute_script(\"arguments[0].value = 1;\", volume_slider)\n    time.sleep(1)\n\n@then(\"the video’s audio level should update to 1\")\ndef step_then_audio_level_updated(context):\n    # Verify that the video's volume is updated to 1\n    video_element = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \".player__video.viewer\"))\n    )\n    volume = context.driver.execute_script(\"return arguments[0].volume;\", video_element)\n    assert volume == 1, f\"Expected volume to be 1, but got {volume}\"\n    time.sleep(1)\n\n# Cleanup after the test\ndef after_scenario(context, scenario):\n    if hasattr(context, \"driver\"):\n        context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: Adjusting the Volume Slider to Control Video Audio Level\n  The user should be able to adjust the volume slider to control the video\"s audio level, ranging from 0 (mute) to 1 (maximum volume).\n\n\nScenario: [Error] Attempting to set the volume slider to an invalid value (e.g., -0.5)\n    Given the webpage is loaded and the video player is visible\n    And the volume slider with data-testid \"volume-slider\" is set to 0.5\n    When the user attempts to set the volume slider to -0.5\n    Then the video’s audio level should remain unchanged"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given(\"the webpage is loaded and the video player is visible\")\ndef step_impl(context):\n    # Initialize the WebDriver and load the test page\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    context.driver.maximize_window()\n\n    # Wait for the video player to be visible\n    WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \".player__video.viewer\"))\n    )\n    time.sleep(1)\n\n@given('the volume slider with data-testid \"volume-slider\" is set to 0.5')\ndef step_impl(context):\n    # Locate the volume slider and set its value to 0.5\n    volume_slider = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='volume-slider']\"))\n    )\n    context.driver.execute_script(\"arguments[0].value = 0.5;\", volume_slider)\n    volume_slider.click()  # Trigger the change event\n    time.sleep(1)\n\n@when(\"the user attempts to set the volume slider to -0.5\")\ndef step_impl(context):\n    # Attempt to set the volume slider to an invalid value (-0.5)\n    volume_slider = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='volume-slider']\"))\n    )\n    context.driver.execute_script(\"arguments[0].value = -0.5;\", volume_slider)\n    volume_slider.click()  # Trigger the change event\n    time.sleep(1)\n\n@then(\"the video’s audio level should remain unchanged\")\ndef step_impl(context):\n    # Verify that the volume slider value remains unchanged (still 0.5)\n    volume_slider = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='volume-slider']\"))\n    )\n    current_volume = context.driver.execute_script(\"return arguments[0].value;\", volume_slider)\n    assert current_volume == \"0.5\", f\"Expected volume to remain 0.5, but got {current_volume}\"\n    time.sleep(1)\n\n    # Close the browser driver\n    context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: Adjusting the Volume Slider to Control Video Audio Level\n  The user should be able to adjust the volume slider to control the video\"s audio level, ranging from 0 (mute) to 1 (maximum volume).\n\n\nScenario: [Error] Attempting to set the volume slider to an invalid value (e.g., 1.5)\n    Given the webpage is loaded and the video player is visible\n    And the volume slider with data-testid \"volume-slider\" is set to 0.5\n    When the user attempts to set the volume slider to 1.5\n    Then the video’s audio level should remain unchanged"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given(\"the webpage is loaded and the video player is visible\")\ndef step_given_webpage_loaded(context):\n    # Initialize the WebDriver and load the test page\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    context.driver.maximize_window()\n    \n    # Wait for the video player to be visible\n    WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \".player__video.viewer\"))\n    )\n    time.sleep(1)  # Add a short delay for robustness\n\n@given('the volume slider with data-testid \"volume-slider\" is set to 0.5')\ndef step_given_volume_slider_set(context):\n    # Locate the volume slider and set its value to 0.5\n    volume_slider = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='volume-slider']\"))\n    )\n    volume_slider.clear()\n    volume_slider.send_keys(\"0.5\")\n    time.sleep(1)  # Add a short delay for robustness\n\n@when(\"the user attempts to set the volume slider to 1.5\")\ndef step_when_user_attempts_invalid_volume(context):\n    # Attempt to set the volume slider to an invalid value (1.5)\n    volume_slider = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='volume-slider']\"))\n    )\n    try:\n        volume_slider.clear()\n        volume_slider.send_keys(\"1.5\")\n        time.sleep(1)  # Add a short delay for robustness\n    except Exception as e:\n        context.error_message = str(e)\n\n@then(\"the video’s audio level should remain unchanged\")\ndef step_then_audio_level_unchanged(context):\n    # Verify that the video audio level remains unchanged\n    volume_slider = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='volume-slider']\"))\n    )\n    current_volume = volume_slider.get_attribute(\"value\")\n    assert current_volume == \"0.5\", f\"Expected volume to remain at 0.5, but got {current_volume}\"\n\n    # Close the browser driver\n    context.driver.quit()"
                }
            ]
        },
        "4": {
            "requirement": {
                "description": "The Playback Rate slider (data-testid='playback-rate-slider') lets users adjust video speed from 0.5x to 2x in 0.05 steps. Changing the slider updates the video’s playback rate in real time via the handleRangeUpdate function. Values outside the range (e.g. 3) are rejected, and the video keeps playing at the last valid speed. The slider starts at 1x and is implemented as a range input with min 0.5, max 2, and default value 1."
            },
            "test_cases": [
                {
                    "test_case": [
                        "Feature: Adjust Playback Rate Slider\n  The user should be able to adjust the playback rate of the video using the Playback Rate slider, with values ranging from 0.5x to 2x.\n\n\n  Scenario: [Normal] Adjust playback rate to 1.5x\n    Given the webpage is loaded and the video player is visible\n    And the Playback Rate slider with data-testid \"playback-rate-slider\" is set to its default value of \"1\"\n    When the user moves the Playback Rate slider to \"1.5\"\n    Then the video's playback speed should update to \"1.5x\"\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the webpage is loaded and the video player is visible')\ndef step_impl(context):\n    # Initialize the WebDriver and load the test page\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    context.driver.maximize_window()\n\n    # Wait for the video player to be visible\n    WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \".player__video.viewer\"))\n    )\n    time.sleep(1)\n\n@given('the Playback Rate slider with data-testid \"playback-rate-slider\" is set to its default value of \"1\"')\ndef step_impl(context):\n    # Locate the playback rate slider and verify its default value\n    playback_rate_slider = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='playback-rate-slider']\")\n    default_value = playback_rate_slider.get_attribute(\"value\")\n    assert default_value == \"1\", f\"Expected default value to be '1', but got '{default_value}'\"\n    time.sleep(1)\n\n@when('the user moves the Playback Rate slider to \"1.5\"')\ndef step_impl(context):\n    # Locate the playback rate slider and set its value to 1.5\n    playback_rate_slider = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='playback-rate-slider']\")\n    context.driver.execute_script(\"\"\"\n            arguments[0].value = arguments[1];\n            arguments[0].dispatchEvent(new Event('input', { bubbles: true }));\n            arguments[0].dispatchEvent(new Event('change', { bubbles: true }));\n        \"\"\", playback_rate_slider, \"1.5\")\n    time.sleep(1)\n\n@then('the video\\'s playback speed should update to \"1.5x\"')\ndef step_impl(context):\n    # Verify that the video's playback speed has been updated to 1.5x\n    video = context.driver.find_element(By.CSS_SELECTOR, \".player__video.viewer\")\n    playback_rate = context.driver.execute_script(\"return arguments[0].playbackRate;\", video)\n    assert abs(playback_rate - 1.5) < 0.01, f\"Expected playback rate to be 1.5, but got {playback_rate}\"\n    context.driver.quit()\n\n\ndef after_scenario(context, scenario):\n    # Close the browser after each scenario\n    if hasattr(context, 'driver'):\n        context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: Adjust Playback Rate Slider\n  The user should be able to adjust the playback rate of the video using the Playback Rate slider, with values ranging from 0.5x to 2x.\n\n\nScenario: [Edge] Adjust playback rate to the maximum value (2x)\n    Given the webpage is loaded and the video player is visible\n    And the Playback Rate slider with data-testid \"playback-rate-slider\" is set to its default value of \"1\"\n    When the user moves the Playback Rate slider to \"2\"\n    Then the video\"s playback speed should update to \"2x\""
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given(\"the webpage is loaded and the video player is visible\")\ndef step_given_webpage_loaded(context):\n    # Initialize the WebDriver and load the test page\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    context.driver.maximize_window()\n    \n    # Wait for the video player to be visible\n    WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \".player__video.viewer\"))\n    )\n    time.sleep(1)\n\n@given('the Playback Rate slider with data-testid \"playback-rate-slider\" is set to its default value of \"1\"')\ndef step_given_playback_rate_default(context):\n    # Locate the playback rate slider and verify its default value\n    playback_rate_slider = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='playback-rate-slider']\")\n    default_value = playback_rate_slider.get_attribute(\"value\")\n    assert default_value == \"1\", f\"Expected default value '1', but got '{default_value}'\"\n    time.sleep(1)\n\n@when('the user moves the Playback Rate slider to \"2\"')\ndef step_when_user_moves_slider(context):\n    # Locate the playback rate slider and set its value to \"2\"\n    playback_rate_slider = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='playback-rate-slider']\")\n    context.driver.execute_script(\"arguments[0].value = '2'; arguments[0].dispatchEvent(new Event('change'));\", playback_rate_slider)\n    time.sleep(1)\n\n@then('the video\"s playback speed should update to \"2x\"')\ndef step_then_playback_speed_updated(context):\n    # Verify the video playback speed is updated to \"2x\"\n    video_element = context.driver.find_element(By.CSS_SELECTOR, \".player__video.viewer\")\n    playback_rate = video_element.get_attribute(\"playbackRate\")\n    assert playback_rate == \"2\", f\"Expected playback rate '2', but got '{playback_rate}'\"\n    time.sleep(1)\n\n# Teardown after the test\ndef after_scenario(context, scenario):\n    if hasattr(context, 'driver'):\n        context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: Adjust Playback Rate Slider\n  The user should be able to adjust the playback rate of the video using the Playback Rate slider, with values ranging from 0.5x to 2x.\n\n\n  Scenario: [Error] Adjust playback rate to an invalid value (e.g., 3)\n    Given the webpage is loaded and the video player is visible\n    And the Playback Rate slider with data-testid \"playback-rate-slider\" is set to its default value of \"1\"\n    When the user attempts to move the Playback Rate slider to \"3\"\n    Then the slider should not allow the value \"3\"\n    And the video's playback speed should be at \"2x\"\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given(\"the webpage is loaded and the video player is visible\")\ndef step_given_webpage_loaded(context):\n    # Initialize the Selenium WebDriver\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    context.driver.maximize_window()\n    \n    # Wait for the video player to be visible\n    WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \".player__video.viewer\"))\n    )\n    time.sleep(1)  # Improve test robustness\n\n@given('the Playback Rate slider with data-testid \"playback-rate-slider\" is set to its default value of \"1\"')\ndef step_given_playback_rate_default(context):\n    # Locate the Playback Rate slider\n    playback_rate_slider = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='playback-rate-slider']\")\n    \n    # Assert the default value is \"1\"\n    assert playback_rate_slider.get_attribute(\"value\") == \"1\", \"Playback Rate slider default value is not '1'\"\n    time.sleep(1)\n\n@when('the user attempts to move the Playback Rate slider to \"3\"')\ndef step_when_user_moves_slider(context):\n    # Locate the Playback Rate slider\n    playback_rate_slider = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='playback-rate-slider']\")\n    \n    # Attempt to set the slider value to \"3\"\n    context.driver.execute_script(\"\"\"\n            arguments[0].value = arguments[1];\n            arguments[0].dispatchEvent(new Event('input', { bubbles: true }));\n            arguments[0].dispatchEvent(new Event('change', { bubbles: true }));\n        \"\"\", playback_rate_slider, \"3\")\n    time.sleep(1)\n\n@then('the slider should not allow the value \"3\"')\ndef step_then_slider_rejects_value(context):\n    # Locate the Playback Rate slider\n    playback_rate_slider = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='playback-rate-slider']\")\n    \n    # Assert the slider value is not \"3\"\n    assert playback_rate_slider.get_attribute(\"value\") != \"3\", \"Playback Rate slider incorrectly allowed the value '3'\"\n    time.sleep(1)\n\n@then('the video\\'s playback speed should be at \"2x\"')\ndef step_then_playback_speed_unchanged(context):\n    # Locate the video element\n    video = context.driver.find_element(By.CSS_SELECTOR, \".player__video.viewer\")\n    \n    # Assert the playback speed remains \"1x\"\n    playback_rate = context.driver.execute_script(\"return arguments[0].playbackRate;\", video)\n    assert playback_rate == 2.0, f\"Video playback speed changed unexpectedly to {playback_rate}\"\n    context.driver.quit()\n\ndef after_scenario(context, scenario):\n    # Close the browser driver after the scenario\n    context.driver.quit()"
                }
            ]
        },
        "5": {
            "requirement": {
                "description": "The progress bar visually tracks the video’s playback progress by dynamically updating the width of the .progress__filled element based on the formula (video.currentTime / video.duration) * 100. It begins filling when playback starts (triggered via the data-testid='toggle-play-button'), reaches 100% upon video completion, and resets to 0% when the video restarts. Users can scrub manually by clicking or dragging on the .progress element, with real-time updates to both the video's currentTime and the progress bar's fill."
            },
            "test_cases": [
                {
                    "test_case": [
                        "Feature: Progress Bar Updates Dynamically to Represent Current Playback Position\n\n  The progress bar should visually represent the current playback position as a percentage of the video\"s duration. The progress bar fill should update dynamically as the video plays.\n\n\n  Scenario: [Normal] Progress bar updates dynamically during video playback\n    Given the user is on the video player page\n    And the video is loaded and ready to play\n    When the user clicks the play button with data-testid \"toggle-play-button\"\n    Then the video should start playing\n    And the progress bar with class \"progress__filled\" should begin filling dynamically as the video plays\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\n# Placeholder for dynamic file path\nfile_path = \"index.html\"\n\n@given(\"the user is on the video player page\")\ndef step_given_user_on_video_player_page(context):\n    # Initialize the WebDriver and navigate to the test page\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    context.driver.maximize_window()\n    time.sleep(1)  # Allow the page to load completely\n\n@given(\"the video is loaded and ready to play\")\ndef step_given_video_loaded_and_ready(context):\n    # Wait for the video element to be present and loaded\n    video_element = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \".player__video.viewer\"))\n    )\n    assert video_element.get_attribute(\"readyState\") == \"4\", \"Video is not ready to play\"\n    time.sleep(1)\n\n@when('the user clicks the play button with data-testid \"toggle-play-button\"')\ndef step_when_user_clicks_play_button(context):\n    # Locate the play button and click it\n    play_button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='toggle-play-button']\"))\n    )\n    play_button.click()\n    time.sleep(1)\n\n@then(\"the video should start playing\")\ndef step_then_video_should_start_playing(context):\n    # Verify that the video is playing\n    video_element = context.driver.find_element(By.CSS_SELECTOR, \".player__video.viewer\")\n    assert not video_element.get_attribute(\"paused\"), \"Video is not playing\"\n    time.sleep(1)\n\n@then('the progress bar with class \"progress__filled\" should begin filling dynamically as the video plays')\ndef step_then_progress_bar_fills_dynamically(context):\n    # Verify that the progress bar is filling dynamically\n    progress_bar = context.driver.find_element(By.CSS_SELECTOR, \".progress__filled\")\n    initial_width = progress_bar.value_of_css_property(\"width\")\n    time.sleep(2)  # Wait for the video to play for a short duration\n    updated_width = progress_bar.value_of_css_property(\"width\")\n    assert updated_width > initial_width, \"Progress bar is not filling dynamically\"\n    time.sleep(1)\n\n# Teardown step to close the browser after the test\ndef after_scenario(context, scenario):\n    if hasattr(context, \"driver\"):\n        context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: Progress Bar Updates Dynamically to Represent Current Playback Position\n\n  The progress bar should visually represent the current playback position as a percentage of the video\"s duration. The progress bar fill should update dynamically as the video plays.\n\n\n  Scenario: [Edge] Progress bar reaches 100% when the video ends\n    Given the user is on the video player page\n    And the video is loaded and ready to play\n    When the user plays the video until it reaches the end\n    Then the progress bar with class \"progress__filled\" should fill to 100% width\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given(\"the user is on the video player page\")\ndef step_given_user_on_video_player_page(context):\n    # Initialize the WebDriver and navigate to the test page\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)  # Allow the page to load\n\n@given(\"the video is loaded and ready to play\")\ndef step_given_video_loaded_and_ready(context):\n    # Wait for the video element to be present and loaded\n    video_element = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \".player__video.viewer\"))\n    )\n    assert video_element.get_attribute(\"readyState\") == \"4\", \"Video is not fully loaded\"\n\n@when(\"the user plays the video until it reaches the end\")\ndef step_when_user_plays_video_to_end(context):\n    # 获取视频元素\n    video_element = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \".player__video.viewer\"))\n    )\n\n    # 获取总时长\n    duration = context.driver.execute_script(\"return arguments[0].duration;\", video_element)\n\n    # 将 currentTime 调整为结尾前1秒\n    context.driver.execute_script(\"arguments[0].currentTime = arguments[1] - 5;\", video_element, duration)\n\n    # 点击播放按钮\n    play_button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='toggle-play-button']\"))\n    )\n    play_button.click()\n    time.sleep(1)  # 允许视频开始播放\n\n    # 等待视频播放完毕\n    WebDriverWait(context.driver, 10).until(\n        lambda driver: context.driver.execute_script(\"return arguments[0].ended;\", video_element)\n    )\n    time.sleep(1)\n\n\n@then('the progress bar with class \"progress__filled\" should fill to 100% width')\ndef step_then_progress_bar_fills_to_100(context):\n    # Locate the progress bar element\n    progress_bar = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \".progress__filled\"))\n    )\n    # Check the width of the progress bar\n    progress_width = progress_bar.get_attribute(\"style\")\n    assert \"width: 100%;\" in progress_width, f\"Expected progress bar width to be 100%, but got {progress_width}\"\n\n    # Close the WebDriver\n    context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: Progress Bar Updates Dynamically to Represent Current Playback Position\n\n  The progress bar should visually represent the current playback position as a percentage of the video\"s duration. The progress bar fill should update dynamically as the video plays.\n\n\n  Scenario: [Edge] Progress bar resets to 0% when the video is restarted\n    Given the user is on the video player page\n    And the video is loaded and ready to play\n    When the user plays the video until it reaches the end\n    And the user clicks the play button with data-testid \"toggle-play-button\" to restart the video\n    Then the progress bar with class \"progress__filled\" should reset to 0% width\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given(\"the user is on the video player page\")\ndef step_given_user_on_video_player_page(context):\n    context.driver = webdriver.Chrome()  # Initialize the WebDriver\n    context.driver.get(f\"file://index.html\")  # Load the test page\n    context.driver.maximize_window()\n    time.sleep(1)  # Allow the page to load fully\n\n@given(\"the video is loaded and ready to play\")\ndef step_given_video_loaded(context):\n    video_element = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \".player__video.viewer\"))\n    )\n    assert video_element.get_attribute(\"src\") is not None, \"Video source is not loaded\"\n    time.sleep(1)\n\n@when(\"the user plays the video until it reaches the end\")\ndef step_when_user_plays_video_to_end(context):\n    # 获取视频元素\n    video_element = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \".player__video.viewer\"))\n    )\n\n    # 获取总时长\n    duration = context.driver.execute_script(\"return arguments[0].duration;\", video_element)\n\n    # 将 currentTime 调整为结尾前1秒\n    context.driver.execute_script(\"arguments[0].currentTime = arguments[1] - 1;\", video_element, duration)\n\n    # 点击播放按钮\n    play_button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='toggle-play-button']\"))\n    )\n    play_button.click()\n    time.sleep(1)  # 允许视频开始播放\n\n    # 等待视频播放完毕\n    WebDriverWait(context.driver, 10).until(\n        lambda driver: context.driver.execute_script(\"return arguments[0].ended;\", video_element)\n    )\n    time.sleep(1)\n\n\n@when('the user clicks the play button with data-testid \"toggle-play-button\" to restart the video')\ndef step_when_user_clicks_play_button_to_restart(context):\n    play_button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='toggle-play-button']\"))\n    )\n    play_button.click()  # Restart the video\n    time.sleep(0.5)\n\n@then('the progress bar with class \"progress__filled\" should reset to 0% width')\ndef step_then_progress_bar_resets(context):\n    progress_bar = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \".progress__filled\"))\n    )\n    progress_width_str = progress_bar.value_of_css_property(\"width\")\n    progress_width = float(progress_width_str.replace(\"px\", \"\"))\n    assert progress_width <= 1.0, f\"Expected progress bar width close to 0, but got {progress_width}px\"\n    context.driver.quit()\n\n# Cleanup after tests\ndef after_scenario(context, scenario):\n    if hasattr(context, \"driver\"):\n        context.driver.quit()"
                }
            ]
        },
        "7": {
            "requirement": {
                "description": "When the user clicks the Fullscreen button, the video player should toggle between fullscreen mode and normal mode. The Fullscreen button is identified by the attribute 'data-testid' with the value 'fullscreen-button'. The video player element is represented by the 'player' class in the DOM. When toggling to fullscreen mode, the 'fullPlayer' class should be added to the player element, and when toggling back to normal mode, the 'fullPlayer' class should be removed. The functionality should work regardless of the current state of the video player (fullscreen or normal mode)."
            },
            "test_cases": [
                {
                    "test_case": [
                        "Feature: Toggle fullscreen mode for the video player\n  The user should be able to toggle the video player between fullscreen mode and normal mode by clicking the Fullscreen button.\n\n\n  Scenario: [Normal] Toggle to fullscreen mode\n    Given the video player is displayed on the webpage\n    And the video player is in normal mode\n    When the user clicks the Fullscreen button with data-testid \"fullscreen-button\"\n    Then the video player should enter fullscreen mode\n    And the \"fullPlayer\" class should be added to the player element\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given(\"the video player is displayed on the webpage\")\ndef step_given_video_player_displayed(context):\n    # Initialize the WebDriver and load the test page\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    context.driver.maximize_window()\n    time.sleep(1)  # Allow the page to load fully\n\n    # Verify the video player is present\n    video_player = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \".player\"))\n    )\n    assert video_player.is_displayed(), \"Video player is not displayed on the webpage\"\n\n@given(\"the video player is in normal mode\")\ndef step_given_video_player_normal_mode(context):\n    # Verify the video player is not in fullscreen mode\n    player_element = context.driver.find_element(By.CSS_SELECTOR, \".player\")\n    class_list = player_element.get_attribute(\"class\").split()\n    assert \"fullPlayer\" not in class_list, \"Video player is already in fullscreen mode\"\n\n@when('the user clicks the Fullscreen button with data-testid \"fullscreen-button\"')\ndef step_when_user_clicks_fullscreen_button(context):\n    # Locate the Fullscreen button and click it\n    fullscreen_button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='fullscreen-button']\"))\n    )\n    fullscreen_button.click()\n    time.sleep(1)  # Allow time for the fullscreen mode to toggle\n\n@then(\"the video player should enter fullscreen mode\")\ndef step_then_video_player_enters_fullscreen(context):\n    # Verify the video player has entered fullscreen mode\n    player_element = context.driver.find_element(By.CSS_SELECTOR, \".player\")\n    class_list = player_element.get_attribute(\"class\").split()\n    assert \"fullPlayer\" in class_list, \"Video player did not enter fullscreen mode\"\n\n@then('the \"fullPlayer\" class should be added to the player element')\ndef step_then_fullplayer_class_added(context):\n    # Verify the \"fullPlayer\" class is added to the player element\n    player_element = context.driver.find_element(By.CSS_SELECTOR, \".player\")\n    class_list = player_element.get_attribute(\"class\").split()\n    assert \"fullPlayer\" in class_list, '\"fullPlayer\" class was not added to the player element'\n\ndef after_scenario(context, scenario):\n    # Close the browser after each scenario\n    if hasattr(context, \"driver\"):\n        context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: Toggle fullscreen mode for the video player\n  The user should be able to toggle the video player between fullscreen mode and normal mode by clicking the Fullscreen button.\n\n\nScenario: [Normal] Toggle back to normal mode\n    Given the video player is displayed on the webpage\n    And the user clicks the Fullscreen button with data-testid \"fullscreen-button\"\n    And the video player is in fullscreen mode\n    When the user clicks the Fullscreen button with data-testid \"fullscreen-button\"\n    Then the video player should exit fullscreen mode\n    And the \"fullPlayer\" class should be removed from the player element"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nfrom selenium.webdriver import ActionChains\nimport time\n\nfile_path = \"index.html\"  # 替换为实际路径\n\n@given(\"the video player is displayed on the webpage\")\ndef step_given_video_player_displayed(context):\n    # Initialize the WebDriver and load the test page\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    context.driver.maximize_window()\n    time.sleep(1)  # Allow the page to load fully\n\n    # Verify the video player is present\n    video_player = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \".player\"))\n    )\n    assert video_player.is_displayed(), \"Video player is not displayed on the webpage\"\n\n@given('the user clicks the Fullscreen button with data-testid \"fullscreen-button\"')\ndef step_given_user_clicks_fullscreen_button(context):\n    # Locate the Fullscreen button and click it\n    player = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \".player\"))\n    )\n    ActionChains(context.driver).move_to_element(player).perform()\n    fullscreen_button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='fullscreen-button']\"))\n    )\n    fullscreen_button.click()\n    time.sleep(1)\n\n@given(\"the video player is in fullscreen mode\")\ndef step_given_video_player_normal_mode(context):\n    # Verify the video player is not in fullscreen mode\n    player_element = context.driver.find_element(By.CSS_SELECTOR, \".player\")\n    class_list = player_element.get_attribute(\"class\").split()\n    assert \"fullPlayer\" in class_list, \"Video player is already in fullscreen mode\"\n\n@when('the user clicks the Fullscreen button with data-testid \"fullscreen-button\"')\ndef step_when_user_clicks_fullscreen_button(context):\n    # Locate the Fullscreen button and click it\n    player = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \".player\"))\n    )\n    ActionChains(context.driver).move_to_element(player).perform()\n    fullscreen_button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='fullscreen-button']\"))\n    )\n    fullscreen_button.click()\n    time.sleep(1)  # Allow time for the fullscreen mode to toggle\n\n@then(\"the video player should exit fullscreen mode\")\ndef step_then_video_player_enters_fullscreen(context):\n    # Verify the video player has entered fullscreen mode\n    player_element = context.driver.find_element(By.CSS_SELECTOR, \".player\")\n    class_list = player_element.get_attribute(\"class\").split()\n    assert \"fullPlayer\" not in class_list, \"Video player did not enter fullscreen mode\"\n\n@then('the \"fullPlayer\" class should be removed from the player element')\ndef step_then_fullplayer_class_added(context):\n    # Verify the \"fullPlayer\" class is added to the player element\n    player_element = context.driver.find_element(By.CSS_SELECTOR, \".player\")\n    class_list = player_element.get_attribute(\"class\").split()\n    assert \"fullPlayer\" not in class_list, '\"fullPlayer\" class was not added to the player element'\n    context.driver.quit()  # Close the browser after the test\n\n"
                }
            ]
        }
    }
}