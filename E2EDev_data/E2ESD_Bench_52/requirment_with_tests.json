{
    "summary": {
        "overview": "The application provides a step-by-step progress interface with a visual progress bar and navigation buttons. Users can navigate through steps using 'Prev' and 'Next' buttons, with visual feedback provided by active circles and a progress bar.",
        "predefined_options": "The system initializes with the first step active and the 'Prev' button disabled to prevent backward navigation from the first step.",
        "external_resources": "No external resources such as images or audio files are used in the provided code.",
        "external_js_libraries": "No external JavaScript libraries are used in the provided code."
    },
    "finegrained_rewith_test": {
        "1": {
            "requirement": {
                "description": "Upon initial page load, the Progress Steps web application must display the first progress circle with the data-testid 'progress-circle-1' having the class 'active', indicating its active state. All other progress circles ('progress-circle-2', 'progress-circle-3', 'progress-circle-4') should not have the class 'active'. The progress bar, identified by the data-testid 'progress-bar', must have a width of '0%', reflecting no progress. The 'Prev' button, with data-testid 'prev-button', should be disabled, while the 'Next' button, with data-testid 'next-button', should be enabled, allowing the user to proceed to the next step."
            },
            "test_cases": [
                {
                    "test_case": [
                        "Feature: Initial Page Load State\n  The page should initialize with the first progress circle active and the progress bar at 0% width.\n\n\n  Scenario: [Normal] Verify initial state on page load\n    Given the user navigates to the Progress Steps page\n    Then the progress circle with data-testid \"progress-circle-1\" should have the class \"active\"\n    And the progress circle with data-testid \"progress-circle-2\" should not have the class \"active\"\n    And the progress circle with data-testid \"progress-circle-3\" should not have the class \"active\"\n    And the progress circle with data-testid \"progress-circle-4\" should not have the class \"active\"\n    And the progress bar with data-testid \"progress-bar\" should have a width of \"0%\"\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the user navigates to the Progress Steps page')\ndef step_given_user_navigates_to_progress_steps_page(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)\n\n@then('the progress circle with data-testid \"progress-circle-1\" should have the class \"active\"')\ndef step_then_progress_circle_1_should_have_class_active(context):\n    circle = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='progress-circle-1']\"))\n    )\n    assert \"active\" in circle.get_attribute(\"class\").split(), \"Circle 1 is not active\"\n    time.sleep(1)\n\n@then('the progress circle with data-testid \"progress-circle-2\" should not have the class \"active\"')\ndef step_then_progress_circle_2_should_not_have_class_active(context):\n    circle = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='progress-circle-2']\"))\n    )\n    assert \"active\" not in circle.get_attribute(\"class\").split(), \"Circle 2 is active\"\n    time.sleep(1)\n\n@then('the progress circle with data-testid \"progress-circle-3\" should not have the class \"active\"')\ndef step_then_progress_circle_3_should_not_have_class_active(context):\n    circle = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='progress-circle-3']\"))\n    )\n    assert \"active\" not in circle.get_attribute(\"class\").split(), \"Circle 3 is active\"\n    time.sleep(1)\n\n@then('the progress circle with data-testid \"progress-circle-4\" should not have the class \"active\"')\ndef step_then_progress_circle_4_should_not_have_class_active(context):\n    circle = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='progress-circle-4']\"))\n    )\n    assert \"active\" not in circle.get_attribute(\"class\").split(), \"Circle 4 is active\"\n    time.sleep(1)\n\n@then('the progress bar with data-testid \"progress-bar\" should have a width of \"0%\"')\ndef step_then_progress_bar_should_have_width_0_percent(context):\n    progress_bar = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='progress-bar']\"))\n    )\n\n    # 进度条的父元素\n    parent = progress_bar.find_element(By.XPATH, \"..\")  # 或根据你实际HTML结构调整\n\n    # 获取它们的像素宽度\n    progress_width_px = float(progress_bar.value_of_css_property(\"width\").replace(\"px\", \"\"))\n    parent_width_px = float(parent.value_of_css_property(\"width\").replace(\"px\", \"\"))\n\n    # 防止除0\n    if parent_width_px == 0:\n        raise ValueError(\"Parent element width is zero, cannot calculate percentage.\")\n\n    # 计算百分比\n    width_percent = (progress_width_px / parent_width_px) * 100\n\n    # 四舍五入一下\n    width_percent = round(width_percent)\n\n    assert width_percent<1, f\"Expected width 0%, but got {width_percent}%\"\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: Initial Page Load State\n  The page should initialize with the first progress circle active and the progress bar at 0% width.\n\n\n  Scenario: [Edge] Verify initial state with no user interaction\n    Given the user navigates to the Progress Steps page\n    When no interaction occurs\n    Then the progress circle with data-testid \"progress-circle-1\" should have the class \"active\"\n    And the progress bar with data-testid \"progress-bar\" should have a width of \"0%\"\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the user navigates to the Progress Steps page')\ndef step_given_user_navigates_to_progress_steps_page(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)\n\n@when('no interaction occurs')\ndef step_when_no_interaction_occurs(context):\n    # No action needed as this step implies no user interaction\n    time.sleep(1)\n\n@then('the progress circle with data-testid \"progress-circle-1\" should have the class \"active\"')\ndef step_then_progress_circle_1_should_have_class_active(context):\n    circle_1 = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='progress-circle-1']\"))\n    )\n    assert 'active' in circle_1.get_attribute('class').split(), \"Circle 1 is not active\"\n    time.sleep(1)\n\n@then('the progress bar with data-testid \"progress-bar\" should have a width of \"0%\"')\ndef step_then_progress_bar_should_have_width_0_percent(context):\n    progress_bar = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='progress-bar']\"))\n    )\n\n    # 进度条的父元素\n    parent = progress_bar.find_element(By.XPATH, \"..\")  # 或根据你实际HTML结构调整\n\n    # 获取它们的像素宽度\n    progress_width_px = float(progress_bar.value_of_css_property(\"width\").replace(\"px\", \"\"))\n    parent_width_px = float(parent.value_of_css_property(\"width\").replace(\"px\", \"\"))\n\n    # 防止除0\n    if parent_width_px == 0:\n        raise ValueError(\"Parent element width is zero, cannot calculate percentage.\")\n\n    # 计算百分比\n    width_percent = (progress_width_px / parent_width_px) * 100\n\n    # 四舍五入一下\n    width_percent = round(width_percent)\n\n    assert width_percent<1, f\"Expected width 0%, but got {width_percent}%\"\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                }
            ]
        },
        "2": {
            "requirement": {
                "description": "The web application should provide a progress tracking feature with a series of progress circles and a progress bar. When the user clicks the 'Next' button (data-testid='next-button'), the following actions should occur: 1) The next progress circle, identified by data-testid attributes in the format 'progress-circle-X', should be marked as active by adding the 'active' class. 2) The progress bar (data-testid='progress-bar') should update its width to reflect the proportion of active circles, calculated as ((number of active circles - 1) / (total number of circles - 1)) * 100%. 3) If the first circle is active, the 'Prev' button (data-testid='prev-button') should be disabled. 4) If the last circle becomes active, the 'Next' button should be disabled. Conversely, clicking the 'Prev' button should deactivate the current circle, reduce the progress bar width accordingly, and enable the 'Next' button if it was previously disabled. The application should ensure that the 'Prev' button is enabled only when there is more than one active circle."
            },
            "test_cases": [
                {
                    "test_case": [
                        "Feature: Progress Circle Activation and Progress Bar Update\n  The feature ensures that clicking the 'Next' button activates the next progress circle and updates the progress bar width proportionally.\n\n\n  Scenario: [Normal] Activate next progress circle and update progress bar width\n    Given the webpage with progress steps is loaded\n    And the first progress circle with data-testid \"progress-circle-1\" is active\n    And the progress bar with data-testid \"progress-bar\" has width \"0%\"\n    When the user clicks the 'Next' button with data-testid \"next-button\"\n    Then the second progress circle with data-testid \"progress-circle-2\" should be active\n    And the progress bar with data-testid \"progress-bar\" should have width \"33%\"\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the webpage with progress steps is loaded')\ndef step_given_webpage_loaded(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)\n\n@given('the first progress circle with data-testid \"progress-circle-1\" is active')\ndef step_given_first_circle_active(context):\n    first_circle = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='progress-circle-1']\"))\n    )\n    assert 'active' in first_circle.get_attribute('class').split(), \"First circle is not active\"\n    time.sleep(1)\n\n@given('the progress bar with data-testid \"progress-bar\" has width \"0%\"')\ndef step_given_progress_bar_width(context):\n    progress_bar = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='progress-bar']\"))\n    )\n    assert progress_bar.value_of_css_property('width') == '0px', \"Progress bar width is not 0%\"\n    time.sleep(1)\n\n@when('the user clicks the \\'Next\\' button with data-testid \"next-button\"')\ndef step_when_click_next_button(context):\n    next_button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='next-button']\"))\n    )\n    next_button.click()\n    time.sleep(1)\n\n@then('the second progress circle with data-testid \"progress-circle-2\" should be active')\ndef step_then_second_circle_active(context):\n    second_circle = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='progress-circle-2']\"))\n    )\n    assert 'active' in second_circle.get_attribute('class').split(), \"Second circle is not active\"\n    time.sleep(1)\n\n@then('the progress bar with data-testid \"progress-bar\" should have width \"33%\"')\ndef step_then_progress_bar_should_have_width_0_percent(context):\n    progress_bar = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='progress-bar']\"))\n    )\n\n    # 进度条的父元素\n    parent = progress_bar.find_element(By.XPATH, \"..\")  # 或根据你实际HTML结构调整\n\n    # 获取它们的像素宽度\n    progress_width_px = float(progress_bar.value_of_css_property(\"width\").replace(\"px\", \"\"))\n    parent_width_px = float(parent.value_of_css_property(\"width\").replace(\"px\", \"\"))\n\n    # 防止除0\n    if parent_width_px == 0:\n        raise ValueError(\"Parent element width is zero, cannot calculate percentage.\")\n\n    # 计算百分比\n    width_percent = (progress_width_px / parent_width_px) * 100\n\n    # 四舍五入一下\n    width_percent = round(width_percent)\n\n    assert abs(width_percent-33)<2, f\"Expected width 33%, but got {width_percent}%\"\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: Progress Circle Activation and Progress Bar Update\n  The feature ensures that clicking the 'Next' button activates the next progress circle and updates the progress bar width proportionally.\n\n\nScenario: [Edge] Activate last progress circle and disable 'Next' button\n    Given the webpage with progress steps is loaded\n    And the third progress circle with data-testid \"progress-circle-3\" is active\n    When the user clicks the 'Next' button with data-testid \"next-button\"\n    Then the fourth progress circle with data-testid \"progress-circle-4\" should be active\n    And the progress bar with data-testid \"progress-bar\" should have width \"100%\""
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\ndef is_active(element):\n    class_list = element.get_attribute(\"class\").split()\n    return \"active\" in class_list\n\n@given('the webpage with progress steps is loaded')\ndef step_given_webpage_loaded(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)\n\n@given('the third progress circle with data-testid \"progress-circle-3\" is active')\ndef step_given_third_circle_active(context):\n    next_button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='next-button']\"))\n    )\n    for i in range(2):\n        next_button.click()\n        time.sleep(0.5)\n\n@when('the user clicks the \\'Next\\' button with data-testid \"next-button\"')\ndef step_when_user_clicks_next(context):\n    next_button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='next-button']\"))\n    )\n    next_button.click()\n    time.sleep(1)\n\n@then('the fourth progress circle with data-testid \"progress-circle-4\" should be active')\ndef step_then_fourth_circle_active(context):\n    fourth_circle = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='progress-circle-4']\")\n    assert is_active(fourth_circle), \"Fourth progress circle is not active\"\n\n@then('the progress bar with data-testid \"progress-bar\" should have width \"100%\"')\ndef step_then_progress_bar_should_have_width_0_percent(context):\n    progress_bar = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='progress-bar']\"))\n    )\n\n    # 进度条的父元素\n    parent = progress_bar.find_element(By.XPATH, \"..\")  # 或根据你实际HTML结构调整\n\n    # 获取它们的像素宽度\n    progress_width_px = float(progress_bar.value_of_css_property(\"width\").replace(\"px\", \"\"))\n    parent_width_px = float(parent.value_of_css_property(\"width\").replace(\"px\", \"\"))\n\n    # 防止除0\n    if parent_width_px == 0:\n        raise ValueError(\"Parent element width is zero, cannot calculate percentage.\")\n\n    # 计算百分比å\n    width_percent = (progress_width_px / parent_width_px) * 100\n\n    # 四舍五入一下\n    width_percent = round(width_percent)\n\n    assert abs(width_percent-100)<2, f\"Expected width 100%, but got {width_percent}%\"\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                }
            ]
        },
        "3": {
            "requirement": {
                "description": "The web application must provide a progress component with a series of progress circles and a progress bar. The component should include a 'Prev' button with data-testid 'prev-button' and a 'Next' button with data-testid 'next-button'. When the user clicks the 'Prev' button, the following behaviors must occur: 1) The current active progress circle, identified by data-testid attributes such as 'progress-circle-1', 'progress-circle-2', etc., should be marked as inactive by removing the 'active' class. 2) The progress bar, identified by data-testid 'progress-bar', should decrease in width proportionally to the number of active circles, calculated as ((number of active circles - 1) / (total number of circles - 1)) * 100%. 3) If the first circle is active, the 'Prev' button should be disabled to prevent further clicks. 4) The 'Next' button should be enabled unless the last circle is active. The application must handle rapid clicks on the 'Prev' button gracefully, ensuring that the first circle remains active and the progress bar width does not fall below 0%."
            },
            "test_cases": [
                {
                    "test_case": [
                        "Feature: Progress Circle Deactivation and Progress Bar Decrease\n  The purpose of this feature is to ensure that when the user clicks the 'Prev' button, the current active progress circle is marked as inactive, and the progress bar decreases in width proportionally to the number of active circles.\n\n\n  Scenario: [Normal] User clicks 'Prev' button to deactivate the current active circle\n    Given the webpage is loaded with the progress component\n    And the user has clicked the 'Next' button twice\n    When the user clicks the 'Prev' button with data-testid 'prev-button'\n    Then the progress circle with data-testid 'progress-circle-3' should not have the 'active' class\n    And the progress bar with data-testid 'progress-bar' should have a width of 33%\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the webpage is loaded with the progress component')\ndef step_given_webpage_loaded(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)\n\n@given('the user has clicked the \\'Next\\' button twice')\ndef step_given_user_clicked_next_twice(context):\n    next_button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='next-button']\"))\n    )\n    next_button.click()\n    time.sleep(1)\n    next_button.click()\n    time.sleep(1)\n\n@when('the user clicks the \\'Prev\\' button with data-testid \\'prev-button\\'')\ndef step_when_user_clicks_prev(context):\n    prev_button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='prev-button']\"))\n    )\n    prev_button.click()\n    time.sleep(1)\n\n@then('the progress circle with data-testid \\'progress-circle-3\\' should not have the \\'active\\' class')\ndef step_then_circle_not_active(context):\n    circle_3 = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='progress-circle-3']\")\n    class_list = circle_3.get_attribute(\"class\").split()\n    assert \"active\" not in class_list, \"Expected 'progress-circle-3' to not have 'active' class\"\n\n@then('the progress bar with data-testid \\'progress-bar\\' should have a width of 33%')\ndef step_then_progress_bar_should_have_width_0_percent(context):\n    progress_bar = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='progress-bar']\"))\n    )\n\n    # 进度条的父元素\n    parent = progress_bar.find_element(By.XPATH, \"..\")  # 或根据你实际HTML结构调整\n\n    # 获取它们的像素宽度\n    progress_width_px = float(progress_bar.value_of_css_property(\"width\").replace(\"px\", \"\"))\n    parent_width_px = float(parent.value_of_css_property(\"width\").replace(\"px\", \"\"))\n\n    # 防止除0\n    if parent_width_px == 0:\n        raise ValueError(\"Parent element width is zero, cannot calculate percentage.\")\n\n    # 计算百分比å\n    width_percent = (progress_width_px / parent_width_px) * 100\n\n    # 四舍五入一下\n    width_percent = round(width_percent)\n\n    assert abs(width_percent-33)<2, f\"Expected width 33%, but got {width_percent}%\"\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: Progress Circle Deactivation and Progress Bar Decrease\n  The purpose of this feature is to ensure that when the user clicks the 'Prev' button, the current active progress circle is marked as inactive, and the progress bar decreases in width proportionally to the number of active circles.\n\n\nScenario: [Error] User clicks 'Prev' button multiple times rapidly\n    Given the webpage is loaded with the progress component\n    And the user has clicked the 'Next' button three times\n    When the user clicks the 'Prev' button with data-testid 'prev-button' rapidly three times\n    Then the progress circle with data-testid 'progress-circle-1' should have the 'active' class\n    And the progress bar with data-testid 'progress-bar' should have a width of 0%"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the webpage is loaded with the progress component')\ndef step_given_webpage_loaded(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='progress-bar']\"))\n    )\n    time.sleep(1)\n\n@given('the user has clicked the \\'Next\\' button three times')\ndef step_given_user_clicked_next_three_times(context):\n    next_button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='next-button']\"))\n    )\n    for _ in range(3):\n        next_button.click()\n        time.sleep(1)\n\n@when('the user clicks the \\'Prev\\' button with data-testid \\'prev-button\\' rapidly three times')\ndef step_when_user_clicks_prev_rapidly(context):\n    prev_button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='prev-button']\"))\n    )\n    for _ in range(3):\n        prev_button.click()\n        time.sleep(1)\n\n@then('the progress circle with data-testid \\'progress-circle-1\\' should have the \\'active\\' class')\ndef step_then_progress_circle_1_active(context):\n    circle_1 = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='progress-circle-1']\")\n    class_list = circle_1.get_attribute(\"class\").split()\n    assert \"active\" in class_list, \"Expected 'active' class in progress-circle-1\"\n\n@then('the progress bar with data-testid \\'progress-bar\\' should have a width of 0%')\ndef step_then_progress_bar_should_have_width_0_percent(context):\n    progress_bar = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='progress-bar']\"))\n    )\n\n    # 进度条的父元素\n    parent = progress_bar.find_element(By.XPATH, \"..\")  # 或根据你实际HTML结构调整\n\n    # 获取它们的像素宽度\n    progress_width_px = float(progress_bar.value_of_css_property(\"width\").replace(\"px\", \"\"))\n    parent_width_px = float(parent.value_of_css_property(\"width\").replace(\"px\", \"\"))\n\n    # 防止除0\n    if parent_width_px == 0:\n        raise ValueError(\"Parent element width is zero, cannot calculate percentage.\")\n\n    # 计算百分比å\n    width_percent = (progress_width_px / parent_width_px) * 100\n\n    # 四舍五入一下\n    width_percent = round(width_percent)\n\n    assert abs(width_percent-0)<2, f\"Expected width 0%, but got {width_percent}%\"\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                }
            ]
        },
        "4": {
            "requirement": {
                "description": "The web application features a progress tracker with four circles, each representing a step in the process. The progress tracker is visually represented by a progress bar with the attribute data-testid='progress-bar'. Users can navigate through the steps using 'Prev' and 'Next' buttons, identified by data-testid='prev-button' and data-testid='next-button', respectively. The 'Prev' button must be disabled when the first progress circle (data-testid='progress-circle-1') is active, ensuring users cannot navigate to a previous step. Conversely, the 'Next' button should be disabled when the last progress circle (data-testid='progress-circle-4') is active, preventing further navigation. The progress bar's width dynamically updates based on the number of active circles, calculated as a percentage of the total circles. The application must handle edge cases where users attempt to navigate beyond the first or last circle, maintaining the integrity of the navigation controls and visual indicators."
            },
            "test_cases": [
                {
                    "test_case": [
                        "Feature: Disable 'Prev' Button on First Progress Circle\n  The 'Prev' button should be disabled when the first progress circle is active, preventing the user from navigating to a previous step.\n\n\n  Scenario: [Normal] 'Prev' button is disabled when the first progress circle is active\n    Given the webpage is loaded\n    And the first progress circle with data-testid \"progress-circle-1\" is active\n    When the user observes the 'Prev' button with data-testid \"prev-button\"\n    Then the 'Prev' button should be disabled\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the webpage is loaded')\ndef step_given_webpage_loaded(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)  # Allow time for the page to load\n\n@given('the first progress circle with data-testid \"progress-circle-1\" is active')\ndef step_given_first_circle_active(context):\n    first_circle = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='progress-circle-1']\"))\n    )\n    assert 'active' in first_circle.get_attribute('class'), \"First circle is not active\"\n    time.sleep(1)\n\n@when('the user observes the \\'Prev\\' button with data-testid \"prev-button\"')\ndef step_when_user_observes_prev_button(context):\n    context.prev_button = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='prev-button']\"))\n    )\n    time.sleep(1)\n\n@then('the \\'Prev\\' button should be disabled')\ndef step_then_prev_button_disabled(context):\n    assert context.prev_button.get_attribute('disabled') is not None, \"Prev button is not disabled\"\n    time.sleep(1)\n    context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: Disable 'Prev' Button on First Progress Circle\n  The 'Prev' button should be disabled when the first progress circle is active, preventing the user from navigating to a previous step.\n\n\nScenario: [Edge] 'Prev' button remains disabled after navigating back to the first circle\n    Given the webpage is loaded\n    And the progress circle with data-testid \"progress-circle-1\" is active\n    When the user clicks the 'Next' button with data-testid \"next-button\"\n    And the user clicks the 'Prev' button with data-testid \"prev-button\"\n    Then the 'Prev' button with data-testid \"prev-button\" should be disabled"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the webpage is loaded')\ndef step_given_webpage_loaded(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)\n\n@given('the progress circle with data-testid \"progress-circle-1\" is active')\ndef step_given_progress_circle_1_active(context):\n    circle_1 = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='progress-circle-1']\"))\n    )\n    assert 'active' in circle_1.get_attribute('class'), \"Circle 1 is not active\"\n    time.sleep(1)\n\n@when('the user clicks the \\'Next\\' button with data-testid \"next-button\"')\ndef step_when_user_clicks_next_button(context):\n    next_button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='next-button']\"))\n    )\n    next_button.click()\n    time.sleep(1)\n\n@when('the user clicks the \\'Prev\\' button with data-testid \"prev-button\"')\ndef step_when_user_clicks_prev_button(context):\n    prev_button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='prev-button']\"))\n    )\n    prev_button.click()\n    time.sleep(1)\n\n@then('the \\'Prev\\' button with data-testid \"prev-button\" should be disabled')\ndef step_then_prev_button_should_be_disabled(context):\n    prev_button = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='prev-button']\"))\n    )\n    assert prev_button.get_attribute('disabled') is not None, \"Prev button is not disabled\"\n    time.sleep(1)\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                }
            ]
        },
        "5": {
            "requirement": {
                "description": "The 'Next' button (identified by data-testid='next-button') must be disabled when the last progress circle (identified by data-testid='progress-circle-4') is active. The progress circles (identified by data-testid attributes in the format 'progress-circle-{number}') should visually indicate the current step by toggling the 'active' class. When the user clicks the 'Next' button, the following behavior must occur: 1) The 'active' class is added to the next progress circle, 2) The progress bar (identified by data-testid='progress-bar') updates its width proportionally to the number of active circles, and 3) The 'Next' button is disabled when the last circle becomes active. Conversely, the 'Prev' button (identified by data-testid='prev-button') must be enabled or disabled based on whether the first circle is active. The system must ensure that users cannot navigate beyond the last step or before the first step, maintaining proper button states and visual feedback at all times."
            },
            "test_cases": [
                {
                    "test_case": [
                        "Feature: Disable 'Next' Button at Last Progress Circle\n  The 'Next' button should be disabled when the last progress circle is active, preventing the user from navigating to a next step.\n\n\n  Scenario: [Normal] Disable 'Next' button when last circle is active\n    Given the webpage is loaded with the progress steps\n    When the user clicks the 'Next' button with data-testid 'next-button' three times\n    Then the 'Next' button with data-testid 'next-button' should be disabled\n    And the progress circle with data-testid 'progress-circle-4' should have the class 'active'\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the webpage is loaded with the progress steps')\ndef step_given_webpage_loaded(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='progress-bar']\"))\n    )\n    time.sleep(1)\n\n@when('the user clicks the \\'Next\\' button with data-testid \\'next-button\\' three times')\ndef step_given_user_clicks_next_three_times(context):\n    next_button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='next-button']\"))\n    )\n    for _ in range(3):\n        next_button.click()\n        time.sleep(1)\n\n@then('the \\'Next\\' button with data-testid \\'next-button\\' should be disabled')\ndef step_then_next_button_disabled(context):\n    next_button = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='next-button']\")\n    assert next_button.get_attribute(\"disabled\") == \"true\", \"Expected 'Next' button to be disabled\"\n\n@then('the progress circle with data-testid \\'progress-circle-4\\' should have the class \\'active\\'')\ndef step_then_progress_circle_active(context):\n    circle_4 = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='progress-circle-4']\")\n    class_list = circle_4.get_attribute(\"class\").split()\n    assert \"active\" in class_list, \"Expected progress circle 4 to have class 'active'\"\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                }
            ]
        }
    }
}