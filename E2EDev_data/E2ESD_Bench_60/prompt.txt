
    You are tasked with implementing a complete web application using HTML, JavaScript, and CSS. Your implementation must strictly follow the specifications described below.
    SUMMARY:
    {
    "overview": "The Exchange Rate Calculator application allows users to select currencies and input amounts to calculate and display the exchange rate and converted amount. Users can swap selected currencies to view the reverse exchange rate.",
    "predefined_options": "The application provides predefined currency options in dropdowns for selection, with USD and EUR set as default selections.",
    "external_resources": "The application uses an external image resource for visual representation: 'https://i.ibb.co/rvJd2XR/rate.png'.",
    "external_js_libraries": "The application fetches data from an external API: 'https://api.exchangerate-api.com/v4/latest/'. No external JavaScript libraries are explicitly mentioned in the provided code."
}
    ## Functional Requirements
    Implement the following features as described. For each requirement, make sure the HTML structure, JavaScript behavior, and CSS styles match the specifications exactly.
    REQUIREMENTS:
    - Requirement 1: 
The Exchange Rate Calculator web application must allow users to select currencies and input amounts to calculate exchange rates. Specifically, when a user selects a currency from the 'currency-one' dropdown (identified by data-testid 'currency-one'), the application must fetch the latest exchange rate for the selected currency using an external API. The exchange rate should be displayed in the element with data-testid 'exchange-rate', formatted as '1 [currency_one] = [currentRate] [currency_two]'. Additionally, the converted amount should be calculated based on the input value in the 'amount-one' field (data-testid 'amount-one') and displayed in the 'amount-two' field (data-testid 'amount-two'), rounded to two decimal places. The application must handle changes in both currency dropdowns and input fields, updating the exchange rate and converted amount dynamically. Furthermore, when the 'swap' button (data-testid 'swap-button') is clicked, the currencies in the dropdowns should be swapped, and the exchange rate and converted amount recalculated accordingly.
- Requirement 2: 
The Exchange Rate Calculator must dynamically update the converted amount in the 'amount-two' field whenever the user inputs a value in the 'amount-one' field. This process involves fetching the current exchange rate from an external API based on the selected currencies in the 'currency-one' and 'currency-two' fields. The 'amount-one' field is identified by the data-testid 'amount-one', and the 'amount-two' field is identified by the data-testid 'amount-two'. The system should handle normal input values as well as edge cases, such as very large numbers, ensuring accurate conversion and display of the result. The conversion result should be displayed with two decimal precision in the 'amount-two' field.
- Requirement 3: 
When a user selects a currency from the 'currency-two' dropdown (identified by data-testid 'currency-two'), the system must perform the following actions: 1) Fetch the latest exchange rate for the selected currency from the API using the current value of 'currency-one' (identified by data-testid 'currency-one') as the base currency. 2) Update the 'exchange-rate' display (identified by data-testid 'exchange-rate') to show the exchange rate in the format '1 [currency-one] = [currentRate] [currency-two]'. 3) Calculate the converted amount using the value from 'amount-one' input (identified by data-testid 'amount-one') and the fetched exchange rate, then update the 'amount-two' input (identified by data-testid 'amount-two') with the calculated value rounded to two decimal places. This functionality should handle both normal scenarios where the selected currency differs from the initial selection and edge cases where the selected currency remains the same.
- Requirement 4: 
The web application must allow users to swap the selected currencies between the dropdowns identified by data-testid 'currency-one' and 'currency-two' when the 'swap' button with data-testid 'swap-button' is clicked. Upon clicking, the system should exchange the values of the two currency selectors, trigger a recalculation of the exchange rate using the latest data from the API, and update the DOM element with data-testid 'exchange-rate' to display the new rate in the format '1 [currency-one] = [rate] [currency-two]'. Additionally, the input field with data-testid 'amount-two' should be updated to reflect the converted amount based on the new exchange rate and the value entered in the input field with data-testid 'amount-one'. The system must handle edge cases, such as when the 'amount-one' input is zero, ensuring the 'amount-two' input displays '0.00'.
- Requirement 5: 
The Exchange Rate Calculator web application must allow users to select two currencies from dropdown menus with data-testid attributes 'currency-one' and 'currency-two', and input an amount using an input field with data-testid 'amount-one'. Upon selection or input change, the system must fetch the latest exchange rate from an external API and display it in the format '1 [currency-one] = [rate] [currency-two]' within the element with data-testid 'exchange-rate'. The calculated equivalent amount should be displayed in the input field with data-testid 'amount-two'. Users can swap the selected currencies using a button with data-testid 'swap-button', which should update the exchange rate and equivalent amount accordingly. The system must handle edge cases, such as when both selected currencies are the same, by displaying '1 [currency-one] = 1 [currency-two]'.
- Requirement 6: 
Upon loading the Exchange Rate Calculator webpage, the system must automatically initialize by fetching the current exchange rate between the default selected currencies, USD and EUR. The UI should display the exchange rate in the element with data-testid 'exchange-rate', formatted as '1 USD = [rate] EUR'. Additionally, the converted amount should be calculated based on the default input value of 1 in the element with data-testid 'amount-one', and displayed in the element with data-testid 'amount-two', rounded to two decimal places. The currency dropdowns should default to USD for the element with data-testid 'currency-one' and EUR for the element with data-testid 'currency-two'.

    
    ## Output Format
    Provide a clean and complete implementation including:
    1. HTML structure (including necessary `data-testid`, `id`, and `class` values).
    2. JavaScript functionality that matches the behavior described.
    3. CSS for styling according to BEM and required class names.
    4. Ensure that the text content in the components is exactly as specified in the requirements.
    Do not include any extra components or libraries not listed above. Keep your code concise, semantic, and standards-compliant.
    