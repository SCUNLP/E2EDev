{
    "summary": {
        "overview": "The Exchange Rate Calculator application allows users to select currencies and input amounts to calculate and display the exchange rate and converted amount. Users can swap selected currencies to view the reverse exchange rate.",
        "predefined_options": "The application provides predefined currency options in dropdowns for selection, with USD and EUR set as default selections.",
        "external_resources": "The application uses an external image resource for visual representation: 'https://i.ibb.co/rvJd2XR/rate.png'.",
        "external_js_libraries": "The application fetches data from an external API: 'https://api.exchangerate-api.com/v4/latest/'. No external JavaScript libraries are explicitly mentioned in the provided code."
    },
    "finegrained_rewith_test": {
        "1": {
            "requirement": {
                "description": "The Exchange Rate Calculator web application must allow users to select currencies and input amounts to calculate exchange rates. Specifically, when a user selects a currency from the 'currency-one' dropdown (identified by data-testid 'currency-one'), the application must fetch the latest exchange rate for the selected currency using an external API. The exchange rate should be displayed in the element with data-testid 'exchange-rate', formatted as '1 [currency_one] = [currentRate] [currency_two]'. Additionally, the converted amount should be calculated based on the input value in the 'amount-one' field (data-testid 'amount-one') and displayed in the 'amount-two' field (data-testid 'amount-two'), rounded to two decimal places. The application must handle changes in both currency dropdowns and input fields, updating the exchange rate and converted amount dynamically. Furthermore, when the 'swap' button (data-testid 'swap-button') is clicked, the currencies in the dropdowns should be swapped, and the exchange rate and converted amount recalculated accordingly."
            },
            "test_cases": [
                {
                    "test_case": [
                        "Feature: Fetch and display the latest exchange rate when a currency is selected from the 'currency-one' dropdown\n  The system must fetch the latest exchange rate for the selected currency and update the exchange rate display and converted amount.\n\n\nScenario: [Normal] User selects a currency from 'currency-one' dropdown\n    Given the Exchange Rate Calculator page is loaded\n    And the 'currency-one' dropdown with data-testid 'currency-one' is visible\n    And the 'currency-two' dropdown with data-testid 'currency-two' is visible\n    And the 'amount-one' input with data-testid 'amount-one' has a value of '1'\n    When the user selects 'AUD' from the 'currency-one' dropdown\n    Then the system fetches the latest exchange rate for 'AUD'\n    And the exchange rate display with data-testid 'exchange-rate' shows \"1 AUD = [currentRate] EUR\"\n    And the 'amount-two' input with data-testid 'amount-two' is updated to \"[convertedAmount]\""
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the Exchange Rate Calculator page is loaded')\ndef step_given_exchange_rate_calculator_page_loaded(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)\n\n@given('the \\'currency-one\\' dropdown with data-testid \\'currency-one\\' is visible')\ndef step_given_currency_one_dropdown_visible(context):\n    currency_one_dropdown = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='currency-one']\"))\n    )\n    assert currency_one_dropdown.is_displayed(), \"Currency-one dropdown is not visible\"\n    time.sleep(1)\n\n@given('the \\'currency-two\\' dropdown with data-testid \\'currency-two\\' is visible')\ndef step_given_currency_two_dropdown_visible(context):\n    currency_two_dropdown = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='currency-two']\"))\n    )\n    assert currency_two_dropdown.is_displayed(), \"Currency-two dropdown is not visible\"\n    time.sleep(1)\n\n@given('the \\'amount-one\\' input with data-testid \\'amount-one\\' has a value of \\'1\\'')\ndef step_given_amount_one_input_has_value(context):\n    amount_one_input = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='amount-one']\"))\n    )\n    assert amount_one_input.get_attribute(\"value\") == \"1\", \"Amount-one input does not have a value of '1'\"\n    time.sleep(1)\n\n@when('the user selects \\'AUD\\' from the \\'currency-one\\' dropdown')\ndef step_when_user_selects_aud_from_currency_one(context):\n    currency_one_dropdown = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='currency-one']\"))\n    )\n    currency_one_dropdown.click()\n    time.sleep(1)\n    aud_option = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='currency-one'] option[value='AUD']\")\n    aud_option.click()\n    time.sleep(1)\n\n@then('the system fetches the latest exchange rate for \\'AUD\\'')\ndef step_then_system_fetches_latest_exchange_rate(context):\n    # Assuming the fetch happens automatically upon selection\n    time.sleep(2)  # Wait for the fetch to complete\n\n@then('the exchange rate display with data-testid \\'exchange-rate\\' shows \"1 AUD = [currentRate] EUR\"')\ndef step_then_exchange_rate_display_shows(context):\n    exchange_rate_display = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='exchange-rate']\"))\n    )\n    exchange_rate_text = exchange_rate_display.text\n    assert \"1 AUD = \" in exchange_rate_text, f\"Exchange rate display does not show expected text: {exchange_rate_text}\"\n    time.sleep(1)\n\n@then('the \\'amount-two\\' input with data-testid \\'amount-two\\' is updated to \"[convertedAmount]\"')\ndef step_then_amount_two_input_updated(context):\n    amount_two_input = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='amount-two']\"))\n    )\n    converted_amount = amount_two_input.get_attribute(\"value\")\n    assert converted_amount != \"\", \"Amount-two input is not updated\"\n    time.sleep(1)\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: Fetch and display the latest exchange rate when a currency is selected from the 'currency-one' dropdown\n  The system must fetch the latest exchange rate for the selected currency and update the exchange rate display and converted amount.\n\n\nScenario: [Edge] User selects the same currency from 'currency-one' dropdown\n    Given the Exchange Rate Calculator page is loaded\n    And the 'currency-one' dropdown with data-testid 'currency-one' is set to 'USD'\n    And the 'currency-two' dropdown with data-testid 'currency-two' is set to 'EUR'\n    And the 'amount-one' input with data-testid 'amount-one' has a value of '1'\n    When the user selects 'USD' again from the 'currency-one' dropdown\n    Then the system fetches the latest exchange rate for 'USD'\n    And the exchange rate display with data-testid 'exchange-rate' shows \"1 USD = [currentRate] EUR\"\n    And the 'amount-two' input with data-testid 'amount-two' is updated to \"[convertedAmount]\""
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\ndef is_visible(element):\n    return element.is_displayed()\n\n@given('the Exchange Rate Calculator page is loaded')\ndef step_given_page_loaded(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)\n\n@given('the \\'currency-one\\' dropdown with data-testid \\'currency-one\\' is set to \\'USD\\'')\ndef step_given_currency_one_set_to_usd(context):\n    currency_one = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='currency-one']\"))\n    )\n    currency_one.click()\n    time.sleep(1)\n    currency_one.find_element(By.CSS_SELECTOR, \"option[value='USD']\").click()\n    time.sleep(1)\n\n@given('the \\'currency-two\\' dropdown with data-testid \\'currency-two\\' is set to \\'EUR\\'')\ndef step_given_currency_two_set_to_eur(context):\n    currency_two = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='currency-two']\"))\n    )\n    currency_two.click()\n    time.sleep(1)\n    currency_two.find_element(By.CSS_SELECTOR, \"option[value='EUR']\").click()\n    time.sleep(1)\n\n@given('the \\'amount-one\\' input with data-testid \\'amount-one\\' has a value of \\'1\\'')\ndef step_given_amount_one_set_to_1(context):\n    amount_one = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='amount-one']\"))\n    )\n    amount_one.clear()\n    amount_one.send_keys(\"1\")\n    time.sleep(1)\n\n@when('the user selects \\'USD\\' again from the \\'currency-one\\' dropdown')\ndef step_when_user_selects_usd_again(context):\n    currency_one = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='currency-one']\"))\n    )\n    currency_one.click()\n    time.sleep(1)\n    currency_one.find_element(By.CSS_SELECTOR, \"option[value='USD']\").click()\n    time.sleep(1)\n\n@then('the system fetches the latest exchange rate for \\'USD\\'')\ndef step_then_system_fetches_latest_rate(context):\n    # This step assumes the JavaScript fetches the rate automatically\n    # after the currency selection, so we just wait for the rate to update.\n    rate = WebDriverWait(context.driver, 10).until(\n        EC.text_to_be_present_in_element((By.CSS_SELECTOR, \"[data-testid='exchange-rate']\"), \"USD\")\n    )\n    time.sleep(1)\n\n@then('the exchange rate display with data-testid \\'exchange-rate\\' shows \"1 USD = [currentRate] EUR\"')\ndef step_then_exchange_rate_display_shows(context):\n    rate_element = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='exchange-rate']\"))\n    )\n    assert \"1 USD = \" in rate_element.text, f\"Expected '1 USD = ' in '{rate_element.text}'\"\n    time.sleep(1)\n\n@then('the \\'amount-two\\' input with data-testid \\'amount-two\\' is updated to \"[convertedAmount]\"')\ndef step_then_amount_two_updated(context):\n    amount_two = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='amount-two']\"))\n    )\n    assert amount_two.get_attribute(\"value\") != \"\", \"Expected 'amount-two' to be updated with a value\"\n    time.sleep(1)\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                }
            ]
        },
        "2": {
            "requirement": {
                "description": "The Exchange Rate Calculator must dynamically update the converted amount in the 'amount-two' field whenever the user inputs a value in the 'amount-one' field. This process involves fetching the current exchange rate from an external API based on the selected currencies in the 'currency-one' and 'currency-two' fields. The 'amount-one' field is identified by the data-testid 'amount-one', and the 'amount-two' field is identified by the data-testid 'amount-two'. The system should handle normal input values as well as edge cases, such as very large numbers, ensuring accurate conversion and display of the result. The conversion result should be displayed with two decimal precision in the 'amount-two' field."
            },
            "test_cases": [
                {
                    "test_case": [
                        "Feature: REQ-002 - Recalculate converted amount when user inputs a value in the 'amount-one' field\n  The system must recalculate the converted amount using the current exchange rate and update the 'amount-two' field when the user inputs a value in the 'amount-one' field.\n\n\n  Scenario: [Normal] User inputs a valid amount in 'amount-one' field\n    Given the Exchange Rate Calculator page is loaded\n    And the 'amount-one' field with data-testid 'amount-one' is set to '1'\n    And the 'currency-one' field with data-testid 'currency-one' is set to 'USD'\n    And the 'currency-two' field with data-testid 'currency-two' is set to 'EUR'\n    When the user inputs '100' into the 'amount-one' field with data-testid 'amount-one'\n    Then the system should fetch the current exchange rate for 'USD' to 'EUR'\n    And the 'amount-two' field with data-testid 'amount-two' should be updated with the converted amount\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the Exchange Rate Calculator page is loaded')\ndef step_impl(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)  # Allow time for the page to load\n\n@given('the \\'amount-one\\' field with data-testid \\'amount-one\\' is set to \\'1\\'')\ndef step_impl(context):\n    amount_one_field = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='amount-one']\"))\n    )\n    amount_one_field.clear()\n    amount_one_field.send_keys(\"1\")\n    time.sleep(1)\n\n@given('the \\'currency-one\\' field with data-testid \\'currency-one\\' is set to \\'USD\\'')\ndef step_impl(context):\n    currency_one_field = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='currency-one']\"))\n    )\n    currency_one_field.send_keys(\"USD\")\n    time.sleep(1)\n\n@given('the \\'currency-two\\' field with data-testid \\'currency-two\\' is set to \\'EUR\\'')\ndef step_impl(context):\n    currency_two_field = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='currency-two']\"))\n    )\n    currency_two_field.send_keys(\"EUR\")\n    time.sleep(1)\n\n@when('the user inputs \\'100\\' into the \\'amount-one\\' field with data-testid \\'amount-one\\'')\ndef step_impl(context):\n    amount_one_field = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='amount-one']\"))\n    )\n    amount_one_field.clear()\n    amount_one_field.send_keys(\"100\")\n    time.sleep(1)\n\n@then('the system should fetch the current exchange rate for \\'USD\\' to \\'EUR\\'')\ndef step_impl(context):\n    # This step would typically involve checking network requests or waiting for an update\n    # For simplicity, we assume the rate is updated on the page\n    rate_field = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='exchange-rate']\"))\n    )\n    assert \"USD\" in rate_field.text and \"EUR\" in rate_field.text, \"Exchange rate not updated correctly\"\n    time.sleep(1)\n\n@then('the \\'amount-two\\' field with data-testid \\'amount-two\\' should be updated with the converted amount')\ndef step_impl(context):\n    amount_two_field = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='amount-two']\"))\n    )\n    converted_value = float(amount_two_field.get_attribute(\"value\"))\n    assert converted_value > 0, \"Converted amount is not updated correctly\"\n    time.sleep(1)\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: REQ-002 - Recalculate converted amount when user inputs a value in the 'amount-one' field\n  The system must recalculate the converted amount using the current exchange rate and update the 'amount-two' field when the user inputs a value in the 'amount-one' field.\n\n\n  Scenario: [Edge] User inputs a very large amount in 'amount-one' field\n    Given the Exchange Rate Calculator page is loaded\n    And the 'amount-one' field with data-testid 'amount-one' is set to '1'\n    And the 'currency-one' field with data-testid 'currency-one' is set to 'USD'\n    And the 'currency-two' field with data-testid 'currency-two' is set to 'EUR'\n    When the user inputs '1000000' into the 'amount-one' field with data-testid 'amount-one'\n    Then the system should fetch the current exchange rate for 'USD' to 'EUR'\n    And the 'amount-two' field with data-testid 'amount-two' should be updated with the converted amount\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the Exchange Rate Calculator page is loaded')\ndef step_given_exchange_rate_calculator_page_loaded(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)\n\n@given('the \\'amount-one\\' field with data-testid \\'amount-one\\' is set to \\'1\\'')\ndef step_given_amount_one_field_set_to_1(context):\n    amount_one = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='amount-one']\"))\n    )\n    amount_one.clear()\n    amount_one.send_keys(\"1\")\n    time.sleep(1)\n\n@given('the \\'currency-one\\' field with data-testid \\'currency-one\\' is set to \\'USD\\'')\ndef step_given_currency_one_field_set_to_usd(context):\n    currency_one = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='currency-one']\"))\n    )\n    currency_one.send_keys(\"USD\")\n    time.sleep(1)\n\n@given('the \\'currency-two\\' field with data-testid \\'currency-two\\' is set to \\'EUR\\'')\ndef step_given_currency_two_field_set_to_eur(context):\n    currency_two = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='currency-two']\"))\n    )\n    currency_two.send_keys(\"EUR\")\n    time.sleep(1)\n\n@when('the user inputs \\'1000000\\' into the \\'amount-one\\' field with data-testid \\'amount-one\\'')\ndef step_when_user_inputs_large_amount(context):\n    amount_one = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='amount-one']\"))\n    )\n    amount_one.clear()\n    amount_one.send_keys(\"1000000\")\n    time.sleep(1)\n\n@then('the system should fetch the current exchange rate for \\'USD\\' to \\'EUR\\'')\ndef step_then_system_fetches_exchange_rate(context):\n    # This step assumes the JavaScript code handles fetching the exchange rate.\n    # We can check if the rate element is updated.\n    rate = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='exchange-rate']\"))\n    )\n    assert \"USD\" in rate.text and \"EUR\" in rate.text, f\"Exchange rate not updated correctly: {rate.text}\"\n    time.sleep(1)\n\n@then('the \\'amount-two\\' field with data-testid \\'amount-two\\' should be updated with the converted amount')\ndef step_then_amount_two_field_updated(context):\n    amount_two = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='amount-two']\"))\n    )\n    assert amount_two.get_attribute(\"value\") != \"0\", \"Amount two field not updated correctly\"\n    time.sleep(1)\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                }
            ]
        },
        "3": {
            "requirement": {
                "description": "When a user selects a currency from the 'currency-two' dropdown (identified by data-testid 'currency-two'), the system must perform the following actions: 1) Fetch the latest exchange rate for the selected currency from the API using the current value of 'currency-one' (identified by data-testid 'currency-one') as the base currency. 2) Update the 'exchange-rate' display (identified by data-testid 'exchange-rate') to show the exchange rate in the format '1 [currency-one] = [currentRate] [currency-two]'. 3) Calculate the converted amount using the value from 'amount-one' input (identified by data-testid 'amount-one') and the fetched exchange rate, then update the 'amount-two' input (identified by data-testid 'amount-two') with the calculated value rounded to two decimal places. This functionality should handle both normal scenarios where the selected currency differs from the initial selection and edge cases where the selected currency remains the same."
            },
            "test_cases": [
                {
                    "test_case": [
                        "Feature: REQ-003 - Update exchange rate and converted amount when selecting a currency from 'currency-two' dropdown\n  The system must fetch the latest exchange rate for the selected currency in 'currency-two' and update the exchange rate display and converted amount.\n\n\n  Scenario: [Normal] User selects a different currency from 'currency-two' dropdown\n    Given the webpage is loaded with 'currency-one' set to \"USD\" and 'currency-two' set to \"EUR\"\n    And the 'amount-one' input has a value of \"1\"\n    When the user selects \"GBP\" from the 'currency-two' dropdown with data-testid \"currency-two\"\n    Then the system fetches the latest exchange rate for \"GBP\" from the API\n    And the 'exchange-rate' display with data-testid \"exchange-rate\" shows \"1 USD = [currentRate] GBP\"\n    And the 'amount-two' input with data-testid \"amount-two\" is updated to \"[convertedAmount]\"\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the webpage is loaded with \\'currency-one\\' set to \"USD\" and \\'currency-two\\' set to \"EUR\"')\ndef step_given_webpage_loaded(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)  # Allow time for the page to load\n\n    # Verify initial currency selections\n    currency_one = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='currency-one']\"))\n    )\n    currency_two = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='currency-two']\")\n\n    assert currency_one.get_attribute(\"value\") == \"USD\", \"Expected 'currency-one' to be 'USD'\"\n    assert currency_two.get_attribute(\"value\") == \"EUR\", \"Expected 'currency-two' to be 'EUR'\"\n\n@given('the \\'amount-one\\' input has a value of \"1\"')\ndef step_given_amount_one_value(context):\n    amount_one = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='amount-one']\")\n    assert amount_one.get_attribute(\"value\") == \"1\", \"Expected 'amount-one' to have a value of '1'\"\n\n@when('the user selects \"GBP\" from the \\'currency-two\\' dropdown with data-testid \"currency-two\"')\ndef step_when_user_selects_gbp(context):\n    currency_two = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='currency-two']\")\n    currency_two.click()\n    time.sleep(1)  # Allow time for dropdown to open\n\n    # Select GBP from the dropdown\n    gbp_option = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='currency-two'] option[value='GBP']\")\n    gbp_option.click()\n    time.sleep(1)  # Allow time for selection to take effect\n\n@then('the system fetches the latest exchange rate for \"GBP\" from the API')\ndef step_then_fetch_exchange_rate(context):\n    # Wait for the exchange rate to be updated\n    rate = WebDriverWait(context.driver, 10).until(\n        EC.text_to_be_present_in_element((By.CSS_SELECTOR, \"[data-testid='exchange-rate']\"), \"GBP\")\n    )\n    assert rate, \"Expected exchange rate to be updated with 'GBP'\"\n\n@then('the \\'exchange-rate\\' display with data-testid \"exchange-rate\" shows \"1 USD = [currentRate] GBP\"')\ndef step_then_exchange_rate_display(context):\n    rate_element = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='exchange-rate']\")\n    rate_text = rate_element.text\n    assert \"1 USD = \" in rate_text and \" GBP\" in rate_text, f\"Unexpected exchange rate display: {rate_text}\"\n\n@then('the \\'amount-two\\' input with data-testid \"amount-two\" is updated to \"[convertedAmount]\"')\ndef step_then_amount_two_updated(context):\n    amount_two = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='amount-two']\")\n    converted_amount = amount_two.get_attribute(\"value\")\n    assert converted_amount != \"\", \"Expected 'amount-two' to be updated with a converted amount\"\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: REQ-003 - Update exchange rate and converted amount when selecting a currency from 'currency-two' dropdown\n  The system must fetch the latest exchange rate for the selected currency in 'currency-two' and update the exchange rate display and converted amount.\n\n\n  Scenario: [Edge] User selects the same currency from 'currency-two' dropdown\n    Given the webpage is loaded with 'currency-one' set to \"USD\" and 'currency-two' set to \"EUR\"\n    And the 'amount-one' input has a value of \"1\"\n    When the user selects \"EUR\" from the 'currency-two' dropdown with data-testid \"currency-two\"\n    Then the system fetches the latest exchange rate for \"EUR\" from the API\n    And the 'exchange-rate' display with data-testid \"exchange-rate\" shows \"1 USD = [currentRate] EUR\"\n    And the 'amount-two' input with data-testid \"amount-two\" is updated to \"[convertedAmount]\"\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the webpage is loaded with \\'currency-one\\' set to \"USD\" and \\'currency-two\\' set to \"EUR\"')\ndef step_given_webpage_loaded(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='currency-one']\"))\n    )\n    currency_one = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='currency-one']\")\n    currency_two = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='currency-two']\")\n    currency_one_value = currency_one.get_attribute(\"value\")\n    currency_two_value = currency_two.get_attribute(\"value\")\n    assert currency_one_value == \"USD\", f\"Expected 'USD', but got '{currency_one_value}'\"\n    assert currency_two_value == \"EUR\", f\"Expected 'EUR', but got '{currency_two_value}'\"\n    time.sleep(1)\n\n@given('the \\'amount-one\\' input has a value of \"1\"')\ndef step_given_amount_one_value(context):\n    amount_one = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='amount-one']\")\n    amount_one_value = amount_one.get_attribute(\"value\")\n    assert amount_one_value == \"1\", f\"Expected '1', but got '{amount_one_value}'\"\n    time.sleep(1)\n\n@when('the user selects \"EUR\" from the \\'currency-two\\' dropdown with data-testid \"currency-two\"')\ndef step_when_select_currency_two(context):\n    currency_two = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='currency-two']\")\n    currency_two.click()\n    currency_two.find_element(By.CSS_SELECTOR, \"option[value='EUR']\").click()\n    time.sleep(1)\n\n@then('the system fetches the latest exchange rate for \"EUR\" from the API')\ndef step_then_fetch_exchange_rate(context):\n    # This step assumes the JavaScript code handles the API call and updates the DOM.\n    # We will check if the exchange rate element is updated.\n    rate = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='exchange-rate']\"))\n    )\n    rate_text = rate.text\n    assert \"1 USD = \" in rate_text and \" EUR\" in rate_text, f\"Exchange rate not updated correctly: '{rate_text}'\"\n    time.sleep(1)\n\n@then('the \\'exchange-rate\\' display with data-testid \"exchange-rate\" shows \"1 USD = [currentRate] EUR\"')\ndef step_then_exchange_rate_display(context):\n    rate = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='exchange-rate']\")\n    rate_text = rate.text\n    assert \"1 USD = \" in rate_text and \" EUR\" in rate_text, f\"Exchange rate display incorrect: '{rate_text}'\"\n    time.sleep(1)\n\n@then('the \\'amount-two\\' input with data-testid \"amount-two\" is updated to \"[convertedAmount]\"')\ndef step_then_amount_two_updated(context):\n    amount_two = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='amount-two']\")\n    amount_two_value = amount_two.get_attribute(\"value\")\n    assert float(amount_two_value) > 0, f\"Expected converted amount greater than 0, but got '{amount_two_value}'\"\n    time.sleep(1)\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                }
            ]
        },
        "5": {
            "requirement": {
                "description": "The web application must allow users to swap the selected currencies between the dropdowns identified by data-testid 'currency-one' and 'currency-two' when the 'swap' button with data-testid 'swap-button' is clicked. Upon clicking, the system should exchange the values of the two currency selectors, trigger a recalculation of the exchange rate using the latest data from the API, and update the DOM element with data-testid 'exchange-rate' to display the new rate in the format '1 [currency-one] = [rate] [currency-two]'. Additionally, the input field with data-testid 'amount-two' should be updated to reflect the converted amount based on the new exchange rate and the value entered in the input field with data-testid 'amount-one'. The system must handle edge cases, such as when the 'amount-one' input is zero, ensuring the 'amount-two' input displays '0.00'."
            },
            "test_cases": [
                {
                    "test_case": [
                        "Feature: Swap Currencies Functionality\n  The system must swap the selected currencies between 'currency-one' and 'currency-two', recalculate the exchange rate, and update the display and converted amounts when the user clicks the 'swap' button.\n\n\n  Scenario: [Normal] Swap currencies and update exchange rate\n    Given the webpage is loaded with the Exchange Rate Calculator\n    And the 'currency-one' dropdown with data-testid 'currency-one' is set to 'USD'\n    And the 'currency-two' dropdown with data-testid 'currency-two' is set to 'EUR'\n    And the 'amount-one' input with data-testid 'amount-one' has a value of '1'\n    When the user clicks the 'swap' button with data-testid 'swap-button'\n    Then the 'currency-one' dropdown should be set to 'EUR'\n    And the 'currency-two' dropdown should be set to 'USD'\n    And the exchange rate display with data-testid 'exchange-rate' should show the updated rate for 'EUR' to 'USD'\n    And the 'amount-two' input with data-testid 'amount-two' should be updated with the converted amount\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the webpage is loaded with the Exchange Rate Calculator')\ndef step_impl(context):\n    # Initialize the WebDriver and load the test page\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    context.driver.maximize_window()\n    time.sleep(1)  # Allow the page to fully load\n\n@given('the \\'currency-one\\' dropdown with data-testid \\'currency-one\\' is set to \\'USD\\'')\ndef step_impl(context):\n    # Locate the 'currency-one' dropdown and ensure it is set to 'USD'\n    currency_one_dropdown = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='currency-one']\"))\n    )\n    assert currency_one_dropdown.get_attribute(\"value\") == \"USD\", \"currency-one is not set to USD\"\n\n@given('the \\'currency-two\\' dropdown with data-testid \\'currency-two\\' is set to \\'EUR\\'')\ndef step_impl(context):\n    # Locate the 'currency-two' dropdown and ensure it is set to 'EUR'\n    currency_two_dropdown = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='currency-two']\"))\n    )\n    assert currency_two_dropdown.get_attribute(\"value\") == \"EUR\", \"currency-two is not set to EUR\"\n\n@given('the \\'amount-one\\' input with data-testid \\'amount-one\\' has a value of \\'1\\'')\ndef step_impl(context):\n    # Locate the 'amount-one' input and ensure it has a value of '1'\n    amount_one_input = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='amount-one']\"))\n    )\n    assert amount_one_input.get_attribute(\"value\") == \"1\", \"amount-one is not set to 1\"\n\n@when('the user clicks the \\'swap\\' button with data-testid \\'swap-button\\'')\ndef step_impl(context):\n    # Locate and click the 'swap' button\n    swap_button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='swap-button']\"))\n    )\n    swap_button.click()\n    time.sleep(1)  # Allow time for the swap action to complete\n\n@then('the \\'currency-one\\' dropdown should be set to \\'EUR\\'')\ndef step_impl(context):\n    # Verify that 'currency-one' is now set to 'EUR'\n    currency_one_dropdown = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='currency-one']\"))\n    )\n    assert currency_one_dropdown.get_attribute(\"value\") == \"EUR\", \"currency-one is not set to EUR after swap\"\n\n@then('the \\'currency-two\\' dropdown should be set to \\'USD\\'')\ndef step_impl(context):\n    # Verify that 'currency-two' is now set to 'USD'\n    currency_two_dropdown = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='currency-two']\"))\n    )\n    assert currency_two_dropdown.get_attribute(\"value\") == \"USD\", \"currency-two is not set to USD after swap\"\n\n@then('the exchange rate display with data-testid \\'exchange-rate\\' should show the updated rate for \\'EUR\\' to \\'USD\\'')\ndef step_impl(context):\n    # Verify that the exchange rate display is updated for 'EUR' to 'USD'\n    exchange_rate_display = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='exchange-rate']\"))\n    )\n    exchange_rate_text = exchange_rate_display.text\n    assert \"EUR\" in exchange_rate_text and \"USD\" in exchange_rate_text, \\\n        f\"Exchange rate display does not show updated rate for EUR to USD: {exchange_rate_text}\"\n\n@then('the \\'amount-two\\' input with data-testid \\'amount-two\\' should be updated with the converted amount')\ndef step_impl(context):\n    # Verify that 'amount-two' is updated with the converted amount\n    amount_two_input = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='amount-two']\"))\n    )\n    amount_two_value = amount_two_input.get_attribute(\"value\")\n    assert amount_two_value and float(amount_two_value) > 0, \\\n        f\"amount-two is not updated with the converted amount: {amount_two_value}\"\n\n# Teardown to close the browser after the test\ndef after_scenario(context, scenario):\n    if hasattr(context, 'driver'):\n        context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: Swap Currencies Functionality\n  The system must swap the selected currencies between 'currency-one' and 'currency-two', recalculate the exchange rate, and update the display and converted amounts when the user clicks the 'swap' button.\n\n\nScenario: [Edge] Swap currencies with zero amount\n    Given the webpage is loaded with the Exchange Rate Calculator\n    And the 'currency-one' dropdown with data-testid 'currency-one' is set to 'USD'\n    And the 'currency-two' dropdown with data-testid 'currency-two' is set to 'EUR'\n    And the 'amount-one' input with data-testid 'amount-one' has a value of '0'\n    When the user clicks the 'swap' button with data-testid 'swap-button'\n    Then the 'currency-one' dropdown should be set to 'EUR'\n    And the 'currency-two' dropdown should be set to 'USD'\n    And the exchange rate display with data-testid 'exchange-rate' should show the updated rate for 'EUR' to 'USD'\n    And the 'amount-two' input with data-testid 'amount-two' should remain '0.00'"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the webpage is loaded with the Exchange Rate Calculator')\ndef step_given_webpage_loaded(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='main-heading']\"))\n    )\n    time.sleep(1)\n\n@given('the \\'currency-one\\' dropdown with data-testid \\'currency-one\\' is set to \\'USD\\'')\ndef step_given_currency_one_set_to_usd(context):\n    currency_one = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='currency-one']\"))\n    )\n    currency_one.click()\n    currency_one.find_element(By.CSS_SELECTOR, \"option[value='USD']\").click()\n    time.sleep(1)\n\n@given('the \\'currency-two\\' dropdown with data-testid \\'currency-two\\' is set to \\'EUR\\'')\ndef step_given_currency_two_set_to_eur(context):\n    currency_two = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='currency-two']\"))\n    )\n    currency_two.click()\n    currency_two.find_element(By.CSS_SELECTOR, \"option[value='EUR']\").click()\n    time.sleep(1)\n\n@given('the \\'amount-one\\' input with data-testid \\'amount-one\\' has a value of \\'0\\'')\ndef step_given_amount_one_set_to_zero(context):\n    amount_one = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='amount-one']\"))\n    )\n    amount_one.clear()\n    amount_one.send_keys(\"0\")\n    time.sleep(1)\n\n@when('the user clicks the \\'swap\\' button with data-testid \\'swap-button\\'')\ndef step_when_user_clicks_swap_button(context):\n    swap_button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='swap-button']\"))\n    )\n    swap_button.click()\n    time.sleep(1)\n\n@then('the \\'currency-one\\' dropdown should be set to \\'EUR\\'')\ndef step_then_currency_one_set_to_eur(context):\n    currency_one = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='currency-one']\"))\n    )\n    selected_option = currency_one.find_element(By.CSS_SELECTOR, \"option:checked\").get_attribute(\"value\")\n    assert selected_option == \"EUR\", f\"Expected 'EUR', but got '{selected_option}'\"\n\n@then('the \\'currency-two\\' dropdown should be set to \\'USD\\'')\ndef step_then_currency_two_set_to_usd(context):\n    currency_two = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='currency-two']\"))\n    )\n    selected_option = currency_two.find_element(By.CSS_SELECTOR, \"option:checked\").get_attribute(\"value\")\n    assert selected_option == \"USD\", f\"Expected 'USD', but got '{selected_option}'\"\n\n@then('the exchange rate display with data-testid \\'exchange-rate\\' should show the updated rate for \\'EUR\\' to \\'USD\\'')\ndef step_then_exchange_rate_updated(context):\n    exchange_rate = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='exchange-rate']\"))\n    )\n    expected_text = \"1 EUR = 1.14 USD\"\n    assert expected_text.lower() in exchange_rate.text.lower(), f\"Expected '{expected_text}' in '{exchange_rate.text}'\"\n\n@then('the \\'amount-two\\' input with data-testid \\'amount-two\\' should remain \\'0.00\\'')\ndef step_then_amount_two_remains_zero(context):\n    amount_two = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='amount-two']\"))\n    )\n    assert amount_two.get_attribute(\"value\") == \"0.00\", f\"Expected '0.00', but got '{amount_two.get_attribute('value')}'\"\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                }
            ]
        },
        "6": {
            "requirement": {
                "description": "The Exchange Rate Calculator web application must allow users to select two currencies from dropdown menus with data-testid attributes 'currency-one' and 'currency-two', and input an amount using an input field with data-testid 'amount-one'. Upon selection or input change, the system must fetch the latest exchange rate from an external API and display it in the format '1 [currency-one] = [rate] [currency-two]' within the element with data-testid 'exchange-rate'. The calculated equivalent amount should be displayed in the input field with data-testid 'amount-two'. Users can swap the selected currencies using a button with data-testid 'swap-button', which should update the exchange rate and equivalent amount accordingly. The system must handle edge cases, such as when both selected currencies are the same, by displaying '1 [currency-one] = 1 [currency-two]'."
            },
            "test_cases": [
                {
                    "test_case": [
                        "Feature: Display Current Exchange Rate\n  The system must display the current exchange rate in the format '1 [currency-one] = [rate] [currency-two]' in the 'exchange-rate' element.\n\n\n  Scenario: [Normal] Display exchange rate for default currencies\n    Given the user is on the Exchange Rate Calculator page\n    And the currency-one dropdown with data-testid \"currency-one\" is set to \"USD\"\n    And the currency-two dropdown with data-testid \"currency-two\" is set to \"EUR\"\n    When the system fetches the exchange rate for \"USD\" to \"EUR\"\n    Then the exchange-rate element with data-testid \"exchange-rate\" should display \"1 USD = [rate] EUR\"\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the user is on the Exchange Rate Calculator page')\ndef step_given_user_on_exchange_rate_calculator_page(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)\n\n@given('the currency-one dropdown with data-testid \"currency-one\" is set to \"USD\"')\ndef step_given_currency_one_set_to_usd(context):\n    currency_one = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='currency-one']\"))\n    )\n    assert currency_one.get_attribute(\"value\") == \"USD\", \"Currency one is not set to USD\"\n    time.sleep(1)\n\n@given('the currency-two dropdown with data-testid \"currency-two\" is set to \"EUR\"')\ndef step_given_currency_two_set_to_eur(context):\n    currency_two = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='currency-two']\"))\n    )\n    assert currency_two.get_attribute(\"value\") == \"EUR\", \"Currency two is not set to EUR\"\n    time.sleep(1)\n\n@when('the system fetches the exchange rate for \"USD\" to \"EUR\"')\ndef step_when_system_fetches_exchange_rate(context):\n    # This step assumes the JavaScript on the page automatically fetches the rate\n    # when the page loads or when the dropdown values change.\n    # We will wait for the exchange rate element to be updated.\n    rate_element = WebDriverWait(context.driver, 10).until(\n        EC.text_to_be_present_in_element((By.CSS_SELECTOR, \"[data-testid='exchange-rate']\"), \"1 USD =\")\n    )\n    time.sleep(1)\n\n@then('the exchange-rate element with data-testid \"exchange-rate\" should display \"1 USD = [rate] EUR\"')\ndef step_then_exchange_rate_displayed(context):\n    rate_element = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='exchange-rate']\")\n    rate_text = rate_element.text\n    assert \"1 USD =\" in rate_text and \"EUR\" in rate_text, f\"Exchange rate not displayed correctly: {rate_text}\"\n    time.sleep(1)\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: Display Current Exchange Rate\n  The system must display the current exchange rate in the format '1 [currency-one] = [rate] [currency-two]' in the 'exchange-rate' element.\n\n\n  Scenario: [Normal] Display exchange rate after changing currency-one\n    Given the user is on the Exchange Rate Calculator page\n    And the currency-one dropdown with data-testid \"currency-one\" is set to \"USD\"\n    And the currency-two dropdown with data-testid \"currency-two\" is set to \"EUR\"\n    When the user selects \"GBP\" from the currency-one dropdown\n    And the system fetches the exchange rate for \"GBP\" to \"EUR\"\n    Then the exchange-rate element with data-testid \"exchange-rate\" should display \"1 GBP = [rate] EUR\"\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the user is on the Exchange Rate Calculator page')\ndef step_given_user_on_exchange_rate_calculator_page(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)\n\n@given('the currency-one dropdown with data-testid \"currency-one\" is set to \"USD\"')\ndef step_given_currency_one_set_to_usd(context):\n    currency_one = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='currency-one']\"))\n    )\n    assert currency_one.get_attribute(\"value\") == \"USD\", \"Currency one is not set to USD\"\n    time.sleep(1)\n\n@given('the currency-two dropdown with data-testid \"currency-two\" is set to \"EUR\"')\ndef step_given_currency_two_set_to_eur(context):\n    currency_two = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='currency-two']\"))\n    )\n    assert currency_two.get_attribute(\"value\") == \"EUR\", \"Currency two is not set to EUR\"\n    time.sleep(1)\n\n@when('the user selects \"GBP\" from the currency-one dropdown')\ndef step_when_user_selects_gbp_from_currency_one(context):\n    currency_one = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='currency-one']\"))\n    )\n    currency_one.click()\n    time.sleep(1)\n    currency_one.find_element(By.XPATH, \"//option[@value='GBP']\").click()\n    time.sleep(1)\n\n@when('the system fetches the exchange rate for \"GBP\" to \"EUR\"')\ndef step_when_system_fetches_exchange_rate(context):\n    # Assuming the fetch happens automatically after selection\n    time.sleep(2)  # Wait for the fetch to complete\n\n@then('the exchange-rate element with data-testid \"exchange-rate\" should display \"1 GBP = [rate] EUR\"')\ndef step_then_exchange_rate_displayed(context):\n    exchange_rate = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='exchange-rate']\"))\n    )\n    assert \"1 GBP = \" in exchange_rate.text, f\"Exchange rate not displayed correctly: {exchange_rate.text}\"\n    time.sleep(1)\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: Display Current Exchange Rate\n  The system must display the current exchange rate in the format '1 [currency-one] = [rate] [currency-two]' in the 'exchange-rate' element.\n\n\n  Scenario: [Normal] Display exchange rate after changing currency-two\n    Given the user is on the Exchange Rate Calculator page\n    And the currency-one dropdown with data-testid \"currency-one\" is set to \"USD\"\n    And the currency-two dropdown with data-testid \"currency-two\" is set to \"EUR\"\n    When the user selects \"JPY\" from the currency-two dropdown\n    And the system fetches the exchange rate for \"USD\" to \"JPY\"\n    Then the exchange-rate element with data-testid \"exchange-rate\" should display \"1 USD = [rate] JPY\"\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the user is on the Exchange Rate Calculator page')\ndef step_given_user_on_exchange_rate_calculator_page(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)\n\n@given('the currency-one dropdown with data-testid \"currency-one\" is set to \"USD\"')\ndef step_given_currency_one_set_to_usd(context):\n    currency_one_dropdown = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='currency-one']\"))\n    )\n    currency_one_dropdown.click()\n    time.sleep(1)\n    currency_one_dropdown.find_element(By.CSS_SELECTOR, \"option[value='USD']\").click()\n    time.sleep(1)\n\n@given('the currency-two dropdown with data-testid \"currency-two\" is set to \"EUR\"')\ndef step_given_currency_two_set_to_eur(context):\n    currency_two_dropdown = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='currency-two']\"))\n    )\n    currency_two_dropdown.click()\n    time.sleep(1)\n    currency_two_dropdown.find_element(By.CSS_SELECTOR, \"option[value='EUR']\").click()\n    time.sleep(1)\n\n@when('the user selects \"JPY\" from the currency-two dropdown')\ndef step_when_user_selects_jpy_from_currency_two(context):\n    currency_two_dropdown = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='currency-two']\"))\n    )\n    currency_two_dropdown.click()\n    time.sleep(1)\n    currency_two_dropdown.find_element(By.CSS_SELECTOR, \"option[value='JPY']\").click()\n    time.sleep(1)\n\n@when('the system fetches the exchange rate for \"USD\" to \"JPY\"')\ndef step_when_system_fetches_exchange_rate(context):\n    # Assuming the JavaScript automatically fetches the rate when the dropdown changes\n    time.sleep(2)  # Wait for the rate to be fetched and displayed\n\n@then('the exchange-rate element with data-testid \"exchange-rate\" should display \"1 USD = [rate] JPY\"')\ndef step_then_exchange_rate_displayed(context):\n    exchange_rate_element = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='exchange-rate']\"))\n    )\n    time.sleep(1)\n    exchange_rate_text = exchange_rate_element.text\n    assert \"1 USD = \" in exchange_rate_text and \"JPY\" in exchange_rate_text, f\"Exchange rate text was '{exchange_rate_text}'\"\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: Display Current Exchange Rate\n  The system must display the current exchange rate in the format '1 [currency-one] = [rate] [currency-two]' in the 'exchange-rate' element.\n\n\n  Scenario: [Edge] Display exchange rate for the same currency\n    Given the user is on the Exchange Rate Calculator page\n    And the currency-one dropdown with data-testid \"currency-one\" is set to \"USD\"\n    And the currency-two dropdown with data-testid \"currency-two\" is set to \"USD\"\n    When the system fetches the exchange rate for \"USD\" to \"USD\"\n    Then the exchange-rate element with data-testid \"exchange-rate\" should display \"1 USD = 1 USD\"\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the user is on the Exchange Rate Calculator page')\ndef step_given_user_on_exchange_rate_calculator_page(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)\n\n@given('the currency-one dropdown with data-testid \"currency-one\" is set to \"USD\"')\ndef step_given_currency_one_set_to_usd(context):\n    currency_one_dropdown = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='currency-one']\"))\n    )\n    currency_one_dropdown.click()\n    time.sleep(1)\n    usd_option = currency_one_dropdown.find_element(By.CSS_SELECTOR, \"option[value='USD']\")\n    usd_option.click()\n    time.sleep(1)\n\n@given('the currency-two dropdown with data-testid \"currency-two\" is set to \"USD\"')\ndef step_given_currency_two_set_to_usd(context):\n    currency_two_dropdown = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='currency-two']\"))\n    )\n    currency_two_dropdown.click()\n    time.sleep(1)\n    usd_option = currency_two_dropdown.find_element(By.CSS_SELECTOR, \"option[value='USD']\")\n    usd_option.click()\n    time.sleep(1)\n\n@when('the system fetches the exchange rate for \"USD\" to \"USD\"')\ndef step_when_system_fetches_exchange_rate(context):\n    # Assuming the page automatically fetches the rate when the dropdowns are set\n    time.sleep(2)  # Wait for the rate to be fetched and displayed\n\n@then('the exchange-rate element with data-testid \"exchange-rate\" should display \"1 USD = 1 USD\"')\ndef step_then_exchange_rate_displayed(context):\n    exchange_rate_element = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='exchange-rate']\"))\n    )\n    expected_text = \"1 USD = 1 USD\"\n    assert expected_text in exchange_rate_element.text, f\"Expected '{expected_text}' but got '{exchange_rate_element.text}'\"\n    time.sleep(1)\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                }
            ]
        },
        "7": {
            "requirement": {
                "description": "Upon loading the Exchange Rate Calculator webpage, the system must automatically initialize by fetching the current exchange rate between the default selected currencies, USD and EUR. The UI should display the exchange rate in the element with data-testid 'exchange-rate', formatted as '1 USD = [rate] EUR'. Additionally, the converted amount should be calculated based on the default input value of 1 in the element with data-testid 'amount-one', and displayed in the element with data-testid 'amount-two', rounded to two decimal places. The currency dropdowns should default to USD for the element with data-testid 'currency-one' and EUR for the element with data-testid 'currency-two'."
            },
            "test_cases": [
                {
                    "test_case": [
                        "Feature: Initialize Exchange Rate Calculator with Default Currencies\n  The system must initialize the application by fetching the exchange rate for the default selected currencies (USD and EUR) and displaying the rate and converted amount.\n\n\nScenario: [Normal] Application initializes with default currencies and displays exchange rate\n    Given the Exchange Rate Calculator webpage is loaded\n    When the application initializes\n    Then the currency one dropdown with data-testid \"currency-one\" should have the value \"USD\"\n    And the currency two dropdown with data-testid \"currency-two\" should have the value \"EUR\""
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the Exchange Rate Calculator webpage is loaded')\ndef step_given_webpage_is_loaded(context):\n    # Initialize the Selenium WebDriver\n    context.driver = webdriver.Chrome()\n    # Load the test page\n    context.driver.get(f\"file://index.html\")\n    # Maximize the browser window\n    context.driver.maximize_window()\n    # Wait for the main heading to be visible to ensure the page is loaded\n    WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='main-heading']\"))\n    )\n    time.sleep(1)  # Allow time for the page to fully render\n\n@when('the application initializes')\ndef step_when_application_initializes(context):\n    # Wait for the exchange rate element to be populated\n    WebDriverWait(context.driver, 10).until(\n        EC.text_to_be_present_in_element((By.CSS_SELECTOR, \"[data-testid='exchange-rate']\"), \"1 USD =\")\n    )\n    time.sleep(1)  # Allow time for the initialization process to complete\n\n@then('the currency one dropdown with data-testid \"currency-one\" should have the value \"USD\"')\ndef step_then_currency_one_should_be_usd(context):\n    # Locate the currency one dropdown\n    currency_one_dropdown = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='currency-one']\")\n    # Assert that the selected value is \"USD\"\n    selected_value = currency_one_dropdown.get_attribute(\"value\")\n    assert selected_value == \"USD\", f\"Expected 'USD', but got '{selected_value}'\"\n\n@then('the currency two dropdown with data-testid \"currency-two\" should have the value \"EUR\"')\ndef step_then_currency_two_should_be_eur(context):\n    # Locate the currency two dropdown\n    currency_two_dropdown = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='currency-two']\")\n    # Assert that the selected value is \"EUR\"\n    selected_value = currency_two_dropdown.get_attribute(\"value\")\n    assert selected_value == \"EUR\", f\"Expected 'EUR', but got '{selected_value}'\"\n\n# Cleanup after the test\ndef after_scenario(context, scenario):\n    # Close the browser driver\n    if hasattr(context, 'driver'):\n        context.driver.quit()"
                }
            ]
        }
    }
}