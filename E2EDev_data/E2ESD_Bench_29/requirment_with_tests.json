{
    "summary": {
        "overview": "The Expense Tracker application allows users to manage their personal finances by adding, viewing, and removing transactions. It displays the user's current balance, total income, and total expenses, and provides a transaction history.",
        "predefined_options": "The application initializes with a balance, income, and expense of $0.00. Transactions are stored in local storage to persist data across sessions.",
        "external_resources": "The application uses Google Fonts for styling: 'Poppins' font from https://fonts.googleapis.com/css2?family=Poppins:wght@400;600&display=swap.",
        "external_js_libraries": "No external JavaScript libraries are used in this application."
    },
    "finegrained_rewith_test": {
        "1": {
            "requirement": {
                "description": "Upon loading the Expense Tracker application, the system must initialize and display the financial summary with the current balance, total income, and total expenses all set to $0.00. This initialization should occur when there are no transactions stored in the local storage. The balance should be displayed in the element with data-testid 'balance', the income in the element with data-testid 'income', and the expenses in the element with data-testid 'expense'. The application must ensure these values are accurately retrieved and displayed from the local storage, defaulting to $0.00 if the storage is empty or contains no transactions."
            },
            "test_cases": [
                {
                    "test_case": [
                        "Feature: Display Initial Financial Summary\n  The application should display the current balance, total income, and total expenses initialized to $0.00 when no transactions exist.\n\n\n  Scenario: [Normal] Display initial values on application load\n    Given the user opens the Expense Tracker application\n    When the application is loaded\n    Then the balance displayed with data-testid \"balance\" should be \"$0.00\"\n    And the income displayed with data-testid \"income\" should be \"$0.00\"\n    And the expenses displayed with data-testid \"expense\" should be \"$0.00\"\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the user opens the Expense Tracker application')\ndef step_given_user_opens_application(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)\n\n@when('the application is loaded')\ndef step_when_application_is_loaded(context):\n    # Wait for the balance element to be visible to ensure the page is loaded\n    WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='balance']\"))\n    )\n    time.sleep(1)\n\n@then('the balance displayed with data-testid \"balance\" should be \"$0.00\"')\ndef step_then_balance_should_be_zero(context):\n    balance_element = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='balance']\")\n    assert balance_element.text.strip() == \"$0.00\", f\"Expected balance to be '$0.00', but got '{balance_element.text}'\"\n    time.sleep(1)\n\n@then('the income displayed with data-testid \"income\" should be \"$0.00\"')\ndef step_then_income_should_be_zero(context):\n    income_element = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='income']\")\n    assert income_element.text.strip() == \"$0.00\", f\"Expected income to be '$0.00', but got '{income_element.text}'\"\n    time.sleep(1)\n\n@then('the expenses displayed with data-testid \"expense\" should be \"$0.00\"')\ndef step_then_expenses_should_be_zero(context):\n    expense_element = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='expense']\")\n    assert expense_element.text.strip() == \"$0.00\", f\"Expected expenses to be '$0.00', but got '{expense_element.text}'\"\n    time.sleep(1)\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: Display Initial Financial Summary\n  The application should display the current balance, total income, and total expenses initialized to $0.00 when no transactions exist.\n\n\n  Scenario: [Edge] Display initial values with empty local storage\n    Given the user opens the Expense Tracker application\n    And the local storage is empty\n    When the application is loaded\n    Then the balance displayed with data-testid \"balance\" should be \"$0.00\"\n    And the income displayed with data-testid \"income\" should be \"$0.00\"\n    And the expenses displayed with data-testid \"expense\" should be \"$0.00\"\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the user opens the Expense Tracker application')\ndef step_given_user_opens_application(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)\n\n@given('the local storage is empty')\ndef step_given_local_storage_empty(context):\n    context.driver.execute_script(\"localStorage.clear();\")\n    time.sleep(1)\n\n@when('the application is loaded')\ndef step_when_application_loaded(context):\n    # Assuming the application is loaded after opening the page\n    pass\n\n@then('the balance displayed with data-testid \"balance\" should be \"$0.00\"')\ndef step_then_balance_displayed(context):\n    balance_element = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='balance']\"))\n    )\n    assert \"$0.00\" in balance_element.text.strip(), f\"Expected '$0.00', but got '{balance_element.text}'\"\n    time.sleep(1)\n\n@then('the income displayed with data-testid \"income\" should be \"$0.00\"')\ndef step_then_income_displayed(context):\n    income_element = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='income']\"))\n    )\n    assert \"$0.00\" in income_element.text.strip(), f\"Expected '$0.00', but got '{income_element.text}'\"\n    time.sleep(1)\n\n@then('the expenses displayed with data-testid \"expense\" should be \"$0.00\"')\ndef step_then_expenses_displayed(context):\n    expense_element = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='expense']\"))\n    )\n    assert \"$0.00\" in expense_element.text.strip(), f\"Expected '$0.00', but got '{expense_element.text}'\"\n    time.sleep(1)\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                }
            ]
        },
        "2": {
            "requirement": {
                "description": "The user must be able to enter a transaction description in the 'Description' input field with data-testid 'description-input'. The system must accept text input of any length, including very long descriptions, and display it in the transaction history table with data-testid 'transaction-list' upon adding a transaction. If the 'Description' input field is left empty, the system should display an alert with the message 'Please enter valid description and amount.' and prevent the transaction from being added to the transaction history. The user interaction involves entering a description and an amount in their respective input fields, and clicking the 'Add Transaction' button with data-testid 'add-transaction-button'. The transaction history should update to reflect the new transaction, showing the description, amount, and date of the transaction."
            },
            "test_cases": [
                {
                    "test_case": [
                        "Feature: Transaction Description Input\n  The user must be able to enter a transaction description in the 'Description' input field. The system must accept text input and display it in the transaction history upon adding a transaction.\n\n\n  Scenario: [Normal] User enters a valid transaction description\n    Given the Expense Tracker page is loaded\n    And the 'Description' input field with data-testid 'description-input' is visible\n    When the user enters \"Grocery Shopping\" into the 'Description' input field with data-testid 'description-input'\n    And the user enters \"50\" into the 'Amount' input field with data-testid 'amount-input'\n    And the user clicks the 'Add Transaction' button with data-testid 'add-transaction-button'\n    Then the transaction history with data-testid 'transaction-list' should display a row with the description \"Grocery Shopping\"\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the Expense Tracker page is loaded')\ndef step_given_expense_tracker_page_loaded(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)\n\n@given('the \\'Description\\' input field with data-testid \\'description-input\\' is visible')\ndef step_given_description_input_visible(context):\n    description_input = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='description-input']\"))\n    )\n    assert description_input.is_displayed(), \"Description input field is not visible\"\n    time.sleep(1)\n\n@when('the user enters \"Grocery Shopping\" into the \\'Description\\' input field with data-testid \\'description-input\\'')\ndef step_when_user_enters_description(context):\n    description_input = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='description-input']\")\n    description_input.clear()\n    description_input.send_keys(\"Grocery Shopping\")\n    time.sleep(1)\n\n@when('the user enters \"50\" into the \\'Amount\\' input field with data-testid \\'amount-input\\'')\ndef step_when_user_enters_amount(context):\n    amount_input = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='amount-input']\")\n    amount_input.clear()\n    amount_input.send_keys(\"50\")\n    time.sleep(1)\n\n@when('the user clicks the \\'Add Transaction\\' button with data-testid \\'add-transaction-button\\'')\ndef step_when_user_clicks_add_transaction(context):\n    add_transaction_button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='add-transaction-button']\"))\n    )\n    add_transaction_button.click()\n    time.sleep(1)\n\n@then('the transaction history with data-testid \\'transaction-list\\' should display a row with the description \"Grocery Shopping\"')\ndef step_then_transaction_history_displays_description(context):\n    transaction_list = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='transaction-list']\"))\n    )\n    rows = transaction_list.find_elements(By.TAG_NAME, \"tr\")\n    assert any(\"Grocery Shopping\" in row.text for row in rows), \"Transaction description 'Grocery Shopping' not found in history\"\n    time.sleep(1)\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: Transaction Description Input\n  The user must be able to enter a transaction description in the 'Description' input field. The system must accept text input and display it in the transaction history upon adding a transaction.\n\n\n  Scenario: [Edge] User enters a very long transaction description\n    Given the Expense Tracker page is loaded\n    And the 'Description' input field with data-testid 'description-input' is visible\n    When the user enters a very long description \"A very long description that exceeds typical length expectations for testing purposes\" into the 'Description' input field with data-testid 'description-input'\n    And the user enters \"100\" into the 'Amount' input field with data-testid 'amount-input'\n    And the user clicks the 'Add Transaction' button with data-testid 'add-transaction-button'\n    Then the transaction history with data-testid 'transaction-list' should display a row with the description \"A very long description that exceeds typical length expectations for testing purposes\"\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the Expense Tracker page is loaded')\ndef step_given_expense_tracker_page_loaded(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)\n\n@given('the \\'Description\\' input field with data-testid \\'description-input\\' is visible')\ndef step_given_description_input_visible(context):\n    WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='description-input']\"))\n    )\n    time.sleep(1)\n\n@when('the user enters a very long description \"A very long description that exceeds typical length expectations for testing purposes\" into the \\'Description\\' input field with data-testid \\'description-input\\'')\ndef step_when_user_enters_long_description(context):\n    description_input = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='description-input']\")\n    description_input.clear()\n    description_input.send_keys(\"A very long description that exceeds typical length expectations for testing purposes\")\n    time.sleep(1)\n\n@when('the user enters \"100\" into the \\'Amount\\' input field with data-testid \\'amount-input\\'')\ndef step_when_user_enters_amount(context):\n    amount_input = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='amount-input']\")\n    amount_input.clear()\n    amount_input.send_keys(\"100\")\n    time.sleep(1)\n\n@when('the user clicks the \\'Add Transaction\\' button with data-testid \\'add-transaction-button\\'')\ndef step_when_user_clicks_add_transaction(context):\n    add_transaction_button = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='add-transaction-button']\")\n    add_transaction_button.click()\n    time.sleep(1)\n\n@then('the transaction history with data-testid \\'transaction-list\\' should display a row with the description \"A very long description that exceeds typical length expectations for testing purposes\"')\ndef step_then_transaction_history_displays_description(context):\n    transaction_list = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='transaction-list']\")\n    rows = transaction_list.find_elements(By.TAG_NAME, \"tr\")\n    descriptions = [row.find_elements(By.TAG_NAME, \"td\")[1].text for row in rows]\n    expected_description = \"A very long description that exceeds typical length expectations for testing purposes\"\n    assert any(expected_description in description for description in descriptions), \\\n        f\"Expected description '{expected_description}' not found in transaction history.\"\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: Transaction Description Input\n  The user must be able to enter a transaction description in the 'Description' input field. The system must accept text input and display it in the transaction history upon adding a transaction.\n\n\n  Scenario: [Error] User leaves the transaction description empty\n    Given the Expense Tracker page is loaded\n    And the 'Description' input field with data-testid 'description-input' is visible\n    When the user leaves the 'Description' input field with data-testid 'description-input' empty\n    And the user enters \"20\" into the 'Amount' input field with data-testid 'amount-input'\n    And the user clicks the 'Add Transaction' button with data-testid 'add-transaction-button'\n    Then an alert should be displayed with the message \"Please enter valid description and amount.\"\n    And the transaction history with data-testid 'transaction-list' should not display any new row"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the Expense Tracker page is loaded')\ndef step_given_expense_tracker_page_loaded(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)\n\n@given('the \\'Description\\' input field with data-testid \\'description-input\\' is visible')\ndef step_given_description_input_visible(context):\n    description_input = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='description-input']\"))\n    )\n    assert description_input.is_displayed(), \"Description input field is not visible\"\n    time.sleep(1)\n\n@when('the user leaves the \\'Description\\' input field with data-testid \\'description-input\\' empty')\ndef step_when_user_leaves_description_empty(context):\n    description_input = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='description-input']\")\n    description_input.clear()\n    time.sleep(1)\n\n@when('the user enters \"20\" into the \\'Amount\\' input field with data-testid \\'amount-input\\'')\ndef step_when_user_enters_amount(context):\n    amount_input = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='amount-input']\")\n    amount_input.clear()\n    amount_input.send_keys(\"20\")\n    time.sleep(1)\n\n@when('the user clicks the \\'Add Transaction\\' button with data-testid \\'add-transaction-button\\'')\ndef step_when_user_clicks_add_transaction(context):\n    add_transaction_button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='add-transaction-button']\"))\n    )\n    add_transaction_button.click()\n    time.sleep(1)\n\n@then('an alert should be displayed with the message \"Please enter valid description and amount.\"')\ndef step_then_alert_displayed(context):\n    alert = WebDriverWait(context.driver, 10).until(EC.alert_is_present())\n    alert_text = alert.text\n    assert \"Please enter valid description and amount.\" in alert_text, f\"Unexpected alert message: {alert_text}\"\n    alert.accept()\n    time.sleep(1)\n\n@then('the transaction history with data-testid \\'transaction-list\\' should not display any new row')\ndef step_then_transaction_history_no_new_row(context):\n    transaction_list = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='transaction-list']\")\n    rows = transaction_list.find_elements(By.TAG_NAME, \"tr\")\n    assert len(rows) == 0, f\"Expected no new rows, but found {len(rows)}\"\n    time.sleep(1)\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                }
            ]
        },
        "3": {
            "requirement": {
                "description": "The user must be able to add transactions to the Expense Tracker by entering a description and a numerical amount in the respective input fields. The 'Description' input field, identified by data-testid 'description-input', must accept any text input. The 'Amount' input field, identified by data-testid 'amount-input', must accept numerical input, where positive values indicate income and negative values indicate expenses. Upon clicking the 'Add Transaction' button, identified by data-testid 'add-transaction-button', the transaction should be added to the transaction list, identified by data-testid 'transaction-list'. The transaction list should display the transaction with the entered description, amount formatted as currency (e.g., '$100.00' for income and '-$50.00' for expenses), and the current date. If the 'Amount' input field is left empty or contains invalid data, an alert should be displayed with the message 'Please enter valid description and amount.' The application must update the balance, income, and expense totals accordingly, reflecting the changes in the respective elements identified by data-testid 'balance', 'income', and 'expense'. All transactions must be stored in localStorage under the key 'transactions', ensuring persistence across sessions."
            },
            "test_cases": [
                {
                    "test_case": [
                        "Feature: Transaction Amount Input\n  The user must be able to enter a transaction amount in the 'Amount' input field. The system must accept numerical input, where positive values indicate income and negative values indicate expenses.\n\n\nScenario: [Normal] User enters a positive amount as income\n    Given the Expense Tracker page is loaded\n    And the user enters \"Grocery Shopping\" into the 'Description' input field with data-testid 'description-input'\n    And the 'Amount' input field with data-testid 'amount-input' is visible\n    When the user enters '100' into the 'Amount' input field with data-testid 'amount-input'\n    And the user clicks the 'Add Transaction' button with data-testid 'add-transaction-button'\n    Then the transaction list with data-testid 'transaction-list' should include a transaction with amount '$100.00'"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the Expense Tracker page is loaded')\ndef step_impl(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)\n\n@given('the user enters \"Grocery Shopping\" into the \\'Description\\' input field with data-testid \\'description-input\\'')\ndef step_impl(context):\n    description_input = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='description-input']\"))\n    )\n    description_input.clear()\n    description_input.send_keys(\"Grocery Shopping\")\n    time.sleep(1)\n\n@given('the \\'Amount\\' input field with data-testid \\'amount-input\\' is visible')\ndef step_impl(context):\n    amount_input = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='amount-input']\"))\n    )\n    assert amount_input.is_displayed(), \"Amount input field is not visible\"\n    time.sleep(1)\n\n@when('the user enters \\'100\\' into the \\'Amount\\' input field with data-testid \\'amount-input\\'')\ndef step_impl(context):\n    amount_input = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='amount-input']\")\n    amount_input.clear()\n    amount_input.send_keys(\"100\")\n    time.sleep(1)\n\n@when('the user clicks the \\'Add Transaction\\' button with data-testid \\'add-transaction-button\\'')\ndef step_impl(context):\n    add_transaction_button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='add-transaction-button']\"))\n    )\n    add_transaction_button.click()\n    time.sleep(1)\n\n@then('the transaction list with data-testid \\'transaction-list\\' should include a transaction with amount \\'$100.00\\'')\ndef step_impl(context):\n    transaction_list = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='transaction-list']\"))\n    )\n    transactions = transaction_list.find_elements(By.TAG_NAME, \"tr\")\n    found = False\n    for transaction in transactions:\n        if \"100.00\" in transaction.text:\n            found = True\n            break\n    assert found, \"Transaction with amount '$100.00' not found in the transaction list\"\n    time.sleep(1)\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: Transaction Amount Input\n  The user must be able to enter a transaction amount in the 'Amount' input field. The system must accept numerical input, where positive values indicate income and negative values indicate expenses.\n\n\nScenario: [Normal] User enters a negative amount as expense\n    Given the Expense Tracker page is loaded \n    And the user enters \"Grocery Shopping\" into the 'Description' input field with data-testid 'description-input'\n    And the 'Amount' input field with data-testid 'amount-input' is visible\n    When the user enters '-50' into the 'Amount' input field with data-testid 'amount-input'\n    And the user clicks the 'Add Transaction' button with data-testid 'add-transaction-button'\n    Then the transaction list with data-testid 'transaction-list' should include a transaction with amount '-$50.00'"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the Expense Tracker page is loaded')\ndef step_given_expense_tracker_page_loaded(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)\n\n@given('the user enters \"Grocery Shopping\" into the \\'Description\\' input field with data-testid \\'description-input\\'')\ndef step_given_user_enters_description(context):\n    description_input = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='description-input']\"))\n    )\n    description_input.clear()\n    description_input.send_keys(\"Grocery Shopping\")\n    time.sleep(1)\n\n@given('the \\'Amount\\' input field with data-testid \\'amount-input\\' is visible')\ndef step_given_amount_input_visible(context):\n    amount_input = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='amount-input']\"))\n    )\n    assert amount_input.is_displayed(), \"Amount input field is not visible\"\n    time.sleep(1)\n\n@when('the user enters \\'-50\\' into the \\'Amount\\' input field with data-testid \\'amount-input\\'')\ndef step_when_user_enters_amount(context):\n    amount_input = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='amount-input']\")\n    amount_input.clear()\n    amount_input.send_keys(\"-50\")\n    time.sleep(1)\n\n@when('the user clicks the \\'Add Transaction\\' button with data-testid \\'add-transaction-button\\'')\ndef step_when_user_clicks_add_transaction(context):\n    add_transaction_button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='add-transaction-button']\"))\n    )\n    add_transaction_button.click()\n    time.sleep(1)\n\n@then(\"the transaction list with data-testid 'transaction-list' should include a transaction with amount '-$50.00'\")\ndef step_then_transaction_list_includes_amount(context):\n    transaction_list = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='transaction-list']\"))\n    )\n    transactions = transaction_list.find_elements(By.TAG_NAME, \"tr\")\n    found = False\n    for transaction in transactions:\n        amount_cell = transaction.find_elements(By.TAG_NAME, \"td\")[2]  # Assuming the amount is in the third column\n        if \"50.00\" in amount_cell.text and \"-\" in amount_cell.text:\n            found = True\n            break\n    assert found, \"Transaction with amount '-$50.00' not found in the transaction list\"\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: Transaction Amount Input\n  The user must be able to enter a transaction amount in the 'Amount' input field. The system must accept numerical input, where positive values indicate income and negative values indicate expenses.\n\n\nScenario: [Error] User leaves the amount field empty\n    Given the Expense Tracker page is loaded\n    And the user enters \"Grocery Shopping\" into the 'Description' input field with data-testid 'description-input'\n    And the 'Amount' input field with data-testid 'amount-input' is visible\n    When the user leaves the 'Amount' input field with data-testid 'amount-input' empty\n    And the user clicks the 'Add Transaction' button with data-testid 'add-transaction-button'\n    Then an alert should be displayed with the message 'Please enter valid description and amount.'"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the Expense Tracker page is loaded')\ndef step_given_expense_tracker_page_loaded(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)\n\n@given('the user enters \"Grocery Shopping\" into the \\'Description\\' input field with data-testid \\'description-input\\'')\ndef step_given_user_enters_description(context):\n    description_input = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='description-input']\"))\n    )\n    description_input.send_keys(\"Grocery Shopping\")\n    time.sleep(1)\n\n@given('the \\'Amount\\' input field with data-testid \\'amount-input\\' is visible')\ndef step_given_amount_input_visible(context):\n    amount_input = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='amount-input']\"))\n    )\n    assert amount_input.is_displayed(), \"Amount input field is not visible\"\n    time.sleep(1)\n\n@when('the user leaves the \\'Amount\\' input field with data-testid \\'amount-input\\' empty')\ndef step_when_user_leaves_amount_empty(context):\n    amount_input = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='amount-input']\")\n    amount_input.clear()\n    time.sleep(1)\n\n@when('the user clicks the \\'Add Transaction\\' button with data-testid \\'add-transaction-button\\'')\ndef step_when_user_clicks_add_transaction(context):\n    add_transaction_button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='add-transaction-button']\"))\n    )\n    add_transaction_button.click()\n    time.sleep(1)\n\n@then('an alert should be displayed with the message \\'Please enter valid description and amount.\\'')\ndef step_then_alert_displayed(context):\n    alert = WebDriverWait(context.driver, 10).until(EC.alert_is_present())\n    alert_text = alert.text\n    assert \"Please enter valid description and amount.\" in alert_text, f\"Unexpected alert message: {alert_text}\"\n    alert.accept()\n    time.sleep(1)\n    context.driver.quit()"
                }
            ]
        },
        "5": {
            "requirement": {
                "description": "The Expense Tracker web application must allow users to add transactions by entering a description and an amount into designated input fields with data-testid attributes 'description-input' and 'amount-input'. Upon clicking the 'Add Transaction' button with data-testid 'add-transaction-button', the system must validate that both fields are correctly filled: the description must be a non-empty string, and the amount must be a valid number (positive for income, negative for expenses, zero is allowed). If validation passes, the transaction is added to the transaction history table with data-testid 'transaction-list', displaying the date, description, and formatted amount. The system must update the balance (data-testid 'balance'), income (data-testid 'income'), and expense (data-testid 'expense') values accordingly. The balance should reflect the net total of all transactions, income should sum all positive amounts, and expenses should sum all negative amounts (displayed as positive values). After a successful transaction addition, the input fields must be cleared. All transactions must be stored in localStorage under the key 'transactions' to persist data across sessions. If validation fails, an alert must notify the user to enter valid data without adding the transaction."
            },
            "test_cases": [
                {
                    "test_case": [
                        "Feature: Transaction Addition and UI Update\n  The system must add the transaction to the transaction history, update the balance, income, and expense values, and clear the input fields upon successful validation.\n\n\n  Scenario: [Normal] Add a valid income transaction\n    Given the Expense Tracker page is loaded\n    And the description input with data-testid \"description-input\" is empty\n    And the amount input with data-testid \"amount-input\" is empty\n    When the user enters \"Salary\" into the description input with data-testid \"description-input\"\n    And the user enters \"1000\" into the amount input with data-testid \"amount-input\"\n    And the user clicks the add transaction button with data-testid \"add-transaction-button\"\n    Then the transaction list with data-testid \"transaction-list\" should contain a transaction with description \"Salary\" and amount \"$1000.00\"\n    And the balance with data-testid \"balance\" should display \"$1000.00\"\n    And the income with data-testid \"income\" should display \"$1000.00\"\n    And the expense with data-testid \"expense\" should display \"$0.00\"\n    And the description input with data-testid \"description-input\" should be empty\n    And the amount input with data-testid \"amount-input\" should be empty\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the Expense Tracker page is loaded')\ndef step_given_expense_tracker_page_loaded(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)\n\n@given('the description input with data-testid \"description-input\" is empty')\ndef step_given_description_input_empty(context):\n    description_input = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='description-input']\"))\n    )\n    assert description_input.get_attribute('value') == \"\", \"Description input is not empty\"\n    time.sleep(1)\n\n@given('the amount input with data-testid \"amount-input\" is empty')\ndef step_given_amount_input_empty(context):\n    amount_input = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='amount-input']\"))\n    )\n    assert amount_input.get_attribute('value') == \"\", \"Amount input is not empty\"\n    time.sleep(1)\n\n@when('the user enters \"Salary\" into the description input with data-testid \"description-input\"')\ndef step_when_user_enters_description(context):\n    description_input = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='description-input']\"))\n    )\n    description_input.send_keys(\"Salary\")\n    time.sleep(1)\n\n@when('the user enters \"1000\" into the amount input with data-testid \"amount-input\"')\ndef step_when_user_enters_amount(context):\n    amount_input = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='amount-input']\"))\n    )\n    amount_input.send_keys(\"1000\")\n    time.sleep(1)\n\n@when('the user clicks the add transaction button with data-testid \"add-transaction-button\"')\ndef step_when_user_clicks_add_transaction(context):\n    add_transaction_button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='add-transaction-button']\"))\n    )\n    add_transaction_button.click()\n    time.sleep(1)\n\n@then('the transaction list with data-testid \"transaction-list\" should contain a transaction with description \"Salary\" and amount \"$1000.00\"')\ndef step_then_transaction_list_contains(context):\n    transaction_list = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='transaction-list']\"))\n    )\n    transactions = transaction_list.find_elements(By.TAG_NAME, \"tr\")\n    found = False\n    for transaction in transactions:\n        if \"Salary\" in transaction.text and \"$1000.00\" in transaction.text:\n            found = True\n            break\n    assert found, \"Transaction with description 'Salary' and amount '$1000.00' not found\"\n    time.sleep(1)\n\n@then('the balance with data-testid \"balance\" should display \"$1000.00\"')\ndef step_then_balance_display(context):\n    balance = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='balance']\"))\n    )\n    assert \"$1000.00\" in balance.text, f\"Expected balance to be '$1000.00', but got '{balance.text}'\"\n    time.sleep(1)\n\n@then('the income with data-testid \"income\" should display \"$1000.00\"')\ndef step_then_income_display(context):\n    income = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='income']\"))\n    )\n    assert \"$1000.00\" in income.text, f\"Expected income to be '$1000.00', but got '{income.text}'\"\n    time.sleep(1)\n\n@then('the expense with data-testid \"expense\" should display \"$0.00\"')\ndef step_then_expense_display(context):\n    expense = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='expense']\"))\n    )\n    assert \"$0.00\" in expense.text, f\"Expected expense to be '$0.00', but got '{expense.text}'\"\n    time.sleep(1)\n\n@then('the description input with data-testid \"description-input\" should be empty')\ndef step_then_description_input_empty(context):\n    description_input = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='description-input']\"))\n    )\n    assert description_input.get_attribute('value') == \"\", \"Description input is not empty after transaction\"\n    time.sleep(1)\n\n@then('the amount input with data-testid \"amount-input\" should be empty')\ndef step_then_amount_input_empty(context):\n    amount_input = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='amount-input']\"))\n    )\n    assert amount_input.get_attribute('value') == \"\", \"Amount input is not empty after transaction\"\n    time.sleep(1)\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: Transaction Addition and UI Update\n  The system must add the transaction to the transaction history, update the balance, income, and expense values, and clear the input fields upon successful validation.\n\n\n  Scenario: [Normal] Add a valid expense transaction\n    Given the Expense Tracker page is loaded\n    And the description input with data-testid \"description-input\" is empty\n    And the amount input with data-testid \"amount-input\" is empty\n    When the user enters \"Groceries\" into the description input with data-testid \"description-input\"\n    And the user enters \"-200\" into the amount input with data-testid \"amount-input\"\n    And the user clicks the add transaction button with data-testid \"add-transaction-button\"\n    Then the transaction list with data-testid \"transaction-list\" should contain a transaction with description \"Groceries\" and amount \"$-200.00\"\n    And the balance with data-testid \"balance\" should display \"$-200.00\"\n    And the income with data-testid \"income\" should display \"$0.00\"\n    And the expense with data-testid \"expense\" should display \"$200.00\"\n    And the description input with data-testid \"description-input\" should be empty\n    And the amount input with data-testid \"amount-input\" should be empty\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the Expense Tracker page is loaded')\ndef step_given_expense_tracker_page_loaded(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)\n\n@given('the description input with data-testid \"description-input\" is empty')\ndef step_given_description_input_empty(context):\n    description_input = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='description-input']\")\n    assert description_input.get_attribute('value') == \"\", \"Description input is not empty\"\n\n@given('the amount input with data-testid \"amount-input\" is empty')\ndef step_given_amount_input_empty(context):\n    amount_input = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='amount-input']\")\n    assert amount_input.get_attribute('value') == \"\", \"Amount input is not empty\"\n\n@when('the user enters \"Groceries\" into the description input with data-testid \"description-input\"')\ndef step_when_user_enters_description(context):\n    description_input = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='description-input']\")\n    description_input.clear()\n    description_input.send_keys(\"Groceries\")\n    time.sleep(1)\n\n@when('the user enters \"-200\" into the amount input with data-testid \"amount-input\"')\ndef step_when_user_enters_amount(context):\n    amount_input = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='amount-input']\")\n    amount_input.clear()\n    amount_input.send_keys(\"-200\")\n    time.sleep(1)\n\n@when('the user clicks the add transaction button with data-testid \"add-transaction-button\"')\ndef step_when_user_clicks_add_transaction(context):\n    add_transaction_button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='add-transaction-button']\"))\n    )\n    add_transaction_button.click()\n    time.sleep(1)\n\n@then('the transaction list with data-testid \"transaction-list\" should contain a transaction with description \"Groceries\" and amount \"$-200.00\"')\ndef step_then_transaction_list_contains(context):\n    transaction_list = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='transaction-list']\")\n    transactions = transaction_list.find_elements(By.TAG_NAME, \"tr\")\n    found = False\n    for transaction in transactions:\n        if \"Groceries\" in transaction.text and \"$-200.00\" in transaction.text:\n            found = True\n            break\n    assert found, \"Transaction with description 'Groceries' and amount '$-200.00' not found\"\n\n@then('the balance with data-testid \"balance\" should display \"$-200.00\"')\ndef step_then_balance_display(context):\n    balance = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='balance']\")\n    assert balance.text.strip() == \"$-200.00\", f\"Expected balance '$-200.00', but got '{balance.text.strip()}'\"\n\n@then('the income with data-testid \"income\" should display \"$0.00\"')\ndef step_then_income_display(context):\n    income = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='income']\")\n    assert income.text.strip() == \"$0.00\", f\"Expected income '$0.00', but got '{income.text.strip()}'\"\n\n@then('the expense with data-testid \"expense\" should display \"$200.00\"')\ndef step_then_expense_display(context):\n    expense = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='expense']\")\n    assert expense.text.strip() == \"$200.00\", f\"Expected expense '$200.00', but got '{expense.text.strip()}'\"\n\n@then('the description input with data-testid \"description-input\" should be empty')\ndef step_then_description_input_empty(context):\n    description_input = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='description-input']\")\n    assert description_input.get_attribute('value') == \"\", \"Description input is not empty after transaction\"\n\n@then('the amount input with data-testid \"amount-input\" should be empty')\ndef step_then_amount_input_empty(context):\n    amount_input = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='amount-input']\")\n    assert amount_input.get_attribute('value') == \"\", \"Amount input is not empty after transaction\"\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: Transaction Addition and UI Update\n  The system must add the transaction to the transaction history, update the balance, income, and expense values, and clear the input fields upon successful validation.\n\n\nScenario: [Edge] Add a transaction with zero amount\n  Given the Expense Tracker page is loaded\n  And the description input with data-testid \"description-input\" is empty\n  And the amount input with data-testid \"amount-input\" is empty\n  When the user enters \"Salary\" into the description input with data-testid \"description-input\"\n  And the user enters \"1000\" into the amount input with data-testid \"amount-input\"\n  And the user clicks the add transaction button with data-testid \"add-transaction-button\"\n  And the user enters \"Groceries\" into the description input with data-testid \"description-input\"\n  And the user enters \"-200\" into the amount input with data-testid \"amount-input\"\n  And the user clicks the add transaction button with data-testid \"add-transaction-button\"\n  When the user enters \"Gift\" into the description input with data-testid \"description-input\"\n  And the user enters \"0\" into the amount input with data-testid \"amount-input\"\n  And the user clicks the add transaction button with data-testid \"add-transaction-button\"\n  Then the transaction list with data-testid \"transaction-list\" should contain a transaction with description \"Gift\" and amount \"$0.00\"\n  And the balance with data-testid \"balance\" should remain \"$800.00\"\n  And the income with data-testid \"income\" should remain \"$1000.00\"\n  And the expense with data-testid \"expense\" should remain \"$200.00\"\n  And the description input with data-testid \"description-input\" should be empty\n  And the amount input with data-testid \"amount-input\" should be empty"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the Expense Tracker page is loaded')\ndef step_given_expense_tracker_page_loaded(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)\n\n@given('the description input with data-testid \"description-input\" is empty')\ndef step_given_description_input_empty(context):\n    description_input = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='description-input']\")\n    assert description_input.get_attribute('value') == '', \"Description input is not empty\"\n\n@given('the amount input with data-testid \"amount-input\" is empty')\ndef step_given_amount_input_empty(context):\n    amount_input = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='amount-input']\")\n    assert amount_input.get_attribute('value') == '', \"Amount input is not empty\"\n\n@when('the user enters \"{description}\" into the description input with data-testid \"description-input\"')\ndef step_when_user_enters_description(context, description):\n    description_input = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='description-input']\")\n    description_input.clear()\n    description_input.send_keys(description)\n    time.sleep(1)\n\n@when('the user enters \"{amount}\" into the amount input with data-testid \"amount-input\"')\ndef step_when_user_enters_amount(context, amount):\n    amount_input = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='amount-input']\")\n    amount_input.clear()\n    amount_input.send_keys(amount)\n    time.sleep(1)\n\n@when('the user clicks the add transaction button with data-testid \"add-transaction-button\"')\ndef step_when_user_clicks_add_transaction_button(context):\n    add_transaction_button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='add-transaction-button']\"))\n    )\n    add_transaction_button.click()\n    time.sleep(1)\n\n@then('the transaction list with data-testid \"transaction-list\" should contain a transaction with description \"{description}\" and amount \"{amount}\"')\ndef step_then_transaction_list_contains(context, description, amount):\n    transaction_list = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='transaction-list']\")\n    transactions = transaction_list.find_elements(By.TAG_NAME, 'tr')\n    found = False\n    for transaction in transactions:\n        if description in transaction.text and amount in transaction.text:\n            found = True\n            break\n    assert found, f\"Transaction with description '{description}' and amount '{amount}' not found\"\n\n@then('the balance with data-testid \"balance\" should remain \"{balance}\"')\ndef step_then_balance_remains(context, balance):\n    balance_element = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='balance']\")\n    assert balance_element.text.strip() == balance, f\"Expected balance '{balance}', but got '{balance_element.text.strip()}'\"\n\n@then('the income with data-testid \"income\" should remain \"{income}\"')\ndef step_then_income_remains(context, income):\n    income_element = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='income']\")\n    assert income_element.text.strip() == income, f\"Expected income '{income}', but got '{income_element.text.strip()}'\"\n\n@then('the expense with data-testid \"expense\" should remain \"{expense}\"')\ndef step_then_expense_remains(context, expense):\n    expense_element = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='expense']\")\n    assert expense_element.text.strip() == expense, f\"Expected expense '{expense}', but got '{expense_element.text.strip()}'\"\n\n@then('the description input with data-testid \"description-input\" should be empty')\ndef step_then_description_input_empty(context):\n    description_input = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='description-input']\")\n    assert description_input.get_attribute('value') == '', \"Description input is not empty\"\n\n@then('the amount input with data-testid \"amount-input\" should be empty')\ndef step_then_amount_input_empty(context):\n    amount_input = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='amount-input']\")\n    assert amount_input.get_attribute('value') == '', \"Amount input is not empty\"\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                }
            ]
        },
        "6": {
            "requirement": {
                "description": "The system must allow users to add transactions to the transaction history by entering a description and an amount in the respective input fields with data-testid 'description-input' and 'amount-input'. Upon clicking the 'Add Transaction' button with data-testid 'add-transaction-button', the transaction should be appended to the transaction list with data-testid 'transaction-list'. Each transaction entry must display the date (in YYYY-MM-DD format), the description, and the amount formatted as currency (e.g., '$1000.00' for positive amounts and '$-150.00' for negative amounts). Additionally, each transaction entry must include a remove button that allows users to delete the transaction from the list. The system should update the balance, income, and expense totals displayed in elements with data-testid 'balance', 'income', and 'expense', respectively, whenever a transaction is added or removed. All transactions must be stored in localStorage under the key 'transactions' to persist data across sessions."
            },
            "test_cases": [
                {
                    "test_case": [
                        "Feature: Display Transaction History\n  The system must display each transaction in the transaction history with the date, description, amount, and an option to remove the transaction.\n\n\n  Scenario: [Normal] Display transaction in history after adding\n    Given the Expense Tracker page is loaded\n    And the transaction list is empty\n    When the user enters \"Salary\" into the description field with data-testid \"description-input\"\n    And the user enters \"1000\" into the amount field with data-testid \"amount-input\"\n    And the user clicks the \"Add Transaction\" button with data-testid \"add-transaction-button\"\n    Then the transaction list with data-testid \"transaction-list\" should display a row with date, description \"Salary\", amount \"$1000.00\", and a remove button\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the Expense Tracker page is loaded')\ndef step_given_expense_tracker_page_loaded(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)\n\n@given('the transaction list is empty')\ndef step_given_transaction_list_is_empty(context):\n    transaction_list = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='transaction-list']\")\n    assert transaction_list.text.strip() == \"\", \"Transaction list is not empty\"\n\n@when('the user enters \"{description}\" into the description field with data-testid \"description-input\"')\ndef step_when_user_enters_description(context, description):\n    description_input = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='description-input']\"))\n    )\n    description_input.clear()\n    description_input.send_keys(description)\n    time.sleep(1)\n\n@when('the user enters \"{amount}\" into the amount field with data-testid \"amount-input\"')\ndef step_when_user_enters_amount(context, amount):\n    amount_input = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='amount-input']\"))\n    )\n    amount_input.clear()\n    amount_input.send_keys(amount)\n    time.sleep(1)\n\n@when('the user clicks the \"Add Transaction\" button with data-testid \"add-transaction-button\"')\ndef step_when_user_clicks_add_transaction_button(context):\n    add_transaction_button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='add-transaction-button']\"))\n    )\n    add_transaction_button.click()\n    time.sleep(1)\n\n@then('the transaction list with data-testid \"transaction-list\" should display a row with date, description \"{description}\", amount \"${amount}.00\", and a remove button')\ndef step_then_transaction_list_should_display_row(context, description, amount):\n    transaction_list = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='transaction-list']\"))\n    )\n    rows = transaction_list.find_elements(By.TAG_NAME, \"tr\")\n    assert len(rows) > 0, \"No transactions found in the list\"\n\n    # Check the last transaction added\n    last_transaction = rows[-1]\n    cells = last_transaction.find_elements(By.TAG_NAME, \"td\")\n    assert len(cells) == 4, \"Transaction row does not have 4 cells\"\n\n    # Validate date, description, amount, and remove button\n    date = cells[0].text.strip()\n    assert date, \"Date is missing in the transaction row\"\n\n    actual_description = cells[1].text.strip()\n    assert description.lower() in actual_description.lower(), f\"Expected description '{description}' but got '{actual_description}'\"\n\n    actual_amount = cells[2].text.strip()\n    expected_amount = f\"${amount}.00\"\n    assert expected_amount in actual_amount, f\"Expected amount '{expected_amount}' but got '{actual_amount}'\"\n\n    remove_button = cells[3].find_element(By.TAG_NAME, \"button\")\n    assert remove_button, \"Remove button is missing in the transaction row\"\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: Display Transaction History\n  The system must display each transaction in the transaction history with the date, description, amount, and an option to remove the transaction.\n\n\nScenario: [Edge] Display transaction with negative amount in history\n    Given the Expense Tracker page is loaded\n    And the transaction list is empty\n    When the user enters \"Groceries\" into the description field with data-testid \"description-input\"\n    And the user enters \"-150\" into the amount field with data-testid \"amount-input\"\n    And the user clicks the \"Add Transaction\" button with data-testid \"add-transaction-button\"\n    Then the transaction list with data-testid \"transaction-list\" should display a row with date, description \"Groceries\", amount “$-150.00\", and a remove button"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the Expense Tracker page is loaded')\ndef step_given_expense_tracker_page_loaded(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)\n\n@given('the transaction list is empty')\ndef step_given_transaction_list_empty(context):\n    transaction_list = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='transaction-list']\")\n    assert transaction_list.text.strip() == \"\", \"Expected transaction list to be empty\"\n\n@when('the user enters \"Groceries\" into the description field with data-testid \"description-input\"')\ndef step_when_user_enters_description(context):\n    description_input = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='description-input']\"))\n    )\n    description_input.clear()\n    description_input.send_keys(\"Groceries\")\n    time.sleep(1)\n\n@when('the user enters \"-150\" into the amount field with data-testid \"amount-input\"')\ndef step_when_user_enters_amount(context):\n    amount_input = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='amount-input']\"))\n    )\n    amount_input.clear()\n    amount_input.send_keys(\"-150\")\n    time.sleep(1)\n\n@when('the user clicks the \"Add Transaction\" button with data-testid \"add-transaction-button\"')\ndef step_when_user_clicks_add_transaction(context):\n    add_transaction_button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='add-transaction-button']\"))\n    )\n    add_transaction_button.click()\n    time.sleep(1)\n\n@then('the transaction list with data-testid \"transaction-list\" should display a row with date, description \"Groceries\", amount “$-150.00\", and a remove button')\ndef step_then_transaction_list_displays_row(context):\n    transaction_list = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='transaction-list']\"))\n    )\n    rows = transaction_list.find_elements(By.TAG_NAME, \"tr\")\n    assert len(rows) > 0, \"Expected at least one transaction in the list\"\n\n    # Check the last transaction added\n    last_row = rows[-1]\n    cells = last_row.find_elements(By.TAG_NAME, \"td\")\n    assert len(cells) == 4, \"Expected 4 columns in the transaction row\"\n\n    date, description, amount, action = cells\n    assert description.text.strip().lower() == \"groceries\", f\"Expected description 'Groceries', but got '{description.text}'\"\n    assert amount.text.strip() == \"$-150.00\", f\"Expected amount '$-150.00', but got '{amount.text}'\"\n    assert action.find_element(By.TAG_NAME, \"button\").is_displayed(), \"Expected a remove button\"\n\n    # Close the driver\n    context.driver.quit()"
                }
            ]
        },
        "7": {
            "requirement": {
                "description": "The Expense Tracker application must allow users to remove transactions from the transaction history by clicking the 'X' button next to a transaction. Upon clicking, the system should remove the transaction from the DOM, update the displayed balance, income, and expense values accordingly, and ensure these changes are reflected in the local storage. Specifically, the transaction list should be updated by removing the corresponding <tr> element, and the balance, income, and expense elements identified by data-testid attributes ('balance', 'income', 'expense') should display the recalculated values. The local storage key 'transactions' must be updated to exclude the removed transaction, ensuring persistence of the current state. This functionality should handle normal scenarios where multiple transactions exist, as well as edge cases where the transaction history contains only one transaction, resulting in an empty transaction list and zeroed financial values."
            },
            "test_cases": [
                {
                    "test_case": [
                        "Feature: Transaction Removal\n  The system must allow users to remove transactions from the transaction history, update the balance, income, and expense values, and update the local storage accordingly.\n\n\n  Scenario: [Normal] Remove a transaction successfully\n    Given the Expense Tracker page is loaded\n    And a transaction with description \"Lunch\" and amount \"-15.00\" exists in the transaction history\n    When the user clicks the 'X' button next to the transaction with description \"Lunch\"\n    Then the transaction with description \"Lunch\" should be removed from the transaction history\n    And the balance, income, and expense values should be updated correctly\n    And the local storage should not contain the transaction with description \"Lunch\"\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the Expense Tracker page is loaded')\ndef step_given_expense_tracker_page_loaded(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)\n\n@given('a transaction with description \"Lunch\" and amount \"-15.00\" exists in the transaction history')\ndef step_given_transaction_exists(context):\n    # Add a transaction with description \"Lunch\" and amount \"-15.00\"\n    description_input = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='description-input']\"))\n    )\n    amount_input = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='amount-input']\")\n    add_button = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='add-transaction-button']\")\n\n    description_input.send_keys(\"Lunch\")\n    amount_input.send_keys(\"-15.00\")\n    add_button.click()\n    time.sleep(1)\n\n@when('the user clicks the \\'X\\' button next to the transaction with description \"Lunch\"')\ndef step_when_user_clicks_remove_transaction(context):\n    # Find the 'X' button for the transaction with description \"Lunch\" and click it\n    transaction_list = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='transaction-list']\"))\n    )\n    remove_button = transaction_list.find_element(By.XPATH, \"//td[text()='Lunch']/following-sibling::td/button\")\n    remove_button.click()\n    time.sleep(1)\n\n@then('the transaction with description \"Lunch\" should be removed from the transaction history')\ndef step_then_transaction_removed(context):\n    transaction_list = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='transaction-list']\")\n    transactions = transaction_list.find_elements(By.XPATH, \"//td[text()='Lunch']\")\n    assert len(transactions) == 0, \"Transaction with description 'Lunch' was not removed\"\n\n@then('the balance, income, and expense values should be updated correctly')\ndef step_then_values_updated_correctly(context):\n    balance = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='balance']\").text\n    income = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='income']\").text\n    expense = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='expense']\").text\n\n    assert balance == \"$0.00\", f\"Expected balance to be '$0.00', but got '{balance}'\"\n    assert income == \"$0.00\", f\"Expected income to be '$0.00', but got '{income}'\"\n    assert expense == \"$0.00\", f\"Expected expense to be '$0.00', but got '{expense}'\"\n\n@then('the local storage should not contain the transaction with description \"Lunch\"')\ndef step_then_local_storage_updated(context):\n    transactions = context.driver.execute_script(\"return JSON.parse(localStorage.getItem('transactions'))\")\n    assert all(transaction['text'] != \"Lunch\" for transaction in transactions), \"Local storage still contains the transaction with description 'Lunch'\"\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: Transaction Removal\n  The system must allow users to remove transactions from the transaction history, update the balance, income, and expense values, and update the local storage accordingly.\n\n\n  Scenario: [Edge] Remove the only transaction in the history\n    Given the Expense Tracker page is loaded\n    And a single transaction with description \"Salary\" and amount \"1000.00\" exists in the transaction history\n    When the user clicks the 'X' button next to the transaction with description \"Salary\"\n    Then the transaction history should be empty\n    And the balance should be \"$0.00\"\n    And the income should be \"$0.00\"\n    And the expense should be \"$0.00\"\n    And the local storage should be empty\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\nimport json\n\nfile_path = \"index.html\"\n\ndef load_transactions(driver):\n    # Load transactions from local storage\n    transactions = [\n        {\n            \"id\": 1,\n            \"text\": \"Salary\",\n            \"amount\": 1000.00,\n            \"date\": \"2023-10-01\"\n        }\n    ]\n    driver.execute_script(\"window.localStorage.setItem('transactions', arguments[0]);\", json.dumps(transactions))\n\n@given('the Expense Tracker page is loaded')\ndef step_given_expense_tracker_page_loaded(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)\n\n@given('a single transaction with description \"Salary\" and amount \"1000.00\" exists in the transaction history')\ndef step_given_single_transaction_exists(context):\n    load_transactions(context.driver)\n    context.driver.refresh()\n    time.sleep(1)\n\n@when('the user clicks the \\'X\\' button next to the transaction with description \"Salary\"')\ndef step_when_user_clicks_remove_transaction(context):\n    remove_button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.XPATH, \"//td[text()='Salary']/following-sibling::td/button\"))\n    )\n    remove_button.click()\n    time.sleep(1)\n\n@then('the transaction history should be empty')\ndef step_then_transaction_history_empty(context):\n    transaction_list = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='transaction-list']\")\n    assert transaction_list.text.strip() == \"\", \"Expected transaction history to be empty\"\n\n@then('the balance should be \"$0.00\"')\ndef step_then_balance_should_be_zero(context):\n    balance = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='balance']\")\n    assert balance.text.strip() == \"$0.00\", f\"Expected balance to be '$0.00', but got '{balance.text.strip()}'\"\n\n@then('the income should be \"$0.00\"')\ndef step_then_income_should_be_zero(context):\n    income = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='income']\")\n    assert income.text.strip() == \"$0.00\", f\"Expected income to be '$0.00', but got '{income.text.strip()}'\"\n\n@then('the expense should be \"$0.00\"')\ndef step_then_expense_should_be_zero(context):\n    expense = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='expense']\")\n    assert expense.text.strip() == \"$0.00\", f\"Expected expense to be '$0.00', but got '{expense.text.strip()}'\"\n\n@then('the local storage should be empty')\ndef step_then_local_storage_empty(context):\n    transactions = context.driver.execute_script(\"return window.localStorage.getItem('transactions');\")\n    assert transactions == \"[]\", f\"Expected local storage to be empty, but got '{transactions}'\"\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                }
            ]
        },
        "8": {
            "requirement": {
                "description": "The Expense Tracker web application must ensure that all transactions are stored in localStorage under the key 'transactions' to maintain data persistence across page reloads. When the page is loaded, the application must retrieve the stored transactions from localStorage and display them in the transaction list, identified by the data-testid 'transaction-list'. Users must be able to add transactions by entering a description in the input field with data-testid 'description-input' and an amount in the input field with data-testid 'amount-input'. Upon clicking the 'Add Transaction' button with data-testid 'add-transaction-button', the transaction should be added to the list and stored in localStorage. The transaction list must accurately reflect the stored transactions, displaying the description, amount formatted as currency, and the date of the transaction. The balance, income, and expense totals must be updated accordingly and displayed using elements with data-testids 'balance', 'income', and 'expense'. The application must handle edge cases, such as negative amounts for expenses, and ensure that transactions are correctly formatted and persisted."
            },
            "test_cases": [
                {
                    "test_case": [
                        "Feature: Transaction Persistence in Local Storage\n  The system must store all transactions in local storage to ensure data persistence across page reloads. Upon loading the application, the system must retrieve and display stored transactions.\n\n\nScenario: [Normal] Store and retrieve transactions from local storage after page reload\n  Given the Expense Tracker page is loaded\n  And the user enters \"Salary\" into the description field with data-testid \"description-input\"\n  And the user enters \"1000\" into the amount field with data-testid \"amount-input\"\n  When the user clicks the \"Add Transaction\" button with data-testid \"add-transaction-button\"\n  And the user reloads the page\n  Then the transaction list with data-testid \"transaction-list\" should contain a transaction with description \"Salary\" and amount \"$1000.00\"\n  And the local storage should contain the transaction with description \"Salary\" and amount \"1000\""
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the Expense Tracker page is loaded')\ndef step_given_expense_tracker_page_loaded(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)\n\n@given('the user enters \"{description}\" into the description field with data-testid \"description-input\"')\ndef step_given_user_enters_description(context, description):\n    description_input = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='description-input']\"))\n    )\n    description_input.clear()\n    description_input.send_keys(description)\n    time.sleep(1)\n\n@given('the user enters \"{amount}\" into the amount field with data-testid \"amount-input\"')\ndef step_given_user_enters_amount(context, amount):\n    amount_input = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='amount-input']\"))\n    )\n    amount_input.clear()\n    amount_input.send_keys(amount)\n    time.sleep(1)\n\n@when('the user clicks the \"Add Transaction\" button with data-testid \"add-transaction-button\"')\ndef step_when_user_clicks_add_transaction(context):\n    add_transaction_button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='add-transaction-button']\"))\n    )\n    add_transaction_button.click()\n    time.sleep(1)\n\n@when('the user reloads the page')\ndef step_when_user_reloads_page(context):\n    context.driver.refresh()\n    time.sleep(1)\n\n@then('the transaction list with data-testid \"transaction-list\" should contain a transaction with description \"{description}\" and amount \"{amount}\"')\ndef step_then_transaction_list_contains(context, description, amount):\n    transaction_list = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='transaction-list']\"))\n    )\n    transactions = transaction_list.find_elements(By.TAG_NAME, \"tr\")\n    found = False\n    for transaction in transactions:\n        cells = transaction.find_elements(By.TAG_NAME, \"td\")\n        if len(cells) >= 3:\n            transaction_description = cells[1].text.strip()\n            transaction_amount = cells[2].text.strip()\n            if description.lower() in transaction_description.lower() and amount.lower() in transaction_amount.lower():\n                found = True\n                break\n    assert found, f\"Transaction with description '{description}' and amount '{amount}' not found.\"\n\n@then('the local storage should contain the transaction with description \"{description}\" and amount \"{amount}\"')\ndef step_then_local_storage_contains(context, description, amount):\n    transactions = context.driver.execute_script(\"return JSON.parse(localStorage.getItem('transactions')) || [];\")\n    found = False\n    for transaction in transactions:\n        if transaction['text'].lower() == description.lower() and str(transaction['amount']) == amount:\n            found = True\n            break\n    assert found, f\"Local storage does not contain transaction with description '{description}' and amount '{amount}'.\"\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: Transaction Persistence in Local Storage\n  The system must store all transactions in local storage to ensure data persistence across page reloads. Upon loading the application, the system must retrieve and display stored transactions.\n\n\n  Scenario: [Edge] Reload the page and verify transactions are persisted\n    Given the Expense Tracker page is loaded\n    And the local storage contains a transaction with description \"Groceries\" and amount \"-50\"\n    When the page is reloaded\n    Then the transaction list with data-testid \"transaction-list\" should contain a transaction with description \"Groceries\" and amount \"$-50.00\"\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\nimport json\n\nfile_path = \"index.html\"\n\n@given('the Expense Tracker page is loaded')\ndef step_given_expense_tracker_page_loaded(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)\n\n@given('the local storage contains a transaction with description \"{description}\" and amount \"{amount}\"')\ndef step_given_local_storage_contains_transaction(context, description, amount):\n    transaction = {\n        \"id\": int(time.time() * 1000),  # Unique ID based on current time\n        \"text\": description,\n        \"amount\": float(amount),\n        \"date\": \"2023-10-01\"  # Example date\n    }\n    transactions = [transaction]\n    context.driver.execute_script(f\"localStorage.setItem('transactions', '{json.dumps(transactions)}');\")\n    time.sleep(1)\n\n@when('the page is reloaded')\ndef step_when_page_is_reloaded(context):\n    context.driver.refresh()\n    time.sleep(1)\n\n@then('the transaction list with data-testid \"transaction-list\" should contain a transaction with description \"{description}\" and amount \"{amount}\"')\ndef step_then_transaction_list_should_contain(context, description, amount):\n    WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='transaction-list']\"))\n    )\n    transaction_list = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='transaction-list']\")\n    transactions = transaction_list.find_elements(By.TAG_NAME, \"tr\")\n    \n    found = False\n    for transaction in transactions:\n        cells = transaction.find_elements(By.TAG_NAME, \"td\")\n        if len(cells) >= 3:\n            desc = cells[1].text.strip()\n            amt = cells[2].text.strip()\n            if desc == description and amt == amount:\n                found = True\n                break\n    \n    assert found, f\"Transaction with description '{description}' and amount '{amount}' not found.\"\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                }
            ]
        }
    }
}