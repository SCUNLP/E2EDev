
    You are tasked with implementing a complete web application using HTML, JavaScript, and CSS. Your implementation must strictly follow the specifications described below.
    SUMMARY:
    {
    "overview": "The Expense Tracker application allows users to manage their personal finances by adding, viewing, and removing transactions. It displays the user's current balance, total income, and total expenses, and provides a transaction history.",
    "predefined_options": "The application initializes with a balance, income, and expense of $0.00. Transactions are stored in local storage to persist data across sessions.",
    "external_resources": "The application uses Google Fonts for styling: 'Poppins' font from https://fonts.googleapis.com/css2?family=Poppins:wght@400;600&display=swap.",
    "external_js_libraries": "No external JavaScript libraries are used in this application."
}
    ## Functional Requirements
    Implement the following features as described. For each requirement, make sure the HTML structure, JavaScript behavior, and CSS styles match the specifications exactly.
    REQUIREMENTS:
    - Requirement 1: 
Upon loading the Expense Tracker application, the system must initialize and display the financial summary with the current balance, total income, and total expenses all set to $0.00. This initialization should occur when there are no transactions stored in the local storage. The balance should be displayed in the element with data-testid 'balance', the income in the element with data-testid 'income', and the expenses in the element with data-testid 'expense'. The application must ensure these values are accurately retrieved and displayed from the local storage, defaulting to $0.00 if the storage is empty or contains no transactions.
- Requirement 2: 
The user must be able to enter a transaction description in the 'Description' input field with data-testid 'description-input'. The system must accept text input of any length, including very long descriptions, and display it in the transaction history table with data-testid 'transaction-list' upon adding a transaction. If the 'Description' input field is left empty, the system should display an alert with the message 'Please enter valid description and amount.' and prevent the transaction from being added to the transaction history. The user interaction involves entering a description and an amount in their respective input fields, and clicking the 'Add Transaction' button with data-testid 'add-transaction-button'. The transaction history should update to reflect the new transaction, showing the description, amount, and date of the transaction.
- Requirement 3: 
The user must be able to add transactions to the Expense Tracker by entering a description and a numerical amount in the respective input fields. The 'Description' input field, identified by data-testid 'description-input', must accept any text input. The 'Amount' input field, identified by data-testid 'amount-input', must accept numerical input, where positive values indicate income and negative values indicate expenses. Upon clicking the 'Add Transaction' button, identified by data-testid 'add-transaction-button', the transaction should be added to the transaction list, identified by data-testid 'transaction-list'. The transaction list should display the transaction with the entered description, amount formatted as currency (e.g., '$100.00' for income and '-$50.00' for expenses), and the current date. If the 'Amount' input field is left empty or contains invalid data, an alert should be displayed with the message 'Please enter valid description and amount.' The application must update the balance, income, and expense totals accordingly, reflecting the changes in the respective elements identified by data-testid 'balance', 'income', and 'expense'. All transactions must be stored in localStorage under the key 'transactions', ensuring persistence across sessions.
- Requirement 4: 
The Expense Tracker web application must allow users to add transactions by entering a description and an amount into designated input fields with data-testid attributes 'description-input' and 'amount-input'. Upon clicking the 'Add Transaction' button with data-testid 'add-transaction-button', the system must validate that both fields are correctly filled: the description must be a non-empty string, and the amount must be a valid number (positive for income, negative for expenses, zero is allowed). If validation passes, the transaction is added to the transaction history table with data-testid 'transaction-list', displaying the date, description, and formatted amount. The system must update the balance (data-testid 'balance'), income (data-testid 'income'), and expense (data-testid 'expense') values accordingly. The balance should reflect the net total of all transactions, income should sum all positive amounts, and expenses should sum all negative amounts (displayed as positive values). After a successful transaction addition, the input fields must be cleared. All transactions must be stored in localStorage under the key 'transactions' to persist data across sessions. If validation fails, an alert must notify the user to enter valid data without adding the transaction.
- Requirement 5: 
The system must allow users to add transactions to the transaction history by entering a description and an amount in the respective input fields with data-testid 'description-input' and 'amount-input'. Upon clicking the 'Add Transaction' button with data-testid 'add-transaction-button', the transaction should be appended to the transaction list with data-testid 'transaction-list'. Each transaction entry must display the date (in YYYY-MM-DD format), the description, and the amount formatted as currency (e.g., '$1000.00' for positive amounts and '$-150.00' for negative amounts). Additionally, each transaction entry must include a remove button that allows users to delete the transaction from the list. The system should update the balance, income, and expense totals displayed in elements with data-testid 'balance', 'income', and 'expense', respectively, whenever a transaction is added or removed. All transactions must be stored in localStorage under the key 'transactions' to persist data across sessions.
- Requirement 6: 
The Expense Tracker application must allow users to remove transactions from the transaction history by clicking the 'X' button next to a transaction. Upon clicking, the system should remove the transaction from the DOM, update the displayed balance, income, and expense values accordingly, and ensure these changes are reflected in the local storage. Specifically, the transaction list should be updated by removing the corresponding <tr> element, and the balance, income, and expense elements identified by data-testid attributes ('balance', 'income', 'expense') should display the recalculated values. The local storage key 'transactions' must be updated to exclude the removed transaction, ensuring persistence of the current state. This functionality should handle normal scenarios where multiple transactions exist, as well as edge cases where the transaction history contains only one transaction, resulting in an empty transaction list and zeroed financial values.
- Requirement 7: 
The Expense Tracker web application must ensure that all transactions are stored in localStorage under the key 'transactions' to maintain data persistence across page reloads. When the page is loaded, the application must retrieve the stored transactions from localStorage and display them in the transaction list, identified by the data-testid 'transaction-list'. Users must be able to add transactions by entering a description in the input field with data-testid 'description-input' and an amount in the input field with data-testid 'amount-input'. Upon clicking the 'Add Transaction' button with data-testid 'add-transaction-button', the transaction should be added to the list and stored in localStorage. The transaction list must accurately reflect the stored transactions, displaying the description, amount formatted as currency, and the date of the transaction. The balance, income, and expense totals must be updated accordingly and displayed using elements with data-testids 'balance', 'income', and 'expense'. The application must handle edge cases, such as negative amounts for expenses, and ensure that transactions are correctly formatted and persisted.

    
    ## Output Format
    Provide a clean and complete implementation including:
    1. HTML structure (including necessary `data-testid`, `id`, and `class` values).
    2. JavaScript functionality that matches the behavior described.
    3. CSS for styling according to BEM and required class names.
    4. Ensure that the text content in the components is exactly as specified in the requirements.
    Do not include any extra components or libraries not listed above. Keep your code concise, semantic, and standards-compliant.
    