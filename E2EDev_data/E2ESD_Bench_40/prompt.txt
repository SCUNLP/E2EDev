
    You are tasked with implementing a complete web application using HTML, JavaScript, and CSS. Your implementation must strictly follow the specifications described below.
    SUMMARY:
    {
    "overview": "The application is a Password Generator that allows users to create secure passwords based on customizable criteria such as length and character types (uppercase, lowercase, numbers, symbols). Users can generate a password and copy it to the clipboard for use.",
    "predefined_options": "Default password length is set to 20 characters. All character type options (uppercase, lowercase, numbers, symbols) are enabled by default.",
    "external_resources": "Font Awesome icons are used for the copy button, sourced from https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.1/css/all.min.css.",
    "external_js_libraries": "No external JavaScript libraries are used in the application."
}
    ## Functional Requirements
    Implement the following features as described. For each requirement, make sure the HTML structure, JavaScript behavior, and CSS styles match the specifications exactly.
    REQUIREMENTS:
    - Requirement 1: 
The web application must allow users to generate a password by interacting with the UI elements provided. Users can specify the password length using the input field with data-testid 'password-length-input', which accepts values between 4 and 20. Users can also select criteria for the password composition by checking or unchecking the checkboxes with data-testids 'include-uppercase-checkbox', 'include-lowercase-checkbox', 'include-numbers-checkbox', and 'include-symbols-checkbox'. Upon clicking the 'Generate Password' button with data-testid 'generate-password-button', the system should generate a password that adheres to the selected criteria and display it in the result area with data-testid 'result-display'. The generated password must match the specified length and include the selected character types. If no criteria are selected, the result area should remain empty, indicating that a password cannot be generated without any character type selection. Additionally, users can copy the generated password to the clipboard by clicking the button with data-testid 'copy-to-clipboard-button', which triggers a notification indicating successful copying.
- Requirement 2: 
The web application should provide a 'Copy to Clipboard' functionality for the generated password. When the user clicks the button with data-testid 'copy-to-clipboard-button', the system should check if a password is displayed in the element with data-testid 'result-display'. If a password is present, it should be copied to the clipboard, and a notification with the message 'Password copied to clipboard!' should appear on the screen for 3 seconds. If no password is present, the clipboard should remain unchanged, and no notification should be displayed.
- Requirement 3: 
The user must be able to specify the desired password length using the number input field with the attribute data-testid 'password-length-input'. The input field should accept values ranging from a minimum of 4 to a maximum of 20. Upon entering a valid length and clicking the 'Generate Password' button with data-testid 'generate-password-button', the application should generate and display a password in the result element with data-testid 'result-display' that matches the specified length. The system should handle edge cases where the minimum and maximum lengths are specified, ensuring the generated password adheres to these constraints.
- Requirement 4: 
The user must be able to toggle the inclusion of uppercase letters in the generated password by interacting with the 'Include uppercase letters' checkbox, identified by the attribute data-testid='include-uppercase-checkbox'. When the checkbox is checked, the generated password must include at least one uppercase letter. When the checkbox is unchecked, the generated password must exclude all uppercase letters. The state of the checkbox must persist until the user explicitly changes it, and the password generation logic must respect the current state of the checkbox at the time the 'Generate Password' button (data-testid='generate-password-button') is clicked. The generated password is displayed in the element with data-testid='result-display'. The system must handle multiple toggles of the checkbox before password generation, ensuring that the final state of the checkbox determines the inclusion or exclusion of uppercase letters in the password.
- Requirement 5: 
The user must be able to control the inclusion of lowercase letters in the generated password through the 'Include lowercase letters' checkbox, identified by the attribute data-testid='include-lowercase-checkbox'. When checked, the password generated upon clicking the 'Generate Password' button (data-testid='generate-password-button') should contain at least one lowercase letter. Conversely, when unchecked, the generated password should exclude all lowercase letters. The application should correctly handle multiple toggles of the checkbox before password generation, ensuring the final state of the checkbox accurately reflects the inclusion or exclusion of lowercase letters in the password displayed in the element with data-testid='result-display'.
- Requirement 6: 
The user must be able to toggle the inclusion of numbers in the generated password by interacting with the 'Include numbers' checkbox, identified by the attribute data-testid='include-numbers-checkbox'. When checked, the password generation process should ensure that at least one number is included in the password. Conversely, when unchecked, the password should exclude numbers entirely. The user can perform multiple toggles before generating the password, and the final state of the checkbox should dictate the presence or absence of numbers in the password. The password generation is initiated by clicking the 'Generate Password' button, identified by data-testid='generate-password-button', and the resulting password is displayed in the element with data-testid='result-display'.
- Requirement 7: 
The user must be able to toggle the inclusion of symbols in the generated password by interacting with the 'Include symbols' checkbox (data-testid: 'include-symbols-checkbox'). When the checkbox is checked, the generated password must include at least one symbol from the predefined set of symbols ('!@#$%^&*(){}[]=<>/,.') if the password length allows. When the checkbox is unchecked, the generated password must exclude all symbols. The system must handle edge cases where the checkbox is toggled multiple times before generating the password, ensuring the final state of the checkbox determines the inclusion or exclusion of symbols. If the 'Include symbols' checkbox is unchecked and no other character types (uppercase, lowercase, numbers) are selected, the result area (data-testid: 'result-display') must display an empty string. The password generation process is triggered by clicking the 'Generate Password' button (data-testid: 'generate-password-button'), and the generated password is displayed in the result area (data-testid: 'result-display').

    
    ## Output Format
    Provide a clean and complete implementation including:
    1. HTML structure (including necessary `data-testid`, `id`, and `class` values).
    2. JavaScript functionality that matches the behavior described.
    3. CSS for styling according to BEM and required class names.
    4. Ensure that the text content in the components is exactly as specified in the requirements.
    Do not include any extra components or libraries not listed above. Keep your code concise, semantic, and standards-compliant.
    