{
    "summary": {
        "overview": "The application is a Password Generator that allows users to create secure passwords based on customizable criteria such as length and character types (uppercase, lowercase, numbers, symbols). Users can generate a password and copy it to the clipboard for use.",
        "predefined_options": "Default password length is set to 20 characters. All character type options (uppercase, lowercase, numbers, symbols) are enabled by default.",
        "external_resources": "Font Awesome icons are used for the copy button, sourced from https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.1/css/all.min.css.",
        "external_js_libraries": "No external JavaScript libraries are used in the application."
    },
    "finegrained_rewith_test": {
        "1": {
            "requirement": {
                "description": "The web application must allow users to generate a password by interacting with the UI elements provided. Users can specify the password length using the input field with data-testid 'password-length-input', which accepts values between 4 and 20. Users can also select criteria for the password composition by checking or unchecking the checkboxes with data-testids 'include-uppercase-checkbox', 'include-lowercase-checkbox', 'include-numbers-checkbox', and 'include-symbols-checkbox'. Upon clicking the 'Generate Password' button with data-testid 'generate-password-button', the system should generate a password that adheres to the selected criteria and display it in the result area with data-testid 'result-display'. The generated password must match the specified length and include the selected character types. If no criteria are selected, the result area should remain empty, indicating that a password cannot be generated without any character type selection. Additionally, users can copy the generated password to the clipboard by clicking the button with data-testid 'copy-to-clipboard-button', which triggers a notification indicating successful copying."
            },
            "test_cases": [
                {
                    "test_case": [
                        "Feature: Password Generation\n  The system should generate a password based on user-selected criteria and display it in the result area.\n\n\n  Scenario: [Normal] Generate password with default settings\n    Given the webpage is loaded with the password generator\n    And the password length input with data-testid \"password-length-input\" is set to \"20\"\n    And the include uppercase checkbox with data-testid \"include-uppercase-checkbox\" is checked\n    And the include lowercase checkbox with data-testid \"include-lowercase-checkbox\" is checked\n    And the include numbers checkbox with data-testid \"include-numbers-checkbox\" is checked\n    And the include symbols checkbox with data-testid \"include-symbols-checkbox\" is checked\n    When the user clicks the generate password button with data-testid \"generate-password-button\"\n    Then a password is displayed in the result area with data-testid \"result-display\"\n    And the password length is \"20\"\n    And the password includes uppercase, lowercase, numbers, and symbols\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\ndef is_expanded(element):\n    aria = element.get_attribute(\"aria-expanded\")\n    if aria is not None:\n        return aria == \"true\"\n\n    class_list = element.get_attribute(\"class\").split()\n    if any(cls in class_list for cls in [\"expanded\", \"open\", \"show\"]):\n        return True\n\n    data_expanded = element.get_attribute(\"data-expanded\")\n    if data_expanded is not None:\n        return data_expanded == \"true\"\n\n    return element.is_displayed()\n\ndef is_collapsed(element):\n    aria = element.get_attribute(\"aria-expanded\")\n    if aria is not None and aria.lower() == \"false\":\n        return True\n\n    class_attr = element.get_attribute(\"class\") or \"\"\n    class_list = class_attr.split()\n    if \"collapsed\" in class_list:\n        return True\n\n    data_expanded = element.get_attribute(\"data-expanded\")\n    if data_expanded is not None and data_expanded.lower() == \"false\":\n        return True\n\n    style = element.get_attribute(\"style\") or \"\"\n    if \"display: none\" in style or \"visibility: hidden\" in style or \"height: 0\" in style:\n        return True\n\n    return not element.is_displayed()\n\n@given('the webpage is loaded with the password generator')\ndef step_impl(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)\n\n@given('the password length input with data-testid \"password-length-input\" is set to \"20\"')\ndef step_impl(context):\n    length_input = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='password-length-input']\"))\n    )\n    assert length_input.get_attribute(\"value\") == \"20\", \"Password length input is not set to 20\"\n    time.sleep(1)\n\n@given('the include uppercase checkbox with data-testid \"include-uppercase-checkbox\" is checked')\ndef step_impl(context):\n    uppercase_checkbox = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='include-uppercase-checkbox']\"))\n    )\n    assert uppercase_checkbox.is_selected(), \"Uppercase checkbox is not checked\"\n    time.sleep(1)\n\n@given('the include lowercase checkbox with data-testid \"include-lowercase-checkbox\" is checked')\ndef step_impl(context):\n    lowercase_checkbox = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='include-lowercase-checkbox']\"))\n    )\n    assert lowercase_checkbox.is_selected(), \"Lowercase checkbox is not checked\"\n    time.sleep(1)\n\n@given('the include numbers checkbox with data-testid \"include-numbers-checkbox\" is checked')\ndef step_impl(context):\n    numbers_checkbox = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='include-numbers-checkbox']\"))\n    )\n    assert numbers_checkbox.is_selected(), \"Numbers checkbox is not checked\"\n    time.sleep(1)\n\n@given('the include symbols checkbox with data-testid \"include-symbols-checkbox\" is checked')\ndef step_impl(context):\n    symbols_checkbox = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='include-symbols-checkbox']\"))\n    )\n    assert symbols_checkbox.is_selected(), \"Symbols checkbox is not checked\"\n    time.sleep(1)\n\n@when('the user clicks the generate password button with data-testid \"generate-password-button\"')\ndef step_impl(context):\n    generate_button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='generate-password-button']\"))\n    )\n    generate_button.click()\n    time.sleep(1)\n\n@then('a password is displayed in the result area with data-testid \"result-display\"')\ndef step_impl(context):\n    result_display = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='result-display']\"))\n    )\n    assert result_display.text.strip() != \"\", \"No password displayed in the result area\"\n    time.sleep(1)\n\n@then('the password length is \"20\"')\ndef step_impl(context):\n    result_display = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='result-display']\")\n    assert len(result_display.text.strip()) == 20, \"Password length is not 20\"\n    time.sleep(1)\n\n@then('the password includes uppercase, lowercase, numbers, and symbols')\ndef step_impl(context):\n    result_display = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='result-display']\")\n    password = result_display.text.strip()\n    assert any(c.isupper() for c in password), \"Password does not include uppercase letters\"\n    assert any(c.islower() for c in password), \"Password does not include lowercase letters\"\n    assert any(c.isdigit() for c in password), \"Password does not include numbers\"\n    assert any(c in \"!@#$%^&*(){}[]=<>/,.\" for c in password), \"Password does not include symbols\"\n    time.sleep(1)\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: Password Generation\n  The system should generate a password based on user-selected criteria and display it in the result area.\n\n\n  Scenario: [Edge] Generate password with minimum length\n    Given the webpage is loaded with the password generator\n    And the password length input with data-testid \"password-length-input\" is set to \"4\"\n    And the include uppercase checkbox with data-testid \"include-uppercase-checkbox\" is checked\n    And the include lowercase checkbox with data-testid \"include-lowercase-checkbox\" is checked\n    And the include numbers checkbox with data-testid \"include-numbers-checkbox\" is checked\n    And the include symbols checkbox with data-testid \"include-symbols-checkbox\" is checked\n    When the user clicks the generate password button with data-testid \"generate-password-button\"\n    Then a password is displayed in the result area with data-testid \"result-display\"\n    And the password length is \"4\"\n    And the password includes uppercase, lowercase, numbers, and symbols\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the webpage is loaded with the password generator')\ndef step_given_webpage_loaded(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)\n\n@given('the password length input with data-testid \"password-length-input\" is set to \"4\"')\ndef step_given_password_length_set(context):\n    length_input = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='password-length-input']\"))\n    )\n    length_input.clear()\n    length_input.send_keys(\"4\")\n    time.sleep(1)\n\n@given('the include uppercase checkbox with data-testid \"include-uppercase-checkbox\" is checked')\ndef step_given_uppercase_checked(context):\n    uppercase_checkbox = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='include-uppercase-checkbox']\"))\n    )\n    if not uppercase_checkbox.is_selected():\n        uppercase_checkbox.click()\n    time.sleep(1)\n\n@given('the include lowercase checkbox with data-testid \"include-lowercase-checkbox\" is checked')\ndef step_given_lowercase_checked(context):\n    lowercase_checkbox = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='include-lowercase-checkbox']\"))\n    )\n    if not lowercase_checkbox.is_selected():\n        lowercase_checkbox.click()\n    time.sleep(1)\n\n@given('the include numbers checkbox with data-testid \"include-numbers-checkbox\" is checked')\ndef step_given_numbers_checked(context):\n    numbers_checkbox = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='include-numbers-checkbox']\"))\n    )\n    if not numbers_checkbox.is_selected():\n        numbers_checkbox.click()\n    time.sleep(1)\n\n@given('the include symbols checkbox with data-testid \"include-symbols-checkbox\" is checked')\ndef step_given_symbols_checked(context):\n    symbols_checkbox = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='include-symbols-checkbox']\"))\n    )\n    if not symbols_checkbox.is_selected():\n        symbols_checkbox.click()\n    time.sleep(1)\n\n@when('the user clicks the generate password button with data-testid \"generate-password-button\"')\ndef step_when_generate_password_clicked(context):\n    generate_button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='generate-password-button']\"))\n    )\n    generate_button.click()\n    time.sleep(1)\n\n@then('a password is displayed in the result area with data-testid \"result-display\"')\ndef step_then_password_displayed(context):\n    result_display = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='result-display']\"))\n    )\n    password = result_display.text\n    assert password, \"Password is not displayed\"\n    time.sleep(1)\n\n@then('the password length is \"4\"')\ndef step_then_password_length(context):\n    result_display = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='result-display']\")\n    password = result_display.text\n    assert len(password) == 4, f\"Expected password length of 4, but got {len(password)}\"\n    time.sleep(1)\n\n@then('the password includes uppercase, lowercase, numbers, and symbols')\ndef step_then_password_includes_all(context):\n    result_display = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='result-display']\")\n    password = result_display.text\n    assert any(c.isupper() for c in password), \"Password does not include uppercase letters\"\n    assert any(c.islower() for c in password), \"Password does not include lowercase letters\"\n    assert any(c.isdigit() for c in password), \"Password does not include numbers\"\n    assert any(c in \"!@#$%^&*(){}[]=<>/,.\" for c in password), \"Password does not include symbols\"\n    time.sleep(1)\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: Password Generation\n  The system should generate a password based on user-selected criteria and display it in the result area.\n\n\n  Scenario: [Edge] Generate password with maximum length\n    Given the webpage is loaded with the password generator\n    And the password length input with data-testid \"password-length-input\" is set to \"20\"\n    And the include uppercase checkbox with data-testid \"include-uppercase-checkbox\" is checked\n    And the include lowercase checkbox with data-testid \"include-lowercase-checkbox\" is checked\n    And the include numbers checkbox with data-testid \"include-numbers-checkbox\" is checked\n    And the include symbols checkbox with data-testid \"include-symbols-checkbox\" is checked\n    When the user clicks the generate password button with data-testid \"generate-password-button\"\n    Then a password is displayed in the result area with data-testid \"result-display\"\n    And the password length is \"20\"\n    And the password includes uppercase, lowercase, numbers, and symbols\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the webpage is loaded with the password generator')\ndef step_given_webpage_loaded(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)\n\n@given('the password length input with data-testid \"password-length-input\" is set to \"20\"')\ndef step_given_password_length_set(context):\n    length_input = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='password-length-input']\"))\n    )\n    length_input.clear()\n    length_input.send_keys(\"20\")\n    time.sleep(1)\n\n@given('the include uppercase checkbox with data-testid \"include-uppercase-checkbox\" is checked')\ndef step_given_uppercase_checked(context):\n    uppercase_checkbox = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='include-uppercase-checkbox']\"))\n    )\n    if not uppercase_checkbox.is_selected():\n        uppercase_checkbox.click()\n    time.sleep(1)\n\n@given('the include lowercase checkbox with data-testid \"include-lowercase-checkbox\" is checked')\ndef step_given_lowercase_checked(context):\n    lowercase_checkbox = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='include-lowercase-checkbox']\"))\n    )\n    if not lowercase_checkbox.is_selected():\n        lowercase_checkbox.click()\n    time.sleep(1)\n\n@given('the include numbers checkbox with data-testid \"include-numbers-checkbox\" is checked')\ndef step_given_numbers_checked(context):\n    numbers_checkbox = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='include-numbers-checkbox']\"))\n    )\n    if not numbers_checkbox.is_selected():\n        numbers_checkbox.click()\n    time.sleep(1)\n\n@given('the include symbols checkbox with data-testid \"include-symbols-checkbox\" is checked')\ndef step_given_symbols_checked(context):\n    symbols_checkbox = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='include-symbols-checkbox']\"))\n    )\n    if not symbols_checkbox.is_selected():\n        symbols_checkbox.click()\n    time.sleep(1)\n\n@when('the user clicks the generate password button with data-testid \"generate-password-button\"')\ndef step_when_generate_password_clicked(context):\n    generate_button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='generate-password-button']\"))\n    )\n    generate_button.click()\n    time.sleep(1)\n\n@then('a password is displayed in the result area with data-testid \"result-display\"')\ndef step_then_password_displayed(context):\n    result_display = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='result-display']\"))\n    )\n    assert result_display.text.strip() != \"\", \"Password is not displayed\"\n    time.sleep(1)\n\n@then('the password length is \"20\"')\ndef step_then_password_length(context):\n    result_display = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='result-display']\")\n    assert len(result_display.text.strip()) == 20, f\"Expected password length 20, but got {len(result_display.text.strip())}\"\n    time.sleep(1)\n\n@then('the password includes uppercase, lowercase, numbers, and symbols')\ndef step_then_password_content(context):\n    result_display = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='result-display']\")\n    password = result_display.text.strip()\n    assert any(c.isupper() for c in password), \"Password does not include uppercase letters\"\n    assert any(c.islower() for c in password), \"Password does not include lowercase letters\"\n    assert any(c.isdigit() for c in password), \"Password does not include numbers\"\n    assert any(c in \"!@#$%^&*(){}[]=<>/,.\" for c in password), \"Password does not include symbols\"\n    time.sleep(1)\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: Password Generation\n  The system should generate a password based on user-selected criteria and display it in the result area.\n\n\n  Scenario: [Error] Generate password with no criteria selected\n    Given the webpage is loaded with the password generator\n    And the password length input with data-testid \"password-length-input\" is set to \"10\"\n    And the include uppercase checkbox with data-testid \"include-uppercase-checkbox\" is unchecked\n    And the include lowercase checkbox with data-testid \"include-lowercase-checkbox\" is unchecked\n    And the include numbers checkbox with data-testid \"include-numbers-checkbox\" is unchecked\n    And the include symbols checkbox with data-testid \"include-symbols-checkbox\" is unchecked\n    When the user clicks the generate password button with data-testid \"generate-password-button\"\n    Then no password is displayed in the result area with data-testid \"result-display\"\n    And the result area remains empty\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the webpage is loaded with the password generator')\ndef step_given_webpage_loaded(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)\n\n@given('the password length input with data-testid \"password-length-input\" is set to \"10\"')\ndef step_given_password_length_set(context):\n    length_input = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='password-length-input']\"))\n    )\n    length_input.clear()\n    length_input.send_keys(\"10\")\n    time.sleep(1)\n\n@given('the include uppercase checkbox with data-testid \"include-uppercase-checkbox\" is unchecked')\ndef step_given_uppercase_unchecked(context):\n    uppercase_checkbox = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='include-uppercase-checkbox']\"))\n    )\n    if uppercase_checkbox.is_selected():\n        uppercase_checkbox.click()\n    time.sleep(1)\n\n@given('the include lowercase checkbox with data-testid \"include-lowercase-checkbox\" is unchecked')\ndef step_given_lowercase_unchecked(context):\n    lowercase_checkbox = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='include-lowercase-checkbox']\"))\n    )\n    if lowercase_checkbox.is_selected():\n        lowercase_checkbox.click()\n    time.sleep(1)\n\n@given('the include numbers checkbox with data-testid \"include-numbers-checkbox\" is unchecked')\ndef step_given_numbers_unchecked(context):\n    numbers_checkbox = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='include-numbers-checkbox']\"))\n    )\n    if numbers_checkbox.is_selected():\n        numbers_checkbox.click()\n    time.sleep(1)\n\n@given('the include symbols checkbox with data-testid \"include-symbols-checkbox\" is unchecked')\ndef step_given_symbols_unchecked(context):\n    symbols_checkbox = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='include-symbols-checkbox']\"))\n    )\n    if symbols_checkbox.is_selected():\n        symbols_checkbox.click()\n    time.sleep(1)\n\n@when('the user clicks the generate password button with data-testid \"generate-password-button\"')\ndef step_when_click_generate_password(context):\n    generate_button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='generate-password-button']\"))\n    )\n    generate_button.click()\n    time.sleep(1)\n\n@then('no password is displayed in the result area with data-testid \"result-display\"')\ndef step_then_no_password_displayed(context):\n    result_display = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='result-display']\"))\n    )\n    assert result_display.text.strip() == \"\", \"Expected no password to be displayed\"\n\n@then('the result area remains empty')\ndef step_then_result_area_empty(context):\n    result_display = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='result-display']\"))\n    )\n    assert result_display.text.strip() == \"\", \"Expected result area to remain empty\"\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                }
            ]
        },
        "2": {
            "requirement": {
                "description": "The web application should provide a 'Copy to Clipboard' functionality for the generated password. When the user clicks the button with data-testid 'copy-to-clipboard-button', the system should check if a password is displayed in the element with data-testid 'result-display'. If a password is present, it should be copied to the clipboard, and a notification with the message 'Password copied to clipboard!' should appear on the screen for 3 seconds. If no password is present, the clipboard should remain unchanged, and no notification should be displayed."
            },
            "test_cases": [
                {
                    "test_case": [
                        "Feature: Copy Password to Clipboard\n  The system should allow users to copy the generated password to the clipboard and display a notification confirming the action.\n\n\n  Scenario: [Normal] Copy generated password to clipboard\n    Given the webpage is loaded with the password generator interface\n    And a password is displayed in the result area with data-testid \"result-display\"\n    When the user clicks the \"Copy to Clipboard\" button with data-testid \"copy-to-clipboard-button\"\n    Then the password should be copied to the clipboard\n    And a notification stating \"Password copied to clipboard!\" should be displayed for 3 seconds\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the webpage is loaded with the password generator interface')\ndef step_given_webpage_loaded(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    generate_psw_button = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='generate-password-button']\"))\n    )\n    generate_psw_button.click()\n    WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='result-display']\"))\n    )\n\n\n@given('a password is displayed in the result area with data-testid \"result-display\"')\ndef step_given_password_displayed(context):\n    result_display = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='result-display']\")\n    assert result_display.text.strip() != \"\", \"Password is not displayed\"\n    time.sleep(1)\n\n@when('the user clicks the \"Copy to Clipboard\" button with data-testid \"copy-to-clipboard-button\"')\ndef step_when_click_copy_button(context):\n    copy_button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='copy-to-clipboard-button']\"))\n    )\n    copy_button.click()\n    time.sleep(1)\n\n@then('the password should be copied to the clipboard')\ndef step_then_password_copied(context):\n    # This step assumes clipboard functionality is tested manually or with a library that can access clipboard\n    # For demonstration, we assume the clipboard operation is successful if no errors occur\n    time.sleep(1)\n\n@then('a notification stating \"Password copied to clipboard!\" should be displayed for 3 seconds')\ndef step_then_notification_displayed(context):\n    notification = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \".toast\"))\n    )\n    assert \"Password copied to clipboard!\" in notification.text, \"Notification text mismatch\"\n\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: Copy Password to Clipboard\n  The system should allow users to copy the generated password to the clipboard and display a notification confirming the action.\n\n\n  Scenario: [Edge] Attempt to copy when no password is generated\n    Given the webpage is loaded with the password generator interface\n    And no password is displayed in the result area with data-testid \"result-display\"\n    When the user clicks the \"Copy to Clipboard\" button with data-testid \"copy-to-clipboard-button\"\n    Then the clipboard should remain unchanged\n    And no notification should be displayed\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the webpage is loaded with the password generator interface')\ndef step_given_webpage_loaded(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)\n\n@given('no password is displayed in the result area with data-testid \"result-display\"')\ndef step_given_no_password_displayed(context):\n    result_display = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='result-display']\")\n    assert result_display.text.strip() == \"\", \"Expected no password to be displayed\"\n\n@when('the user clicks the \"Copy to Clipboard\" button with data-testid \"copy-to-clipboard-button\"')\ndef step_when_user_clicks_copy_button(context):\n    copy_button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='copy-to-clipboard-button']\"))\n    )\n    copy_button.click()\n    time.sleep(1)\n\n@then('the clipboard should remain unchanged')\ndef step_then_clipboard_unchanged(context):\n    # Clipboard verification is complex in Selenium and typically requires OS-level access.\n    # This step is a placeholder for clipboard verification logic.\n    pass\n\n@then('no notification should be displayed')\ndef step_then_no_notification_displayed(context):\n    notifications = context.driver.find_elements(By.CLASS_NAME, \"toast\")\n    assert len(notifications) == 0, \"Expected no notifications to be displayed\"\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                }
            ]
        },
        "3": {
            "requirement": {
                "description": "The user must be able to specify the desired password length using the number input field with the attribute data-testid 'password-length-input'. The input field should accept values ranging from a minimum of 4 to a maximum of 20. Upon entering a valid length and clicking the 'Generate Password' button with data-testid 'generate-password-button', the application should generate and display a password in the result element with data-testid 'result-display' that matches the specified length. The system should handle edge cases where the minimum and maximum lengths are specified, ensuring the generated password adheres to these constraints."
            },
            "test_cases": [
                {
                    "test_case": [
                        "Feature: REQ-003 - Specify Password Length\n  The user should be able to specify the password length using the number input field.\n\n\n  Scenario: [Normal] User specifies a valid password length\n    Given the Password Generator page is loaded\n    And the password length input field with data-testid \"password-length-input\" is present\n    When the user enters \"12\" into the password length input field with data-testid \"password-length-input\"\n    And clicks the generate password button with data-testid \"generate-password-button\"\n    Then the generated password displayed in the result element with data-testid \"result-display\" should have a length of 12\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the Password Generator page is loaded')\ndef step_given_password_generator_page_loaded(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)\n\n@given('the password length input field with data-testid \"password-length-input\" is present')\ndef step_given_password_length_input_present(context):\n    WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='password-length-input']\"))\n    )\n    time.sleep(1)\n\n@when('the user enters \"12\" into the password length input field with data-testid \"password-length-input\"')\ndef step_when_user_enters_password_length(context):\n    length_input = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='password-length-input']\")\n    length_input.clear()\n    length_input.send_keys(\"12\")\n    time.sleep(1)\n\n@when('clicks the generate password button with data-testid \"generate-password-button\"')\ndef step_when_click_generate_password_button(context):\n    generate_button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='generate-password-button']\"))\n    )\n    generate_button.click()\n    time.sleep(1)\n\n@then('the generated password displayed in the result element with data-testid \"result-display\" should have a length of 12')\ndef step_then_generated_password_length(context):\n    result_display = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='result-display']\"))\n    )\n    generated_password = result_display.text.strip()\n    assert len(generated_password) == 12, f\"Expected password length of 12, but got {len(generated_password)}\"\n    time.sleep(1)\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: REQ-003 - Specify Password Length\n  The user should be able to specify the password length using the number input field.\n\n\n  Scenario: [Edge] User specifies the minimum password length\n    Given the Password Generator page is loaded\n    And the password length input field with data-testid \"password-length-input\" is present\n    When the user enters \"4\" into the password length input field with data-testid \"password-length-input\"\n    And clicks the generate password button with data-testid \"generate-password-button\"\n    Then the generated password displayed in the result element with data-testid \"result-display\" should have a length of 4\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the Password Generator page is loaded')\ndef step_given_password_generator_page_loaded(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)\n\n@given('the password length input field with data-testid \"password-length-input\" is present')\ndef step_given_password_length_input_present(context):\n    WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='password-length-input']\"))\n    )\n    time.sleep(1)\n\n@when('the user enters \"4\" into the password length input field with data-testid \"password-length-input\"')\ndef step_when_user_enters_password_length(context):\n    length_input = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='password-length-input']\")\n    length_input.clear()\n    length_input.send_keys(\"4\")\n    time.sleep(1)\n\n@when('clicks the generate password button with data-testid \"generate-password-button\"')\ndef step_when_user_clicks_generate_password(context):\n    generate_button = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='generate-password-button']\")\n    generate_button.click()\n    time.sleep(1)\n\n@then('the generated password displayed in the result element with data-testid \"result-display\" should have a length of 4')\ndef step_then_verify_generated_password_length(context):\n    result_display = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='result-display']\"))\n    )\n    generated_password = result_display.text\n    assert len(generated_password) == 4, f\"Expected password length of 4, but got {len(generated_password)}\"\n    time.sleep(1)\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: REQ-003 - Specify Password Length\n  The user should be able to specify the password length using the number input field.\n\n\n  Scenario: [Edge] User specifies the maximum password length\n    Given the Password Generator page is loaded\n    And the password length input field with data-testid \"password-length-input\" is present\n    When the user enters \"20\" into the password length input field with data-testid \"password-length-input\"\n    And clicks the generate password button with data-testid \"generate-password-button\"\n    Then the generated password displayed in the result element with data-testid \"result-display\" should have a length of 20\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the Password Generator page is loaded')\ndef step_given_password_generator_page_loaded(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)\n\n@given('the password length input field with data-testid \"password-length-input\" is present')\ndef step_given_password_length_input_present(context):\n    WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='password-length-input']\"))\n    )\n    time.sleep(1)\n\n@when('the user enters \"20\" into the password length input field with data-testid \"password-length-input\"')\ndef step_when_user_enters_password_length(context):\n    length_input = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='password-length-input']\")\n    length_input.clear()\n    length_input.send_keys(\"20\")\n    time.sleep(1)\n\n@when('clicks the generate password button with data-testid \"generate-password-button\"')\ndef step_when_user_clicks_generate_button(context):\n    generate_button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='generate-password-button']\"))\n    )\n    generate_button.click()\n    time.sleep(1)\n\n@then('the generated password displayed in the result element with data-testid \"result-display\" should have a length of 20')\ndef step_then_validate_generated_password_length(context):\n    result_display = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='result-display']\"))\n    )\n    generated_password = result_display.text\n    assert len(generated_password) == 20, f\"Expected password length of 20, but got {len(generated_password)}\"\n    time.sleep(1)\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                }
            ]
        },
        "4": {
            "requirement": {
                "description": "The user must be able to toggle the inclusion of uppercase letters in the generated password by interacting with the 'Include uppercase letters' checkbox, identified by the attribute data-testid='include-uppercase-checkbox'. When the checkbox is checked, the generated password must include at least one uppercase letter. When the checkbox is unchecked, the generated password must exclude all uppercase letters. The state of the checkbox must persist until the user explicitly changes it, and the password generation logic must respect the current state of the checkbox at the time the 'Generate Password' button (data-testid='generate-password-button') is clicked. The generated password is displayed in the element with data-testid='result-display'. The system must handle multiple toggles of the checkbox before password generation, ensuring that the final state of the checkbox determines the inclusion or exclusion of uppercase letters in the password."
            },
            "test_cases": [
                {
                    "test_case": [
                        "Feature: Toggle inclusion of uppercase letters in password generation\n\n  The user should be able to toggle the inclusion of uppercase letters in the password by checking or unchecking the 'Include uppercase letters' checkbox.\n\n\n  Scenario: [Normal] User enables uppercase letters for password generation\n    Given the password generator page is loaded\n    And the \"Include uppercase letters\" checkbox with data-testid \"include-uppercase-checkbox\" is unchecked\n    When the user checks the \"Include uppercase letters\" checkbox with data-testid \"include-uppercase-checkbox\"\n    And clicks the \"Generate Password\" button with data-testid \"generate-password-button\"\n    Then the generated password displayed in the element with data-testid \"result-display\" should include at least one uppercase letter\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the password generator page is loaded')\ndef step_impl(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)\n\n@given('the \"Include uppercase letters\" checkbox with data-testid \"include-uppercase-checkbox\" is unchecked')\ndef step_impl(context):\n    checkbox = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='include-uppercase-checkbox']\"))\n    )\n    if checkbox.is_selected():\n        checkbox.click()\n    time.sleep(1)\n\n@when('the user checks the \"Include uppercase letters\" checkbox with data-testid \"include-uppercase-checkbox\"')\ndef step_impl(context):\n    checkbox = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='include-uppercase-checkbox']\"))\n    )\n    if not checkbox.is_selected():\n        checkbox.click()\n    time.sleep(1)\n\n@when('clicks the \"Generate Password\" button with data-testid \"generate-password-button\"')\ndef step_impl(context):\n    generate_button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='generate-password-button']\"))\n    )\n    generate_button.click()\n    time.sleep(1)\n\n@then('the generated password displayed in the element with data-testid \"result-display\" should include at least one uppercase letter')\ndef step_impl(context):\n    result_display = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='result-display']\"))\n    )\n    password = result_display.text\n    assert any(char.isupper() for char in password), \"The password does not contain any uppercase letters.\"\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: Toggle inclusion of uppercase letters in password generation\n\n  The user should be able to toggle the inclusion of uppercase letters in the password by checking or unchecking the 'Include uppercase letters' checkbox.\n\n\n  Scenario: [Normal] User disables uppercase letters for password generation\n    Given the password generator page is loaded\n    And the \"Include uppercase letters\" checkbox with data-testid \"include-uppercase-checkbox\" is checked\n    When the user unchecks the \"Include uppercase letters\" checkbox with data-testid \"include-uppercase-checkbox\"\n    And clicks the \"Generate Password\" button with data-testid \"generate-password-button\"\n    Then the generated password displayed in the element with data-testid \"result-display\" should not include any uppercase letters\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the password generator page is loaded')\ndef step_given_password_generator_page_loaded(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)\n\n@given('the \"Include uppercase letters\" checkbox with data-testid \"include-uppercase-checkbox\" is checked')\ndef step_given_uppercase_checkbox_checked(context):\n    checkbox = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='include-uppercase-checkbox']\"))\n    )\n    assert checkbox.is_selected(), \"Expected the 'Include uppercase letters' checkbox to be checked\"\n\n@when('the user unchecks the \"Include uppercase letters\" checkbox with data-testid \"include-uppercase-checkbox\"')\ndef step_when_user_unchecks_uppercase_checkbox(context):\n    checkbox = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='include-uppercase-checkbox']\"))\n    )\n    if checkbox.is_selected():\n        checkbox.click()\n        time.sleep(1)\n\n@when('clicks the \"Generate Password\" button with data-testid \"generate-password-button\"')\ndef step_when_user_clicks_generate_password_button(context):\n    generate_button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='generate-password-button']\"))\n    )\n    generate_button.click()\n    time.sleep(1)\n\n@then('the generated password displayed in the element with data-testid \"result-display\" should not include any uppercase letters')\ndef step_then_generated_password_should_not_include_uppercase(context):\n    result_display = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='result-display']\"))\n    )\n    generated_password = result_display.text\n    assert not any(char.isupper() for char in generated_password), \"Expected no uppercase letters in the generated password\"\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: Toggle inclusion of uppercase letters in password generation\n\n  The user should be able to toggle the inclusion of uppercase letters in the password by checking or unchecking the 'Include uppercase letters' checkbox.\n\n\n  Scenario: [Edge] User toggles uppercase letters multiple times before generating password\n    Given the password generator page is loaded\n    And the \"Include uppercase letters\" checkbox with data-testid \"include-uppercase-checkbox\" is checked\n    When the user unchecks the \"Include uppercase letters\" checkbox with data-testid \"include-uppercase-checkbox\"\n    And checks the \"Include uppercase letters\" checkbox with data-testid \"include-uppercase-checkbox\"\n    And unchecks the \"Include uppercase letters\" checkbox with data-testid \"include-uppercase-checkbox\"\n    And clicks the \"Generate Password\" button with data-testid \"generate-password-button\"\n    Then the generated password displayed in the element with data-testid \"result-display\" should not include any uppercase letters\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the password generator page is loaded')\ndef step_given_password_generator_page_loaded(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='result-display']\"))\n    )\n    time.sleep(1)\n\n@given('the \"Include uppercase letters\" checkbox with data-testid \"include-uppercase-checkbox\" is checked')\ndef step_given_uppercase_checkbox_checked(context):\n    checkbox = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='include-uppercase-checkbox']\")\n    if not checkbox.is_selected():\n        checkbox.click()\n    time.sleep(1)\n\n@when('the user unchecks the \"Include uppercase letters\" checkbox with data-testid \"include-uppercase-checkbox\"')\ndef step_when_uncheck_uppercase_checkbox(context):\n    checkbox = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='include-uppercase-checkbox']\")\n    if checkbox.is_selected():\n        checkbox.click()\n    time.sleep(1)\n\n@when('checks the \"Include uppercase letters\" checkbox with data-testid \"include-uppercase-checkbox\"')\ndef step_when_check_uppercase_checkbox(context):\n    checkbox = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='include-uppercase-checkbox']\")\n    if not checkbox.is_selected():\n        checkbox.click()\n    time.sleep(1)\n\n@when('unchecks the \"Include uppercase letters\" checkbox with data-testid \"include-uppercase-checkbox\"')\ndef step_when_uncheck_uppercase_checkbox_again(context):\n    checkbox = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='include-uppercase-checkbox']\")\n    if checkbox.is_selected():\n        checkbox.click()\n    time.sleep(1)\n\n@when('clicks the \"Generate Password\" button with data-testid \"generate-password-button\"')\ndef step_when_click_generate_password_button(context):\n    generate_button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='generate-password-button']\"))\n    )\n    generate_button.click()\n    time.sleep(1)\n\n@then('the generated password displayed in the element with data-testid \"result-display\" should not include any uppercase letters')\ndef step_then_password_should_not_include_uppercase(context):\n    result_display = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='result-display']\"))\n    )\n    password = result_display.text\n    assert not any(char.isupper() for char in password), f\"Password '{password}' contains uppercase letters\"\n    time.sleep(1)\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                }
            ]
        },
        "5": {
            "requirement": {
                "description": "The user must be able to control the inclusion of lowercase letters in the generated password through the 'Include lowercase letters' checkbox, identified by the attribute data-testid='include-lowercase-checkbox'. When checked, the password generated upon clicking the 'Generate Password' button (data-testid='generate-password-button') should contain at least one lowercase letter. Conversely, when unchecked, the generated password should exclude all lowercase letters. The application should correctly handle multiple toggles of the checkbox before password generation, ensuring the final state of the checkbox accurately reflects the inclusion or exclusion of lowercase letters in the password displayed in the element with data-testid='result-display'."
            },
            "test_cases": [
                {
                    "test_case": [
                        "Feature: Toggle inclusion of lowercase letters in password generation\n\n  The user should be able to toggle the inclusion of lowercase letters in the password by checking or unchecking the 'Include lowercase letters' checkbox.\n\n\n  Scenario: [Normal] User includes lowercase letters in the password\n    Given the password generator page is loaded\n    And the checkbox with data-testid \"include-lowercase-checkbox\" is checked\n    When the user clicks the button with data-testid \"generate-password-button\"\n    Then the generated password displayed in the element with data-testid \"result-display\" should include at least one lowercase letter\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the password generator page is loaded')\ndef step_impl(context):\n    # Initialize the WebDriver and load the test page\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    context.driver.maximize_window()\n    time.sleep(1)  # Allow time for the page to load\n\n@given('the checkbox with data-testid \"include-lowercase-checkbox\" is checked')\ndef step_impl(context):\n    # Locate the checkbox and ensure it is checked\n    checkbox = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='include-lowercase-checkbox']\"))\n    )\n    if not checkbox.is_selected():\n        checkbox.click()\n    time.sleep(1)\n\n@when('the user clicks the button with data-testid \"generate-password-button\"')\ndef step_impl(context):\n    # Locate the generate button and click it\n    generate_button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='generate-password-button']\"))\n    )\n    generate_button.click()\n    time.sleep(1)\n\n@then('the generated password displayed in the element with data-testid \"result-display\" should include at least one lowercase letter')\ndef step_impl(context):\n    # Locate the result display element and validate the password\n    result_display = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='result-display']\"))\n    )\n    generated_password = result_display.text\n    assert any(char.islower() for char in generated_password), \\\n        f\"Expected at least one lowercase letter in the password, but got: {generated_password}\"\n\n# Teardown to close the browser after the test\ndef after_scenario(context, scenario):\n    if hasattr(context, 'driver'):\n        context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: Toggle inclusion of lowercase letters in password generation\n\n  The user should be able to toggle the inclusion of lowercase letters in the password by checking or unchecking the 'Include lowercase letters' checkbox.\n\n\n  Scenario: [Normal] User excludes lowercase letters from the password\n    Given the password generator page is loaded\n    And the checkbox with data-testid \"include-lowercase-checkbox\" is unchecked\n    When the user clicks the button with data-testid \"generate-password-button\"\n    Then the generated password displayed in the element with data-testid \"result-display\" should not include any lowercase letters\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\ndef is_lowercase_present(password):\n    return any(char.islower() for char in password)\n\n@given('the password generator page is loaded')\ndef step_given_password_generator_page_loaded(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)\n\n@given('the checkbox with data-testid \"include-lowercase-checkbox\" is unchecked')\ndef step_given_checkbox_unchecked(context):\n    checkbox = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='include-lowercase-checkbox']\"))\n    )\n    if checkbox.is_selected():\n        checkbox.click()\n    time.sleep(1)\n\n@when('the user clicks the button with data-testid \"generate-password-button\"')\ndef step_when_user_clicks_generate_button(context):\n    generate_button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='generate-password-button']\"))\n    )\n    generate_button.click()\n    time.sleep(1)\n\n@then('the generated password displayed in the element with data-testid \"result-display\" should not include any lowercase letters')\ndef step_then_password_should_not_include_lowercase(context):\n    result_display = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='result-display']\"))\n    )\n    generated_password = result_display.text\n    assert not is_lowercase_present(generated_password), f\"Password '{generated_password}' contains lowercase letters\"\n    time.sleep(1)\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: Toggle inclusion of lowercase letters in password generation\n\n  The user should be able to toggle the inclusion of lowercase letters in the password by checking or unchecking the 'Include lowercase letters' checkbox.\n\n\n  Scenario: [Edge] User toggles lowercase inclusion multiple times before generating password\n    Given the password generator page is loaded\n    And the checkbox with data-testid \"include-lowercase-checkbox\" is checked\n    When the user unchecks the checkbox with data-testid \"include-lowercase-checkbox\"\n    And checks the checkbox with data-testid \"include-lowercase-checkbox\"\n    And unchecks the checkbox with data-testid \"include-lowercase-checkbox\"\n    And clicks the button with data-testid \"generate-password-button\"\n    Then the generated password displayed in the element with data-testid \"result-display\" should not include any lowercase letters\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the password generator page is loaded')\ndef step_given_password_generator_page_loaded(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)\n\n@given('the checkbox with data-testid \"include-lowercase-checkbox\" is checked')\ndef step_given_lowercase_checkbox_checked(context):\n    checkbox = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='include-lowercase-checkbox']\"))\n    )\n    assert checkbox.is_selected(), \"Lowercase checkbox should be checked by default\"\n    time.sleep(1)\n\n@when('the user unchecks the checkbox with data-testid \"include-lowercase-checkbox\"')\ndef step_when_uncheck_lowercase_checkbox(context):\n    checkbox = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='include-lowercase-checkbox']\"))\n    )\n    if checkbox.is_selected():\n        checkbox.click()\n        time.sleep(1)\n\n@when('checks the checkbox with data-testid \"include-lowercase-checkbox\"')\ndef step_when_check_lowercase_checkbox(context):\n    checkbox = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='include-lowercase-checkbox']\"))\n    )\n    if not checkbox.is_selected():\n        checkbox.click()\n        time.sleep(1)\n\n@when('unchecks the checkbox with data-testid \"include-lowercase-checkbox\"')\ndef step_when_uncheck_lowercase_checkbox_again(context):\n    checkbox = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='include-lowercase-checkbox']\"))\n    )\n    if checkbox.is_selected():\n        checkbox.click()\n        time.sleep(1)\n\n@when('clicks the button with data-testid \"generate-password-button\"')\ndef step_when_click_generate_password_button(context):\n    generate_button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='generate-password-button']\"))\n    )\n    generate_button.click()\n    time.sleep(1)\n\n@then('the generated password displayed in the element with data-testid \"result-display\" should not include any lowercase letters')\ndef step_then_password_should_not_include_lowercase(context):\n    result_display = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='result-display']\"))\n    )\n    password = result_display.text\n    assert not any(char.islower() for char in password), \"Password should not include lowercase letters\"\n    time.sleep(1)\n    context.driver.quit()"
                }
            ]
        },
        "6": {
            "requirement": {
                "description": "The user must be able to toggle the inclusion of numbers in the generated password by interacting with the 'Include numbers' checkbox, identified by the attribute data-testid='include-numbers-checkbox'. When checked, the password generation process should ensure that at least one number is included in the password. Conversely, when unchecked, the password should exclude numbers entirely. The user can perform multiple toggles before generating the password, and the final state of the checkbox should dictate the presence or absence of numbers in the password. The password generation is initiated by clicking the 'Generate Password' button, identified by data-testid='generate-password-button', and the resulting password is displayed in the element with data-testid='result-display'."
            },
            "test_cases": [
                {
                    "test_case": [
                        "Feature: Toggle inclusion of numbers in password generation\n  The user should be able to toggle the inclusion of numbers in the password by checking or unchecking the 'Include numbers' checkbox.\n\n\n  Scenario: [Normal] User checks the 'Include numbers' checkbox to include numbers in the password\n    Given the password generator page is loaded\n    And the 'Include numbers' checkbox with data-testid 'include-numbers-checkbox' is unchecked\n    When the user checks the 'Include numbers' checkbox with data-testid 'include-numbers-checkbox'\n    And clicks the 'Generate Password' button with data-testid 'generate-password-button'\n    Then the generated password displayed in the element with data-testid 'result-display' should include at least one number\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given(\"the password generator page is loaded\")\ndef step_impl(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)\n\n@given(\"the 'Include numbers' checkbox with data-testid 'include-numbers-checkbox' is unchecked\")\ndef step_impl(context):\n    checkbox = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='include-numbers-checkbox']\"))\n    )\n    if checkbox.is_selected():\n        checkbox.click()\n    time.sleep(1)\n\n@when(\"the user checks the 'Include numbers' checkbox with data-testid 'include-numbers-checkbox'\")\ndef step_impl(context):\n    checkbox = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='include-numbers-checkbox']\"))\n    )\n    if not checkbox.is_selected():\n        checkbox.click()\n    time.sleep(1)\n\n@when(\"clicks the 'Generate Password' button with data-testid 'generate-password-button'\")\ndef step_impl(context):\n    generate_button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='generate-password-button']\"))\n    )\n    generate_button.click()\n    time.sleep(1)\n\n@then(\"the generated password displayed in the element with data-testid 'result-display' should include at least one number\")\ndef step_impl(context):\n    result_display = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='result-display']\"))\n    )\n    password = result_display.text\n    assert any(char.isdigit() for char in password), f\"Expected at least one number in the password, but got '{password}'\"\n\n    # Close the browser after the test\n    context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: Toggle inclusion of numbers in password generation\n  The user should be able to toggle the inclusion of numbers in the password by checking or unchecking the 'Include numbers' checkbox.\n\n\n  Scenario: [Normal] User unchecks the 'Include numbers' checkbox to exclude numbers from the password\n    Given the password generator page is loaded\n    And the 'Include numbers' checkbox with data-testid 'include-numbers-checkbox' is checked\n    When the user unchecks the 'Include numbers' checkbox with data-testid 'include-numbers-checkbox'\n    And clicks the 'Generate Password' button with data-testid 'generate-password-button'\n    Then the generated password displayed in the element with data-testid 'result-display' should not include any numbers\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given(\"the password generator page is loaded\")\ndef step_given_password_generator_page_loaded(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)\n\n@given(\"the 'Include numbers' checkbox with data-testid 'include-numbers-checkbox' is checked\")\ndef step_given_include_numbers_checkbox_checked(context):\n    checkbox = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='include-numbers-checkbox']\"))\n    )\n    assert checkbox.is_selected(), \"Expected 'Include numbers' checkbox to be checked\"\n\n@when(\"the user unchecks the 'Include numbers' checkbox with data-testid 'include-numbers-checkbox'\")\ndef step_when_user_unchecks_include_numbers_checkbox(context):\n    checkbox = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='include-numbers-checkbox']\"))\n    )\n    if checkbox.is_selected():\n        checkbox.click()\n        time.sleep(1)\n\n@when(\"clicks the 'Generate Password' button with data-testid 'generate-password-button'\")\ndef step_when_clicks_generate_password_button(context):\n    generate_button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='generate-password-button']\"))\n    )\n    generate_button.click()\n    time.sleep(1)\n\n@then(\"the generated password displayed in the element with data-testid 'result-display' should not include any numbers\")\ndef step_then_generated_password_should_not_include_numbers(context):\n    result_display = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='result-display']\"))\n    )\n    password = result_display.text\n    assert not any(char.isdigit() for char in password), f\"Expected no numbers in password, but got '{password}'\"\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: Toggle inclusion of numbers in password generation\n  The user should be able to toggle the inclusion of numbers in the password by checking or unchecking the 'Include numbers' checkbox.\n\n\n  Scenario: [Edge] User toggles the 'Include numbers' checkbox multiple times before generating the password\n    Given the password generator page is loaded\n    And the 'Include numbers' checkbox with data-testid 'include-numbers-checkbox' is checked\n    When the user unchecks the 'Include numbers' checkbox with data-testid 'include-numbers-checkbox'\n    And checks the 'Include numbers' checkbox with data-testid 'include-numbers-checkbox' again\n    And clicks the 'Generate Password' button with data-testid 'generate-password-button'\n    Then the generated password displayed in the element with data-testid 'result-display' should include at least one number\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given(\"the password generator page is loaded\")\ndef step_given_password_generator_page_loaded(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)\n\n@given(\"the 'Include numbers' checkbox with data-testid 'include-numbers-checkbox' is checked\")\ndef step_given_include_numbers_checkbox_checked(context):\n    checkbox = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='include-numbers-checkbox']\"))\n    )\n    assert checkbox.is_selected(), \"Expected 'Include numbers' checkbox to be checked\"\n\n@when(\"the user unchecks the 'Include numbers' checkbox with data-testid 'include-numbers-checkbox'\")\ndef step_when_user_unchecks_include_numbers_checkbox(context):\n    checkbox = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='include-numbers-checkbox']\"))\n    )\n    if checkbox.is_selected():\n        checkbox.click()\n        time.sleep(1)\n\n@when(\"checks the 'Include numbers' checkbox with data-testid 'include-numbers-checkbox' again\")\ndef step_when_user_checks_include_numbers_checkbox_again(context):\n    checkbox = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='include-numbers-checkbox']\"))\n    )\n    if not checkbox.is_selected():\n        checkbox.click()\n        time.sleep(1)\n\n@when(\"clicks the 'Generate Password' button with data-testid 'generate-password-button'\")\ndef step_when_user_clicks_generate_password_button(context):\n    generate_button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='generate-password-button']\"))\n    )\n    generate_button.click()\n    time.sleep(1)\n\n@then(\"the generated password displayed in the element with data-testid 'result-display' should include at least one number\")\ndef step_then_generated_password_should_include_number(context):\n    result_display = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='result-display']\"))\n    )\n    password = result_display.text\n    assert any(char.isdigit() for char in password), \"Expected generated password to include at least one number\"\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                }
            ]
        },
        "7": {
            "requirement": {
                "description": "The user must be able to toggle the inclusion of symbols in the generated password by interacting with the 'Include symbols' checkbox (data-testid: 'include-symbols-checkbox'). When the checkbox is checked, the generated password must include at least one symbol from the predefined set of symbols ('!@#$%^&*(){}[]=<>/,.') if the password length allows. When the checkbox is unchecked, the generated password must exclude all symbols. The system must handle edge cases where the checkbox is toggled multiple times before generating the password, ensuring the final state of the checkbox determines the inclusion or exclusion of symbols. If the 'Include symbols' checkbox is unchecked and no other character types (uppercase, lowercase, numbers) are selected, the result area (data-testid: 'result-display') must display an empty string. The password generation process is triggered by clicking the 'Generate Password' button (data-testid: 'generate-password-button'), and the generated password is displayed in the result area (data-testid: 'result-display')."
            },
            "test_cases": [
                {
                    "test_case": [
                        "Feature: Toggle inclusion of symbols in the password generation\n  The user should be able to toggle the inclusion of symbols in the password by checking or unchecking the 'Include symbols' checkbox.\n\n\n  Scenario: [Normal] Symbols are included when the checkbox is checked\n    Given the webpage is loaded and the 'Include symbols' checkbox with data-testid \"include-symbols-checkbox\" is checked\n    And the password length input with data-testid \"password-length-input\" has a value of 10\n    When the user clicks the 'Generate Password' button with data-testid \"generate-password-button\"\n    Then the generated password displayed in the result area with data-testid \"result-display\" should include at least one symbol from \"!@#$%^&*(){}[]=<>/,.\"\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the webpage is loaded and the \\'Include symbols\\' checkbox with data-testid \"include-symbols-checkbox\" is checked')\ndef step_impl(context):\n    # Initialize the WebDriver and load the test page\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)  # Allow the page to load\n\n    # Ensure the 'Include symbols' checkbox is checked\n    checkbox = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='include-symbols-checkbox']\"))\n    )\n    if not checkbox.is_selected():\n        checkbox.click()\n    time.sleep(1)\n\n@given('the password length input with data-testid \"password-length-input\" has a value of 10')\ndef step_impl(context):\n    # Set the password length input to 10\n    length_input = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='password-length-input']\"))\n    )\n    length_input.clear()\n    length_input.send_keys(\"10\")\n    time.sleep(1)\n\n@when('the user clicks the \\'Generate Password\\' button with data-testid \"generate-password-button\"')\ndef step_impl(context):\n    # Click the 'Generate Password' button\n    generate_button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='generate-password-button']\"))\n    )\n    generate_button.click()\n    time.sleep(1)\n\n@then('the generated password displayed in the result area with data-testid \"result-display\" should include at least one symbol from \"{symbols}\"')\ndef step_impl(context,symbols):\n    # Verify the generated password includes at least one symbol\n    result_display = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='result-display']\"))\n    )\n    generated_password = result_display.text\n    assert any(symbol in generated_password for symbol in symbols), \\\n        f\"Generated password '{generated_password}' does not include any symbol from '{symbols}'\"\n\n    # Close the browser after the test\n    context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: Toggle inclusion of symbols in the password generation\n  The user should be able to toggle the inclusion of symbols in the password by checking or unchecking the 'Include symbols' checkbox.\n\n\n  Scenario: [Normal] Symbols are excluded when the checkbox is unchecked\n    Given the webpage is loaded and the 'Include symbols' checkbox with data-testid \"include-symbols-checkbox\" is unchecked\n    And the password length input with data-testid \"password-length-input\" has a value of 10\n    When the user clicks the 'Generate Password' button with data-testid \"generate-password-button\"\n    Then the generated password displayed in the result area with data-testid \"result-display\" should not include any symbols from \"!@#$%^&*(){}[]=<>/,.\"\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the webpage is loaded and the \\'Include symbols\\' checkbox with data-testid \"include-symbols-checkbox\" is unchecked')\ndef step_impl(context):\n    # Initialize the WebDriver and load the test page\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    context.driver.maximize_window()\n    \n    # Wait for the checkbox to be present\n    checkbox = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='include-symbols-checkbox']\"))\n    )\n    \n    # Uncheck the checkbox if it is checked\n    if checkbox.is_selected():\n        checkbox.click()\n        time.sleep(1)  # Allow time for the UI to update\n\n@given('the password length input with data-testid \"password-length-input\" has a value of 10')\ndef step_impl(context):\n    # Locate the password length input field\n    length_input = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='password-length-input']\"))\n    )\n    \n    # Clear the input field and set its value to 10\n    length_input.clear()\n    length_input.send_keys(\"10\")\n    time.sleep(1)  # Allow time for the UI to update\n\n@when('the user clicks the \\'Generate Password\\' button with data-testid \"generate-password-button\"')\ndef step_impl(context):\n    # Locate the Generate Password button and click it\n    generate_button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='generate-password-button']\"))\n    )\n    generate_button.click()\n    time.sleep(1)  # Allow time for the password to be generated\n\n@then('the generated password displayed in the result area with data-testid \"result-display\" should not include any symbols from \"{symbols}\"')\ndef step_impl(context,symbols):\n    # Locate the result display area\n    result_display = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='result-display']\"))\n    )\n    \n    # Get the generated password\n    generated_password = result_display.text\n\n    \n    # Assert that no symbols are present in the generated password\n    assert not any(char in symbols for char in generated_password), \\\n        f\"Generated password contains symbols: {generated_password}\"\n\n    # Close the browser after the test\n    context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: Toggle inclusion of symbols in the password generation\n  The user should be able to toggle the inclusion of symbols in the password by checking or unchecking the 'Include symbols' checkbox.\n\n\n  Scenario: [Edge] Symbols checkbox is toggled multiple times before generating the password\n    Given the webpage is loaded and the 'Include symbols' checkbox with data-testid \"include-symbols-checkbox\" is checked\n    And the password length input with data-testid \"password-length-input\" has a value of 12\n    When the user unchecks the 'Include symbols' checkbox with data-testid \"include-symbols-checkbox\"\n    And then checks the 'Include symbols' checkbox again\n    And clicks the 'Generate Password' button with data-testid \"generate-password-button\"\n    Then the generated password displayed in the result area with data-testid \"result-display\" should include at least one symbol from \"!@#$%^&*(){}[]=<>/,.\"\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the webpage is loaded and the \\'Include symbols\\' checkbox with data-testid \"include-symbols-checkbox\" is checked')\ndef step_impl(context):\n    # Initialize the WebDriver and load the test page\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    context.driver.maximize_window()\n    \n    # Wait for the checkbox to be present and ensure it is checked\n    checkbox = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='include-symbols-checkbox']\"))\n    )\n    assert checkbox.is_selected(), \"The 'Include symbols' checkbox is not checked by default.\"\n\n@given('the password length input with data-testid \"password-length-input\" has a value of 12')\ndef step_impl(context):\n    # Locate the password length input and set its value to 12\n    length_input = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='password-length-input']\"))\n    )\n    length_input.clear()\n    length_input.send_keys(\"12\")\n    time.sleep(1)\n\n@when('the user unchecks the \\'Include symbols\\' checkbox with data-testid \"include-symbols-checkbox\"')\ndef step_impl(context):\n    # Locate the 'Include symbols' checkbox and uncheck it\n    checkbox = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='include-symbols-checkbox']\"))\n    )\n    if checkbox.is_selected():\n        checkbox.click()\n    time.sleep(1)\n\n@when('then checks the \\'Include symbols\\' checkbox again')\ndef step_impl(context):\n    # Locate the 'Include symbols' checkbox and check it again\n    checkbox = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='include-symbols-checkbox']\"))\n    )\n    if not checkbox.is_selected():\n        checkbox.click()\n    time.sleep(1)\n\n@when('clicks the \\'Generate Password\\' button with data-testid \"generate-password-button\"')\ndef step_impl(context):\n    # Locate and click the 'Generate Password' button\n    generate_button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='generate-password-button']\"))\n    )\n    generate_button.click()\n    time.sleep(1)\n\n@then('the generated password displayed in the result area with data-testid \"result-display\" should include at least one symbol from \"{symbols}\"')\ndef step_impl(context,symbols):\n    # Locate the result display area and validate the generated password\n    result_display = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='result-display']\"))\n    )\n    generated_password = result_display.text\n    \n    assert any(char in symbols for char in generated_password), \\\n        f\"The generated password does not include any symbols. Password: {generated_password}\"\n\n    # Close the browser after the test\n    context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: Toggle inclusion of symbols in the password generation\n  The user should be able to toggle the inclusion of symbols in the password by checking or unchecking the 'Include symbols' checkbox.\n\n\n  Scenario: [Error] Symbols checkbox is unchecked and no other character types are selected\n    Given the webpage is loaded and the 'Include symbols' checkbox with data-testid \"include-symbols-checkbox\" is unchecked\n    And the 'Include uppercase letters' checkbox with data-testid \"include-uppercase-checkbox\" is unchecked\n    And the 'Include lowercase letters' checkbox with data-testid \"include-lowercase-checkbox\" is unchecked\n    And the 'Include numbers' checkbox with data-testid \"include-numbers-checkbox\" is unchecked\n    And the password length input with data-testid \"password-length-input\" has a value of 8\n    When the user clicks the 'Generate Password' button with data-testid \"generate-password-button\"\n    Then the result area with data-testid \"result-display\" should display an empty string\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given(\"the webpage is loaded and the 'Include symbols' checkbox with data-testid \\\"include-symbols-checkbox\\\" is unchecked\")\ndef step_impl(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    context.driver.maximize_window()\n    time.sleep(1)\n    checkbox = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='include-symbols-checkbox']\"))\n    )\n    if checkbox.is_selected():\n        checkbox.click()\n    time.sleep(1)\n\n@given(\"the 'Include uppercase letters' checkbox with data-testid \\\"include-uppercase-checkbox\\\" is unchecked\")\ndef step_impl(context):\n    checkbox = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='include-uppercase-checkbox']\"))\n    )\n    if checkbox.is_selected():\n        checkbox.click()\n    time.sleep(1)\n\n@given(\"the 'Include lowercase letters' checkbox with data-testid \\\"include-lowercase-checkbox\\\" is unchecked\")\ndef step_impl(context):\n    checkbox = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='include-lowercase-checkbox']\"))\n    )\n    if checkbox.is_selected():\n        checkbox.click()\n    time.sleep(1)\n\n@given(\"the 'Include numbers' checkbox with data-testid \\\"include-numbers-checkbox\\\" is unchecked\")\ndef step_impl(context):\n    checkbox = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='include-numbers-checkbox']\"))\n    )\n    if checkbox.is_selected():\n        checkbox.click()\n    time.sleep(1)\n\n@given(\"the password length input with data-testid \\\"password-length-input\\\" has a value of 8\")\ndef step_impl(context):\n    input_field = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='password-length-input']\"))\n    )\n    input_field.clear()\n    input_field.send_keys(\"8\")\n    time.sleep(1)\n\n@when(\"the user clicks the 'Generate Password' button with data-testid \\\"generate-password-button\\\"\")\ndef step_impl(context):\n    generate_button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='generate-password-button']\"))\n    )\n    generate_button.click()\n    time.sleep(1)\n\n@then(\"the result area with data-testid \\\"result-display\\\" should display an empty string\")\ndef step_impl(context):\n    result_display = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='result-display']\"))\n    )\n    assert result_display.text.strip() == \"\", f\"Expected empty string, but got '{result_display.text.strip()}'\"\n\n# Teardown\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                }
            ]
        }
    }
}