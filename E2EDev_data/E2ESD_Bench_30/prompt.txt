
    You are tasked with implementing a complete web application using HTML, JavaScript, and CSS. Your implementation must strictly follow the specifications described below.
    SUMMARY:
    {
    "overview": "The application is a web-based ID Card and Badge Generator that allows users to input event details, personal information, and access levels to generate a personalized badge. Users can then download the badge as an image.",
    "predefined_options": "The application provides predefined options for the 'Access Level' field, including 'Attendee' and 'VIP', to standardize user input.",
    "external_resources": "The application uses external resources such as Google Fonts for styling and jQuery QR Code plugin for generating QR codes.",
    "external_js_libraries": "External JavaScript libraries used include jQuery (https://cdnjs.cloudflare.com/ajax/libs/jquery/3.6.0/jquery.min.js), jQuery QR Code (https://cdnjs.cloudflare.com/ajax/libs/jquery.qrcode/1.0/jquery.qrcode.min.js), and html-to-image (https://cdnjs.cloudflare.com/ajax/libs/html-to-image/1.11.11/html-to-image.js)."
}
    ## Functional Requirements
    Implement the following features as described. For each requirement, make sure the HTML structure, JavaScript behavior, and CSS styles match the specifications exactly.
    REQUIREMENTS:
    - Requirement 1: 
When the user accesses the application, the system shall display a form with the following fields and elements: an input field for 'Event Name' with data-testid 'eventname', an input field for 'Person Name' with data-testid 'name', an input field for 'Designation' with data-testid 'designation', an input field for 'Company Name' with data-testid 'company', and a select dropdown for 'Access Level' with data-testid 'access'. Each of these fields is required. Additionally, a 'Generate Badge' button with data-testid 'generate-badge-button' shall be visible. The form, identified by data-testid 'badgeForm', must be fully accessible and visible on all screen sizes, ensuring that all fields and the button are accessible without horizontal scrolling on small screen devices.
- Requirement 2: 
The web application shall provide a form within a container identified by data-testid 'formContainer' for generating badges. The form, identified by data-testid 'badgeForm', shall include input fields for 'Event Name', 'Person Name', 'Designation', and 'Company Name', each with corresponding data-testids 'eventname', 'name', 'designation', and 'company'. Additionally, a dropdown for 'Access Level' with data-testid 'access' shall be present, offering options 'Attendee' and 'VIP'. All fields are required for form submission. Upon clicking the submit button with data-testid 'generate-badge-button', if all fields are correctly filled, the form container shall be hidden, and a badge container with data-testid 'badge' shall be displayed, showing the entered details. A QR code shall be generated within the badge, containing the user's ID and entered information. The 'Download Badge' button with data-testid 'dwnBadge' shall become visible, allowing the user to download the badge as a PNG image. If any field is left empty, the form shall remain visible, and the badge and download button shall not be displayed.
- Requirement 3: 
The web application shall provide a badge generation feature where users can input details including Event Name, Person Name, Designation, Company Name, and Access Level through a form. The form fields are identified by data-testid attributes: 'eventname', 'name', 'designation', 'company', and 'access'. Upon clicking the 'Generate Badge' button (data-testid: 'generate-badge-button'), the form (data-testid: 'formContainer') shall be hidden, and a badge (data-testid: 'badge') shall be displayed. The badge will dynamically update to show the entered Event Name (data-testid: 'badgeEvent'), Person Name (data-testid: 'badgeName'), Designation (data-testid: 'badgeDesignation'), Company Name prefixed with '@' (data-testid: 'badgecontainer'), and Access Level (data-testid: 'badgeAccess'). Additionally, a QR code will be generated within the badge (data-testid: 'qrcode') containing the badge details. The 'Download Badge' button (data-testid: 'dwnBadge') will be enabled to allow users to download the badge as a PNG image. The system shall handle both normal and edge cases, including minimum input lengths for each field.
- Requirement 4: 
Upon form submission on the Badge Generator page, the system shall generate a unique ID for each badge. The user must provide inputs for Event Name, Person Name, Designation, Company Name, and select an Access Level from the dropdown options ('Attendee' or 'VIP'). These inputs, along with the generated unique ID, shall be embedded within a QR code displayed on the badge. The badge and QR code are shown in the designated badge area with data-testid 'badge' and 'qrcode', respectively. The form submission hides the form container with data-testid 'formContainer' and displays the badge container. The QR code text format should be 'ID: IDxxxx\nEvent: [Event Name]\nName: [Person Name]\nDesignation: [Designation]\nCompany: @[Company Name]\nAccess: [Access Level]'. Additionally, a 'Download Badge' button with data-testid 'dwnBadge' is displayed, allowing users to download the badge as a PNG image. The download functionality uses the html-to-image library to convert the badge HTML element into an image file.
- Requirement 5: 
The system shall display a 'Download Badge' button with the data-testid 'dwnBadge' after the user successfully generates a badge by submitting the form with all required fields: 'Event Name' (data-testid 'eventname'), 'Person Name' (data-testid 'name'), 'Designation' (data-testid 'designation'), 'Company Name' (data-testid 'company'), and 'Access Level' (data-testid 'access'). Upon clicking the 'Generate Badge' button (data-testid 'generate-badge-button'), the form container (data-testid 'formContainer') should be hidden, and the badge details should be displayed in the badge section (data-testid 'badge'). The badge should include a QR code (data-testid 'qrcode') generated with the user's details. The 'Download Badge' button should become visible, allowing the user to download the badge as a PNG image when clicked. The download process should create a link element, set its 'href' attribute to the generated image data URL, and trigger a click event to initiate the download.
- Requirement 6: 
The system shall allow users to generate and download a badge as a PNG image. When the user fills out the badge form with fields for 'Event Name', 'Person Name', 'Designation', 'Company Name', and 'Access Level', and submits the form by clicking the 'Generate Badge' button (data-testid: 'generate-badge-button'), the badge is displayed with the entered details. The badge includes a QR code generated with the user's information. Upon clicking the 'Download Badge' button (data-testid: 'dwnBadge'), the system shall convert the visible badge, including the QR code, to a PNG image and initiate a download to the user's device. The download functionality must handle normal and edge cases, such as large text content, ensuring the image is correctly formatted and downloaded without errors.

    
    ## Output Format
    Provide a clean and complete implementation including:
    1. HTML structure (including necessary `data-testid`, `id`, and `class` values).
    2. JavaScript functionality that matches the behavior described.
    3. CSS for styling according to BEM and required class names.
    4. Ensure that the text content in the components is exactly as specified in the requirements.
    Do not include any extra components or libraries not listed above. Keep your code concise, semantic, and standards-compliant.
    