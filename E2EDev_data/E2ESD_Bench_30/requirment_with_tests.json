{
    "summary": {
        "overview": "The application is a web-based ID Card and Badge Generator that allows users to input event details, personal information, and access levels to generate a personalized badge. Users can then download the badge as an image.",
        "predefined_options": "The application provides predefined options for the 'Access Level' field, including 'Attendee' and 'VIP', to standardize user input.",
        "external_resources": "The application uses external resources such as Google Fonts for styling and jQuery QR Code plugin for generating QR codes.",
        "external_js_libraries": "External JavaScript libraries used include jQuery (https://cdnjs.cloudflare.com/ajax/libs/jquery/3.6.0/jquery.min.js), jQuery QR Code (https://cdnjs.cloudflare.com/ajax/libs/jquery.qrcode/1.0/jquery.qrcode.min.js), and html-to-image (https://cdnjs.cloudflare.com/ajax/libs/html-to-image/1.11.11/html-to-image.js)."
    },
    "finegrained_rewith_test": {
        "1": {
            "requirement": {
                "description": "When the user accesses the application, the system shall display a form with the following fields and elements: an input field for 'Event Name' with data-testid 'eventname', an input field for 'Person Name' with data-testid 'name', an input field for 'Designation' with data-testid 'designation', an input field for 'Company Name' with data-testid 'company', and a select dropdown for 'Access Level' with data-testid 'access'. Each of these fields is required. Additionally, a 'Generate Badge' button with data-testid 'generate-badge-button' shall be visible. The form, identified by data-testid 'badgeForm', must be fully accessible and visible on all screen sizes, ensuring that all fields and the button are accessible without horizontal scrolling on small screen devices."
            },
            "test_cases": [
                {
                    "test_case": [
                        "Feature: Display Badge Generation Form\n  The system shall display a form with fields for Event Name, Person Name, Designation, Company Name, and Access Level, along with a 'Generate Badge' button when the user accesses the application.\n\n\n  Scenario: [Normal] Display form with all required fields and button\n    Given the user accesses the application\n    When the webpage is fully loaded\n    Then the form with data-testid \"badgeForm\" should be visible\n    And the input field with data-testid \"eventname\" should be visible and required\n    And the input field with data-testid \"name\" should be visible and required\n    And the input field with data-testid \"designation\" should be visible and required\n    And the input field with data-testid \"company\" should be visible and required\n    And the select dropdown with data-testid \"access\" should be visible and required\n    And the button with data-testid \"generate-badge-button\" should be visible\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the user accesses the application')\ndef step_given_user_accesses_application(context):\n    # Initialize the WebDriver\n    context.driver = webdriver.Chrome()\n    # Navigate to the test page\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)\n\n@when('the webpage is fully loaded')\ndef step_when_webpage_fully_loaded(context):\n    # Wait for the form to be visible\n    WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='formContainer']\"))\n    )\n    time.sleep(1)\n\n@then('the form with data-testid \"badgeForm\" should be visible')\ndef step_then_form_visible(context):\n    form = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='badgeForm']\")\n    assert form.is_displayed(), \"Form is not visible\"\n    time.sleep(1)\n\n@then('the input field with data-testid \"eventname\" should be visible and required')\ndef step_then_eventname_field_visible(context):\n    eventname_field = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='eventname']\")\n    assert eventname_field.is_displayed(), \"Event Name field is not visible\"\n    assert eventname_field.get_attribute(\"required\") is not None, \"Event Name field is not required\"\n    time.sleep(1)\n\n@then('the input field with data-testid \"name\" should be visible and required')\ndef step_then_name_field_visible(context):\n    name_field = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='name']\")\n    assert name_field.is_displayed(), \"Name field is not visible\"\n    assert name_field.get_attribute(\"required\") is not None, \"Name field is not required\"\n    time.sleep(1)\n\n@then('the input field with data-testid \"designation\" should be visible and required')\ndef step_then_designation_field_visible(context):\n    designation_field = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='designation']\")\n    assert designation_field.is_displayed(), \"Designation field is not visible\"\n    assert designation_field.get_attribute(\"required\") is not None, \"Designation field is not required\"\n    time.sleep(1)\n\n@then('the input field with data-testid \"company\" should be visible and required')\ndef step_then_company_field_visible(context):\n    company_field = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='company']\")\n    assert company_field.is_displayed(), \"Company field is not visible\"\n    assert company_field.get_attribute(\"required\") is not None, \"Company field is not required\"\n    time.sleep(1)\n\n@then('the select dropdown with data-testid \"access\" should be visible and required')\ndef step_then_access_dropdown_visible(context):\n    access_dropdown = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='access']\")\n    assert access_dropdown.is_displayed(), \"Access dropdown is not visible\"\n    assert access_dropdown.get_attribute(\"required\") is not None, \"Access dropdown is not required\"\n    time.sleep(1)\n\n@then('the button with data-testid \"generate-badge-button\" should be visible')\ndef step_then_generate_badge_button_visible(context):\n    generate_badge_button = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='generate-badge-button']\")\n    assert generate_badge_button.is_displayed(), \"Generate Badge button is not visible\"\n    time.sleep(1)\n\ndef after_scenario(context, scenario):\n    # Close the browser after each scenario\n    context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: Display Badge Generation Form\n  The system shall display a form with fields for Event Name, Person Name, Designation, Company Name, and Access Level, along with a 'Generate Badge' button when the user accesses the application.\n\n\n  Scenario: [Edge] Verify form visibility on different screen sizes\n    Given the user accesses the application\n    When the webpage is fully loaded on a small screen device\n    Then the form with data-testid \"badgeForm\" should be visible\n    And all form fields and the button should be accessible without horizontal scrolling\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the user accesses the application')\ndef step_given_user_accesses_application(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)\n\n@when('the webpage is fully loaded on a small screen device')\ndef step_when_webpage_loaded_on_small_screen(context):\n    # Simulate small screen by resizing the window\n    context.driver.set_window_size(375, 667)  # iPhone 6/7/8 dimensions\n    time.sleep(1)\n\n@then('the form with data-testid \"badgeForm\" should be visible')\ndef step_then_form_should_be_visible(context):\n    form = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='badgeForm']\"))\n    )\n    assert form.is_displayed(), \"The form is not visible on the page.\"\n\n@then('all form fields and the button should be accessible without horizontal scrolling')\ndef step_then_form_fields_accessible(context):\n    # Check if the form container is within the viewport width\n    form_container = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='formContainer']\")\n    window_width = context.driver.execute_script(\"return window.innerWidth;\")\n    form_width = form_container.size['width']\n    assert form_width <= window_width, \"Form fields are not accessible without horizontal scrolling.\"\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                }
            ]
        },
        "2": {
            "requirement": {
                "description": "The web application shall provide a form within a container identified by data-testid 'formContainer' for generating badges. The form, identified by data-testid 'badgeForm', shall include input fields for 'Event Name', 'Person Name', 'Designation', and 'Company Name', each with corresponding data-testids 'eventname', 'name', 'designation', and 'company'. Additionally, a dropdown for 'Access Level' with data-testid 'access' shall be present, offering options 'Attendee' and 'VIP'. All fields are required for form submission. Upon clicking the submit button with data-testid 'generate-badge-button', if all fields are correctly filled, the form container shall be hidden, and a badge container with data-testid 'badge' shall be displayed, showing the entered details. A QR code shall be generated within the badge, containing the user's ID and entered information. The 'Download Badge' button with data-testid 'dwnBadge' shall become visible, allowing the user to download the badge as a PNG image. If any field is left empty, the form shall remain visible, and the badge and download button shall not be displayed."
            },
            "test_cases": [
                {
                    "test_case": [
                        "Feature: Form Submission Requirement\n  The system shall require the user to fill in all fields in the form before allowing submission, ensuring that Event Name, Person Name, Designation, Company Name, and Access Level are provided.\n\n\n  Scenario: [Normal] Successful form submission with all fields filled\n    Given the webpage \"ID Card and Badge Generator\" is loaded\n    And the form with data-testid \"badgeForm\" is visible\n    When the user enters \"Tech Conference 2023\" into the event name field with data-testid \"eventname\"\n    And the user enters \"John Doe\" into the person name field with data-testid \"name\"\n    And the user enters \"Software Engineer\" into the designation field with data-testid \"designation\"\n    And the user enters \"TechCorp\" into the company name field with data-testid \"company\"\n    And the user selects \"VIP\" from the access level dropdown with data-testid \"access\"\n    And the user clicks the submit button with data-testid \"generate-badge-button\"\n    Then the form with data-testid \"formContainer\" is hidden\n    And the badge with data-testid \"badge\" is displayed\n    And the download badge button with data-testid \"dwnBadge\" is visible\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the webpage \"ID Card and Badge Generator\" is loaded')\ndef step_given_webpage_loaded(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    context.driver.maximize_window()\n    time.sleep(1)\n\n@given('the form with data-testid \"badgeForm\" is visible')\ndef step_given_form_visible(context):\n    form = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='badgeForm']\"))\n    )\n    assert form.is_displayed(), \"Form is not visible\"\n    time.sleep(1)\n\n@when('the user enters \"Tech Conference 2023\" into the event name field with data-testid \"eventname\"')\ndef step_when_enter_event_name(context):\n    event_name_field = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='eventname']\")\n    event_name_field.clear()\n    event_name_field.send_keys(\"Tech Conference 2023\")\n    time.sleep(1)\n\n@when('the user enters \"John Doe\" into the person name field with data-testid \"name\"')\ndef step_when_enter_person_name(context):\n    person_name_field = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='name']\")\n    person_name_field.clear()\n    person_name_field.send_keys(\"John Doe\")\n    time.sleep(1)\n\n@when('the user enters \"Software Engineer\" into the designation field with data-testid \"designation\"')\ndef step_when_enter_designation(context):\n    designation_field = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='designation']\")\n    designation_field.clear()\n    designation_field.send_keys(\"Software Engineer\")\n    time.sleep(1)\n\n@when('the user enters \"TechCorp\" into the company name field with data-testid \"company\"')\ndef step_when_enter_company_name(context):\n    company_name_field = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='company']\")\n    company_name_field.clear()\n    company_name_field.send_keys(\"TechCorp\")\n    time.sleep(1)\n\n@when('the user selects \"VIP\" from the access level dropdown with data-testid \"access\"')\ndef step_when_select_access_level(context):\n    access_dropdown = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='access']\")\n    access_dropdown.click()\n    vip_option = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='option-vip']\")\n    vip_option.click()\n    time.sleep(1)\n\n@when('the user clicks the submit button with data-testid \"generate-badge-button\"')\ndef step_when_click_submit_button(context):\n    submit_button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='generate-badge-button']\"))\n    )\n    submit_button.click()\n    time.sleep(1)\n\n@then('the form with data-testid \"formContainer\" is hidden')\ndef step_then_form_hidden(context):\n    form_container = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='formContainer']\")\n    assert not form_container.is_displayed(), \"Form container is not hidden\"\n    time.sleep(1)\n\n@then('the badge with data-testid \"badge\" is displayed')\ndef step_then_badge_displayed(context):\n    badge = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='badge']\"))\n    )\n    assert badge.is_displayed(), \"Badge is not displayed\"\n    time.sleep(1)\n\n@then('the download badge button with data-testid \"dwnBadge\" is visible')\ndef step_then_download_button_visible(context):\n    download_button = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='dwnBadge']\")\n    assert download_button.is_displayed(), \"Download badge button is not visible\"\n    time.sleep(1)\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: Form Submission Requirement\n  The system shall require the user to fill in all fields in the form before allowing submission, ensuring that Event Name, Person Name, Designation, Company Name, and Access Level are provided.\n\n\n  Scenario: [Edge] Attempt to submit form with one field empty\n    Given the webpage \"ID Card and Badge Generator\" is loaded\n    And the form with data-testid \"badgeForm\" is visible\n    When the user enters \"Tech Conference 2023\" into the event name field with data-testid \"eventname\"\n    And the user enters \"John Doe\" into the person name field with data-testid \"name\"\n    And the user enters \"Software Engineer\" into the designation field with data-testid \"designation\"\n    And the user enters \"\" into the company name field with data-testid \"company\"\n    And the user selects \"VIP\" from the access level dropdown with data-testid \"access\"\n    And the user clicks the submit button with data-testid \"generate-badge-button\"\n    Then the form with data-testid \"formContainer\" remains visible\n    And the badge with data-testid \"badge\" is not displayed\n    And the download badge button with data-testid \"dwnBadge\" is not visible\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\ndef is_visible(element):\n    return element.is_displayed()\n\n@given('the webpage \"ID Card and Badge Generator\" is loaded')\ndef step_given_webpage_loaded(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)\n\n@given('the form with data-testid \"badgeForm\" is visible')\ndef step_given_form_visible(context):\n    form = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='badgeForm']\"))\n    )\n    assert is_visible(form), \"Form is not visible\"\n    time.sleep(1)\n\n@when('the user enters \"Tech Conference 2023\" into the event name field with data-testid \"eventname\"')\ndef step_when_enter_event_name(context):\n    event_name_input = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='eventname']\")\n    event_name_input.send_keys(\"Tech Conference 2023\")\n    time.sleep(1)\n\n@when('the user enters \"John Doe\" into the person name field with data-testid \"name\"')\ndef step_when_enter_person_name(context):\n    person_name_input = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='name']\")\n    person_name_input.send_keys(\"John Doe\")\n    time.sleep(1)\n\n@when('the user enters \"Software Engineer\" into the designation field with data-testid \"designation\"')\ndef step_when_enter_designation(context):\n    designation_input = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='designation']\")\n    designation_input.send_keys(\"Software Engineer\")\n    time.sleep(1)\n\n@when('the user enters \"\" into the company name field with data-testid \"company\"')\ndef step_when_enter_company_name(context):\n    company_name_input = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='company']\")\n    company_name_input.send_keys(\"\")\n    time.sleep(1)\n\n@when('the user selects \"VIP\" from the access level dropdown with data-testid \"access\"')\ndef step_when_select_access_level(context):\n    access_dropdown = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='access']\")\n    access_dropdown.click()\n    vip_option = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='option-vip']\")\n    vip_option.click()\n    time.sleep(1)\n\n@when('the user clicks the submit button with data-testid \"generate-badge-button\"')\ndef step_when_click_submit_button(context):\n    submit_button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='generate-badge-button']\"))\n    )\n    submit_button.click()\n    time.sleep(1)\n\n@then('the form with data-testid \"formContainer\" remains visible')\ndef step_then_form_remains_visible(context):\n    form_container = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='formContainer']\")\n    assert is_visible(form_container), \"Form container is not visible\"\n    time.sleep(1)\n\n@then('the badge with data-testid \"badge\" is not displayed')\ndef step_then_badge_not_displayed(context):\n    badge = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='badge']\")\n    assert not is_visible(badge), \"Badge is displayed\"\n    time.sleep(1)\n\n@then('the download badge button with data-testid \"dwnBadge\" is not visible')\ndef step_then_download_button_not_visible(context):\n    download_button = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='dwnBadge']\")\n    assert not is_visible(download_button), \"Download badge button is visible\"\n    time.sleep(1)\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: Form Submission Requirement\n  The system shall require the user to fill in all fields in the form before allowing submission, ensuring that Event Name, Person Name, Designation, Company Name, and Access Level are provided.\n\n\n  Scenario: [Error] Attempt to submit form with all fields empty\n    Given the webpage \"ID Card and Badge Generator\" is loaded\n    And the form with data-testid \"badgeForm\" is visible\n    When the user enters \"\" into the event name field with data-testid \"eventname\"\n    And the user enters \"\" into the person name field with data-testid \"name\"\n    And the user enters \"\" into the designation field with data-testid \"designation\"\n    And the user enters \"\" into the company name field with data-testid \"company\"\n    And the user selects \"\" from the access level dropdown with data-testid \"access\"\n    And the user clicks the submit button with data-testid \"generate-badge-button\"\n    Then the form with data-testid \"formContainer\" remains visible\n    And the badge with data-testid \"badge\" is not displayed\n    And the download badge button with data-testid \"dwnBadge\" is not visible"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the webpage \"ID Card and Badge Generator\" is loaded')\ndef step_given_webpage_loaded(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)\n\n@given('the form with data-testid \"badgeForm\" is visible')\ndef step_given_form_visible(context):\n    form = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='badgeForm']\"))\n    )\n    assert form.is_displayed(), \"Form is not visible\"\n    time.sleep(1)\n\n@when('the user enters \"\" into the event name field with data-testid \"eventname\"')\ndef step_when_enter_event_name(context):\n    eventname_field = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='eventname']\")\n    eventname_field.clear()\n    eventname_field.send_keys(\"\")\n    time.sleep(1)\n\n@when('the user enters \"\" into the person name field with data-testid \"name\"')\ndef step_when_enter_person_name(context):\n    name_field = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='name']\")\n    name_field.clear()\n    name_field.send_keys(\"\")\n    time.sleep(1)\n\n@when('the user enters \"\" into the designation field with data-testid \"designation\"')\ndef step_when_enter_designation(context):\n    designation_field = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='designation']\")\n    designation_field.clear()\n    designation_field.send_keys(\"\")\n    time.sleep(1)\n\n@when('the user enters \"\" into the company name field with data-testid \"company\"')\ndef step_when_enter_company_name(context):\n    company_field = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='company']\")\n    company_field.clear()\n    company_field.send_keys(\"\")\n    time.sleep(1)\n\n@when('the user selects \"\" from the access level dropdown with data-testid \"access\"')\ndef step_when_select_access_level(context):\n    access_dropdown = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='access']\")\n    access_dropdown.click()\n    time.sleep(1)\n\n@when('the user clicks the submit button with data-testid \"generate-badge-button\"')\ndef step_when_click_submit_button(context):\n    submit_button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='generate-badge-button']\"))\n    )\n    submit_button.click()\n    time.sleep(1)\n\n@then('the form with data-testid \"formContainer\" remains visible')\ndef step_then_form_remains_visible(context):\n    form_container = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='formContainer']\")\n    assert form_container.is_displayed(), \"Form container is not visible\"\n    time.sleep(1)\n\n@then('the badge with data-testid \"badge\" is not displayed')\ndef step_then_badge_not_displayed(context):\n    badge = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='badge']\")\n    assert not badge.is_displayed(), \"Badge is displayed\"\n    time.sleep(1)\n\n@then('the download badge button with data-testid \"dwnBadge\" is not visible')\ndef step_then_download_button_not_visible(context):\n    download_button = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='dwnBadge']\")\n    assert not download_button.is_displayed(), \"Download badge button is visible\"\n    time.sleep(1)\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                }
            ]
        },
        "3": {
            "requirement": {
                "description": "The web application shall provide a badge generation feature where users can input details including Event Name, Person Name, Designation, Company Name, and Access Level through a form. The form fields are identified by data-testid attributes: 'eventname', 'name', 'designation', 'company', and 'access'. Upon clicking the 'Generate Badge' button (data-testid: 'generate-badge-button'), the form (data-testid: 'formContainer') shall be hidden, and a badge (data-testid: 'badge') shall be displayed. The badge will dynamically update to show the entered Event Name (data-testid: 'badgeEvent'), Person Name (data-testid: 'badgeName'), Designation (data-testid: 'badgeDesignation'), Company Name prefixed with '@' (data-testid: 'badgecontainer'), and Access Level (data-testid: 'badgeAccess'). Additionally, a QR code will be generated within the badge (data-testid: 'qrcode') containing the badge details. The 'Download Badge' button (data-testid: 'dwnBadge') will be enabled to allow users to download the badge as a PNG image. The system shall handle both normal and edge cases, including minimum input lengths for each field."
            },
            "test_cases": [
                {
                    "test_case": [
                        "Feature: Badge Generation and Display\n  The system shall hide the form and display the badge with the entered Event Name, Person Name, Designation, Company Name, and Access Level upon clicking the 'Generate Badge' button.\n\n\n  Scenario: [Normal] Generate badge with valid inputs\n    Given the badge generation page is loaded\n    And the user enters \"Tech Conference\" into the event name field with data-testid \"eventname\"\n    And the user enters \"John Doe\" into the person name field with data-testid \"name\"\n    And the user enters \"Developer\" into the designation field with data-testid \"designation\"\n    And the user enters \"TechCorp\" into the company name field with data-testid \"company\"\n    And the user selects \"VIP\" from the access level dropdown with data-testid \"access\"\n    When the user clicks the \"Generate Badge\" button with data-testid \"generate-badge-button\"\n    Then the form with data-testid \"formContainer\" should be hidden\n    And the badge with data-testid \"badge\" should be displayed\n    And the badge should show \"Tech Conference\" in the event name with data-testid \"badgeEvent\"\n    And the badge should show \"John Doe\" in the person name with data-testid \"badgeName\"\n    And the badge should show \"Developer\" in the designation with data-testid \"badgeDesignation\"\n    And the badge should show \"@TechCorp\" in the company name with data-testid \"badgecontainer\"\n    And the badge should show \"VIP\" in the access level with data-testid \"badgeAccess\"\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the badge generation page is loaded')\ndef step_given_badge_generation_page_loaded(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)\n\n@given('the user enters \"{event_name}\" into the event name field with data-testid \"eventname\"')\ndef step_given_user_enters_event_name(context, event_name):\n    event_name_field = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='eventname']\"))\n    )\n    event_name_field.clear()\n    event_name_field.send_keys(event_name)\n    time.sleep(1)\n\n@given('the user enters \"{person_name}\" into the person name field with data-testid \"name\"')\ndef step_given_user_enters_person_name(context, person_name):\n    person_name_field = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='name']\"))\n    )\n    person_name_field.clear()\n    person_name_field.send_keys(person_name)\n    time.sleep(1)\n\n@given('the user enters \"{designation}\" into the designation field with data-testid \"designation\"')\ndef step_given_user_enters_designation(context, designation):\n    designation_field = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='designation']\"))\n    )\n    designation_field.clear()\n    designation_field.send_keys(designation)\n    time.sleep(1)\n\n@given('the user enters \"{company_name}\" into the company name field with data-testid \"company\"')\ndef step_given_user_enters_company_name(context, company_name):\n    company_name_field = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='company']\"))\n    )\n    company_name_field.clear()\n    company_name_field.send_keys(company_name)\n    time.sleep(1)\n\n@given('the user selects \"{access_level}\" from the access level dropdown with data-testid \"access\"')\ndef step_given_user_selects_access_level(context, access_level):\n    access_dropdown = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='access']\"))\n    )\n    access_dropdown.click()\n    option = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, f\"[data-testid='option-{access_level.lower()}']\"))\n    )\n    option.click()\n    time.sleep(1)\n\n@when('the user clicks the \"Generate Badge\" button with data-testid \"generate-badge-button\"')\ndef step_when_user_clicks_generate_badge_button(context):\n    generate_badge_button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='generate-badge-button']\"))\n    )\n    generate_badge_button.click()\n    time.sleep(1)\n\n@then('the form with data-testid \"formContainer\" should be hidden')\ndef step_then_form_should_be_hidden(context):\n    form_container = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='formContainer']\")\n    assert not form_container.is_displayed(), \"Form container should be hidden\"\n\n@then('the badge with data-testid \"badge\" should be displayed')\ndef step_then_badge_should_be_displayed(context):\n    badge = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='badge']\"))\n    )\n    assert badge.is_displayed(), \"Badge should be displayed\"\n\n@then('the badge should show \"{event_name}\" in the event name with data-testid \"badgeEvent\"')\ndef step_then_badge_should_show_event_name(context, event_name):\n    badge_event = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='badgeEvent']\")\n    assert event_name.lower() in badge_event.text.lower(), f\"Expected '{event_name}' in '{badge_event.text}'\"\n\n@then('the badge should show \"{person_name}\" in the person name with data-testid \"badgeName\"')\ndef step_then_badge_should_show_person_name(context, person_name):\n    badge_name = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='badgeName']\")\n    assert person_name.lower() in badge_name.text.lower(), f\"Expected '{person_name}' in '{badge_name.text}'\"\n\n@then('the badge should show \"{designation}\" in the designation with data-testid \"badgeDesignation\"')\ndef step_then_badge_should_show_designation(context, designation):\n    badge_designation = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='badgeDesignation']\")\n    assert designation.lower() in badge_designation.text.lower(), f\"Expected '{designation}' in '{badge_designation.text}'\"\n\n@then('the badge should show \"@{company_name}\" in the company name with data-testid \"badgecontainer\"')\ndef step_then_badge_should_show_company_name(context, company_name):\n    badge_company = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='badgecontainer']\")\n    expected_company = f\"@{company_name}\"\n    assert expected_company.lower() in badge_company.text.lower(), f\"Expected '{expected_company}' in '{badge_company.text}'\"\n\n@then('the badge should show \"{access_level}\" in the access level with data-testid \"badgeAccess\"')\ndef step_then_badge_should_show_access_level(context, access_level):\n    badge_access = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='badgeAccess']\")\n    assert access_level.lower() in badge_access.text.lower(), f\"Expected '{access_level}' in '{badge_access.text}'\"\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: Badge Generation and Display\n  The system shall hide the form and display the badge with the entered Event Name, Person Name, Designation, Company Name, and Access Level upon clicking the 'Generate Badge' button.\n\n\n  Scenario: [Edge] Generate badge with minimum input length\n    Given the badge generation page is loaded\n    And the user enters \"A\" into the event name field with data-testid \"eventname\"\n    And the user enters \"B\" into the person name field with data-testid \"name\"\n    And the user enters \"C\" into the designation field with data-testid \"designation\"\n    And the user enters \"D\" into the company name field with data-testid \"company\"\n    And the user selects \"Attendee\" from the access level dropdown with data-testid \"access\"\n    When the user clicks the \"Generate Badge\" button with data-testid \"generate-badge-button\"\n    Then the form with data-testid \"formContainer\" should be hidden\n    And the badge with data-testid \"badge\" should be displayed\n    And the badge should show \"A\" in the event name with data-testid \"badgeEvent\"\n    And the badge should show \"B\" in the person name with data-testid \"badgeName\"\n    And the badge should show \"C\" in the designation with data-testid \"badgeDesignation\"\n    And the badge should show \"@D\" in the company name with data-testid \"badgecontainer\"\n    And the badge should show \"Attendee\" in the access level with data-testid \"badgeAccess\"\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the badge generation page is loaded')\ndef step_given_badge_generation_page_loaded(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)\n\n@given('the user enters \"{event_name}\" into the event name field with data-testid \"eventname\"')\ndef step_given_user_enters_event_name(context, event_name):\n    event_name_field = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='eventname']\"))\n    )\n    event_name_field.clear()\n    event_name_field.send_keys(event_name)\n    time.sleep(1)\n\n@given('the user enters \"{person_name}\" into the person name field with data-testid \"name\"')\ndef step_given_user_enters_person_name(context, person_name):\n    person_name_field = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='name']\"))\n    )\n    person_name_field.clear()\n    person_name_field.send_keys(person_name)\n    time.sleep(1)\n\n@given('the user enters \"{designation}\" into the designation field with data-testid \"designation\"')\ndef step_given_user_enters_designation(context, designation):\n    designation_field = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='designation']\"))\n    )\n    designation_field.clear()\n    designation_field.send_keys(designation)\n    time.sleep(1)\n\n@given('the user enters \"{company_name}\" into the company name field with data-testid \"company\"')\ndef step_given_user_enters_company_name(context, company_name):\n    company_name_field = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='company']\"))\n    )\n    company_name_field.clear()\n    company_name_field.send_keys(company_name)\n    time.sleep(1)\n\n@given('the user selects \"{access_level}\" from the access level dropdown with data-testid \"access\"')\ndef step_given_user_selects_access_level(context, access_level):\n    access_dropdown = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='access']\"))\n    )\n    access_dropdown.click()\n    option = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, f\"[data-testid='option-{access_level.lower()}']\"))\n    )\n    option.click()\n    time.sleep(1)\n\n@when('the user clicks the \"Generate Badge\" button with data-testid \"generate-badge-button\"')\ndef step_when_user_clicks_generate_badge_button(context):\n    generate_badge_button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='generate-badge-button']\"))\n    )\n    generate_badge_button.click()\n    time.sleep(1)\n\n@then('the form with data-testid \"formContainer\" should be hidden')\ndef step_then_form_should_be_hidden(context):\n    form_container = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='formContainer']\"))\n    )\n    assert not form_container.is_displayed(), \"Form container should be hidden\"\n\n@then('the badge with data-testid \"badge\" should be displayed')\ndef step_then_badge_should_be_displayed(context):\n    badge = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='badge']\"))\n    )\n    assert badge.is_displayed(), \"Badge should be displayed\"\n\n@then('the badge should show \"{event_name}\" in the event name with data-testid \"badgeEvent\"')\ndef step_then_badge_should_show_event_name(context, event_name):\n    badge_event = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='badgeEvent']\"))\n    )\n    assert event_name.lower() in badge_event.text.lower(), f\"Expected '{event_name}' in '{badge_event.text}'\"\n\n@then('the badge should show \"{person_name}\" in the person name with data-testid \"badgeName\"')\ndef step_then_badge_should_show_person_name(context, person_name):\n    badge_name = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='badgeName']\"))\n    )\n    assert person_name.lower() in badge_name.text.lower(), f\"Expected '{person_name}' in '{badge_name.text}'\"\n\n@then('the badge should show \"{designation}\" in the designation with data-testid \"badgeDesignation\"')\ndef step_then_badge_should_show_designation(context, designation):\n    badge_designation = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='badgeDesignation']\"))\n    )\n    assert designation.lower() in badge_designation.text.lower(), f\"Expected '{designation}' in '{badge_designation.text}'\"\n\n@then('the badge should show \"@{company_name}\" in the company name with data-testid \"badgecontainer\"')\ndef step_then_badge_should_show_company_name(context, company_name):\n    badge_company = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='badgecontainer']\"))\n    )\n    expected_company_name = f\"@{company_name}\"\n    assert expected_company_name.lower() in badge_company.text.lower(), f\"Expected '{expected_company_name}' in '{badge_company.text}'\"\n\n@then('the badge should show \"{access_level}\" in the access level with data-testid \"badgeAccess\"')\ndef step_then_badge_should_show_access_level(context, access_level):\n    badge_access = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='badgeAccess']\"))\n    )\n    assert access_level.lower() in badge_access.text.lower(), f\"Expected '{access_level}' in '{badge_access.text}'\"\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                }
            ]
        },
        "4": {
            "requirement": {
                "description": "Upon form submission on the Badge Generator page, the system shall generate a unique ID for each badge. The user must provide inputs for Event Name, Person Name, Designation, Company Name, and select an Access Level from the dropdown options ('Attendee' or 'VIP'). These inputs, along with the generated unique ID, shall be embedded within a QR code displayed on the badge. The badge and QR code are shown in the designated badge area with data-testid 'badge' and 'qrcode', respectively. The form submission hides the form container with data-testid 'formContainer' and displays the badge container. The QR code text format should be 'ID: IDxxxx\\nEvent: [Event Name]\\nName: [Person Name]\\nDesignation: [Designation]\\nCompany: @[Company Name]\\nAccess: [Access Level]'. Additionally, a 'Download Badge' button with data-testid 'dwnBadge' is displayed, allowing users to download the badge as a PNG image. The download functionality uses the html-to-image library to convert the badge HTML element into an image file."
            },
            "test_cases": [
                {
                    "test_case": [
                        "Feature: Badge Generation with Unique ID and QR Code Embedding\n\n  The system generates a unique ID for each badge upon form submission and embeds this ID along with user-provided information in the QR code displayed on the badge.\n\n\nScenario: [Normal] Generate badge with unique ID and QR code\n    Given the user is on the Badge Generator page\n    When the user enters \"Tech Conference\" into the \"Event Name\" field\n    And the user enters \"John Doe\" into the \"Person Name\" field\n    And the user enters \"Developer\" into the \"Designation\" field\n    And the user enters \"TechCorp\" into the \"Company Name\" field\n    And the user selects \"VIP\" from the \"Access Level\" dropdown\n    And the user clicks the \"Generate Badge\" button with data-testid \"generate-badge-button\"\n    Then the badge with data-testid \"badge\" is displayed\n    And the QR code with data-testid \"qrcode\" is generated\n    And the QR code contains the text \"ID: IDxxxx\\nEvent: Tech Conference\\nName: John Doe\\nDesignation: Developer\\nCompany: @TechCorp\\nAccess: VIP\""
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nfrom PIL import Image\nimport cv2\nfrom io import BytesIO\nimport numpy as np\nimport time\n\nfile_path = \"index.html\"\n\ndef is_visible(element):\n    return element.is_displayed()\n\n@given('the user is on the Badge Generator page')\ndef step_given_user_on_badge_generator_page(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)\n\n@when('the user enters \"{event_name}\" into the \"Event Name\" field')\ndef step_when_user_enters_event_name(context, event_name):\n    event_name_input = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='eventname']\"))\n    )\n    event_name_input.clear()\n    event_name_input.send_keys(event_name)\n    time.sleep(1)\n\n@when('the user enters \"{person_name}\" into the \"Person Name\" field')\ndef step_when_user_enters_person_name(context, person_name):\n    person_name_input = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='name']\"))\n    )\n    person_name_input.clear()\n    person_name_input.send_keys(person_name)\n    time.sleep(1)\n\n@when('the user enters \"{designation}\" into the \"Designation\" field')\ndef step_when_user_enters_designation(context, designation):\n    designation_input = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='designation']\"))\n    )\n    designation_input.clear()\n    designation_input.send_keys(designation)\n    time.sleep(1)\n\n@when('the user enters \"{company_name}\" into the \"Company Name\" field')\ndef step_when_user_enters_company_name(context, company_name):\n    company_name_input = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='company']\"))\n    )\n    company_name_input.clear()\n    company_name_input.send_keys(company_name)\n    time.sleep(1)\n\n@when('the user selects \"{access_level}\" from the \"Access Level\" dropdown')\ndef step_when_user_selects_access_level(context, access_level):\n    access_dropdown = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='access']\"))\n    )\n    access_dropdown.click()\n    option = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, f\"[data-testid='option-{access_level.lower()}']\"))\n    )\n    option.click()\n    time.sleep(1)\n\n@when('the user clicks the \"Generate Badge\" button with data-testid \"generate-badge-button\"')\ndef step_when_user_clicks_generate_badge_button(context):\n    generate_button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='generate-badge-button']\"))\n    )\n    generate_button.click()\n    time.sleep(1)\n\n@then('the badge with data-testid \"badge\" is displayed')\ndef step_then_badge_is_displayed(context):\n    badge = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='badge']\"))\n    )\n    assert is_visible(badge), \"Badge is not displayed\"\n\n@then('the QR code with data-testid \"qrcode\" is generated')\ndef step_then_qrcode_is_generated(context):\n    qrcode = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='qrcode']\"))\n    )\n    assert is_visible(qrcode), \"QR code is not generated\"\n\n@then('the QR code contains the text \"ID: IDxxxx\\\\nEvent: Tech Conference\\\\nName: John Doe\\\\nDesignation: Developer\\\\nCompany: @TechCorp\\\\nAccess: VIP\"')\ndef step_then_qrcode_contains_text(context):\n    pass\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: Badge Generation with Unique ID and QR Code Embedding\n\n  The system generates a unique ID for each badge upon form submission and embeds this ID along with user-provided information in the QR code displayed on the badge.\n\n\n  Scenario: [Edge] Generate badge with minimum input length\n    Given the user is on the Badge Generator page\n    When the user enters \"A\" into the \"Event Name\" field\n    And the user enters \"B\" into the \"Person Name\" field\n    And the user enters \"C\" into the \"Designation\" field\n    And the user enters \"D\" into the \"Company Name\" field\n    And the user selects \"Attendee\" from the \"Access Level\" dropdown\n    And the user clicks the \"Generate Badge\" button with data-testid \"generate-badge-button\"\n    Then the badge with data-testid \"badge\" is displayed\n    And the QR code with data-testid \"qrcode\" is generated\n    And the QR code contains the text \"ID: IDxxxx\\nEvent: A\\nName: B\\nDesignation: C\\nCompany: @D\\nAccess: Attendee\"\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\ndef is_visible(element):\n    return element.is_displayed()\n\n@given('the user is on the Badge Generator page')\ndef step_given_user_on_badge_generator_page(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)\n\n@when('the user enters \"{event_name}\" into the \"Event Name\" field')\ndef step_when_user_enters_event_name(context, event_name):\n    event_name_input = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='eventname']\"))\n    )\n    event_name_input.clear()\n    event_name_input.send_keys(event_name)\n    time.sleep(1)\n\n@when('the user enters \"{person_name}\" into the \"Person Name\" field')\ndef step_when_user_enters_person_name(context, person_name):\n    person_name_input = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='name']\"))\n    )\n    person_name_input.clear()\n    person_name_input.send_keys(person_name)\n    time.sleep(1)\n\n@when('the user enters \"{designation}\" into the \"Designation\" field')\ndef step_when_user_enters_designation(context, designation):\n    designation_input = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='designation']\"))\n    )\n    designation_input.clear()\n    designation_input.send_keys(designation)\n    time.sleep(1)\n\n@when('the user enters \"{company_name}\" into the \"Company Name\" field')\ndef step_when_user_enters_company_name(context, company_name):\n    company_name_input = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='company']\"))\n    )\n    company_name_input.clear()\n    company_name_input.send_keys(company_name)\n    time.sleep(1)\n\n@when('the user selects \"{access_level}\" from the \"Access Level\" dropdown')\ndef step_when_user_selects_access_level(context, access_level):\n    access_dropdown = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='access']\"))\n    )\n    access_dropdown.click()\n    option = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, f\"[data-testid='option-{access_level.lower()}']\"))\n    )\n    option.click()\n    time.sleep(1)\n\n@when('the user clicks the \"Generate Badge\" button with data-testid \"generate-badge-button\"')\ndef step_when_user_clicks_generate_badge_button(context):\n    generate_button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='generate-badge-button']\"))\n    )\n    generate_button.click()\n    time.sleep(1)\n\n@then('the badge with data-testid \"badge\" is displayed')\ndef step_then_badge_is_displayed(context):\n    badge = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='badge']\"))\n    )\n    assert is_visible(badge), \"Badge is not displayed\"\n    time.sleep(1)\n\n@then('the QR code with data-testid \"qrcode\" is generated')\ndef step_then_qr_code_is_generated(context):\n    qrcode = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='qrcode']\"))\n    )\n    assert is_visible(qrcode), \"QR code is not generated\"\n    time.sleep(1)\n\n@then('the QR code contains the text \"ID: IDxxxx\\nEvent: A\\nName: B\\nDesignation: C\\nCompany: @D\\nAccess: Attendee\"')\ndef step_then_qr_code_contains_text(context):\n    pass\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                }
            ]
        },
        "6": {
            "requirement": {
                "description": "The system shall display a 'Download Badge' button with the data-testid 'dwnBadge' after the user successfully generates a badge by submitting the form with all required fields: 'Event Name' (data-testid 'eventname'), 'Person Name' (data-testid 'name'), 'Designation' (data-testid 'designation'), 'Company Name' (data-testid 'company'), and 'Access Level' (data-testid 'access'). Upon clicking the 'Generate Badge' button (data-testid 'generate-badge-button'), the form container (data-testid 'formContainer') should be hidden, and the badge details should be displayed in the badge section (data-testid 'badge'). The badge should include a QR code (data-testid 'qrcode') generated with the user's details. The 'Download Badge' button should become visible, allowing the user to download the badge as a PNG image when clicked. The download process should create a link element, set its 'href' attribute to the generated image data URL, and trigger a click event to initiate the download."
            },
            "test_cases": [
                {
                    "test_case": [
                        "Feature: Display and functionality of 'Download Badge' button after badge generation\n\n  Background:\n    Given the user is on the \"ID Card and Badge Generator\" page\n\n\n  Scenario: [Normal] Display 'Download Badge' button after badge generation\n    Given the user enters \"Tech Conference\" into the event name field with data-testid \"eventname\"\n    And the user enters \"John Doe\" into the person name field with data-testid \"name\"\n    And the user enters \"Software Engineer\" into the designation field with data-testid \"designation\"\n    And the user enters \"TechCorp\" into the company name field with data-testid \"company\"\n    And the user selects \"VIP\" from the access level dropdown with data-testid \"access\"\n    When the user clicks the \"Generate Badge\" button with data-testid \"generate-badge-button\"\n    Then the 'Download Badge' button with data-testid \"dwnBadge\" should be displayed\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the user is on the \"ID Card and Badge Generator\" page')\ndef step_given_user_on_badge_generator_page(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    context.driver.maximize_window()\n    time.sleep(1)\n\n@given('the user enters \"{event_name}\" into the event name field with data-testid \"eventname\"')\ndef step_given_user_enters_event_name(context, event_name):\n    event_name_field = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='eventname']\"))\n    )\n    event_name_field.clear()\n    event_name_field.send_keys(event_name)\n    time.sleep(1)\n\n@given('the user enters \"{person_name}\" into the person name field with data-testid \"name\"')\ndef step_given_user_enters_person_name(context, person_name):\n    person_name_field = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='name']\"))\n    )\n    person_name_field.clear()\n    person_name_field.send_keys(person_name)\n    time.sleep(1)\n\n@given('the user enters \"{designation}\" into the designation field with data-testid \"designation\"')\ndef step_given_user_enters_designation(context, designation):\n    designation_field = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='designation']\"))\n    )\n    designation_field.clear()\n    designation_field.send_keys(designation)\n    time.sleep(1)\n\n@given('the user enters \"{company_name}\" into the company name field with data-testid \"company\"')\ndef step_given_user_enters_company_name(context, company_name):\n    company_name_field = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='company']\"))\n    )\n    company_name_field.clear()\n    company_name_field.send_keys(company_name)\n    time.sleep(1)\n\n@given('the user selects \"{access_level}\" from the access level dropdown with data-testid \"access\"')\ndef step_given_user_selects_access_level(context, access_level):\n    access_dropdown = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='access']\"))\n    )\n    access_dropdown.click()\n    option = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, f\"[data-testid='option-{access_level.lower()}']\"))\n    )\n    option.click()\n    time.sleep(1)\n\n@when('the user clicks the \"Generate Badge\" button with data-testid \"generate-badge-button\"')\ndef step_when_user_clicks_generate_badge_button(context):\n    generate_badge_button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='generate-badge-button']\"))\n    )\n    generate_badge_button.click()\n    time.sleep(1)\n\n@then('the \\'Download Badge\\' button with data-testid \"dwnBadge\" should be displayed')\ndef step_then_download_badge_button_should_be_displayed(context):\n    download_badge_button = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='dwnBadge']\"))\n    )\n    assert download_badge_button.is_displayed(), \"Download Badge button is not displayed\"\n    time.sleep(1)\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                }
            ]
        },
        "7": {
            "requirement": {
                "description": "The system shall allow users to generate and download a badge as a PNG image. When the user fills out the badge form with fields for 'Event Name', 'Person Name', 'Designation', 'Company Name', and 'Access Level', and submits the form by clicking the 'Generate Badge' button (data-testid: 'generate-badge-button'), the badge is displayed with the entered details. The badge includes a QR code generated with the user's information. Upon clicking the 'Download Badge' button (data-testid: 'dwnBadge'), the system shall convert the visible badge, including the QR code, to a PNG image and initiate a download to the user's device. The download functionality must handle normal and edge cases, such as large text content, ensuring the image is correctly formatted and downloaded without errors."
            },
            "test_cases": [
                {
                    "test_case": [
                        "Feature: Download Badge as PNG Image\n  The system shall convert the badge to a PNG image and initiate a download to the user's device upon clicking the 'Download Badge' button.\n\n\n  Scenario: [Normal] Successful badge download as PNG\n    Given the badge is generated and displayed on the page\n    When the user clicks the 'Download Badge' button with data-testid 'dwnBadge'\n    Then the system should convert the badge to a PNG image\n    And initiate a download of the image to the user's device\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\ndef is_visible(element):\n    return element.is_displayed()\n\n@given('the badge is generated and displayed on the page')\ndef step_given_badge_generated(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    \n    # Fill out the form to generate the badge\n    WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='eventname']\"))\n    ).send_keys(\"Sample Event\")\n    time.sleep(1)\n    \n    context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='name']\").send_keys(\"John Doe\")\n    time.sleep(1)\n    \n    context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='designation']\").send_keys(\"Developer\")\n    time.sleep(1)\n    \n    context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='company']\").send_keys(\"TechCorp\")\n    time.sleep(1)\n    \n    context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='access']\").send_keys(\"VIP\")\n    time.sleep(1)\n    \n    context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='generate-badge-button']\").click()\n    time.sleep(1)\n    \n    # Ensure the badge is displayed\n    badge_element = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='badge']\"))\n    )\n    assert is_visible(badge_element), \"Badge is not visible\"\n\n@when(\"the user clicks the 'Download Badge' button with data-testid 'dwnBadge'\")\ndef step_when_click_download_badge(context):\n    download_button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='dwnBadge']\"))\n    )\n    download_button.click()\n    time.sleep(1)\n\n@then('the system should convert the badge to a PNG image')\ndef step_then_convert_to_png(context):\n    # This step would typically involve checking the download directory for the PNG file.\n    # Since we cannot interact with the file system directly in this test, we assume the conversion is successful.\n    # In a real-world scenario, you would verify the file exists in the expected location.\n    print(\"Assuming badge conversion to PNG is successful.\")\n\n@then('initiate a download of the image to the user\\'s device')\ndef step_then_initiate_download(context):\n    # Similar to the previous step, this would involve checking the file system.\n    # We assume the download is initiated successfully.\n    print(\"Assuming badge download is initiated successfully.\")\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: Download Badge as PNG Image\n  The system shall convert the badge to a PNG image and initiate a download to the user's device upon clicking the 'Download Badge' button.\n\n\n  Scenario: [Edge] Badge download with large content\n    Given the badge is generated with large text content and displayed on the page\n    When the user clicks the 'Download Badge' button with data-testid 'dwnBadge'\n    Then the system should convert the badge to a PNG image\n    And initiate a download of the image to the user's device\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\ndef is_visible(element):\n    return element.is_displayed()\n\n@given('the badge is generated with large text content and displayed on the page')\ndef step_given_badge_generated(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='badgeForm']\"))\n    )\n    \n    # Fill out the form with large text content\n    context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='eventname']\").send_keys(\"Large Event Name\")\n    time.sleep(1)\n    context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='name']\").send_keys(\"Large Person Name\")\n    time.sleep(1)\n    context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='designation']\").send_keys(\"Large Designation\")\n    time.sleep(1)\n    context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='company']\").send_keys(\"Large Company Name\")\n    time.sleep(1)\n    context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='access']\").send_keys(\"VIP\")\n    time.sleep(1)\n    \n    # Submit the form to generate the badge\n    generate_button = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='generate-badge-button']\")\n    WebDriverWait(context.driver, 10).until(EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='generate-badge-button']\")))\n    generate_button.click()\n    time.sleep(1)\n    \n    # Ensure the badge is displayed\n    badge = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='badge']\")\n    assert is_visible(badge), \"Badge is not visible\"\n\n@when(\"the user clicks the 'Download Badge' button with data-testid 'dwnBadge'\")\ndef step_when_click_download_badge(context):\n    download_button = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='dwnBadge']\")\n    WebDriverWait(context.driver, 10).until(EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='dwnBadge']\")))\n    download_button.click()\n    time.sleep(1)\n\n@then('the system should convert the badge to a PNG image')\ndef step_then_convert_badge_to_png(context):\n    # This step assumes the conversion is handled by the JavaScript code\n    # We can check if the download button is still visible as a proxy for successful conversion\n    download_button = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='dwnBadge']\")\n    assert is_visible(download_button), \"Download button is not visible after click\"\n\n@then('initiate a download of the image to the user\\'s device')\ndef step_then_initiate_download(context):\n    # This step assumes the download is initiated by the JavaScript code\n    # We can check if the download button is still visible as a proxy for successful download initiation\n    download_button = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='dwnBadge']\")\n    assert is_visible(download_button), \"Download button is not visible after click\"\n\n    # Close the driver\n    context.driver.quit()"
                }
            ]
        }
    }
}