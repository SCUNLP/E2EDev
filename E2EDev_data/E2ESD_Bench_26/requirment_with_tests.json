{
    "summary": {
        "overview": "The application provides a text manipulation interface where users can search for specific text within a paragraph and replace it with new text. It includes a tabbed interface for switching between search and replace functionalities.",
        "predefined_options": "The application does not define any predefined options for text input; instead, users are required to manually enter both the search and replacement text for operations.\nHowever, a specific sample value is provided for testing purposes:\n1969年1月，我到文安驿公社接北京知青。就是在这个时候，我第一次见到了近平。当时，梁家河派了十几个年轻力壮的社员去接知青。怕人手不够，我们还牵了毛驴，帮着驮行李。知青们的行李有铺盖卷，有箱子，我们轮流帮着拿行李，你拿一气儿，我拿一气儿，几十个人，浩浩荡荡地就回到村里来了。我记得很清楚，当时梁家河村一共来了十五名北京知青，十一名男知青，四名女知青。当时梁家河村委会接待室是一队的地方，分来五名男知青，四名女知青；近平和其余五名男知青在后面的二队。村里当时安排我父亲给二队的知青做饭。",
        "external_resources": "No external resources such as links, images, or audio files are used in the application.",
        "external_js_libraries": "No external JavaScript libraries are used; the application relies on native JavaScript for functionality."
    },
    "finegrained_rewith_test": {
        "1": {
            "requirement": {
                "description": "When the user clicks on the list item with the attribute data-testid='expand-list-item', the system must display the sub-list with the attribute data-testid='lis'. The sub-list should contain two options: '查找' and '替换', each represented as list items with respective data-testid attributes ('search-list-item' and 'replace-list-item'). If the user does not interact with the '展开' list item, the sub-list must remain hidden. The visibility of the sub-list is controlled by the CSS 'display' property, which should toggle between 'none' (hidden) and 'block' (visible) based on user interaction."
            },
            "test_cases": [
                {
                    "test_case": [
                        "Feature: Display sub-list options when '展开' is clicked\n  The system should display the sub-list containing '查找' and '替换' options when the user clicks on the '展开' list item.\n\n\n  Scenario: [Normal] Display sub-list when '展开' is clicked\n    Given the webpage is loaded and the element with data-testid \"expand-list-item\" is visible\n    When the user clicks on the list item with data-testid \"expand-list-item\"\n    Then the sub-list with data-testid \"lis\" should be displayed\n    And the sub-list should contain two options: \"查找\" and \"替换\"\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\ndef is_visible(element):\n    return element.is_displayed()\n\n@given('the webpage is loaded and the element with data-testid \"expand-list-item\" is visible')\ndef step_given_webpage_loaded(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='expand-list-item']\"))\n    )\n    time.sleep(1)\n\n@when('the user clicks on the list item with data-testid \"expand-list-item\"')\ndef step_when_user_clicks_expand(context):\n    expand_list_item = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='expand-list-item']\")\n    expand_list_item.click()\n    time.sleep(1)\n\n@then('the sub-list with data-testid \"lis\" should be displayed')\ndef step_then_sub_list_displayed(context):\n    sub_list = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='lis']\")\n    assert is_visible(sub_list), \"The sub-list is not visible\"\n    time.sleep(1)\n\n@then('the sub-list should contain two options: \"查找\" and \"替换\"')\ndef step_then_sub_list_contains_options(context):\n    sub_list_items = context.driver.find_elements(By.CSS_SELECTOR, \"[data-testid='lis'] li\")\n    option_texts = [item.text.strip() for item in sub_list_items]\n    assert \"查找\" in option_texts, \"Option '查找' not found in sub-list\"\n    assert \"替换\" in option_texts, \"Option '替换' not found in sub-list\"\n    time.sleep(1)\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: Display sub-list options when '展开' is clicked\n  The system should display the sub-list containing '查找' and '替换' options when the user clicks on the '展开' list item.\n\n\n  Scenario: [Edge] Ensure sub-list remains hidden if '展开' is not clicked\n    Given the webpage is loaded and the element with data-testid \"expand-list-item\" is visible\n    When the user does not interact with the list item with data-testid \"expand-list-item\"\n    Then the sub-list with data-testid \"lis\" should remain hidden\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\n# Placeholder for the file path\nfile_path = \"index.html\"\n\n@given('the webpage is loaded and the element with data-testid \"expand-list-item\" is visible')\ndef step_given_webpage_loaded(context):\n    # Initialize the WebDriver\n    context.driver = webdriver.Chrome()\n    # Load the test page\n    context.driver.get(f\"file://index.html\")\n    # Wait for the element with data-testid \"expand-list-item\" to be visible\n    WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='expand-list-item']\"))\n    )\n    time.sleep(1)  # Add a small delay for robustness\n\n@when('the user does not interact with the list item with data-testid \"expand-list-item\"')\ndef step_when_no_interaction(context):\n    # No interaction is performed in this step\n    time.sleep(1)  # Add a small delay to simulate waiting\n\n@then('the sub-list with data-testid \"lis\" should remain hidden')\ndef step_then_sublist_hidden(context):\n    # Locate the sub-list element\n    sublist = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='lis']\")\n    # Check if the sub-list is hidden\n    assert not sublist.is_displayed(), \"The sub-list should remain hidden but is visible.\"\n    time.sleep(1)  # Add a small delay for robustness\n\n# Teardown after all steps\ndef after_scenario(context, scenario):\n    # Close the browser driver\n    if hasattr(context, 'driver'):\n        context.driver.quit()"
                }
            ]
        },
        "2": {
            "requirement": {
                "description": "When the user interacts with the 查找和替换 functionality, the system must ensure the following behavior: Upon clicking the '展开' button (data-testid: 'expand-list-item'), the list (data-testid: 'lis') becomes visible. If the user clicks the '查找' list item (data-testid: 'search-list-item') within the expanded list, the system must display the '查找' tab (data-testid: 'search') along with its associated input field (data-testid: 'search-input') and button (data-testid: 'search-button'). The system must handle edge cases where the '展开' button is clicked multiple times, ensuring the list remains visible and the '查找' tab is displayed correctly upon selection. All UI elements must update their visibility dynamically without requiring a page reload."
            },
            "test_cases": [
                {
                    "test_case": [
                        "Feature: Display the \"查找\" tab and its associated input field and button after selecting \"查找\" from the expanded list\n\n  Background:\n    Given the webpage containing the 查找和替换 functionality is loaded\n    And the user sees the \"展开\" button with data-testid \"expand-list-item\"\n\n\n  Scenario: [Normal] User clicks \"展开\" and selects \"查找\" to display the \"查找\" tab\n    Given the user clicks the \"展开\" button with data-testid \"expand-list-item\"\n    Then the list with data-testid \"lis\" becomes visible\n    When the user clicks the \"查找\" list item with data-testid \"search-list-item\"\n    Then the \"查找\" tab with data-testid \"search\" becomes visible\n    And the input field with data-testid \"search-input\" is displayed\n    And the button with data-testid \"search-button\" is displayed\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\ndef is_visible(element):\n    return element.is_displayed()\n\n@given('the webpage containing the 查找和替换 functionality is loaded')\ndef step_given_webpage_loaded(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)\n\n@given('the user sees the \"展开\" button with data-testid \"expand-list-item\"')\ndef step_given_user_sees_expand_button(context):\n    expand_button = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='expand-list-item']\"))\n    )\n    assert is_visible(expand_button), \"Expand button is not visible\"\n\n@given('the user clicks the \"展开\" button with data-testid \"expand-list-item\"')\ndef step_given_user_clicks_expand_button(context):\n    expand_button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='expand-list-item']\"))\n    )\n    expand_button.click()\n    time.sleep(1)\n\n@then('the list with data-testid \"lis\" becomes visible')\ndef step_then_list_becomes_visible(context):\n    list_element = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='lis']\"))\n    )\n    assert is_visible(list_element), \"List is not visible\"\n\n@when('the user clicks the \"查找\" list item with data-testid \"search-list-item\"')\ndef step_when_user_clicks_search_list_item(context):\n    search_list_item = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='search-list-item']\"))\n    )\n    search_list_item.click()\n    time.sleep(1)\n\n@then('the \"查找\" tab with data-testid \"search\" becomes visible')\ndef step_then_search_tab_becomes_visible(context):\n    search_tab = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='search']\"))\n    )\n    assert is_visible(search_tab), \"Search tab is not visible\"\n\n@then('the input field with data-testid \"search-input\" is displayed')\ndef step_then_input_field_displayed(context):\n    search_input = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='search-input']\"))\n    )\n    assert is_visible(search_input), \"Search input field is not displayed\"\n\n@then('the button with data-testid \"search-button\" is displayed')\ndef step_then_button_displayed(context):\n    search_button = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='search-button']\"))\n    )\n    assert is_visible(search_button), \"Search button is not displayed\"\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: Display the \"查找\" tab and its associated input field and button after selecting \"查找\" from the expanded list\n\n  Background:\n    Given the webpage containing the 查找和替换 functionality is loaded\n    And the user sees the \"展开\" button with data-testid \"expand-list-item\"\n\n\n  Scenario: [Edge] User clicks \"展开\" multiple times before selecting \"查找\"\n    Given the user clicks the \"展开\" button with data-testid \"expand-list-item\" multiple times\n    Then the list with data-testid \"lis\" remains visible\n    When the user clicks the \"查找\" list item with data-testid \"search-list-item\"\n    Then the \"查找\" tab with data-testid \"search\" becomes visible\n    And the input field with data-testid \"search-input\" is displayed\n    And the button with data-testid \"search-button\" is displayed\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the webpage containing the 查找和替换 functionality is loaded')\ndef step_impl(context):\n    # Initialize the WebDriver and load the test page\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    context.driver.maximize_window()\n    time.sleep(1)  # Allow the page to fully load\n\n@given('the user sees the \"展开\" button with data-testid \"expand-list-item\"')\ndef step_impl(context):\n    # Wait for the \"展开\" button to be visible\n    expand_button = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='expand-list-item']\"))\n    )\n    assert expand_button.is_displayed(), \"The '展开' button is not visible.\"\n\n@given('the user clicks the \"展开\" button with data-testid \"expand-list-item\" multiple times')\ndef step_impl(context):\n    # Locate the \"展开\" button and click it multiple times\n    expand_button = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='expand-list-item']\")\n    for _ in range(3):  # Click the button 3 times\n        expand_button.click()\n        time.sleep(1)  # Allow time for the UI to update\n\n@then('the list with data-testid \"lis\" remains visible')\ndef step_impl(context):\n    # Verify that the list remains visible\n    list_element = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='lis']\")\n    assert list_element.is_displayed(), \"The list with data-testid 'lis' is not visible.\"\n\n@when('the user clicks the \"查找\" list item with data-testid \"search-list-item\"')\ndef step_impl(context):\n    # Locate and click the \"查找\" list item\n    search_list_item = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='search-list-item']\")\n    search_list_item.click()\n    time.sleep(1)  # Allow time for the UI to update\n\n@then('the \"查找\" tab with data-testid \"search\" becomes visible')\ndef step_impl(context):\n    # Verify that the \"查找\" tab is visible\n    search_tab = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='search']\")\n    assert search_tab.is_displayed(), \"The '查找' tab is not visible.\"\n\n@then('the input field with data-testid \"search-input\" is displayed')\ndef step_impl(context):\n    # Verify that the input field is displayed\n    search_input = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='search-input']\")\n    assert search_input.is_displayed(), \"The input field with data-testid 'search-input' is not displayed.\"\n\n@then('the button with data-testid \"search-button\" is displayed')\ndef step_impl(context):\n    # Verify that the search button is displayed\n    search_button = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='search-button']\")\n    assert search_button.is_displayed(), \"The button with data-testid 'search-button' is not displayed.\"\n\n# Teardown to close the browser after the test\ndef after_scenario(context, scenario):\n    if hasattr(context, 'driver'):\n        context.driver.quit()"
                }
            ]
        },
        "3": {
            "requirement": {
                "description": "When the user clicks the '展开' button with data-testid 'expand-list-item', the system should display the list with data-testid 'lis'. If the user then clicks the '替换' list item with data-testid 'replace-list-item', the system should display the '替换' tab with data-testid 'replace'. This tab must include the input field for old text with data-testid 'replace-input-old', the input field for new text with data-testid 'replace-input-new', and the '替换' button with data-testid 'replace-button'. If the list is already expanded, clicking '替换' should still display the '替换' tab and its components. If the user attempts to click '替换' without expanding the list first, the '替换' tab should not be displayed, and no action should occur."
            },
            "test_cases": [
                {
                    "test_case": [
                        "Feature: Display the \"替换\" tab and its associated input fields and button when the user clicks the \"替换\" list item\n  The system should allow the user to expand the list, select the \"替换\" option, and display the \"替换\" tab with its input fields and button.\n\n\n  Scenario: [Normal] User clicks \"展开\" and selects \"替换\" to display the \"替换\" tab\n    Given the webpage is loaded and the \"展开\" button with data-testid \"expand-list-item\" is visible\n    When the user clicks the \"展开\" button with data-testid \"expand-list-item\"\n    And the user clicks the \"替换\" list item with data-testid \"replace-list-item\"\n    Then the \"替换\" tab with data-testid \"replace\" should be displayed\n    And the input field for old text with data-testid \"replace-input-old\" should be visible\n    And the input field for new text with data-testid \"replace-input-new\" should be visible\n    And the \"替换\" button with data-testid \"replace-button\" should be visible\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the webpage is loaded and the \"展开\" button with data-testid \"expand-list-item\" is visible')\ndef step_given_webpage_loaded(context):\n    # Initialize the WebDriver and load the test page\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    context.driver.maximize_window()\n    \n    # Wait for the \"展开\" button to be visible\n    WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='expand-list-item']\"))\n    )\n    time.sleep(1)\n\n@when('the user clicks the \"展开\" button with data-testid \"expand-list-item\"')\ndef step_when_user_clicks_expand(context):\n    # Locate and click the \"展开\" button\n    expand_button = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='expand-list-item']\")\n    expand_button.click()\n    time.sleep(1)\n\n@when('the user clicks the \"替换\" list item with data-testid \"replace-list-item\"')\ndef step_when_user_clicks_replace_list_item(context):\n    # Wait for the \"替换\" list item to be visible and clickable\n    replace_list_item = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='replace-list-item']\"))\n    )\n    replace_list_item.click()\n    time.sleep(1)\n\n@then('the \"替换\" tab with data-testid \"replace\" should be displayed')\ndef step_then_replace_tab_displayed(context):\n    # Wait for the \"替换\" tab to be visible\n    replace_tab = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='replace']\"))\n    )\n    assert replace_tab.is_displayed(), \"The '替换' tab is not displayed\"\n    time.sleep(1)\n\n@then('the input field for old text with data-testid \"replace-input-old\" should be visible')\ndef step_then_old_text_input_visible(context):\n    # Check if the input field for old text is visible\n    old_text_input = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='replace-input-old']\"))\n    )\n    assert old_text_input.is_displayed(), \"The input field for old text is not visible\"\n    time.sleep(1)\n\n@then('the input field for new text with data-testid \"replace-input-new\" should be visible')\ndef step_then_new_text_input_visible(context):\n    # Check if the input field for new text is visible\n    new_text_input = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='replace-input-new']\"))\n    )\n    assert new_text_input.is_displayed(), \"The input field for new text is not visible\"\n    time.sleep(1)\n\n@then('the \"替换\" button with data-testid \"replace-button\" should be visible')\ndef step_then_replace_button_visible(context):\n    # Check if the \"替换\" button is visible\n    replace_button = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='replace-button']\"))\n    )\n    assert replace_button.is_displayed(), \"The '替换' button is not visible\"\n    time.sleep(1)\n\n# Teardown: Close the browser after the test\ndef after_scenario(context, scenario):\n    if hasattr(context, 'driver'):\n        context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: Display the \"替换\" tab and its associated input fields and button when the user clicks the \"替换\" list item\n  The system should allow the user to expand the list, select the \"替换\" option, and display the \"替换\" tab with its input fields and button.\n\n\n  Scenario: [Edge] User clicks \"展开\" and selects \"替换\" when the list is already expanded\n    Given the webpage is loaded and the \"展开\" button with data-testid \"expand-list-item\" is clicked\n    And the list with data-testid \"lis\" is already expanded\n    When the user clicks the \"替换\" list item with data-testid \"replace-list-item\"\n    Then the \"替换\" tab with data-testid \"replace\" should be displayed\n    And the input field for old text with data-testid \"replace-input-old\" should be visible\n    And the input field for new text with data-testid \"replace-input-new\" should be visible\n    And the \"替换\" button with data-testid \"replace-button\" should be visible\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\ndef is_expanded(element):\n    aria = element.get_attribute(\"aria-expanded\")\n    if aria is not None:\n        return aria == \"true\"\n\n    class_list = element.get_attribute(\"class\").split()\n    if any(cls in class_list for cls in [\"expanded\", \"open\", \"show\"]):\n        return True\n\n    data_expanded = element.get_attribute(\"data-expanded\")\n    if data_expanded is not None:\n        return data_expanded == \"true\"\n\n    return element.is_displayed()\n\n@given('the webpage is loaded and the \"展开\" button with data-testid \"expand-list-item\" is clicked')\ndef step_given_webpage_loaded(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='expand-list-item']\"))\n    )\n    # click\n    expand_list_item = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='expand-list-item']\")\n    expand_list_item.click()\n    time.sleep(1)\n\n@given('the list with data-testid \"lis\" is already expanded')\ndef step_given_list_expanded(context):\n    list_element = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='lis']\")\n    assert is_expanded(list_element), \"Expected the list to be expanded\"\n    time.sleep(1)\n\n@when('the user clicks the \"替换\" list item with data-testid \"replace-list-item\"')\ndef step_when_click_replace_list_item(context):\n    replace_list_item = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='replace-list-item']\")\n    WebDriverWait(context.driver, 10).until(EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='replace-list-item']\")))\n    replace_list_item.click()\n    time.sleep(1)\n\n@then('the \"替换\" tab with data-testid \"replace\" should be displayed')\ndef step_then_replace_tab_displayed(context):\n    replace_tab = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='replace']\")\n    assert replace_tab.is_displayed(), \"Expected the '替换' tab to be displayed\"\n    time.sleep(1)\n\n@then('the input field for old text with data-testid \"replace-input-old\" should be visible')\ndef step_then_replace_input_old_visible(context):\n    replace_input_old = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='replace-input-old']\")\n    assert replace_input_old.is_displayed(), \"Expected the input field for old text to be visible\"\n    time.sleep(1)\n\n@then('the input field for new text with data-testid \"replace-input-new\" should be visible')\ndef step_then_replace_input_new_visible(context):\n    replace_input_new = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='replace-input-new']\")\n    assert replace_input_new.is_displayed(), \"Expected the input field for new text to be visible\"\n    time.sleep(1)\n\n@then('the \"替换\" button with data-testid \"replace-button\" should be visible')\ndef step_then_replace_button_visible(context):\n    replace_button = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='replace-button']\")\n    assert replace_button.is_displayed(), \"Expected the '替换' button to be visible\"\n    time.sleep(1)\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: Display the \"替换\" tab and its associated input fields and button when the user clicks the \"替换\" list item\n  The system should allow the user to expand the list, select the \"替换\" option, and display the \"替换\" tab with its input fields and button.\n\n\n  Scenario: [Error] User clicks \"替换\" without expanding the list\n    Given the webpage is loaded and the \"展开\" button with data-testid \"expand-list-item\" is visible\n    And the list with data-testid \"lis\" is not expanded\n    When the user clicks the \"替换\" list item with data-testid \"replace-list-item\"\n    Then the \"替换\" tab with data-testid \"replace\" should not be displayed\n    And an error or no action should occur"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the webpage is loaded and the \"展开\" button with data-testid \"expand-list-item\" is visible')\ndef step_given_webpage_loaded(context):\n    # Initialize the WebDriver\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)  # Allow the page to load\n    \n    # Verify the \"展开\" button is visible\n    expand_button = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='expand-list-item']\"))\n    )\n    assert expand_button.is_displayed(), '\"展开\" button is not visible'\n\n@given('the list with data-testid \"lis\" is not expanded')\ndef step_given_list_not_expanded(context):\n    # Verify the list is not expanded\n    list_element = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='lis']\")\n    assert not list_element.is_displayed(), 'The list is already expanded'\n\n@when('the user clicks the \"替换\" list item with data-testid \"replace-list-item\"')\ndef step_when_user_clicks_replace(context):\n    try:\n        replace_list_item = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='replace-list-item']\")\n        replace_list_item.click()\n        time.sleep(1)  # Allow time for any potential UI updates\n    except Exception as e:\n        context.error_occurred = True\n        print(f\"Error occurred while clicking '替换' list item: {e}\")\n\n@then('the \"替换\" tab with data-testid \"replace\" should not be displayed')\ndef step_then_replace_tab_not_displayed(context):\n    replace_tab = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='replace']\")\n    assert not replace_tab.is_displayed(), '\"替换\" tab is displayed when it should not be'\n\n@then('an error or no action should occur')\ndef step_then_error_or_no_action(context):\n    # Verify that no action occurred or an error was raised\n    if hasattr(context, 'error_occurred') and context.error_occurred:\n        print(\"An error occurred as expected\")\n    else:\n        replace_tab = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='replace']\")\n        assert not replace_tab.is_displayed(), 'Unexpected action occurred'\n\n# Teardown to close the browser after tests\ndef after_scenario(context, scenario):\n    if hasattr(context, 'driver'):\n        context.driver.quit()"
                }
            ]
        },
        "4": {
            "requirement": {
                "description": "The web application should provide a '查找' functionality that allows users to search for text within a specified paragraph. The user can initiate this by clicking the '展开' list item with data-testid 'expand-list-item', followed by selecting the '查找' list item with data-testid 'search-list-item'. This action displays the '查找' tab with data-testid 'search'. Users can then enter text into the input field with data-testid 'search-input' and click the '查找' button with data-testid 'search-button'. Upon clicking, the system should highlight all occurrences of the entered text within the paragraph using a yellow background applied through the <span> tag. If the entered text is not found, the system should display an alert with the message '未找到您要找的文字！'. Additionally, if the input field is left empty, the system should prompt an alert stating '请输入文字！'. The functionality should handle edge cases such as searching for single characters and text that appears multiple times, ensuring all occurrences are highlighted."
            },
            "test_cases": [
                {
                    "test_case": [
                        "Feature: Highlight occurrences of text in the paragraph when using the '查找' functionality\n  The system should allow users to search for text within the paragraph and highlight all occurrences. If the text is not found, an appropriate alert should be displayed.\n\n\n  Scenario: [Normal] Highlight all occurrences of a valid text input\n    Given the webpage is loaded and the paragraph contains the text \"1969年1月，我到文安驿公社接北京知青。\"\n    And the user clicks on the \"展开\" list item with data-testid \"expand-list-item\"\n    And the user clicks on the \"查找\" list item with data-testid \"search-list-item\"\n    And the \"查找\" tab with data-testid \"search\" is displayed\n    When the user enters \"文安驿\" into the input field with data-testid \"search-input\"\n    And the user clicks the \"查找\" button with data-testid \"search-button\"\n    Then all occurrences of \"文安驿\" in the paragraph should be highlighted with a yellow background using the <span> tag\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the webpage is loaded and the paragraph contains the text \"1969年1月，我到文安驿公社接北京知青。\"')\ndef step_impl(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)\n    paragraph = context.driver.find_element(By.CSS_SELECTOR, \"p\")\n    expected_text = \"1969年1月，我到文安驿公社接北京知青。\"\n    assert expected_text in paragraph.text, f\"Expected paragraph to contain '{expected_text}'\"\n\n@given('the user clicks on the \"展开\" list item with data-testid \"expand-list-item\"')\ndef step_impl(context):\n    expand_list_item = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='expand-list-item']\"))\n    )\n    expand_list_item.click()\n    time.sleep(1)\n\n@given('the user clicks on the \"查找\" list item with data-testid \"search-list-item\"')\ndef step_impl(context):\n    search_list_item = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='search-list-item']\"))\n    )\n    search_list_item.click()\n    time.sleep(1)\n\n@given('the \"查找\" tab with data-testid \"search\" is displayed')\ndef step_impl(context):\n    search_tab = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='search']\"))\n    )\n    assert search_tab.is_displayed(), \"Search tab is not displayed\"\n\n@when('the user enters \"文安驿\" into the input field with data-testid \"search-input\"')\ndef step_impl(context):\n    search_input = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='search-input']\")\n    search_input.clear()\n    search_input.send_keys(\"文安驿\")\n    time.sleep(1)\n\n@when('the user clicks the \"查找\" button with data-testid \"search-button\"')\ndef step_impl(context):\n    search_button = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='search-button']\")\n    search_button.click()\n    time.sleep(1)\n\n@then('all occurrences of \"文安驿\" in the paragraph should be highlighted with a yellow background using the <span> tag')\ndef step_impl(context):\n    paragraph = context.driver.find_element(By.CSS_SELECTOR, \"p\")\n    highlighted_text = paragraph.find_elements(By.TAG_NAME, \"span\")\n    assert any(\"文安驿\" in span.text for span in highlighted_text), \"Text '文安驿' is not highlighted\"\n    context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: Highlight occurrences of text in the paragraph when using the '查找' functionality\n  The system should allow users to search for text within the paragraph and highlight all occurrences. If the text is not found, an appropriate alert should be displayed.\n\n\n  Scenario: [Edge] Highlight occurrences of a single character\n    Given the webpage is loaded and the paragraph contains the text \"1969年1月，我到文安驿公社接北京知青。\"\n    And the user clicks on the \"展开\" list item with data-testid \"expand-list-item\"\n    And the user clicks on the \"查找\" list item with data-testid \"search-list-item\"\n    And the \"查找\" tab with data-testid \"search\" is displayed\n    When the user enters \"1\" into the input field with data-testid \"search-input\"\n    And the user clicks the \"查找\" button with data-testid \"search-button\"\n    Then all occurrences of \"1\" in the paragraph should be highlighted with a yellow background using the <span> tag\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the webpage is loaded and the paragraph contains the text \"1969年1月，我到文安驿公社接北京知青。\"')\ndef step_given_webpage_loaded(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)  # Allow page to load\n\n@given('the user clicks on the \"展开\" list item with data-testid \"expand-list-item\"')\ndef step_given_click_expand_list_item(context):\n    expand_list_item = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='expand-list-item']\"))\n    )\n    expand_list_item.click()\n    time.sleep(1)\n\n@given('the user clicks on the \"查找\" list item with data-testid \"search-list-item\"')\ndef step_given_click_search_list_item(context):\n    search_list_item = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='search-list-item']\"))\n    )\n    search_list_item.click()\n    time.sleep(1)\n\n@given('the \"查找\" tab with data-testid \"search\" is displayed')\ndef step_given_search_tab_displayed(context):\n    search_tab = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='search']\"))\n    )\n    assert search_tab.is_displayed(), \"Search tab is not displayed\"\n\n@when('the user enters \"1\" into the input field with data-testid \"search-input\"')\ndef step_when_enter_search_input(context):\n    search_input = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='search-input']\"))\n    )\n    search_input.send_keys(\"1\")\n    time.sleep(1)\n\n@when('the user clicks the \"查找\" button with data-testid \"search-button\"')\ndef step_when_click_search_button(context):\n    search_button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='search-button']\"))\n    )\n    search_button.click()\n    time.sleep(1)\n\n@then('all occurrences of \"1\" in the paragraph should be highlighted with a yellow background using the <span> tag')\ndef step_then_verify_highlighted_occurrences(context):\n    paragraph = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.TAG_NAME, \"p\"))\n    )\n    highlighted_elements = paragraph.find_elements(By.TAG_NAME, \"span\")\n    assert len(highlighted_elements) > 0, \"No occurrences of '1' are highlighted\"\n    for element in highlighted_elements:\n        assert element.text == \"1\", f\"Expected '1', but got '{element.text}'\"\n        assert element.value_of_css_property(\"background-color\") == \"rgba(255, 255, 0, 1)\", \"Background color is not yellow\"\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: Highlight occurrences of text in the paragraph when using the '查找' functionality\n  The system should allow users to search for text within the paragraph and highlight all occurrences. If the text is not found, an appropriate alert should be displayed.\n\n\n  Scenario: [Edge] Search for text that appears multiple times\n    Given the webpage is loaded and the paragraph contains the text \"1969年1月，我到文安驿公社接北京知青。\"\n    And the user clicks on the \"展开\" list item with data-testid \"expand-list-item\"\n    And the user clicks on the \"查找\" list item with data-testid \"search-list-item\"\n    And the \"查找\" tab with data-testid \"search\" is displayed\n    When the user enters \"知青\" into the input field with data-testid \"search-input\"\n    And the user clicks the \"查找\" button with data-testid \"search-button\"\n    Then all occurrences of \"知青\" in the paragraph should be highlighted with a yellow background using the <span> tag\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the webpage is loaded and the paragraph contains the text \"1969年1月，我到文安驿公社接北京知青。\"')\ndef step_impl(context):\n    # Initialize the WebDriver and load the test page\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)  # Allow the page to load completely\n\n    # Verify the paragraph contains the expected text\n    paragraph = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='box'] p\")\n    expected_text = \"1969年1月，我到文安驿公社接北京知青。\"\n    assert expected_text in paragraph.text, f\"Expected text '{expected_text}' not found in paragraph.\"\n\n@given('the user clicks on the \"展开\" list item with data-testid \"expand-list-item\"')\ndef step_impl(context):\n    # Locate and click the \"展开\" list item\n    expand_list_item = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='expand-list-item']\"))\n    )\n    expand_list_item.click()\n    time.sleep(1)  # Allow the dropdown to expand\n\n@given('the user clicks on the \"查找\" list item with data-testid \"search-list-item\"')\ndef step_impl(context):\n    # Locate and click the \"查找\" list item\n    search_list_item = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='search-list-item']\"))\n    )\n    search_list_item.click()\n    time.sleep(1)  # Allow the \"查找\" tab to display\n\n@given('the \"查找\" tab with data-testid \"search\" is displayed')\ndef step_impl(context):\n    # Verify the \"查找\" tab is displayed\n    search_tab = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='search']\"))\n    )\n    assert search_tab.is_displayed(), \"The '查找' tab is not displayed.\"\n\n@when('the user enters \"知青\" into the input field with data-testid \"search-input\"')\ndef step_impl(context):\n    # Locate the input field and enter the text \"知青\"\n    search_input = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='search-input']\"))\n    )\n    search_input.clear()\n    search_input.send_keys(\"知青\")\n    time.sleep(1)  # Allow the input to process\n\n@when('the user clicks the \"查找\" button with data-testid \"search-button\"')\ndef step_impl(context):\n    # Locate and click the \"查找\" button\n    search_button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='search-button']\"))\n    )\n    search_button.click()\n    time.sleep(1)  # Allow the search operation to complete\n\n@then('all occurrences of \"知青\" in the paragraph should be highlighted with a yellow background using the <span> tag')\ndef step_impl(context):\n    # Verify that all occurrences of \"知青\" are highlighted with a <span> tag\n    paragraph = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='box'] p\")\n    highlighted_elements = paragraph.find_elements(By.TAG_NAME, \"span\")\n    highlighted_texts = [element.text for element in highlighted_elements]\n\n    # Ensure all highlighted texts match \"知青\"\n    for text in highlighted_texts:\n        assert text == \"知青\", f\"Expected '知青' but found '{text}'\"\n\n    # Ensure the number of highlights matches the occurrences of \"知青\" in the original text\n    original_text = paragraph.get_attribute(\"innerHTML\")\n    assert original_text.count(\"<span>知青</span>\") == highlighted_texts.count(\"知青\"), \\\n        \"Mismatch in the number of highlighted occurrences.\"\n\n    time.sleep(1)  # Allow time for visual verification\n\n# Teardown step to close the browser after the test\ndef after_scenario(context, scenario):\n    if hasattr(context, 'driver'):\n        context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: Highlight occurrences of text in the paragraph when using the '查找' functionality\n  The system should allow users to search for text within the paragraph and highlight all occurrences. If the text is not found, an appropriate alert should be displayed.\n\n\n  Scenario: [Error] Search for text that does not exist in the paragraph\n    Given the webpage is loaded and the paragraph contains the text \"1969年1月，我到文安驿公社接北京知青。\"\n    And the user clicks on the \"展开\" list item with data-testid \"expand-list-item\"\n    And the user clicks on the \"查找\" list item with data-testid \"search-list-item\"\n    And the \"查找\" tab with data-testid \"search\" is displayed\n    When the user enters \"不存在的文字\" into the input field with data-testid \"search-input\"\n    And the user clicks the \"查找\" button with data-testid \"search-button\"\n    Then an alert should be displayed with the message \"未找到您要找的文字！\"\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the webpage is loaded and the paragraph contains the text \"1969年1月，我到文安驿公社接北京知青。\"')\ndef step_impl(context):\n    # Initialize the WebDriver and load the test page\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)  # Allow the page to load\n\n    # Verify the paragraph contains the expected text\n    paragraph = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='box'] p\")\n    expected_text = \"1969年1月，我到文安驿公社接北京知青。\"\n    assert expected_text in paragraph.text, f\"Expected paragraph to contain '{expected_text}', but got '{paragraph.text}'\"\n\n@given('the user clicks on the \"展开\" list item with data-testid \"expand-list-item\"')\ndef step_impl(context):\n    # Locate and click the \"展开\" list item\n    expand_list_item = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='expand-list-item']\"))\n    )\n    expand_list_item.click()\n    time.sleep(1)  # Allow the dropdown to expand\n\n@given('the user clicks on the \"查找\" list item with data-testid \"search-list-item\"')\ndef step_impl(context):\n    # Locate and click the \"查找\" list item\n    search_list_item = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='search-list-item']\"))\n    )\n    search_list_item.click()\n    time.sleep(1)  # Allow the \"查找\" tab to display\n\n@given('the \"查找\" tab with data-testid \"search\" is displayed')\ndef step_impl(context):\n    # Verify the \"查找\" tab is displayed\n    search_tab = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='search']\"))\n    )\n    assert search_tab.is_displayed(), \"The '查找' tab is not displayed\"\n\n@when('the user enters \"不存在的文字\" into the input field with data-testid \"search-input\"')\ndef step_impl(context):\n    # Locate the input field and enter the text\n    search_input = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='search-input']\"))\n    )\n    search_input.clear()\n    search_input.send_keys(\"不存在的文字\")\n    time.sleep(1)  # Allow the input to process\n\n@when('the user clicks the \"查找\" button with data-testid \"search-button\"')\ndef step_impl(context):\n    # Locate and click the \"查找\" button\n    search_button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='search-button']\"))\n    )\n    search_button.click()\n    time.sleep(1)  # Allow the alert to appear\n\n@then('an alert should be displayed with the message \"未找到您要找的文字！\"')\ndef step_impl(context):\n    # Verify the alert is displayed with the correct message\n    WebDriverWait(context.driver, 10).until(EC.alert_is_present())\n    alert = context.driver.switch_to.alert\n    assert alert.text == \"未找到您要找的文字！\", f\"Expected alert message to be '未找到您要找的文字！', but got '{alert.text}'\"\n    alert.accept()  # Close the alert\n    time.sleep(1)\n\n# Teardown to close the browser after the test\ndef after_scenario(context, scenario):\n    if hasattr(context, 'driver'):\n        context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: Highlight occurrences of text in the paragraph when using the '查找' functionality\n  The system should allow users to search for text within the paragraph and highlight all occurrences. If the text is not found, an appropriate alert should be displayed.\n\n\n  Scenario: [Error] Search with an empty input field\n    Given the webpage is loaded and the paragraph contains the text \"1969年1月，我到文安驿公社接北京知青。\"\n    And the user clicks on the \"展开\" list item with data-testid \"expand-list-item\"\n    And the user clicks on the \"查找\" list item with data-testid \"search-list-item\"\n    And the \"查找\" tab with data-testid \"search\" is displayed\n    When the user leaves the input field with data-testid \"search-input\" empty\n    And the user clicks the \"查找\" button with data-testid \"search-button\"\n    Then an alert should be displayed with the message \"请输入文字！\""
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the webpage is loaded and the paragraph contains the text \"1969年1月，我到文安驿公社接北京知青。\"')\ndef step_impl(context):\n    # Initialize the WebDriver and load the test page\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)  # Allow the page to load completely\n\n    # Verify the paragraph contains the expected text\n    paragraph = context.driver.find_element(By.CSS_SELECTOR, \"p\")\n    expected_text = \"1969年1月，我到文安驿公社接北京知青。\"\n    assert expected_text in paragraph.text, f\"Expected paragraph to contain '{expected_text}', but got '{paragraph.text}'\"\n\n@given('the user clicks on the \"展开\" list item with data-testid \"expand-list-item\"')\ndef step_impl(context):\n    # Locate and click the \"展开\" list item\n    expand_list_item = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='expand-list-item']\"))\n    )\n    expand_list_item.click()\n    time.sleep(1)  # Allow the dropdown to expand\n\n@given('the user clicks on the \"查找\" list item with data-testid \"search-list-item\"')\ndef step_impl(context):\n    # Locate and click the \"查找\" list item\n    search_list_item = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='search-list-item']\"))\n    )\n    search_list_item.click()\n    time.sleep(1)  # Allow the \"查找\" tab to become visible\n\n@given('the \"查找\" tab with data-testid \"search\" is displayed')\ndef step_impl(context):\n    # Verify the \"查找\" tab is displayed\n    search_tab = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='search']\"))\n    )\n    assert search_tab.is_displayed(), \"The '查找' tab is not displayed\"\n\n@when('the user leaves the input field with data-testid \"search-input\" empty')\ndef step_impl(context):\n    # Locate the input field and ensure it is empty\n    search_input = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='search-input']\")\n    search_input.clear()\n    time.sleep(1)  # Allow any UI updates to complete\n\n@when('the user clicks the \"查找\" button with data-testid \"search-button\"')\ndef step_impl(context):\n    # Locate and click the \"查找\" button\n    search_button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='search-button']\"))\n    )\n    search_button.click()\n    time.sleep(1)  # Allow the alert to appear\n\n@then('an alert should be displayed with the message \"请输入文字！\"')\ndef step_impl(context):\n    # Wait for the alert to appear and verify its message\n    WebDriverWait(context.driver, 10).until(EC.alert_is_present())\n    alert = context.driver.switch_to.alert\n    assert alert.text == \"请输入文字！\", f\"Expected alert message to be '请输入文字！', but got '{alert.text}'\"\n    alert.accept()  # Close the alert\n    time.sleep(1)\n\n# Teardown after all steps\ndef after_scenario(context, scenario):\n    if hasattr(context, 'driver'):\n        context.driver.quit()"
                }
            ]
        },
        "5": {
            "requirement": {
                "description": "The web application must provide a '替换' (Replace) functionality that allows users to replace occurrences of specified text within a paragraph. The functionality should adhere to the following requirements: \n\n1. **UI Elements and Interactions:**\n   - The '替换' functionality is accessible via a dropdown menu triggered by clicking the '展开' list item with `data-testid='expand-list-item'`.\n   - Within the dropdown, the user must click the '替换' list item with `data-testid='replace-list-item'` to display the '替换' tab with `data-testid='replace`.\n   - The '替换' tab contains:\n     - An input field for the old text with `data-testid='replace-input-old'`.\n     - An input field for the new text with `data-testid='replace-input-new'`.\n     - A button labeled '替换' with `data-testid='replace-button'`.\n\n2. **Functionality:**\n   - When the user enters text into both input fields and clicks the '替换' button:\n     - All occurrences of the old text (case-sensitive) in the paragraph should be replaced with the new text.\n     - The paragraph should visually highlight the replaced text using a `<span>` element with a yellow background.\n   - If the old text appears multiple times in the paragraph, all occurrences must be replaced.\n   - If the old text is a substring of other words, only the exact matches should be replaced.\n\n3. **Error Handling:**\n   - If the old text is not found in the paragraph, an alert should be displayed with the message '未找到您要找的文字！'.\n   - If the old text input field is empty, an alert should be displayed with the message '请输入文字！'.\n\n4. **Expected Results:**\n   - The paragraph's content should be updated dynamically in the DOM to reflect the replacements.\n   - The original paragraph content should be restored when switching between tabs or dropdown options.\n\n5. **Boundary Conditions:**\n   - The system must handle edge cases where the old text appears multiple times or is a substring of other words.\n   - The system must ensure that the replacement process does not affect unrelated text or introduce formatting errors.\n\n6. **UI Behavior:**\n   - The '替换' tab should only be displayed when the corresponding dropdown option is selected.\n   - The dropdown menu should toggle visibility when the '展开' list item is clicked.\n\nThis refined requirement ensures that the '替换' functionality is robust, user-friendly, and handles all specified scenarios, including normal cases, edge cases, and error conditions."
            },
            "test_cases": [
                {
                    "test_case": [
                        "Feature: Replace text functionality in the paragraph\n  The system should allow users to replace occurrences of specified text in the paragraph with new text. If the old text is not found, an alert should be displayed.\n\n\n  Scenario: [Normal] Replace occurrences of old text with new text\n    Given the webpage is loaded and the paragraph contains the text \"梁家河村一共来了十五名北京知青\"\n    And the user clicks on the \"展开\" list item with data-testid \"expand-list-item\"\n    And the user clicks on the \"替换\" list item with data-testid \"replace-list-item\"\n    And the \"替换\" tab with data-testid \"replace\" is displayed\n    When the user enters \"北京知青\" into the old text input field with data-testid \"replace-input-old\"\n    And the user enters \"知青们\" into the new text input field with data-testid \"replace-input-new\"\n    And the user clicks the \"替换\" button with data-testid \"replace-button\"\n    Then all occurrences of \"北京知青\" in the paragraph should be replaced with \"知青们\"\n    And the paragraph should display \"梁家河村一共来了十五名知青们\"\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\ndef is_visible(driver, element):\n    return driver.execute_script(\"return arguments[0].offsetWidth > 0 && arguments[0].offsetHeight > 0;\", element)\n\n@given('the webpage is loaded and the paragraph contains the text \"梁家河村一共来了十五名北京知青\"')\ndef step_given_webpage_loaded(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='box']\"))\n    )\n    paragraph = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='box'] p\")\n    assert \"梁家河村一共来了十五名北京知青\" in paragraph.text, \"Expected text not found in paragraph\"\n    time.sleep(1)\n\n@given('the user clicks on the \"展开\" list item with data-testid \"expand-list-item\"')\ndef step_given_click_expand_list_item(context):\n    expand_list_item = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='expand-list-item']\"))\n    )\n    expand_list_item.click()\n    time.sleep(1)\n\n@given('the user clicks on the \"替换\" list item with data-testid \"replace-list-item\"')\ndef step_given_click_replace_list_item(context):\n    replace_list_item = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='replace-list-item']\"))\n    )\n    replace_list_item.click()\n    time.sleep(1)\n\n@given('the \"替换\" tab with data-testid \"replace\" is displayed')\ndef step_given_replace_tab_displayed(context):\n    replace_tab = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='replace']\"))\n    )\n    assert is_visible(context.driver, replace_tab), \"Replace tab is not visible\"\n    time.sleep(1)\n\n@when('the user enters \"北京知青\" into the old text input field with data-testid \"replace-input-old\"')\ndef step_when_enter_old_text(context):\n    old_text_input = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='replace-input-old']\"))\n    )\n    old_text_input.clear()\n    old_text_input.send_keys(\"北京知青\")\n    time.sleep(1)\n\n@when('the user enters \"知青们\" into the new text input field with data-testid \"replace-input-new\"')\ndef step_when_enter_new_text(context):\n    new_text_input = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='replace-input-new']\"))\n    )\n    new_text_input.clear()\n    new_text_input.send_keys(\"知青们\")\n    time.sleep(1)\n\n@when('the user clicks the \"替换\" button with data-testid \"replace-button\"')\ndef step_when_click_replace_button(context):\n    replace_button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='replace-button']\"))\n    )\n    replace_button.click()\n    time.sleep(1)\n\n@then('all occurrences of \"北京知青\" in the paragraph should be replaced with \"知青们\"')\ndef step_then_verify_replacement(context):\n    paragraph = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='box'] p\"))\n    )\n    assert \"北京知青\" not in paragraph.text, \"Old text was not replaced\"\n    assert \"知青们\" in paragraph.text, \"New text was not found in paragraph\"\n    time.sleep(1)\n\n@then('the paragraph should display \"梁家河村一共来了十五名知青们\"')\ndef step_then_verify_paragraph_text(context):\n    paragraph = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='box'] p\"))\n    )\n    expected_text = \"梁家河村一共来了十五名知青们\"\n    assert expected_text in paragraph.text, f\"Expected paragraph text '{expected_text}' not found\"\n    time.sleep(1)\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: Replace text functionality in the paragraph\n  The system should allow users to replace occurrences of specified text in the paragraph with new text. If the old text is not found, an alert should be displayed.\n\n\n  Scenario: [Edge] Replace text when the old text appears multiple times\n    Given the webpage is loaded and the paragraph contains the text \"梁家河村一共来了十五名北京知青\"\n    And the user clicks on the \"展开\" list item with data-testid \"expand-list-item\"\n    And the user clicks on the \"替换\" list item with data-testid \"replace-list-item\"\n    And the \"替换\" tab with data-testid \"replace\" is displayed\n    When the user enters \"北京知青\" into the old text input field with data-testid \"replace-input-old\"\n    And the user enters \"知青们\" into the new text input field with data-testid \"replace-input-new\"\n    And the user clicks the \"替换\" button with data-testid \"replace-button\"\n    Then all occurrences of \"北京知青\" in the paragraph should be replaced with \"知青们\"\n    And the paragraph should contain \"梁家河村一共来了十五名知青们\"\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the webpage is loaded and the paragraph contains the text \"梁家河村一共来了十五名北京知青\"')\ndef step_impl(context):\n    # Initialize the WebDriver and load the test page\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)  # Allow the page to load\n\n    # Verify the paragraph contains the expected text\n    paragraph = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='box'] p\")\n    expected_text = \"梁家河村一共来了十五名北京知青\"\n    assert expected_text in paragraph.text, f\"Expected text not found in paragraph: {paragraph.text}\"\n\n@given('the user clicks on the \"展开\" list item with data-testid \"expand-list-item\"')\ndef step_impl(context):\n    # Click on the \"展开\" list item\n    expand_list_item = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='expand-list-item']\"))\n    )\n    expand_list_item.click()\n    time.sleep(1)\n\n@given('the user clicks on the \"替换\" list item with data-testid \"replace-list-item\"')\ndef step_impl(context):\n    # Click on the \"替换\" list item\n    replace_list_item = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='replace-list-item']\"))\n    )\n    replace_list_item.click()\n    time.sleep(1)\n\n@given('the \"替换\" tab with data-testid \"replace\" is displayed')\ndef step_impl(context):\n    # Verify the \"替换\" tab is displayed\n    replace_tab = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='replace']\"))\n    )\n    assert replace_tab.is_displayed(), \"The '替换' tab is not displayed\"\n\n@when('the user enters \"北京知青\" into the old text input field with data-testid \"replace-input-old\"')\ndef step_impl(context):\n    # Enter \"北京知青\" into the old text input field\n    old_text_input = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='replace-input-old']\")\n    old_text_input.clear()\n    old_text_input.send_keys(\"北京知青\")\n    time.sleep(1)\n\n@when('the user enters \"知青们\" into the new text input field with data-testid \"replace-input-new\"')\ndef step_impl(context):\n    # Enter \"知青们\" into the new text input field\n    new_text_input = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='replace-input-new']\")\n    new_text_input.clear()\n    new_text_input.send_keys(\"知青们\")\n    time.sleep(1)\n\n@when('the user clicks the \"替换\" button with data-testid \"replace-button\"')\ndef step_impl(context):\n    # Click the \"替换\" button\n    replace_button = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='replace-button']\")\n    replace_button.click()\n    time.sleep(1)\n\n@then('all occurrences of \"北京知青\" in the paragraph should be replaced with \"知青们\"')\ndef step_impl(context):\n    # Verify all occurrences of \"北京知青\" are replaced with \"知青们\"\n    paragraph = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='box'] p\")\n    expected_text = \"梁家河村一共来了十五名知青们\"\n    assert expected_text in paragraph.text, f\"Expected text not found in paragraph: {paragraph.text}\"\n\n@then('the paragraph should contain \"梁家河村一共来了十五名知青们\"')\ndef step_impl(context):\n    # Verify the paragraph displays the expected text\n    paragraph = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='box'] p\")\n    expected_text = \"梁家河村一共来了十五名知青们\"\n    assert expected_text in paragraph.text, f\"Paragraph text does not match: {paragraph.text}\"\n\n# Teardown to close the browser after the test\ndef after_scenario(context, scenario):\n    if hasattr(context, 'driver'):\n        context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: Replace text functionality in the paragraph\n  The system should allow users to replace occurrences of specified text in the paragraph with new text. If the old text is not found, an alert should be displayed.\n\n\nScenario: [Edge] Replace text when the old text is a substring of other words\n    Given the webpage is loaded and the paragraph contains the text \"梁家河村一共来了十五名北京知青\"\n    And the user clicks on the \"展开\" list item with data-testid \"expand-list-item\"\n    And the user clicks on the \"替换\" list item with data-testid \"replace-list-item\"\n    And the \"替换\" tab with data-testid \"replace\" is displayed\n    When the user enters \"北\" into the old text input field with data-testid \"replace-input-old\"\n    And the user enters \"南\" into the new text input field with data-testid \"replace-input-new\"\n    And the user clicks the \"替换\" button with data-testid \"replace-button\"\n    Then all occurrences of \"北\" in the paragraph should be replaced with \"南\"\n    And the paragraph should contain \"梁家河村一共来了十五名南京知青\""
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\ndef is_expanded(element):\n    aria = element.get_attribute(\"aria-expanded\")\n    if aria is not None:\n        return aria == \"true\"\n\n    class_list = element.get_attribute(\"class\").split()\n    if any(cls in class_list for cls in [\"expanded\", \"open\", \"show\"]):\n        return True\n\n    data_expanded = element.get_attribute(\"data-expanded\")\n    if data_expanded is not None:\n        return data_expanded == \"true\"\n\n    return element.is_displayed()\n\n@given('the webpage is loaded and the paragraph contains the text \"梁家河村一共来了十五名北京知青\"')\ndef step_impl(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)\n    paragraph = context.driver.find_element(By.CSS_SELECTOR, \"p\")\n    expected_text = \"梁家河村一共来了十五名北京知青\"\n    assert expected_text in paragraph.text, f\"Expected text '{expected_text}' not found in paragraph.\"\n\n@given('the user clicks on the \"展开\" list item with data-testid \"expand-list-item\"')\ndef step_impl(context):\n    expand_list_item = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='expand-list-item']\"))\n    )\n    expand_list_item.click()\n    time.sleep(1)\n\n@given('the user clicks on the \"替换\" list item with data-testid \"replace-list-item\"')\ndef step_impl(context):\n    replace_list_item = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='replace-list-item']\"))\n    )\n    replace_list_item.click()\n    time.sleep(1)\n\n@given('the \"替换\" tab with data-testid \"replace\" is displayed')\ndef step_impl(context):\n    replace_tab = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='replace']\"))\n    )\n    assert replace_tab.is_displayed(), \"Replace tab is not displayed.\"\n\n@when('the user enters \"北\" into the old text input field with data-testid \"replace-input-old\"')\ndef step_impl(context):\n    old_text_input = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='replace-input-old']\")\n    old_text_input.clear()\n    old_text_input.send_keys(\"北\")\n    time.sleep(1)\n\n@when('the user enters \"南\" into the new text input field with data-testid \"replace-input-new\"')\ndef step_impl(context):\n    new_text_input = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='replace-input-new']\")\n    new_text_input.clear()\n    new_text_input.send_keys(\"南\")\n    time.sleep(1)\n\n@when('the user clicks the \"替换\" button with data-testid \"replace-button\"')\ndef step_impl(context):\n    replace_button = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='replace-button']\")\n    replace_button.click()\n    time.sleep(1)\n\n@then('all occurrences of \"北\" in the paragraph should be replaced with \"南\"')\ndef step_impl(context):\n    paragraph = context.driver.find_element(By.CSS_SELECTOR, \"p\")\n    expected_text = \"梁家河村一共来了十五名南京知青\"\n    assert expected_text in paragraph.text, f\"Expected text '{expected_text}' not found in paragraph.\"\n\n@then('the paragraph should contain \"梁家河村一共来了十五名南京知青\"')\ndef step_impl(context):\n    paragraph = context.driver.find_element(By.CSS_SELECTOR, \"p\")\n    expected_text = \"梁家河村一共来了十五名南京知青\"\n    assert expected_text in paragraph.text, f\"Expected text '{expected_text}' not found in paragraph.\"\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: Replace text functionality in the paragraph\n  The system should allow users to replace occurrences of specified text in the paragraph with new text. If the old text is not found, an alert should be displayed.\n\n\n  Scenario: [Error] Replace text when the old text is not found\n    Given the webpage is loaded and the paragraph contains the text \"梁家河村一共来了十五名北京知青\"\n    And the user clicks on the \"展开\" list item with data-testid \"expand-list-item\"\n    And the user clicks on the \"替换\" list item with data-testid \"replace-list-item\"\n    And the \"替换\" tab with data-testid \"replace\" is displayed\n    When the user enters \"不存在的文字\" into the old text input field with data-testid \"replace-input-old\"\n    And the user enters \"新文字\" into the new text input field with data-testid \"replace-input-new\"\n    And the user clicks the \"替换\" button with data-testid \"replace-button\"\n    Then an alert should be displayed with the message \"未找到您要找的文字！\"\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the webpage is loaded and the paragraph contains the text \"梁家河村一共来了十五名北京知青\"')\ndef step_impl(context):\n    # Initialize the WebDriver and load the test page\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)  # Allow the page to load completely\n\n    # Verify the paragraph contains the expected text\n    paragraph = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='box'] p\")\n    expected_text = \"梁家河村一共来了十五名北京知青\"\n    assert expected_text in paragraph.text, f\"Expected text '{expected_text}' not found in paragraph.\"\n\n@given('the user clicks on the \"展开\" list item with data-testid \"expand-list-item\"')\ndef step_impl(context):\n    # Click on the \"展开\" list item\n    expand_list_item = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='expand-list-item']\"))\n    )\n    expand_list_item.click()\n    time.sleep(1)\n\n@given('the user clicks on the \"替换\" list item with data-testid \"replace-list-item\"')\ndef step_impl(context):\n    # Click on the \"替换\" list item\n    replace_list_item = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='replace-list-item']\"))\n    )\n    replace_list_item.click()\n    time.sleep(1)\n\n@given('the \"替换\" tab with data-testid \"replace\" is displayed')\ndef step_impl(context):\n    # Verify the \"替换\" tab is displayed\n    replace_tab = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='replace']\"))\n    )\n    assert replace_tab.is_displayed(), \"The '替换' tab is not displayed.\"\n\n@when('the user enters \"不存在的文字\" into the old text input field with data-testid \"replace-input-old\"')\ndef step_impl(context):\n    # Enter \"不存在的文字\" into the old text input field\n    old_text_input = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='replace-input-old']\"))\n    )\n    old_text_input.clear()\n    old_text_input.send_keys(\"不存在的文字\")\n    time.sleep(1)\n\n@when('the user enters \"新文字\" into the new text input field with data-testid \"replace-input-new\"')\ndef step_impl(context):\n    # Enter \"新文字\" into the new text input field\n    new_text_input = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='replace-input-new']\"))\n    )\n    new_text_input.clear()\n    new_text_input.send_keys(\"新文字\")\n    time.sleep(1)\n\n@when('the user clicks the \"替换\" button with data-testid \"replace-button\"')\ndef step_impl(context):\n    # Click the \"替换\" button\n    replace_button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='replace-button']\"))\n    )\n    replace_button.click()\n    time.sleep(1)\n\n@then('an alert should be displayed with the message \"未找到您要找的文字！\"')\ndef step_impl(context):\n    # Verify the alert is displayed with the correct message\n    WebDriverWait(context.driver, 10).until(EC.alert_is_present())\n    alert = context.driver.switch_to.alert\n    assert alert.text == \"未找到您要找的文字！\", f\"Unexpected alert message: {alert.text}\"\n    alert.accept()\n    time.sleep(1)\n\n# Teardown to close the browser after the test\ndef after_scenario(context, scenario):\n    if hasattr(context, 'driver'):\n        context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: Replace text functionality in the paragraph\n  The system should allow users to replace occurrences of specified text in the paragraph with new text. If the old text is not found, an alert should be displayed.\n\n\n  Scenario: [Error] Replace text when the old text input field is empty\n    Given the webpage is loaded and the paragraph contains the text \"梁家河村一共来了十五名北京知青\"\n    And the user clicks on the \"展开\" list item with data-testid \"expand-list-item\"\n    And the user clicks on the \"替换\" list item with data-testid \"replace-list-item\"\n    And the \"替换\" tab with data-testid \"replace\" is displayed\n    When the user leaves the old text input field with data-testid \"replace-input-old\" empty\n    And the user enters \"新文字\" into the new text input field with data-testid \"replace-input-new\"\n    And the user clicks the \"替换\" button with data-testid \"replace-button\"\n    Then an alert should be displayed with the message \"请输入文字！\"\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the webpage is loaded and the paragraph contains the text \"梁家河村一共来了十五名北京知青\"')\ndef step_impl(context):\n    # Initialize the WebDriver and load the test page\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)  # Allow the page to load completely\n\n    # Verify the paragraph contains the expected text\n    paragraph = context.driver.find_element(By.CSS_SELECTOR, \"p\")\n    expected_text = \"梁家河村一共来了十五名北京知青\"\n    assert expected_text in paragraph.text, f\"Expected text '{expected_text}' not found in paragraph.\"\n\n@given('the user clicks on the \"展开\" list item with data-testid \"expand-list-item\"')\ndef step_impl(context):\n    # Locate and click the \"展开\" list item\n    expand_list_item = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='expand-list-item']\"))\n    )\n    expand_list_item.click()\n    time.sleep(1)\n\n@given('the user clicks on the \"替换\" list item with data-testid \"replace-list-item\"')\ndef step_impl(context):\n    # Locate and click the \"替换\" list item\n    replace_list_item = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='replace-list-item']\"))\n    )\n    replace_list_item.click()\n    time.sleep(1)\n\n@given('the \"替换\" tab with data-testid \"replace\" is displayed')\ndef step_impl(context):\n    # Verify the \"替换\" tab is displayed\n    replace_tab = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='replace']\"))\n    )\n    assert replace_tab.is_displayed(), \"The '替换' tab is not displayed.\"\n\n@when('the user leaves the old text input field with data-testid \"replace-input-old\" empty')\ndef step_impl(context):\n    # Ensure the old text input field is empty\n    old_text_input = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='replace-input-old']\")\n    old_text_input.clear()\n    time.sleep(1)\n\n@when('the user enters \"新文字\" into the new text input field with data-testid \"replace-input-new\"')\ndef step_impl(context):\n    # Enter \"新文字\" into the new text input field\n    new_text_input = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='replace-input-new']\")\n    new_text_input.clear()\n    new_text_input.send_keys(\"新文字\")\n    time.sleep(1)\n\n@when('the user clicks the \"替换\" button with data-testid \"replace-button\"')\ndef step_impl(context):\n    # Locate and click the \"替换\" button\n    replace_button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='replace-button']\"))\n    )\n    replace_button.click()\n    time.sleep(1)\n\n@then('an alert should be displayed with the message \"请输入文字！\"')\ndef step_impl(context):\n    # Wait for the alert to be present and verify its message\n    WebDriverWait(context.driver, 10).until(EC.alert_is_present())\n    alert = context.driver.switch_to.alert\n    assert alert.text == \"请输入文字！\", f\"Expected alert message '请输入文字！', but got '{alert.text}'\"\n    alert.accept()\n    time.sleep(1)\n\n# Teardown to close the browser after the test\ndef after_scenario(context, scenario):\n    if hasattr(context, 'driver'):\n        context.driver.quit()"
                }
            ]
        },
        "6": {
            "requirement": {
                "description": "Upon loading the webpage, the user should be able to interact with the tab switching functionality. Initially, the user clicks the '展开' button, identified by the data-testid 'expand-list-item', to reveal the options '查找' and '替换'. When the user selects a tab by clicking either the '查找' tab with data-testid 'search-tab-item' or the '替换' tab with data-testid 'replace-tab-item', the system must display the corresponding tab content. Specifically, for the '查找' tab, the system should display the input field with data-testid 'search-input' and the button with data-testid 'search-button', while hiding the '替换' tab content, which includes the input fields with data-testids 'replace-input-old' and 'replace-input-new', and the button with data-testid 'replace-button'. Conversely, when the '替换' tab is selected, its content should be displayed, and the '查找' tab content should be hidden. This ensures a seamless user experience in navigating between the search and replace functionalities."
            },
            "test_cases": [
                {
                    "test_case": [
                        "Feature: Tab Switching Functionality\n  The system should allow users to switch between \"查找\" and \"替换\" tabs, displaying the relevant input fields and buttons while hiding the other tab's content.\n\n\n  Scenario: [Normal] User switches to the \"查找\" tab\n    Given the webpage is loaded\n    And the user sees the \"展开\" button with data-testid \"expand-list-item\"\n    And the user clicks the \"展开\" button with data-testid \"expand-list-item\"\n    And the user clicks the \"替换\" option with data-testid \"replace-list-item\"\n    When the user clicks the \"查找\" tab with data-testid \"search-tab-item\"\n    Then the \"查找\" tab content with data-testid \"search\" should be displayed\n    And the \"替换\" tab content with data-testid \"replace\" should be hidden\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the webpage is loaded')\ndef step_impl(context):\n    # Initialize the WebDriver and load the test page\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    context.driver.maximize_window()\n    time.sleep(1)  # Allow the page to load completely\n\n@given('the user sees the \"展开\" button with data-testid \"expand-list-item\"')\ndef step_impl(context):\n    # Wait for the \"展开\" button to be visible\n    context.expand_button = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='expand-list-item']\"))\n    )\n    assert context.expand_button.is_displayed(), '\"展开\" button is not visible'\n\n@given('the user clicks the \"展开\" button with data-testid \"expand-list-item\"')\ndef step_impl(context):\n    # Click the \"展开\" button\n    context.expand_button.click()\n    time.sleep(1)  # Allow the dropdown to expand\n\n@given('the user clicks the \"替换\" option with data-testid \"replace-list-item\"')\ndef step_impl(context):\n    # Wait for the \"替换\" option to be visible and clickable\n    replace_option = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='replace-list-item']\"))\n    )\n    replace_option.click()\n    time.sleep(1)\n\n@when('the user clicks the \"查找\" tab with data-testid \"search-tab-item\"')\ndef step_impl(context):\n    # Wait for the \"查找\" tab to be visible and clickable\n    search_tab = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='search-tab-item']\"))\n    )\n    search_tab.click()\n    time.sleep(1)  # Allow the tab content to load\n\n@then('the \"查找\" tab content with data-testid \"search\" should be displayed')\ndef step_impl(context):\n    # Verify that the \"查找\" tab content is displayed\n    search_content = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='search']\"))\n    )\n    assert search_content.is_displayed(), '\"查找\" tab content is not displayed'\n\n@then('the \"替换\" tab content with data-testid \"replace\" should be hidden')\ndef step_impl(context):\n    # Verify that the \"替换\" tab content is hidden\n    replace_content = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='replace']\")\n    assert not replace_content.is_displayed(), '\"替换\" tab content is not hidden'\n\n# Cleanup after the test\ndef after_scenario(context, scenario):\n    if hasattr(context, 'driver'):\n        context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: Tab Switching Functionality\n  The system should allow users to switch between \"查找\" and \"替换\" tabs, displaying the relevant input fields and buttons while hiding the other tab's content.\n\n\nScenario: [Normal] User switches to the \"替换\" tab\n    Given the webpage is loaded\n    And the user sees the \"展开\" button with data-testid \"expand-list-item\"\n    And the user clicks the \"展开\" button with data-testid \"expand-list-item\"\n    And the user clicks the \"查找\" option with data-testid \"search-list-item\"\n    When the user clicks the \"替换\" tab with data-testid \"replace-tab-item\"\n    Then the \"替换\" tab content with data-testid \"replace\" should be displayed\n    And the \"查找\" tab content with data-testid \"search\" should be hidden"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the webpage is loaded')\ndef step_given_webpage_loaded(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)\n\n@given('the user sees the \"展开\" button with data-testid \"expand-list-item\"')\ndef step_given_user_sees_expand_button(context):\n    expand_button = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='expand-list-item']\"))\n    )\n    assert expand_button.is_displayed(), \"Expand button is not visible\"\n    time.sleep(1)\n\n@given('the user clicks the \"展开\" button with data-testid \"expand-list-item\"')\ndef step_given_user_clicks_expand_button(context):\n    expand_button = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='expand-list-item']\")\n    expand_button.click()\n    time.sleep(1)\n\n@given('the user clicks the \"查找\" option with data-testid \"search-list-item\"')\ndef step_given_user_clicks_search_option(context):\n    search_option = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='search-list-item']\"))\n    )\n    search_option.click()\n    time.sleep(1)\n\n@when('the user clicks the \"替换\" tab with data-testid \"replace-tab-item\"')\ndef step_when_user_clicks_replace_tab(context):\n    replace_tab = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='replace-tab-item']\"))\n    )\n    replace_tab.click()\n    time.sleep(1)\n\n@then('the \"替换\" tab content with data-testid \"replace\" should be displayed')\ndef step_then_replace_tab_content_displayed(context):\n    replace_content = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='replace']\"))\n    )\n    assert replace_content.is_displayed(), \"Replace tab content is not displayed\"\n    time.sleep(1)\n\n@then('the \"查找\" tab content with data-testid \"search\" should be hidden')\ndef step_then_search_tab_content_hidden(context):\n    search_content = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='search']\")\n    assert not search_content.is_displayed(), \"Search tab content is not hidden\"\n    time.sleep(1)\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                }
            ]
        }
    }
}