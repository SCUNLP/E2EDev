{
    "summary": {
        "overview": "The Movie Seat Booking application allows users to select a movie and book seats in a theater. Users can choose from a list of movies, select available seats, and view the total cost of their selections. The application retains user selections using local storage to persist data across sessions.",
        "predefined_options": "The application offers a set of predefined movie options, each associated with a specific ticket price and uniquely identifiable by its corresponding data-testid. The default selection is 'The Big Lebowski' priced at $10 (data-testid='movie-option-1'), followed by 'Fargo' at $12 (data-testid='movie-option-2'), 'O Brother' at $8 (data-testid='movie-option-3'), and 'No Country for Old Men' at $9 (data-testid='movie-option-4'). The theater seating is arranged in 6 rows, with each row containing 8 seats. Every seat is uniquely identifiable via a data-testid in the format seat-row-column. For example, seat-1-1 refers to the first seat in the first row, and seat-2-3 refers to the third seat in the second row. Initially, the following seats are marked as occupied: Row 2: Seat 4 (seat-2-4) and Seat 5 (seat-2-5); Row 3: Seat 7 (seat-3-7) and Seat 8 (seat-3-8); Row 5: Seat 4 (seat-5-4) and Seat 5 (seat-5-5); Row 6: Seat 5 (seat-6-5), Seat 6 (seat-6-6), and Seat 7 (seat-6-7). This configuration ensures that each seat and movie option can be distinctly identified and interacted with, facilitating robust and precise testing.",
        "external_resources": "No external resources such as images or audio files are directly referenced in the provided code.",
        "external_js_libraries": "No external JavaScript libraries are referenced in the provided code."
    },
    "finegrained_rewith_test": {
        "1": {
            "requirement": {
                "description": "Upon loading the webpage, users can interact with the seat map and movie dropdown to dynamically update the total price. Clicking on any available seat (i.e., a seat without the occupied class) marks it as selected, and the selected seat count updates in the element with data-testid=\"selected-count\". Users can also select a movie from the dropdown (data-testid=\"movie-select\"), where each option has a value representing the ticket price. The total price, shown in the element with data-testid=\"total-price\", is calculated as the number of selected seats multiplied by the selected movieâ€™s price. Seats marked as occupied must not be selectable and should not affect the count or price. Changing the selected movie at any time updates the total price accordingly."
            },
            "test_cases": [
                {
                    "test_case": [
                        "Feature: Seat Selection and Price Update\n  The user can select an available seat and choose a movie from the dropdown menu, which updates the total price automatically based on the selected movie's price.\n\n\n  Scenario: [Normal] User selects a seat and chooses a movie\n    Given the webpage is loaded\n    When the user clicks on the seat with data-testid \"seat-1-1\"\n    And the user selects \"Fargo ($12)\" from the dropdown with data-testid \"movie-select\"\n    Then the seat with data-testid \"seat-1-1\" should be marked as selected\n    And the selected count with data-testid \"selected-count\" should display \"1\"\n    And the total price with data-testid \"total-price\" should display \"12\"\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the webpage is loaded')\ndef step_given_webpage_loaded(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)\n\n@given('the user sees the seat with data-testid \"seat-1-1\" is available')\ndef step_given_seat_available(context):\n    seat = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='seat-1-1']\"))\n    )\n    assert not seat.get_attribute(\"class\").contains(\"occupied\"), \"Seat is occupied\"\n    time.sleep(1)\n\n@when('the user clicks on the seat with data-testid \"seat-1-1\"')\ndef step_when_user_clicks_seat(context):\n    seat = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='seat-1-1']\"))\n    )\n    seat.click()\n    time.sleep(1)\n\n@when('the user selects \"Fargo ($12)\" from the dropdown with data-testid \"movie-select\"')\ndef step_when_user_selects_movie(context):\n    movie_select = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='movie-select']\"))\n    )\n    movie_select.click()\n    option = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='movie-option-2']\"))\n    )\n    option.click()\n    time.sleep(1)\n\n@then('the seat with data-testid \"seat-1-1\" should be marked as selected')\ndef step_then_seat_marked_selected(context):\n    seat = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='seat-1-1']\"))\n    )\n    assert \"selected\" in seat.get_attribute(\"class\"), \"Seat is not marked as selected\"\n    time.sleep(1)\n\n@then('the selected count with data-testid \"selected-count\" should display \"1\"')\ndef step_then_selected_count_display(context):\n    selected_count = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='selected-count']\"))\n    )\n    assert selected_count.text.strip() == \"1\", f\"Expected selected count to be '1', but got '{selected_count.text.strip()}'\"\n    time.sleep(1)\n\n@then('the total price with data-testid \"total-price\" should display \"12\"')\ndef step_then_total_price_display(context):\n    total_price = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='total-price']\"))\n    )\n    assert total_price.text.strip() == \"12\", f\"Expected total price to be '12', but got '{total_price.text.strip()}'\"\n    time.sleep(1)\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: Seat Selection and Price Update\n  The user can select an available seat and choose a movie from the dropdown menu, which updates the total price automatically based on the selected movie's price.\n\n\nScenario: [Edge] User selects multiple seats and changes the movie\n    Given the webpage is loaded\n    When the user clicks on the seat with data-testid \"seat-1-1\"\n    And the user clicks on the seat with data-testid \"seat-1-2\"\n    And the user selects \"O Brother ($8)\" from the dropdown with data-testid \"movie-select\"\n    Then the seats with data-testid \"seat-1-1\" and \"seat-1-2\" should be marked as selected\n    And the selected count with data-testid \"selected-count\" should display \"2\"\n    And the total price with data-testid \"total-price\" should display \"16\""
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the webpage is loaded')\ndef step_given_webpage_loaded(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)\n\n@when('the user clicks on the seat with data-testid \"seat-1-1\"')\ndef step_when_user_clicks_seat_1_1(context):\n    seat = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='seat-1-1']\"))\n    )\n    seat.click()\n    time.sleep(1)\n\n@when('the user clicks on the seat with data-testid \"seat-1-2\"')\ndef step_when_user_clicks_seat_1_2(context):\n    seat = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='seat-1-2']\"))\n    )\n    seat.click()\n    time.sleep(1)\n\n@when('the user selects \"O Brother ($8)\" from the dropdown with data-testid \"movie-select\"')\ndef step_when_user_selects_movie(context):\n    movie_select = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='movie-select']\"))\n    )\n    movie_select.click()\n    option = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='movie-option-3']\"))\n    )\n    option.click()\n    time.sleep(1)\n\n@then('the seats with data-testid \"seat-1-1\" and \"seat-1-2\" should be marked as selected')\ndef step_then_seats_marked_selected(context):\n    seat_1_1 = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='seat-1-1']\")\n    seat_1_2 = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='seat-1-2']\")\n    assert \"selected\" in seat_1_1.get_attribute(\"class\"), \"Seat 1-1 is not marked as selected\"\n    assert \"selected\" in seat_1_2.get_attribute(\"class\"), \"Seat 1-2 is not marked as selected\"\n\n@then('the selected count with data-testid \"selected-count\" should display \"2\"')\ndef step_then_selected_count_display(context):\n    selected_count = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='selected-count']\")\n    assert selected_count.text.strip() == \"2\", f\"Expected selected count to be '2', but got '{selected_count.text.strip()}'\"\n\n@then('the total price with data-testid \"total-price\" should display \"16\"')\ndef step_then_total_price_display(context):\n    total_price = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='total-price']\")\n    assert total_price.text.strip() == \"16\", f\"Expected total price to be '16', but got '{total_price.text.strip()}'\"\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: Seat Selection and Price Update\n  The user can select an available seat and choose a movie from the dropdown menu, which updates the total price automatically based on the selected movie's price.\n\n\nScenario: [Error] User tries to select an occupied seat\n    Given the webpage is loaded\n    When the user clicks on the seat with data-testid \"seat-2-4\"\n    Then the seat with data-testid \"seat-2-4\" should not be marked as selected\n    And the selected count with data-testid \"selected-count\" should display \"0\"\n    And the total price with data-testid \"total-price\" should display \"0\""
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the webpage is loaded')\ndef step_given_webpage_loaded(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)  # Allow time for the page to load\n\n@when('the user clicks on the seat with data-testid \"seat-2-4\"')\ndef step_when_user_clicks_seat(context):\n    seat = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='seat-2-4']\"))\n    )\n    seat.click()\n    time.sleep(1)  # Allow time for the click action to be processed\n\n@then('the seat with data-testid \"seat-2-4\" should not be marked as selected')\ndef step_then_seat_not_selected(context):\n    seat = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='seat-2-4']\")\n    class_list = seat.get_attribute(\"class\").split()\n    assert \"selected\" not in class_list, \"Seat should not be marked as selected\"\n\n@then('the selected count with data-testid \"selected-count\" should display \"0\"')\ndef step_then_selected_count_display(context):\n    selected_count = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='selected-count']\")\n    assert selected_count.text == \"0\", f\"Expected selected count to be '0', but got '{selected_count.text}'\"\n\n@then('the total price with data-testid \"total-price\" should display \"0\"')\ndef step_then_total_price_display(context):\n    total_price = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='total-price']\")\n    assert total_price.text == \"0\", f\"Expected total price to be '0', but got '{total_price.text}'\"\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: Seat Selection and Price Update\n  The user can select an available seat and choose a movie from the dropdown menu, which updates the total price automatically based on the selected movie's price.\n\n\nScenario: [Normal] User changes movie selection after selecting a seat\n    Given the webpage is loaded\n    When the user clicks on the seat with data-testid \"seat-3-1\"\n    And the user selects \"The Big Lebowski ($10)\" from the dropdown with data-testid \"movie-select\"\n    Then the seat with data-testid \"seat-3-1\" should be marked as selected\n    And the selected count with data-testid \"selected-count\" should display \"1\"\n    And the total price with data-testid \"total-price\" should display \"10\"\n    When the user selects \"No Country for Old Men ($9)\" from the dropdown with data-testid \"movie-select\"\n    Then the total price with data-testid \"total-price\" should update to \"9\""
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the webpage is loaded')\ndef step_given_webpage_loaded(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)\n\n@when('the user clicks on the seat with data-testid \"seat-3-1\"')\ndef step_when_user_clicks_seat(context):\n    seat = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='seat-3-1']\"))\n    )\n    seat.click()\n    time.sleep(1)\n\n@when('the user selects \"The Big Lebowski ($10)\" from the dropdown with data-testid \"movie-select\"')\ndef step_when_user_selects_movie_lebowski(context):\n    movie_select = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='movie-select']\"))\n    )\n    movie_select.click()\n    option = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='movie-option-1']\")\n    option.click()\n    time.sleep(1)\n\n@then('the seat with data-testid \"seat-3-1\" should be marked as selected')\ndef step_then_seat_marked_selected(context):\n    seat = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='seat-3-1']\")\n    class_list = seat.get_attribute(\"class\").split()\n    assert \"selected\" in class_list, \"Seat is not marked as selected\"\n\n@then('the selected count with data-testid \"selected-count\" should display \"1\"')\ndef step_then_selected_count_display(context):\n    selected_count = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='selected-count']\")\n    assert selected_count.text == \"1\", f\"Expected selected count to be '1', but got '{selected_count.text}'\"\n\n@then('the total price with data-testid \"total-price\" should display \"10\"')\ndef step_then_total_price_display_10(context):\n    total_price = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='total-price']\")\n    assert total_price.text == \"10\", f\"Expected total price to be '10', but got '{total_price.text}'\"\n\n@when('the user selects \"No Country for Old Men ($9)\" from the dropdown with data-testid \"movie-select\"')\ndef step_when_user_selects_movie_no_country(context):\n    movie_select = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='movie-select']\"))\n    )\n    movie_select.click()\n    option = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='movie-option-4']\")\n    option.click()\n    time.sleep(1)\n\n@then('the total price with data-testid \"total-price\" should update to \"9\"')\ndef step_then_total_price_update_9(context):\n    total_price = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='total-price']\")\n    assert total_price.text == \"9\", f\"Expected total price to be '9', but got '{total_price.text}'\"\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                }
            ]
        },
        "2": {
            "requirement": {
                "description": "Upon interacting with the movie seat booking interface, users can select a movie from a dropdown menu, with options like 'The Big Lebowski ($10)', 'Fargo ($12)', 'O Brother ($8)', and 'No Country for Old Men ($9)', each identified by a specific data-testid. Once a movie is selected, its price updates accordingly. When users click on an available seat (e.g., identified by data-testid=\"seat-1-1\"), the system toggles the seat's selection status. Selected seats are visually marked, and their indices are stored in localStorage. The seat count (data-testid=\"selected-count\") and total price (data-testid=\"total-price\") are dynamically updated based on the number of selected seats and the chosen movie's price. Seats marked as 'occupied' cannot be selected or included in the calculation. Users can deselect previously selected seats by clicking on them again, and the UI, along with localStorage, updates accordingly."
            },
            "test_cases": [
                {
                    "test_case": [
                        "Feature: Seat Selection and Price Calculation\n  The system should allow users to toggle the selection status of available seats, update the count of selected seats, calculate the total price, and store the indices of selected seats in local storage.\n\n\n  Scenario: [Normal] Toggle seat selection and update count and price\n    Given the movie seat booking page is loaded\n    And the user selects \"The Big Lebowski ($10)\" from the movie dropdown with data-testid \"movie-select\"\n    And the user sees 0 seats selected and a total price of $0\n    When the user clicks on an available seat with data-testid \"seat-1-1\"\n    Then the seat with data-testid \"seat-1-1\" should be marked as selected\n    And the user should see 1 seat selected and a total price of $10\n    And local storage should contain the index of the selected seat\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the movie seat booking page is loaded')\ndef step_given_page_is_loaded(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)\n\n@given('the user selects \"The Big Lebowski ($10)\" from the movie dropdown with data-testid \"movie-select\"')\ndef step_given_select_movie(context):\n    movie_select = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='movie-select']\"))\n    )\n    movie_select.click()\n    time.sleep(1)\n    option = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='movie-option-1']\")\n    option.click()\n    time.sleep(1)\n\n@given('the user sees 0 seats selected and a total price of $0')\ndef step_given_initial_seat_count_and_price(context):\n    selected_count = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='selected-count']\")\n    total_price = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='total-price']\")\n    assert selected_count.text.strip() == \"0\", f\"Expected 0 seats selected, but got {selected_count.text.strip()}\"\n    assert total_price.text.strip() == \"0\", f\"Expected total price $0, but got {total_price.text.strip()}\"\n\n@when('the user clicks on an available seat with data-testid \"seat-1-1\"')\ndef step_when_click_on_seat(context):\n    seat = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='seat-1-1']\"))\n    )\n    seat.click()\n    time.sleep(1)\n\n@then('the seat with data-testid \"seat-1-1\" should be marked as selected')\ndef step_then_seat_marked_selected(context):\n    seat = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='seat-1-1']\")\n    assert \"selected\" in seat.get_attribute(\"class\").split(), \"Seat is not marked as selected\"\n\n@then('the user should see 1 seat selected and a total price of $10')\ndef step_then_seat_count_and_price_updated(context):\n    selected_count = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='selected-count']\")\n    total_price = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='total-price']\")\n    assert selected_count.text.strip() == \"1\", f\"Expected 1 seat selected, but got {selected_count.text.strip()}\"\n    assert total_price.text.strip() == \"10\", f\"Expected total price $10, but got {total_price.text.strip()}\"\n\n@then('local storage should contain the index of the selected seat')\ndef step_then_local_storage_contains_seat_index(context):\n    selected_seats = context.driver.execute_script(\"return localStorage.getItem('selectedSeats');\")\n    assert selected_seats is not None, \"Local storage does not contain selected seats\"\n    assert \"0\" in selected_seats, f\"Expected seat index 0 in local storage, but got {selected_seats}\"\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: Seat Selection and Price Calculation\n  The system should allow users to toggle the selection status of available seats, update the count of selected seats, calculate the total price, and store the indices of selected seats in local storage.\n\n\n  Scenario: [Edge] Toggle multiple seats and verify count and price\n    Given the movie seat booking page is loaded\n    And the user selects \"Fargo ($12)\" from the movie dropdown with data-testid \"movie-select\"\n    And the user sees 0 seats selected and a total price of $0\n    When the user clicks on available seats with data-testid \"seat-1-1\" and \"seat-1-2\"\n    Then the seats with data-testid \"seat-1-1\" and \"seat-1-2\" should be marked as selected\n    And the user should see 2 seats selected and a total price of $24\n    And local storage should contain the indices of the selected seats\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the movie seat booking page is loaded')\ndef step_given_page_loaded(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)\n\n@given('the user selects \"Fargo ($12)\" from the movie dropdown with data-testid \"movie-select\"')\ndef step_given_select_movie(context):\n    movie_select = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='movie-select']\"))\n    )\n    movie_select.click()\n    time.sleep(1)\n    fargo_option = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='movie-option-2']\")\n    fargo_option.click()\n    time.sleep(1)\n\n@given('the user sees 0 seats selected and a total price of $0')\ndef step_given_initial_seat_count(context):\n    selected_count = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='selected-count']\")\n    total_price = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='total-price']\")\n    assert selected_count.text.strip() == \"0\", f\"Expected 0 seats selected, but got {selected_count.text.strip()}\"\n    assert total_price.text.strip() == \"0\", f\"Expected total price $0, but got {total_price.text.strip()}\"\n\n@when('the user clicks on available seats with data-testid \"seat-1-1\" and \"seat-1-2\"')\ndef step_when_click_seats(context):\n    seat_1_1 = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='seat-1-1']\"))\n    )\n    seat_1_1.click()\n    time.sleep(1)\n    seat_1_2 = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='seat-1-2']\"))\n    )\n    seat_1_2.click()\n    time.sleep(1)\n\n@then('the seats with data-testid \"seat-1-1\" and \"seat-1-2\" should be marked as selected')\ndef step_then_seats_marked_selected(context):\n    seat_1_1 = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='seat-1-1']\")\n    seat_1_2 = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='seat-1-2']\")\n    assert \"selected\" in seat_1_1.get_attribute(\"class\"), \"Seat 1-1 is not marked as selected\"\n    assert \"selected\" in seat_1_2.get_attribute(\"class\"), \"Seat 1-2 is not marked as selected\"\n\n@then('the user should see 2 seats selected and a total price of $24')\ndef step_then_seat_count_and_price(context):\n    selected_count = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='selected-count']\")\n    total_price = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='total-price']\")\n    assert selected_count.text.strip() == \"2\", f\"Expected 2 seats selected, but got {selected_count.text.strip()}\"\n    assert total_price.text.strip() == \"24\", f\"Expected total price $24, but got {total_price.text.strip()}\"\n\n@then('local storage should contain the indices of the selected seats')\ndef step_then_local_storage(context):\n    selected_seats = context.driver.execute_script(\"return localStorage.getItem('selectedSeats');\")\n    assert selected_seats is not None, \"Local storage does not contain selected seats\"\n    selected_seats_indices = [int(index) for index in selected_seats.strip('[]').split(',')]\n    assert 0 in selected_seats_indices, \"Seat index 0 (seat-1-1) not found in local storage\"\n    assert 1 in selected_seats_indices, \"Seat index 1 (seat-1-2) not found in local storage\"\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: Seat Selection and Price Calculation\n  The system should allow users to toggle the selection status of available seats, update the count of selected seats, calculate the total price, and store the indices of selected seats in local storage.\n\n\n  Scenario: [Error] Attempt to select an occupied seat\n    Given the movie seat booking page is loaded\n    And the user selects \"O Brother ($8)\" from the movie dropdown with data-testid \"movie-select\"\n    And the user sees 0 seats selected and a total price of $0\n    When the user clicks on an occupied seat with data-testid \"seat-2-4\"\n    Then the seat with data-testid \"seat-2-4\" should remain occupied and not be marked as selected\n    And the user should see 0 seats selected and a total price of $0\n    And local storage should not contain the index of the occupied seat\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\ndef is_seat_selected(element):\n    return \"selected\" in element.get_attribute(\"class\").split()\n\n@given('the movie seat booking page is loaded')\ndef step_given_page_loaded(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)\n\n@given('the user selects \"O Brother ($8)\" from the movie dropdown with data-testid \"movie-select\"')\ndef step_given_select_movie(context):\n    movie_select = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='movie-select']\"))\n    )\n    movie_select.click()\n    time.sleep(1)\n    option = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='movie-option-3']\")\n    option.click()\n    time.sleep(1)\n\n@given('the user sees 0 seats selected and a total price of $0')\ndef step_given_initial_seat_selection(context):\n    selected_count = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='selected-count']\")\n    total_price = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='total-price']\")\n    assert selected_count.text.strip() == \"0\", f\"Expected 0 seats selected, but got {selected_count.text.strip()}\"\n    assert total_price.text.strip() == \"0\", f\"Expected total price $0, but got {total_price.text.strip()}\"\n\n@when('the user clicks on an occupied seat with data-testid \"seat-2-4\"')\ndef step_when_click_occupied_seat(context):\n    occupied_seat = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='seat-2-4']\")\n    occupied_seat.click()\n    time.sleep(1)\n\n@then('the seat with data-testid \"seat-2-4\" should remain occupied and not be marked as selected')\ndef step_then_seat_remains_occupied(context):\n    occupied_seat = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='seat-2-4']\")\n    assert not is_seat_selected(occupied_seat), \"Occupied seat should not be marked as selected\"\n\n@then('the user should see 0 seats selected and a total price of $0')\ndef step_then_verify_seat_selection(context):\n    selected_count = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='selected-count']\")\n    total_price = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='total-price']\")\n    assert selected_count.text.strip() == \"0\", f\"Expected 0 seats selected, but got {selected_count.text.strip()}\"\n    assert total_price.text.strip() == \"0\", f\"Expected total price $0, but got {total_price.text.strip()}\"\n\n@then('local storage should not contain the index of the occupied seat')\ndef step_then_verify_local_storage(context):\n    # This step requires JavaScript execution to check local storage\n    selected_seats = context.driver.execute_script(\"return localStorage.getItem('selectedSeats');\")\n    assert selected_seats is not None, \"Local storage should have 'selectedSeats' key\"\n    assert \"11\" not in selected_seats, \"Occupied seat index should not be in local storage\"\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: Seat Selection and Price Calculation\n  The system should allow users to toggle the selection status of available seats, update the count of selected seats, calculate the total price, and store the indices of selected seats in local storage.\n\n\n  Scenario: [Normal] Deselect a previously selected seat\n    Given the movie seat booking page is loaded\n    And the user selects \"No Country for Old Men ($9)\" from the movie dropdown with data-testid \"movie-select\"\n    And the user clicks on an available seat with data-testid \"seat-1-1\"\n    And the user sees 1 seat selected and a total price of $9\n    When the user clicks again on the seat with data-testid \"seat-1-1\"\n    Then the seat with data-testid \"seat-1-1\" should be deselected\n    And the user should see 0 seats selected and a total price of $0\n    And local storage should not contain the index of the deselected seat"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the movie seat booking page is loaded')\ndef step_given_page_loaded(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)\n\n@given('the user selects \"No Country for Old Men ($9)\" from the movie dropdown with data-testid \"movie-select\"')\ndef step_given_select_movie(context):\n    movie_select = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='movie-select']\"))\n    )\n    movie_select.click()\n    time.sleep(1)\n    option = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='movie-option-4']\")\n    option.click()\n    time.sleep(1)\n\n@given('the user clicks on an available seat with data-testid \"seat-1-1\"')\ndef step_given_click_seat(context):\n    seat = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='seat-1-1']\"))\n    )\n    seat.click()\n    time.sleep(1)\n\n@given('the user sees 1 seat selected and a total price of $9')\ndef step_given_verify_selection(context):\n    selected_count = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='selected-count']\")\n    total_price = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='total-price']\")\n    assert selected_count.text.strip() == \"1\", f\"Expected 1 seat selected, but got {selected_count.text.strip()}\"\n    assert total_price.text.strip() == \"9\", f\"Expected total price $9, but got {total_price.text.strip()}\"\n\n@when('the user clicks again on the seat with data-testid \"seat-1-1\"')\ndef step_when_click_again(context):\n    seat = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='seat-1-1']\"))\n    )\n    seat.click()\n    time.sleep(1)\n\n@then('the seat with data-testid \"seat-1-1\" should be deselected')\ndef step_then_verify_deselection(context):\n    seat = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='seat-1-1']\")\n    assert \"selected\" not in seat.get_attribute(\"class\"), \"Seat should be deselected\"\n\n@then('the user should see 0 seats selected and a total price of $0')\ndef step_then_verify_no_selection(context):\n    selected_count = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='selected-count']\")\n    total_price = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='total-price']\")\n    assert selected_count.text.strip() == \"0\", f\"Expected 0 seats selected, but got {selected_count.text.strip()}\"\n    assert total_price.text.strip() == \"0\", f\"Expected total price $0, but got {total_price.text.strip()}\"\n\n@then('local storage should not contain the index of the deselected seat')\ndef step_then_verify_local_storage(context):\n    seat_index = context.driver.execute_script(\"return localStorage.getItem('selectedSeats');\")\n    assert seat_index is None or \"0\" not in seat_index, \"Local storage should not contain the index of the deselected seat\"\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                }
            ]
        },
        "3": {
            "requirement": {
                "description": "Upon loading the 'Movie Seat Booking' webpage, the system retrieves and applies previously selected seats and the movie selection from local storage. If local storage contains the keys 'selectedSeats' and 'selectedMovieIndex', the system will mark the seats corresponding to the indices in 'selectedSeats' with the 'selected' class. Additionally, the movie dropdown will be set to the option corresponding to 'selectedMovieIndex'. If local storage does not contain these values, no seats will be marked as 'selected', and the dropdown will default to the first movie option, 'The Big Lebowski ($10)'."
            },
            "test_cases": [
                {
                    "test_case": [
                        "Feature: REQ-003 - Retrieve and apply previously selected seats and movie selection from local storage\n\n  Background:\n    Given the webpage \"Movie Seat Booking\" is loaded\n\n\n  Scenario: [Normal] Retrieve and apply previously selected seats and movie selection\n    Given local storage contains \"selectedSeats\" with value \"[3, 5, 7]\" and \"selectedMovieIndex\" with value \"1\"\n    When the page loads\n    Then the seats with data-testid \"seat-1-4\", \"seat-1-6\", and \"seat-1-8\" should have the class \"selected\"\n    And the movie with data-testid \"movie-option-2\" should be selected in the dropdown\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\nimport http.server\nimport socketserver\nimport threading\n\nPORT = 8000\nDIRECTORY = \"E2ESD_Bench_03\"\n\ndef start_server():\n    handler = http.server.SimpleHTTPRequestHandler\n    handler.directory = DIRECTORY\n    with socketserver.TCPServer((\"\", PORT), handler) as httpd:\n        httpd.serve_forever()\n\nserver_thread = threading.Thread(target=start_server)\nserver_thread.daemon = True\nserver_thread.start()\n\n@given('the webpage \"Movie Seat Booking\" is loaded')\ndef step_given_webpage_loaded(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"http://localhost:{PORT}/index.html\")\n    time.sleep(1)\n\n@given('local storage contains \"selectedSeats\" with value \"[3, 5, 7]\" and \"selectedMovieIndex\" with value \"1\"')\ndef step_given_local_storage(context):\n    context.driver.execute_script('localStorage.setItem(\"selectedSeats\", \"[3, 5, 7]\");')\n    context.driver.execute_script('localStorage.setItem(\"selectedMovieIndex\", \"1\");')\n    time.sleep(1)\n    context.driver.refresh()\n\n@when('the page loads')\ndef step_when_page_loads(context):\n    # This step is implicitly handled by the background step\n    pass\n\n@then('the seats with data-testid \"seat-1-4\", \"seat-1-6\", and \"seat-1-8\" should have the class \"selected\"')\ndef step_then_seats_selected(context):\n    seat_ids = [\"seat-1-4\", \"seat-1-6\", \"seat-1-8\"]\n    for seat_id in seat_ids:\n        seat_element = WebDriverWait(context.driver, 10).until(\n            EC.presence_of_element_located((By.CSS_SELECTOR, f\"[data-testid='{seat_id}']\"))\n        )\n        assert \"selected\" in seat_element.get_attribute(\"class\"), f\"Seat {seat_id} is not selected\"\n    time.sleep(1)\n\n@then('the movie with data-testid \"movie-option-2\" should be selected in the dropdown')\ndef step_then_movie_selected(context):\n    movie_select = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='movie-select']\"))\n    )\n    selected_option = movie_select.find_element(By.CSS_SELECTOR, \"[data-testid='movie-option-2']\")\n    assert selected_option.is_selected(), \"Movie option 2 is not selected\"\n    time.sleep(1)\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: REQ-003 - Retrieve and apply previously selected seats and movie selection from local storage\n\n  Background:\n    Given the webpage \"Movie Seat Booking\" is loaded\n\n\n  Scenario: [Edge] No previously selected seats or movie selection in local storage\n    Given local storage does not contain \"selectedSeats\" or \"selectedMovieIndex\"\n    When the page loads\n    Then no seats should have the class \"selected\"\n    And the first movie option with data-testid \"movie-option-1\" should be selected in the dropdown\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\ndef is_selected(element):\n    return \"selected\" in element.get_attribute(\"class\").split()\n\n@given('the webpage \"Movie Seat Booking\" is loaded')\ndef step_given_webpage_loaded(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)\n\n@given('local storage does not contain \"selectedSeats\" or \"selectedMovieIndex\"')\ndef step_given_local_storage_empty(context):\n    context.driver.execute_script(\"localStorage.removeItem('selectedSeats');\")\n    context.driver.execute_script(\"localStorage.removeItem('selectedMovieIndex');\")\n    time.sleep(1)\n\n@when('the page loads')\ndef step_when_page_loads(context):\n    # This step is implicitly covered by the page load in the background\n    pass\n\n@then('no seats should have the class \"selected\"')\ndef step_then_no_seats_selected(context):\n    seats = context.driver.find_elements(By.CSS_SELECTOR, \".row .seat\")\n    for seat in seats:\n        assert not is_selected(seat), \"Expected no seat to be selected\"\n    time.sleep(1)\n\n@then('the first movie option with data-testid \"movie-option-1\" should be selected in the dropdown')\ndef step_then_first_movie_selected(context):\n    movie_select = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='movie-select']\"))\n    )\n    selected_option = movie_select.find_element(By.CSS_SELECTOR, \"[data-testid='movie-option-1']\")\n    assert selected_option.is_selected(), \"Expected the first movie option to be selected\"\n    time.sleep(1)\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                }
            ]
        },
        "4": {
            "requirement": {
                "description": "The system must dynamically display the number of selected seats and the total price as the user interacts with seat selections and movie choices. Specifically, when the user selects a movie from the dropdown menu with data-testid 'movie-select', the ticket price should be set according to the selected movie's value. As the user clicks on available seats (those without the 'occupied' class) within the seating area, the system should toggle the 'selected' class on the clicked seat. The count of selected seats, displayed with data-testid 'selected-count', should update to reflect the current number of seats with the 'selected' class. The total price, displayed with data-testid 'total-price', should be calculated as the product of the number of selected seats and the current ticket price. If a user deselects a seat by clicking on it again, the count and total price should decrease accordingly. If the user changes the movie selection after selecting seats, the total price should update based on the new ticket price while maintaining the count of selected seats. The system must prevent users from selecting seats marked as 'occupied'."
            },
            "test_cases": [
                {
                    "test_case": [
                        "Feature: Dynamic Seat Selection and Pricing Display\n  The system displays the number of selected seats and the total price dynamically as the user interacts with seat selections and movie choices.\n\n\n  Scenario: [Normal] User selects seats and sees updated count and total price\n    Given the movie seat booking page is loaded\n    And the user selects \"The Big Lebowski ($10)\" from the movie dropdown with data-testid \"movie-select\"\n    When the user clicks on the seat with data-testid \"seat-1-1\"\n    And the user clicks on the seat with data-testid \"seat-1-2\"\n    Then the selected seat count displayed with data-testid \"selected-count\" should be \"2\"\n    And the total price displayed with data-testid \"total-price\" should be \"$20\"\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the movie seat booking page is loaded')\ndef step_given_movie_seat_booking_page_loaded(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)\n\n@given('the user selects \"The Big Lebowski ($10)\" from the movie dropdown with data-testid \"movie-select\"')\ndef step_given_user_selects_movie(context):\n    movie_select = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='movie-select']\"))\n    )\n    movie_select.click()\n    time.sleep(1)\n    movie_option = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='movie-option-1']\")\n    movie_option.click()\n    time.sleep(1)\n\n@when('the user clicks on the seat with data-testid \"seat-1-1\"')\ndef step_when_user_clicks_seat_1_1(context):\n    seat_1_1 = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='seat-1-1']\"))\n    )\n    seat_1_1.click()\n    time.sleep(1)\n\n@when('the user clicks on the seat with data-testid \"seat-1-2\"')\ndef step_when_user_clicks_seat_1_2(context):\n    seat_1_2 = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='seat-1-2']\"))\n    )\n    seat_1_2.click()\n    time.sleep(1)\n\n@then('the selected seat count displayed with data-testid \"selected-count\" should be \"2\"')\ndef step_then_selected_seat_count_should_be_2(context):\n    selected_count = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='selected-count']\"))\n    )\n    assert selected_count.text.strip() == \"2\", f\"Expected '2', but got '{selected_count.text.strip()}'\"\n\n@then('the total price displayed with data-testid \"total-price\" should be \"$20\"')\ndef step_then_total_price_should_be_20(context):\n    total_price = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='total-price']\"))\n    )\n    assert total_price.text.strip() == \"20\", f\"Expected '20', but got '{total_price.text.strip()}'\"\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: Dynamic Seat Selection and Pricing Display\n  The system displays the number of selected seats and the total price dynamically as the user interacts with seat selections and movie choices.\n\n\n  Scenario: [Edge] User selects and deselects the same seat\n    Given the movie seat booking page is loaded\n    And the user selects \"Fargo ($12)\" from the movie dropdown with data-testid \"movie-select\"\n    When the user clicks on the seat with data-testid \"seat-2-1\"\n    And the user clicks again on the seat with data-testid \"seat-2-1\"\n    Then the selected seat count displayed with data-testid \"selected-count\" should be \"0\"\n    And the total price displayed with data-testid \"total-price\" should be \"$0\"\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the movie seat booking page is loaded')\ndef step_given_movie_seat_booking_page_loaded(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)\n\n@given('the user selects \"Fargo ($12)\" from the movie dropdown with data-testid \"movie-select\"')\ndef step_given_user_selects_movie(context):\n    movie_select = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='movie-select']\"))\n    )\n    movie_select.click()\n    time.sleep(1)\n    fargo_option = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='movie-option-2']\")\n    fargo_option.click()\n    time.sleep(1)\n\n@when('the user clicks on the seat with data-testid \"seat-2-1\"')\ndef step_when_user_clicks_seat(context):\n    seat = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='seat-2-1']\"))\n    )\n    seat.click()\n    time.sleep(1)\n\n@when('the user clicks again on the seat with data-testid \"seat-2-1\"')\ndef step_when_user_clicks_seat_again(context):\n    seat = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='seat-2-1']\"))\n    )\n    seat.click()\n    time.sleep(1)\n\n@then('the selected seat count displayed with data-testid \"selected-count\" should be \"0\"')\ndef step_then_selected_seat_count_should_be_zero(context):\n    selected_count = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='selected-count']\")\n    assert selected_count.text.strip() == \"0\", f\"Expected '0', but got '{selected_count.text.strip()}'\"\n\n@then('the total price displayed with data-testid \"total-price\" should be \"$0\"')\ndef step_then_total_price_should_be_zero(context):\n    total_price = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='total-price']\")\n    assert total_price.text.strip() == \"0\", f\"Expected '$0', but got '{total_price.text.strip()}'\"\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: Dynamic Seat Selection and Pricing Display\n  The system displays the number of selected seats and the total price dynamically as the user interacts with seat selections and movie choices.\n\n\n  Scenario: [Edge] User selects seats in different rows\n    Given the movie seat booking page is loaded\n    And the user selects \"O Brother ($8)\" from the movie dropdown with data-testid \"movie-select\"\n    When the user clicks on the seat with data-testid \"seat-3-1\"\n    And the user clicks on the seat with data-testid \"seat-4-1\"\n    Then the selected seat count displayed with data-testid \"selected-count\" should be \"2\"\n    And the total price displayed with data-testid \"total-price\" should be \"$16\"\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the movie seat booking page is loaded')\ndef step_given_movie_seat_booking_page_loaded(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)\n\n@given('the user selects \"O Brother ($8)\" from the movie dropdown with data-testid \"movie-select\"')\ndef step_given_user_selects_movie(context):\n    movie_select = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='movie-select']\"))\n    )\n    movie_select.click()\n    time.sleep(1)\n    movie_option = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='movie-option-3']\")\n    movie_option.click()\n    time.sleep(1)\n\n@when('the user clicks on the seat with data-testid \"seat-3-1\"')\ndef step_when_user_clicks_seat_3_1(context):\n    seat_3_1 = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='seat-3-1']\"))\n    )\n    seat_3_1.click()\n    time.sleep(1)\n\n@when('the user clicks on the seat with data-testid \"seat-4-1\"')\ndef step_when_user_clicks_seat_4_1(context):\n    seat_4_1 = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='seat-4-1']\"))\n    )\n    seat_4_1.click()\n    time.sleep(1)\n\n@then('the selected seat count displayed with data-testid \"selected-count\" should be \"2\"')\ndef step_then_selected_seat_count_should_be_2(context):\n    selected_count = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='selected-count']\"))\n    )\n    assert selected_count.text.strip() == \"2\", f\"Expected selected count to be '2', but got '{selected_count.text.strip()}'\"\n\n@then('the total price displayed with data-testid \"total-price\" should be \"$16\"')\ndef step_then_total_price_should_be_16(context):\n    total_price = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='total-price']\"))\n    )\n    assert total_price.text.strip() == \"16\", f\"Expected total price to be '$16', but got '{total_price.text.strip()}'\"\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: Dynamic Seat Selection and Pricing Display\n  The system displays the number of selected seats and the total price dynamically as the user interacts with seat selections and movie choices.\n\n\n  Scenario: [Error] User attempts to select an occupied seat\n    Given the movie seat booking page is loaded\n    And the user selects \"No Country for Old Men ($9)\" from the movie dropdown with data-testid \"movie-select\"\n    When the user clicks on the occupied seat with data-testid \"seat-2-4\"\n    Then the selected seat count displayed with data-testid \"selected-count\" should remain \"0\"\n    And the total price displayed with data-testid \"total-price\" should remain \"$0\"\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given(\"the movie seat booking page is loaded\")\ndef step_given_page_loaded(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)\n\n@given('the user selects \"No Country for Old Men ($9)\" from the movie dropdown with data-testid \"movie-select\"')\ndef step_given_select_movie(context):\n    movie_select = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='movie-select']\"))\n    )\n    movie_select.click()\n    time.sleep(1)\n    option = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='movie-option-4']\"))\n    )\n    option.click()\n    time.sleep(1)\n\n@when('the user clicks on the occupied seat with data-testid \"seat-2-4\"')\ndef step_when_click_occupied_seat(context):\n    occupied_seat = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='seat-2-4']\"))\n    )\n    occupied_seat.click()\n    time.sleep(1)\n\n@then('the selected seat count displayed with data-testid \"selected-count\" should remain \"0\"')\ndef step_then_check_selected_count(context):\n    selected_count = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='selected-count']\"))\n    )\n    assert selected_count.text.strip() == \"0\", f\"Expected '0', but got '{selected_count.text.strip()}'\"\n\n@then('the total price displayed with data-testid \"total-price\" should remain \"$0\"')\ndef step_then_check_total_price(context):\n    total_price = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='total-price']\"))\n    )\n    assert total_price.text.strip() == \"0\", f\"Expected '$0', but got '{total_price.text.strip()}'\"\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: Dynamic Seat Selection and Pricing Display\n  The system displays the number of selected seats and the total price dynamically as the user interacts with seat selections and movie choices.\n\n\n  Scenario: [Normal] User changes movie selection after selecting seats\n    Given the movie seat booking page is loaded\n    And the user selects \"The Big Lebowski ($10)\" from the movie dropdown with data-testid \"movie-select\"\n    And the user clicks on the seat with data-testid \"seat-1-1\"\n    When the user changes the movie selection to \"Fargo ($12)\" from the movie dropdown with data-testid \"movie-select\"\n    Then the selected seat count displayed with data-testid \"selected-count\" should be \"1\"\n    And the total price displayed with data-testid \"total-price\" should be \"$12\""
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the movie seat booking page is loaded')\ndef step_given_movie_seat_booking_page_loaded(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)\n\n@given('the user selects \"The Big Lebowski ($10)\" from the movie dropdown with data-testid \"movie-select\"')\ndef step_given_user_selects_big_lebowski(context):\n    movie_select = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='movie-select']\"))\n    )\n    movie_select.click()\n    time.sleep(1)\n    option = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='movie-option-1']\")\n    option.click()\n    time.sleep(1)\n\n@given('the user clicks on the seat with data-testid \"seat-1-1\"')\ndef step_given_user_clicks_seat_1_1(context):\n    seat = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='seat-1-1']\"))\n    )\n    seat.click()\n    time.sleep(1)\n\n@when('the user changes the movie selection to \"Fargo ($12)\" from the movie dropdown with data-testid \"movie-select\"')\ndef step_when_user_changes_movie_selection_to_fargo(context):\n    movie_select = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='movie-select']\"))\n    )\n    movie_select.click()\n    time.sleep(1)\n    option = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='movie-option-2']\")\n    option.click()\n    time.sleep(1)\n\n@then('the selected seat count displayed with data-testid \"selected-count\" should be \"1\"')\ndef step_then_selected_seat_count_should_be_1(context):\n    selected_count = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='selected-count']\"))\n    )\n    assert selected_count.text.strip() == \"1\", f\"Expected seat count '1', but got '{selected_count.text.strip()}'\"\n\n@then('the total price displayed with data-testid \"total-price\" should be \"$12\"')\ndef step_then_total_price_should_be_12(context):\n    total_price = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='total-price']\"))\n    )\n    assert total_price.text.strip() == \"12\", f\"Expected total price '12', but got '{total_price.text.strip()}'\"\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                }
            ]
        },
        "5": {
            "requirement": {
                "description": "On the Movie Seat Booking page, users can distinguish between available, selected, and occupied seats through legends that indicate the status of each seat. Each status has its own corresponding legend (e.g., data-testid = 'seat-select') to help users understand the different seat states. Occupied seats are non-interactive and clearly marked to prevent selection. Available seats can be clicked to toggle their selection. When users select or deselect seats, the count of selected seats and the total price are updated accordingly."
            },
            "test_cases": [
                {
                    "test_case": [
                        "Feature: Seat Status Visualization and Interaction\n  The user can view the status of seats (available, selected, occupied) visually, with occupied seats being non-interactive.\n\n\n  Scenario: [Normal] User views seat status\n    Given the Movie Seat Booking page is loaded\n    When the user views the seating area\n    Then the seat with data-testid \"seat-1-1\" should be available\n    And the seat with data-testid \"seat-2-4\" should be occupied\n    And the seat with data-testid \"seat-selected\" should be selected\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given(\"the Movie Seat Booking page is loaded\")\ndef step_given_page_loaded(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)  # Allow time for the page to load\n\n@when(\"the user views the seating area\")\ndef step_when_user_views_seating_area(context):\n    # No specific action needed, just ensuring the page is loaded\n    pass\n\n@then('the seat with data-testid \"seat-1-1\" should be available')\ndef step_then_seat_1_1_available(context):\n    seat_1_1 = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='seat-1-1']\"))\n    )\n    assert \"occupied\" not in seat_1_1.get_attribute(\"class\"), \"Seat 1-1 should be available\"\n    time.sleep(1)\n\n@then('the seat with data-testid \"seat-2-4\" should be occupied')\ndef step_then_seat_2_4_occupied(context):\n    seat_2_4 = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='seat-2-4']\"))\n    )\n    assert \"occupied\" in seat_2_4.get_attribute(\"class\"), \"Seat 2-4 should be occupied\"\n    time.sleep(1)\n\n@then('the seat with data-testid \"seat-selected\" should be selected')\ndef step_then_seat_selected(context):\n    seat_selected = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='seat-selected']\"))\n    )\n    assert \"selected\" in seat_selected.get_attribute(\"class\"), \"Seat should be selected\"\n    time.sleep(1)\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: Seat Status Visualization and Interaction\n  The user can view the status of seats (available, selected, occupied) visually, with occupied seats being non-interactive.\n\n\n  Scenario: [Normal] User selects an available seat\n    Given the Movie Seat Booking page is loaded\n    And the seat with data-testid \"seat-1-1\" is available\n    When the user clicks on the seat with data-testid \"seat-1-1\"\n    Then the seat with data-testid \"seat-1-1\" should be marked as selected\n    And the selected seat count should be updated to \"1\"\n    And the total price should reflect the selected movie price times the number of selected seats\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given(\"the Movie Seat Booking page is loaded\")\ndef step_given_page_loaded(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)\n\n@given('the seat with data-testid \"seat-1-1\" is available')\ndef step_given_seat_available(context):\n    seat = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='seat-1-1']\"))\n    )\n    assert not seat.get_attribute(\"class\").split().__contains__(\"occupied\"), \"Seat is occupied\"\n    time.sleep(1)\n\n@when('the user clicks on the seat with data-testid \"seat-1-1\"')\ndef step_when_user_clicks_seat(context):\n    seat = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='seat-1-1']\"))\n    )\n    seat.click()\n    time.sleep(1)\n\n@then('the seat with data-testid \"seat-1-1\" should be marked as selected')\ndef step_then_seat_marked_selected(context):\n    seat = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='seat-1-1']\"))\n    )\n    assert \"selected\" in seat.get_attribute(\"class\").split(), \"Seat is not marked as selected\"\n    time.sleep(1)\n\n@then('the selected seat count should be updated to \"1\"')\ndef step_then_selected_seat_count_updated(context):\n    count_element = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='selected-count']\"))\n    )\n    assert count_element.text.strip() == \"1\", f\"Expected seat count to be '1', but got '{count_element.text.strip()}'\"\n    time.sleep(1)\n\n@then('the total price should reflect the selected movie price times the number of selected seats')\ndef step_then_total_price_updated(context):\n    total_element = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='total-price']\"))\n    )\n    movie_select = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='movie-select']\")\n    ticket_price = int(movie_select.get_attribute(\"value\"))\n    expected_total_price = ticket_price * 1\n    assert total_element.text.strip() == str(expected_total_price), f\"Expected total price to be '{expected_total_price}', but got '{total_element.text.strip()}'\"\n    time.sleep(1)\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: Seat Status Visualization and Interaction\n  The user can view the status of seats (available, selected, occupied) visually, with occupied seats being non-interactive.\n\n\n  Scenario: [Edge] User attempts to select an occupied seat\n    Given the Movie Seat Booking page is loaded\n    And the seat with data-testid \"seat-2-4\" is occupied\n    When the user clicks on the seat with data-testid \"seat-2-4\"\n    Then the seat with data-testid \"seat-2-4\" should remain occupied\n    And the selected seat count should remain \"0\"\n    And the total price should remain \"$0\"\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the Movie Seat Booking page is loaded')\ndef step_given_page_is_loaded(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)  # Allow time for the page to load\n\n@given('the seat with data-testid \"seat-2-4\" is occupied')\ndef step_given_seat_is_occupied(context):\n    seat = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='seat-2-4']\")\n    assert \"occupied\" in seat.get_attribute(\"class\"), \"Seat is not occupied\"\n\n@when('the user clicks on the seat with data-testid \"seat-2-4\"')\ndef step_when_user_clicks_occupied_seat(context):\n    seat = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='seat-2-4']\")\n    seat.click()\n    time.sleep(1)  # Allow time for any potential UI updates\n\n@then('the seat with data-testid \"seat-2-4\" should remain occupied')\ndef step_then_seat_remains_occupied(context):\n    seat = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='seat-2-4']\")\n    assert \"occupied\" in seat.get_attribute(\"class\"), \"Seat is not occupied\"\n\n@then('the selected seat count should remain \"0\"')\ndef step_then_selected_seat_count_remains_zero(context):\n    selected_count = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='selected-count']\")\n    assert selected_count.text == \"0\", f\"Expected selected seat count to be '0', but got '{selected_count.text}'\"\n\n@then('the total price should remain \"$0\"')\ndef step_then_total_price_remains_zero(context):\n    total_price = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='total-price']\")\n    assert total_price.text == \"0\", f\"Expected total price to be '$0', but got '${total_price.text}'\"\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: Seat Status Visualization and Interaction\n  The user can view the status of seats (available, selected, occupied) visually, with occupied seats being non-interactive.\n\n\n  Scenario: [Edge] User toggles selection of a seat\n    Given the Movie Seat Booking page is loaded\n    And the seat with data-testid \"seat-1-1\" is available\n    When the user clicks on the seat with data-testid \"seat-1-1\"\n    And the user clicks again on the seat with data-testid \"seat-1-1\"\n    Then the seat with data-testid \"seat-1-1\" should be marked as available\n    And the selected seat count should be updated to \"0\"\n    And the total price should be \"$0\"\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the Movie Seat Booking page is loaded')\ndef step_given_page_loaded(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)  # Allow page to load\n\n@given('the seat with data-testid \"seat-1-1\" is available')\ndef step_given_seat_available(context):\n    seat = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='seat-1-1']\"))\n    )\n    assert not seat.get_attribute(\"class\").split().__contains__(\"occupied\"), \"Seat is occupied\"\n\n@when('the user clicks on the seat with data-testid \"seat-1-1\"')\ndef step_when_user_clicks_seat(context):\n    seat = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='seat-1-1']\"))\n    )\n    seat.click()\n    time.sleep(1)  # Allow interaction to complete\n\n@when('the user clicks again on the seat with data-testid \"seat-1-1\"')\ndef step_when_user_clicks_seat_again(context):\n    seat = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='seat-1-1']\"))\n    )\n    seat.click()\n    time.sleep(1)  # Allow interaction to complete\n\n@then('the seat with data-testid \"seat-1-1\" should be marked as available')\ndef step_then_seat_marked_available(context):\n    seat = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='seat-1-1']\"))\n    )\n    assert not seat.get_attribute(\"class\").split().__contains__(\"selected\"), \"Seat is still selected\"\n\n@then('the selected seat count should be updated to \"0\"')\ndef step_then_selected_seat_count_updated(context):\n    count_element = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='selected-count']\"))\n    )\n    assert count_element.text.strip() == \"0\", f\"Expected seat count '0', but got '{count_element.text.strip()}'\"\n\n@then('the total price should be \"$0\"')\ndef step_then_total_price_updated(context):\n    total_element = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='total-price']\"))\n    )\n    assert total_element.text.strip() == \"0\", f\"Expected total price '$0', but got '${total_element.text.strip()}'\"\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: Seat Status Visualization and Interaction\n  The user can view the status of seats (available, selected, occupied) visually, with occupied seats being non-interactive.\n\n\n  Scenario: [Error] User selects a seat and refreshes the page\n    Given the Movie Seat Booking page is loaded\n    And the seat with data-testid \"seat-1-1\" is available\n    When the user clicks on the seat with data-testid \"seat-1-1\"\n    And the user refreshes the page\n    Then the seat with data-testid \"seat-1-1\" should be marked as selected\n    And the selected seat count should be \"1\"\n    And the total price should reflect the selected movie price times the number of selected seats"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\ndef is_selected(element):\n    return \"selected\" in element.get_attribute(\"class\").split()\n\n@given('the Movie Seat Booking page is loaded')\ndef step_given_movie_seat_booking_page_loaded(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)\n\n@given('the seat with data-testid \"seat-1-1\" is available')\ndef step_given_seat_1_1_is_available(context):\n    seat = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='seat-1-1']\"))\n    )\n    assert not seat.get_attribute(\"class\").split().__contains__(\"occupied\"), \"Seat is occupied\"\n    time.sleep(1)\n\n@when('the user clicks on the seat with data-testid \"seat-1-1\"')\ndef step_when_user_clicks_seat_1_1(context):\n    seat = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='seat-1-1']\"))\n    )\n    seat.click()\n    time.sleep(1)\n\n@when('the user refreshes the page')\ndef step_when_user_refreshes_page(context):\n    context.driver.refresh()\n    time.sleep(1)\n\n@then('the seat with data-testid \"seat-1-1\" should be marked as selected')\ndef step_then_seat_1_1_should_be_selected(context):\n    seat = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='seat-1-1']\"))\n    )\n    assert is_selected(seat), \"Seat is not marked as selected\"\n    time.sleep(1)\n\n@then('the selected seat count should be \"1\"')\ndef step_then_selected_seat_count_should_be_1(context):\n    count_element = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='selected-count']\"))\n    )\n    assert count_element.text.strip() == \"1\", f\"Expected seat count to be '1', but got '{count_element.text.strip()}'\"\n    time.sleep(1)\n\n@then('the total price should reflect the selected movie price times the number of selected seats')\ndef step_then_total_price_should_reflect_selected_movie_price(context):\n    total_element = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='total-price']\"))\n    )\n    movie_select = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='movie-select']\")\n    ticket_price = int(movie_select.find_element(By.CSS_SELECTOR, \"option:checked\").get_attribute(\"value\"))\n    expected_total_price = ticket_price * 1  # 1 seat selected\n    assert int(total_element.text.strip()) == expected_total_price, f\"Expected total price to be '{expected_total_price}', but got '{total_element.text.strip()}'\"\n    time.sleep(1)\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                }
            ]
        }
    }
}