
    You are tasked with implementing a complete web application using HTML, JavaScript, and CSS. Your implementation must strictly follow the specifications described below.
    SUMMARY:
    {
    "overview": "The Movie Seat Booking application allows users to select a movie and book seats in a theater. Users can choose from a list of movies, select available seats, and view the total cost of their selections. The application retains user selections using local storage to persist data across sessions.",
    "predefined_options": "The application offers a set of predefined movie options, each associated with a specific ticket price and uniquely identifiable by its corresponding data-testid. The default selection is 'The Big Lebowski' priced at $10 (data-testid='movie-option-1'), followed by 'Fargo' at $12 (data-testid='movie-option-2'), 'O Brother' at $8 (data-testid='movie-option-3'), and 'No Country for Old Men' at $9 (data-testid='movie-option-4'). The theater seating is arranged in 6 rows, with each row containing 8 seats. Every seat is uniquely identifiable via a data-testid in the format seat-row-column. For example, seat-1-1 refers to the first seat in the first row, and seat-2-3 refers to the third seat in the second row. Initially, the following seats are marked as occupied: Row 2: Seat 4 (seat-2-4) and Seat 5 (seat-2-5); Row 3: Seat 7 (seat-3-7) and Seat 8 (seat-3-8); Row 5: Seat 4 (seat-5-4) and Seat 5 (seat-5-5); Row 6: Seat 5 (seat-6-5), Seat 6 (seat-6-6), and Seat 7 (seat-6-7). This configuration ensures that each seat and movie option can be distinctly identified and interacted with, facilitating robust and precise testing.",
    "external_resources": "No external resources such as images or audio files are directly referenced in the provided code.",
    "external_js_libraries": "No external JavaScript libraries are referenced in the provided code."
}
    ## Functional Requirements
    Implement the following features as described. For each requirement, make sure the HTML structure, JavaScript behavior, and CSS styles match the specifications exactly.
    REQUIREMENTS:
    - Requirement 1: 
Upon loading the webpage, users can interact with the seat map and movie dropdown to dynamically update the total price. Clicking on any available seat (i.e., a seat without the occupied class) marks it as selected, and the selected seat count updates in the element with data-testid="selected-count". Users can also select a movie from the dropdown (data-testid="movie-select"), where each option has a value representing the ticket price. The total price, shown in the element with data-testid="total-price", is calculated as the number of selected seats multiplied by the selected movieâ€™s price. Seats marked as occupied must not be selectable and should not affect the count or price. Changing the selected movie at any time updates the total price accordingly.
- Requirement 2: 
Upon interacting with the movie seat booking interface, users can select a movie from a dropdown menu, with options like 'The Big Lebowski ($10)', 'Fargo ($12)', 'O Brother ($8)', and 'No Country for Old Men ($9)', each identified by a specific data-testid. Once a movie is selected, its price updates accordingly. When users click on an available seat (e.g., identified by data-testid="seat-1-1"), the system toggles the seat's selection status. Selected seats are visually marked, and their indices are stored in localStorage. The seat count (data-testid="selected-count") and total price (data-testid="total-price") are dynamically updated based on the number of selected seats and the chosen movie's price. Seats marked as 'occupied' cannot be selected or included in the calculation. Users can deselect previously selected seats by clicking on them again, and the UI, along with localStorage, updates accordingly.
- Requirement 3: 
Upon loading the 'Movie Seat Booking' webpage, the system retrieves and applies previously selected seats and the movie selection from local storage. If local storage contains the keys 'selectedSeats' and 'selectedMovieIndex', the system will mark the seats corresponding to the indices in 'selectedSeats' with the 'selected' class. Additionally, the movie dropdown will be set to the option corresponding to 'selectedMovieIndex'. If local storage does not contain these values, no seats will be marked as 'selected', and the dropdown will default to the first movie option, 'The Big Lebowski ($10)'.
- Requirement 4: 
The system must dynamically display the number of selected seats and the total price as the user interacts with seat selections and movie choices. Specifically, when the user selects a movie from the dropdown menu with data-testid 'movie-select', the ticket price should be set according to the selected movie's value. As the user clicks on available seats (those without the 'occupied' class) within the seating area, the system should toggle the 'selected' class on the clicked seat. The count of selected seats, displayed with data-testid 'selected-count', should update to reflect the current number of seats with the 'selected' class. The total price, displayed with data-testid 'total-price', should be calculated as the product of the number of selected seats and the current ticket price. If a user deselects a seat by clicking on it again, the count and total price should decrease accordingly. If the user changes the movie selection after selecting seats, the total price should update based on the new ticket price while maintaining the count of selected seats. The system must prevent users from selecting seats marked as 'occupied'.
- Requirement 5: 
On the Movie Seat Booking page, users can distinguish between available, selected, and occupied seats through legends that indicate the status of each seat. Each status has its own corresponding legend (e.g., data-testid = 'seat-select') to help users understand the different seat states. Occupied seats are non-interactive and clearly marked to prevent selection. Available seats can be clicked to toggle their selection. When users select or deselect seats, the count of selected seats and the total price are updated accordingly.

    
    ## Output Format
    Provide a clean and complete implementation including:
    1. HTML structure (including necessary `data-testid`, `id`, and `class` values).
    2. JavaScript functionality that matches the behavior described.
    3. CSS for styling according to BEM and required class names.
    4. Ensure that the text content in the components is exactly as specified in the requirements.
    Do not include any extra components or libraries not listed above. Keep your code concise, semantic, and standards-compliant.
    