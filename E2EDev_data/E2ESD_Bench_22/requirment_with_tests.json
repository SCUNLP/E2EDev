{
    "summary": {
        "overview": "The Voting App allows users to cast a vote for one of three candidates, view live voting results in a bar chart, and see detailed vote breakdowns. Users can also reset the votes to start a new voting session.",
        "predefined_options": "The application provides three predefined candidates (Candidate A, Candidate B, Candidate C) for voting. The voting results are displayed in a bar chart with predefined colors for each candidate.",
        "external_resources": [
            {
                "name": "Candidate A Image",
                "source": "https://img.freepik.com/premium-photo/avatar-resourcing-company_1254967-6696.jpg"
            },
            {
                "name": "Candidate B Image",
                "source": "https://img.freepik.com/free-psd/3d-illustration-with-online-avatar_23-2151303097.jpg"
            },
            {
                "name": "Candidate C Image",
                "source": "https://img.freepik.com/free-psd/3d-illustration-business-man-with-glasses_23-2149436194.jpg?w=740"
            }
        ],
        "external_js_libraries": [
            {
                "name": "Chart.js",
                "source": "https://cdn.jsdelivr.net/npm/chart.js"
            }
        ]
    },
    "finegrained_rewith_test": {
        "1": {
            "requirement": {
                "description": "The web application must allow users to cast a vote for Candidate A by clicking the button with the attribute data-testid 'vote-button-A'. Upon clicking, if the user has not voted before (verified by the absence of the 'hasVoted' key in localStorage), the system should increment the vote count for Candidate A, update the total votes displayed in the element with data-testid 'total-votes', and append a confirmation message to the DOM stating 'Thank you for voting for Candidate A!'. If the user has already voted (indicated by the presence of the 'hasVoted' key set to 'true' in localStorage), an alert should be triggered with the message 'You've already voted!', and no changes should be made to the vote counts or total votes. The confirmation message should fade out after 3 seconds and be removed from the DOM."
            },
            "test_cases": [
                {
                    "test_case": [
                        "Feature: Voting for Candidate A\n  The system should allow users to vote for Candidate A by clicking the \"Vote for A\" button. Upon voting, the vote count for Candidate A should increment, the total votes should update, and a confirmation message should be displayed.\n\n\nScenario: [Normal] User votes for Candidate A successfully\n    Given the voting page is loaded\n    And the total votes displayed in the element with data-testid \"total-votes\" is \"0\"\n    And the user has not voted before\n    When the user clicks the button with data-testid \"vote-button-A\"\n    Then the total votes displayed in the element with data-testid \"total-votes\" should be \"1\"\n    And a confirmation message saying \"Thank you for voting for Candidate A!\" should be displayed on the page"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the voting page is loaded')\ndef step_given_voting_page_loaded(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)\n\n@given('the total votes displayed in the element with data-testid \"total-votes\" is \"0\"')\ndef step_given_total_votes_is_zero(context):\n    total_votes_element = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='total-votes']\"))\n    )\n    assert total_votes_element.text.strip() == \"0\", f\"Expected total votes to be '0', but got '{total_votes_element.text.strip()}'\"\n    time.sleep(1)\n\n@given('the user has not voted before')\ndef step_given_user_has_not_voted(context):\n    has_voted = context.driver.execute_script(\"return localStorage.getItem('hasVoted')\")\n    assert has_voted is None, \"Expected user has not voted before, but 'hasVoted' is set in localStorage\"\n    time.sleep(1)\n\n@when('the user clicks the button with data-testid \"vote-button-A\"')\ndef step_when_user_clicks_vote_button_A(context):\n    vote_button_A = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='vote-button-A']\"))\n    )\n    vote_button_A.click()\n    time.sleep(1)\n\n@then('the total votes displayed in the element with data-testid \"total-votes\" should be \"1\"')\ndef step_then_total_votes_should_be_one(context):\n    total_votes_element = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='total-votes']\"))\n    )\n    assert total_votes_element.text.strip() == \"1\", f\"Expected total votes to be '1', but got '{total_votes_element.text.strip()}'\"\n    time.sleep(1)\n\n@then('a confirmation message saying \"Thank you for voting for Candidate A!\" should be displayed on the page')\ndef step_then_confirmation_message_displayed(context):\n    confirmation_message = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \".confirmation\"))\n    )\n    expected_message = \"Thank you for voting for Candidate A!\"\n    assert expected_message.lower() in confirmation_message.text.lower(), f\"Expected confirmation message '{expected_message}', but got '{confirmation_message.text}'\"\n    time.sleep(1)\n\ndef after_scenario(context, scenario):\n    if hasattr(context, 'driver'):\n        context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: Voting for Candidate A\n  The system should allow users to vote for Candidate A by clicking the \"Vote for A\" button. Upon voting, the vote count for Candidate A should increment, the total votes should update, and a confirmation message should be displayed.\n\n\nScenario: [Error] User attempts to vote for Candidate A after already voting\n    Given the voting page is loaded\n    And the user has already voted (localStorage contains \"hasVoted\" set to \"true\")\n    When the user clicks the button with data-testid \"vote-button-A\"\n    Then an alert should be displayed with the message \"You've already voted!\"\n    And the total votes displayed in the element with data-testid \"total-votes\" should remain unchanged"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given(\"the voting page is loaded\")\ndef step_given_voting_page_loaded(context):\n    # Initialize the WebDriver and load the test page\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    context.driver.maximize_window()\n    time.sleep(1)  # Allow the page to fully load\n\n@given('the user has already voted (localStorage contains \"hasVoted\" set to \"true\")')\ndef step_given_user_has_already_voted(context):\n    # Set localStorage to simulate that the user has already voted\n    context.driver.execute_script(\"localStorage.setItem('hasVoted', 'true');\")\n    time.sleep(1)\n\n@when('the user clicks the button with data-testid \"vote-button-A\"')\ndef step_when_user_clicks_vote_button_A(context):\n    # Wait for the button to be clickable and click it\n    vote_button_A = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='vote-button-A']\"))\n    )\n    vote_button_A.click()\n    time.sleep(1)\n\n@then('an alert should be displayed with the message \"You\\'ve already voted!\"')\ndef step_then_alert_displayed(context):\n    # Wait for the alert to appear and verify its message\n    WebDriverWait(context.driver, 10).until(EC.alert_is_present())\n    alert = context.driver.switch_to.alert\n    assert alert.text == \"You've already voted!\", f\"Expected alert message to be 'You've already voted!', but got '{alert.text}'\"\n    alert.accept()\n    time.sleep(1)\n\n@then('the total votes displayed in the element with data-testid \"total-votes\" should remain unchanged')\ndef step_then_total_votes_unchanged(context):\n    # Verify that the total votes remain unchanged\n    total_votes_element = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='total-votes']\")\n    total_votes = int(total_votes_element.text)\n    assert total_votes == 0, f\"Expected total votes to remain 0, but got {total_votes}\"\n\ndef after_scenario(context, scenario):\n    # Close the browser after each scenario\n    if hasattr(context, \"driver\"):\n        context.driver.quit()"
                }
            ]
        },
        "2": {
            "requirement": {
                "description": "When the user clicks the 'Vote for B' button with data-testid 'vote-button-B', the system should first check if the user has already voted by verifying the presence of the 'hasVoted' key in localStorage. If the user has not voted, the system increments the vote count for Candidate B, updates the total votes displayed in the element with data-testid 'total-votes', and displays a confirmation message 'Thank you for voting for Candidate B!' as a temporary DOM element with the class 'confirmation'. This element should fade out after 3 seconds and be removed from the DOM. If the user has already voted, an alert with the message 'You've already voted!' should be displayed, and the vote counts should remain unchanged. The system should ensure that the voting results are updated in the chart with data-testid 'results-chart', reflecting the new vote counts for Candidate B, and the detailed results section should remain hidden unless explicitly shown by the user."
            },
            "test_cases": [
                {
                    "test_case": [
                        "Feature: Voting for Candidate B\n  The system should increment the vote count for Candidate B, update the total votes, and display a confirmation message when the user clicks the 'Vote for B' button.\n\n\nScenario: [Normal] User votes for Candidate B\n    Given the voting page is loaded\n    And the total votes displayed is \"0\"\n    When the user clicks the 'Vote for B' button with data-testid \"vote-button-B\"\n    Then the total votes displayed should be \"1\"\n    And a confirmation message \"Thank you for voting for Candidate B!\" should be displayed"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the voting page is loaded')\ndef step_given_voting_page_loaded(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)  # Allow page to load\n\n@given('the total votes displayed is \"0\"')\ndef step_given_total_votes_displayed_is_zero(context):\n    total_votes_element = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='total-votes']\"))\n    )\n    assert total_votes_element.text.strip() == \"0\", f\"Expected total votes to be '0', but got '{total_votes_element.text}'\"\n\n@when('the user clicks the \\'Vote for B\\' button with data-testid \"vote-button-B\"')\ndef step_when_user_clicks_vote_button_B(context):\n    vote_button_B = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='vote-button-B']\"))\n    )\n    vote_button_B.click()\n    time.sleep(1)  # Allow interaction to complete\n\n@then('the total votes displayed should be \"1\"')\ndef step_then_total_votes_displayed_should_be_one(context):\n    total_votes_element = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='total-votes']\"))\n    )\n    assert total_votes_element.text.strip() == \"1\", f\"Expected total votes to be '1', but got '{total_votes_element.text}'\"\n\n@then('a confirmation message \"Thank you for voting for Candidate B!\" should be displayed')\ndef step_then_confirmation_message_displayed(context):\n    confirmation_message = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \".confirmation\"))\n    )\n    expected_message = \"Thank you for voting for Candidate B!\"\n    assert expected_message.lower() in confirmation_message.text.lower(), f\"Expected '{expected_message}' in '{confirmation_message.text}'\"\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: Voting for Candidate B\n  The system should increment the vote count for Candidate B, update the total votes, and display a confirmation message when the user clicks the 'Vote for B' button.\n\n\nScenario: [Error] User attempts to vote for Candidate B after already voting\n    Given the voting page is loaded\n    And the user has already voted\n    When the user clicks the 'Vote for B' button with data-testid \"vote-button-B\"\n    Then an alert with the message \"You've already voted!\" should be displayed\n    And the total votes displayed should remain unchanged"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the voting page is loaded')\ndef step_given_voting_page_loaded(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)\n\n@given('the user has already voted')\ndef step_given_user_has_already_voted(context):\n    # Simulate a vote to set the 'hasVoted' flag in localStorage\n    context.driver.execute_script(\"localStorage.setItem('hasVoted', 'true');\")\n    time.sleep(1)\n\n@when('the user clicks the \\'Vote for B\\' button with data-testid \"vote-button-B\"')\ndef step_when_user_clicks_vote_button_B(context):\n    vote_button_B = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='vote-button-B']\"))\n    )\n    vote_button_B.click()\n    time.sleep(1)\n\n@then('an alert with the message \"You\\'ve already voted!\" should be displayed')\ndef step_then_alert_displayed(context):\n    alert = WebDriverWait(context.driver, 10).until(EC.alert_is_present())\n    assert alert.text == \"You've already voted!\", f\"Expected alert text to be 'You've already voted!', but got '{alert.text}'\"\n    alert.accept()\n    time.sleep(1)\n\n@then('the total votes displayed should remain unchanged')\ndef step_then_total_votes_unchanged(context):\n    total_votes_element = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='total-votes']\")\n    total_votes = int(total_votes_element.text)\n    assert total_votes == 0, f\"Expected total votes to be 0, but got {total_votes}\"\n    time.sleep(1)\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                }
            ]
        },
        "3": {
            "requirement": {
                "description": "The web application must allow users to vote for Candidate C by clicking the button with data-testid 'vote-button-C'. Upon clicking, if the user has not voted yet, the system should increment the vote count for Candidate C, update the total votes displayed in the element with data-testid 'total-votes', and show a confirmation message 'Thank you for voting for Candidate C!' on the page. The confirmation message should appear as a temporary DOM element with the class 'confirmation' and fade out after 3 seconds. If the user has already voted, the system should prevent additional votes by displaying an alert with the message 'You've already voted!' and ensure the total votes remain unchanged. The system should track voting status using localStorage with the key 'hasVoted'."
            },
            "test_cases": [
                {
                    "test_case": [
                        "Feature: Voting for Candidate C\n  The system should allow users to vote for Candidate C, update the total votes, and display a confirmation message.\n\n\n  Scenario: [Normal] User votes for Candidate C successfully\n    Given the voting page is loaded\n    And the total votes displayed is \"0\"\n    And the user has not voted yet\n    When the user clicks the \"Vote for C\" button with data-testid \"vote-button-C\"\n    Then the total votes should be updated to \"1\"\n    And a confirmation message \"Thank you for voting for Candidate C!\" should be displayed\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the voting page is loaded')\ndef step_impl(context):\n    # Initialize the WebDriver and load the test page\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    context.driver.maximize_window()\n    time.sleep(1)  # Allow the page to fully load\n\n@given('the total votes displayed is \"0\"')\ndef step_impl(context):\n    # Wait for the total votes element to be visible and verify its value is \"0\"\n    total_votes_element = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='total-votes']\"))\n    )\n    assert total_votes_element.text == \"0\", f\"Expected total votes to be '0', but got '{total_votes_element.text}'\"\n\n@given('the user has not voted yet')\ndef step_impl(context):\n    # Ensure the user has not voted by checking the absence of the 'hasVoted' key in localStorage\n    has_voted = context.driver.execute_script(\"return localStorage.getItem('hasVoted');\")\n    assert has_voted is None, \"Expected user to not have voted, but 'hasVoted' is set in localStorage\"\n\n@when('the user clicks the \"Vote for C\" button with data-testid \"vote-button-C\"')\ndef step_impl(context):\n    # Wait for the \"Vote for C\" button to be clickable and click it\n    vote_button_c = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='vote-button-C']\"))\n    )\n    vote_button_c.click()\n    time.sleep(1)  # Allow time for the vote action to process\n\n@then('the total votes should be updated to \"1\"')\ndef step_impl(context):\n    # Wait for the total votes element to update and verify its value is \"1\"\n    total_votes_element = WebDriverWait(context.driver, 10).until(\n        EC.text_to_be_present_in_element((By.CSS_SELECTOR, \"[data-testid='total-votes']\"), \"1\")\n    )\n    total_votes_element = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='total-votes']\")\n    assert total_votes_element.text == \"1\", f\"Expected total votes to be '1', but got '{total_votes_element.text}'\"\n\n@then('a confirmation message \"Thank you for voting for Candidate C!\" should be displayed')\ndef step_impl(context):\n    # Re-locate the confirmation message after the DOM change\n    confirmation_message = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \".confirmation\"))\n    )\n    assert \"Thank you for voting for Candidate C!\" in confirmation_message.text, \\\n        f\"Expected confirmation message to be 'Thank you for voting for Candidate C!', but got '{confirmation_message.text}'\"\n\n    # Wait for the confirmation message to fade out and disappear\n    time.sleep(3.5)  # Allow time for the fade-out animation\n    # Re-locate the confirmation message to check if it is still displayed\n    try:\n        confirmation_message = context.driver.find_element(By.CSS_SELECTOR, \".confirmation\")\n        assert not confirmation_message.is_displayed(), \"Expected confirmation message to disappear, but it is still visible\"\n    except:\n        pass  # If the element is not found, it means it has been removed, which is expected\n\n# Teardown step to close the browser after the test\ndef after_scenario(context, scenario):\n    if hasattr(context, 'driver'):\n        context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: Voting for Candidate C\n  The system should allow users to vote for Candidate C, update the total votes, and display a confirmation message.\n\n\n  Scenario: [Error] User attempts to vote for Candidate C after already voting\n    Given the voting page is loaded\n    And the user has already voted\n    When the user clicks the \"Vote for C\" button with data-testid \"vote-button-C\"\n    Then an alert with the message \"You've already voted!\" should be displayed\n    And the total votes should remain unchanged"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the voting page is loaded')\ndef step_given_voting_page_loaded(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)  # Allow time for the page to load\n\n@given('the user has already voted')\ndef step_given_user_has_already_voted(context):\n    # Simulate a vote by setting the localStorage item\n    context.driver.execute_script(\"localStorage.setItem('hasVoted', 'true');\")\n    time.sleep(1)\n\n@when('the user clicks the \"Vote for C\" button with data-testid \"vote-button-C\"')\ndef step_when_user_clicks_vote_for_C(context):\n    vote_button_c = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='vote-button-C']\"))\n    )\n    vote_button_c.click()\n    time.sleep(1)\n\n@then('an alert with the message \"You\\'ve already voted!\" should be displayed')\ndef step_then_alert_displayed(context):\n    alert = WebDriverWait(context.driver, 10).until(EC.alert_is_present())\n    assert alert.text == \"You've already voted!\", f\"Expected alert text to be 'You've already voted!', but got '{alert.text}'\"\n    alert.accept()\n    time.sleep(1)\n\n@then('the total votes should remain unchanged')\ndef step_then_total_votes_unchanged(context):\n    total_votes_element = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='total-votes']\")\n    total_votes = int(total_votes_element.text)\n    assert total_votes == 0, f\"Expected total votes to be 0, but got {total_votes}\"\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                }
            ]
        },
        "5": {
            "requirement": {
                "description": "The web application must dynamically update the bar chart to reflect the current vote counts for all candidates whenever a vote is cast. The page should include a voting section with buttons for each candidate, each having a unique data-testid attribute ('vote-button-A', 'vote-button-B', 'vote-button-C') for Candidate A, B, and C respectively. When a user clicks any of these buttons, the system should check if the user has already voted by verifying the presence of a 'hasVoted' key in localStorage. If the user has not voted, the system should increment the vote count for the selected candidate, update the total vote count, and store a 'hasVoted' flag in localStorage to prevent multiple votes. The bar chart, identified by the data-testid 'results-chart', should be updated to display the new vote counts. Additionally, a confirmation message should appear on the screen, thanking the user for their vote, and should fade out after a few seconds. If the user attempts to vote again, an alert should notify them that they have already voted. The system should also provide a 'Reset' button with data-testid 'reset-button' to clear all votes and remove the 'hasVoted' flag from localStorage, resetting the chart and vote counts to zero."
            },
            "test_cases": [
                {
                    "test_case": [
                        "Feature: Dynamic Update of Bar Chart on Vote Cast\n  The system dynamically updates the bar chart to reflect the current vote counts for all candidates whenever a vote is cast.\n\n\nScenario: [Normal] Vote for Candidate A and update chart\n    Given the \"Voting App\" page is loaded\n    And the bar chart is initialized with 0 votes for all candidates\n    When the user clicks the \"Vote for A\" button with data-testid \"vote-button-A\"\n    Then the bar chart should update to show 1 vote for Candidate A"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\ndef is_expanded(element):\n    aria = element.get_attribute(\"aria-expanded\")\n    if aria is not None:\n        return aria == \"true\"\n\n    class_list = element.get_attribute(\"class\").split()\n    if any(cls in class_list for cls in [\"expanded\", \"open\", \"show\"]):\n        return True\n\n    data_expanded = element.get_attribute(\"data-expanded\")\n    if data_expanded is not None:\n        return data_expanded == \"true\"\n\n    return element.is_displayed()\n\n@given('the \"Voting App\" page is loaded')\ndef step_given_voting_app_page_loaded(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)\n\n@given('the bar chart is initialized with 0 votes for all candidates')\ndef step_given_bar_chart_initialized(context):\n    chart = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='results-chart']\"))\n    )\n    total_votes = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='total-votes']\")\n    assert total_votes.text == \"0\", f\"Expected total votes to be '0', but got '{total_votes.text}'\"\n    time.sleep(1)\n\n@when('the user clicks the \"Vote for A\" button with data-testid \"vote-button-A\"')\ndef step_when_user_votes_for_candidate_a(context):\n    vote_button_a = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='vote-button-A']\"))\n    )\n    vote_button_a.click()\n    time.sleep(1)\n\n\n@then('the bar chart should update to show 1 vote for Candidate A')\ndef step_then_chart_updates_for_candidate_a(context):\n    # 等待 canvas 上的 chart 初始化完成\n    WebDriverWait(context.driver, 10).until(\n        lambda driver: driver.execute_script(\"\"\"\n            const canvas = document.querySelector('[data-testid=\"results-chart\"]');\n            const chart = Chart.getChart(canvas);\n            return chart !== undefined && chart.data !== undefined;\n        \"\"\")\n    )\n\n    # 取出 Candidate A 的票数\n    vote_a = context.driver.execute_script(\"\"\"\n        const canvas = document.querySelector('[data-testid=\"results-chart\"]');\n        const chart = Chart.getChart(canvas);\n        return chart.data.datasets[0].data[0];\n    \"\"\")\n\n    assert vote_a == 1, f\"Expected votes for Candidate A to be 1, but got {vote_a}\"\n\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: Dynamic Update of Bar Chart on Vote Cast\n  The system dynamically updates the bar chart to reflect the current vote counts for all candidates whenever a vote is cast.\n\n\nScenario: [Normal] Vote for Candidate B and update chart\n    Given the \"Voting App\" page is loaded\n    And the bar chart is initialized with 0 votes for all candidates\n    When the user clicks the \"Vote for B\" button with data-testid \"vote-button-B\"\n    Then the bar chart should update to show 1 vote for Candidate B"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the \"Voting App\" page is loaded')\ndef step_given_voting_app_page_loaded(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)\n\n@given('the bar chart is initialized with 0 votes for all candidates')\ndef step_given_bar_chart_initialized(context):\n    # Verify that the chart is initialized with 0 votes\n    total_votes_element = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='total-votes']\"))\n    )\n    assert total_votes_element.text.strip() == \"0\", f\"Expected total votes to be '0', but got '{total_votes_element.text.strip()}'\"\n    time.sleep(1)\n\n@when('the user clicks the \"Vote for B\" button with data-testid \"vote-button-B\"')\ndef step_when_user_clicks_vote_button_B(context):\n    vote_button_B = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='vote-button-B']\"))\n    )\n    vote_button_B.click()\n    time.sleep(1)\n\n\n@then('the bar chart should update to show 1 vote for Candidate B')\ndef step_then_chart_updates_for_candidate_a(context):\n    # 等待 canvas 上的 chart 初始化完成\n    WebDriverWait(context.driver, 10).until(\n        lambda driver: driver.execute_script(\"\"\"\n            const canvas = document.querySelector('[data-testid=\"results-chart\"]');\n            const chart = Chart.getChart(canvas);\n            return chart !== undefined && chart.data !== undefined;\n        \"\"\")\n    )\n\n    # 取出 Candidate A 的票数\n    vote_b = context.driver.execute_script(\"\"\"\n        const canvas = document.querySelector('[data-testid=\"results-chart\"]');\n        const chart = Chart.getChart(canvas);\n        return chart.data.datasets[0].data[1];\n    \"\"\")\n\n    assert vote_b == 1, f\"Expected votes for Candidate B to be 1, but got {vote_b}\"\n"
                },
                {
                    "test_case": [
                        "Feature: Dynamic Update of Bar Chart on Vote Cast\n  The system dynamically updates the bar chart to reflect the current vote counts for all candidates whenever a vote is cast.\n\n\nScenario: [Normal] Vote for Candidate C and update chart\n    Given the \"Voting App\" page is loaded\n    And the bar chart is initialized with 0 votes for all candidates\n    When the user clicks the \"Vote for C\" button with data-testid \"vote-button-C\"\n    Then the bar chart should update to show 1 vote for Candidate C"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the \"Voting App\" page is loaded')\ndef step_given_voting_app_page_loaded(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)  # Allow page to load\n\n@given('the bar chart is initialized with 0 votes for all candidates')\ndef step_given_bar_chart_initialized(context):\n    # Verify initial vote counts are zero\n    total_votes_element = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='total-votes']\")\n    assert total_votes_element.text.strip() == \"0\", f\"Expected total votes to be '0', but got '{total_votes_element.text.strip()}'\"\n    time.sleep(1)\n\n@when('the user clicks the \"Vote for C\" button with data-testid \"vote-button-C\"')\ndef step_when_user_votes_for_candidate_c(context):\n    vote_button_c = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='vote-button-C']\"))\n    )\n    vote_button_c.click()\n    time.sleep(1)  # Allow vote processing\n\n\n@then('the bar chart should update to show 1 vote for Candidate C')\ndef step_then_chart_updates_for_candidate_a(context):\n    # 等待 canvas 上的 chart 初始化完成\n    WebDriverWait(context.driver, 10).until(\n        lambda driver: driver.execute_script(\"\"\"\n            const canvas = document.querySelector('[data-testid=\"results-chart\"]');\n            const chart = Chart.getChart(canvas);\n            return chart !== undefined && chart.data !== undefined;\n        \"\"\")\n    )\n\n    # 取出 Candidate A 的票数\n    vote_c = context.driver.execute_script(\"\"\"\n        const canvas = document.querySelector('[data-testid=\"results-chart\"]');\n        const chart = Chart.getChart(canvas);\n        return chart.data.datasets[0].data[2];\n    \"\"\")\n\n    assert vote_c == 1, f\"Expected votes for Candidate A to be 1, but got {vote_c}\"\n    context.driver.quit()\n"
                }
            ]
        },
        "6": {
            "requirement": {
                "description": "The system must update the 'Total Votes' count displayed on the page whenever a vote is cast, reset, or modified, ensuring accurate real-time updates. Specifically: 1) When a user clicks a vote button (data-testid: 'vote-button-A', 'vote-button-B', or 'vote-button-C'), the 'Total Votes' count (data-testid: 'total-votes') must increment by 1. 2) If the 'Reset' button (data-testid: 'reset-button') is clicked, the 'Total Votes' count must reset to '0'. 3) The 'Total Votes' count must reflect the cumulative votes cast across all candidates and update dynamically in the DOM. Persistent storage (localStorage) must prevent duplicate voting by storing a key 'hasVoted' with a value of 'true' after a vote is cast. If 'hasVoted' exists, the system must display an alert preventing further votes. All updates must be visually reflected in the UI without requiring a page refresh."
            },
            "test_cases": [
                {
                    "test_case": [
                        "Feature: Update Total Votes Count\n  The system updates the 'Total Votes' count displayed on the page whenever a vote is cast.\n\n\n  Scenario: [Normal] User casts a vote for Candidate A\n    Given the voting page is loaded\n    And the 'Total Votes' count is displayed as \"0\" with data-testid \"total-votes\"\n    When the user clicks the \"Vote for A\" button with data-testid \"vote-button-A\"\n    Then the 'Total Votes' count should be updated to \"1\" with data-testid \"total-votes\"\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n# Background setup\n@given(\"the voting page is loaded\")\ndef step_given_voting_page_loaded(context):\n    context.driver = webdriver.Chrome()  # Initialize the WebDriver\n    context.driver.get(f\"file://index.html\")\n    context.driver.maximize_window()\n    time.sleep(1)  # Allow the page to load completely\n\n@given(\"the 'Total Votes' count is displayed as \\\"0\\\" with data-testid \\\"total-votes\\\"\")\ndef step_given_total_votes_count_is_zero(context):\n    total_votes_element = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='total-votes']\"))\n    )\n    assert total_votes_element.text == \"0\", f\"Expected 'Total Votes' count to be '0', but got '{total_votes_element.text}'\"\n\n# Scenario steps\n@when(\"the user clicks the \\\"Vote for A\\\" button with data-testid \\\"vote-button-A\\\"\")\ndef step_when_user_clicks_vote_button_A(context):\n    vote_button_A = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='vote-button-A']\"))\n    )\n    vote_button_A.click()\n    time.sleep(1)  # Allow time for the vote action to complete\n\n@then(\"the 'Total Votes' count should be updated to \\\"1\\\" with data-testid \\\"total-votes\\\"\")\ndef step_then_total_votes_count_updated_to_one(context):\n    total_votes_element = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='total-votes']\"))\n    )\n    assert total_votes_element.text == \"1\", f\"Expected 'Total Votes' count to be '1', but got '{total_votes_element.text}'\"\n\n# Teardown\ndef after_scenario(context, scenario):\n    context.driver.quit()  # Close the browser after the test"
                },
                {
                    "test_case": [
                        "Feature: Update Total Votes Count\n  The system updates the 'Total Votes' count displayed on the page whenever a vote is cast.\n\n\n  Scenario: [Normal] User casts a vote for Candidate B\n    Given the voting page is loaded\n    And the 'Total Votes' count is displayed as \"0\" with data-testid \"total-votes\"\n    When the user clicks the \"Vote for B\" button with data-testid \"vote-button-B\"\n    Then the 'Total Votes' count should be updated to \"1\" with data-testid \"total-votes\"\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the voting page is loaded')\ndef step_given_voting_page_loaded(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)\n\n@given('the \\'Total Votes\\' count is displayed as \"0\" with data-testid \"total-votes\"')\ndef step_given_total_votes_displayed_as_zero(context):\n    total_votes_element = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='total-votes']\"))\n    )\n    assert total_votes_element.text.strip() == \"0\", f\"Expected '0', but got '{total_votes_element.text.strip()}'\"\n    time.sleep(1)\n\n@when('the user clicks the \"Vote for B\" button with data-testid \"vote-button-B\"')\ndef step_when_user_clicks_vote_for_b(context):\n    vote_button_b = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='vote-button-B']\"))\n    )\n    vote_button_b.click()\n    time.sleep(1)\n\n@then('the \\'Total Votes\\' count should be updated to \"1\" with data-testid \"total-votes\"')\ndef step_then_total_votes_updated_to_one(context):\n    total_votes_element = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='total-votes']\"))\n    )\n    assert total_votes_element.text.strip() == \"1\", f\"Expected '1', but got '{total_votes_element.text.strip()}'\"\n    time.sleep(1)\n    context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: Update Total Votes Count\n  The system updates the 'Total Votes' count displayed on the page whenever a vote is cast.\n\n\n  Scenario: [Normal] User casts a vote for Candidate C\n    Given the voting page is loaded\n    And the 'Total Votes' count is displayed as \"0\" with data-testid \"total-votes\"\n    When the user clicks the \"Vote for C\" button with data-testid \"vote-button-C\"\n    Then the 'Total Votes' count should be updated to \"1\" with data-testid \"total-votes\"\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the voting page is loaded')\ndef step_impl(context):\n    # Initialize the WebDriver and load the test page\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    context.driver.maximize_window()\n    time.sleep(1)  # Allow the page to fully load\n\n@given('the \\'Total Votes\\' count is displayed as \"0\" with data-testid \"total-votes\"')\ndef step_impl(context):\n    # Wait for the 'Total Votes' element to be visible and verify its initial value\n    total_votes_element = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='total-votes']\"))\n    )\n    assert total_votes_element.text.strip() == \"0\", f\"Expected 'Total Votes' to be '0', but got '{total_votes_element.text.strip()}'\"\n\n@when('the user clicks the \"Vote for C\" button with data-testid \"vote-button-C\"')\ndef step_impl(context):\n    # Wait for the \"Vote for C\" button to be clickable and click it\n    vote_button_c = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='vote-button-C']\"))\n    )\n    vote_button_c.click()\n    time.sleep(1)  # Allow time for the vote to be processed\n\n@then('the \\'Total Votes\\' count should be updated to \"1\" with data-testid \"total-votes\"')\ndef step_impl(context):\n    # Wait for the 'Total Votes' element to be updated and verify its value\n    total_votes_element = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='total-votes']\"))\n    )\n    assert total_votes_element.text.strip() == \"1\", f\"Expected 'Total Votes' to be '1', but got '{total_votes_element.text.strip()}'\"\n\n# Teardown to close the browser after the test\ndef after_scenario(context, scenario):\n    if hasattr(context, 'driver'):\n        context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: Update Total Votes Count\n  The system updates the 'Total Votes' count displayed on the page whenever a vote is cast.\n\n\nScenario: [Error] User votes and then resets the votes\n    Given the voting page is loaded\n    When the user clicks the \"Reset\" button with data-testid \"reset-button\"\n    And the alert message \"Votes have been reset!\" is displayed\n    Then the 'Total Votes' count should be reset to \"0\" with data-testid \"total-votes\""
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the voting page is loaded')\ndef step_given_voting_page_loaded(context):\n    # Initialize the WebDriver and load the test page\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    context.driver.maximize_window()\n    # Wait for the page to load completely\n    WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='total-votes']\"))\n    )\n    time.sleep(1)\n\n@when('the user clicks the \"Reset\" button with data-testid \"reset-button\"')\ndef step_when_user_clicks_reset_button(context):\n    # Locate the reset button and click it\n    reset_button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='reset-button']\"))\n    )\n    reset_button.click()\n    time.sleep(1)\n\n@when('the alert message \"Votes have been reset!\" is displayed')\ndef step_when_alert_message_displayed(context):\n    # Wait for the alert message to be displayed\n    alert = WebDriverWait(context.driver, 10).until(\n        EC.alert_is_present()\n    )\n    alert_text = alert.text\n    assert alert_text == \"Votes have been reset!\", f\"Expected alert text to be 'Votes have been reset!', but got '{alert_text}'\"\n    time.sleep(1)\n    alert.accept()\n\n@then('the \\'Total Votes\\' count should be reset to \"0\" with data-testid \"total-votes\"')\ndef step_then_total_votes_reset_to_zero(context):\n    # Verify that the total votes count is reset to 0\n    total_votes_element = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='total-votes']\"))\n    )\n    total_votes = total_votes_element.text.strip()\n    assert total_votes == \"0\", f\"Expected 'Total Votes' to be '0', but got '{total_votes}'\"\n\ndef after_scenario(context, scenario):\n    # Close the browser after each scenario\n    if hasattr(context, 'driver'):\n        context.driver.quit()"
                }
            ]
        },
        "7": {
            "requirement": {
                "description": "The web application must allow users to view a detailed vote breakdown by clicking the 'Show Results' button, identified by the attribute data-testid='show-results-button'. Upon clicking, the section with data-testid='detailed-results' should become visible, displaying the number of votes and percentage for each candidate. The vote count for each candidate is shown in elements with data-testid='votes-A', 'votes-B', and 'votes-C', respectively, while the percentage is displayed in elements with data-testid='percent-A', 'percent-B', and 'percent-C'. The percentage calculation should be based on the total votes, which is updated dynamically and shown in the element with data-testid='total-votes'. If no votes have been cast, all vote counts and percentages should display '0' and '0%', respectively. The system should ensure that the detailed results are accurately updated and displayed based on the current voting data stored in the application state."
            },
            "test_cases": [
                {
                    "test_case": [
                        "Feature: Display Detailed Vote Breakdown\n  The system should display a detailed vote breakdown, including the number of votes and percentage for each candidate, when the user clicks the 'Show Results' button.\n\n\n  Scenario: [Normal] Display detailed results after voting\n    Given the user is on the \"Voting App\" page\n    And the user has voted for Candidate A by clicking the button with data-testid \"vote-button-A\"\n    When the user clicks the \"Show Results\" button with data-testid \"show-results-button\"\n    Then the detailed results section with data-testid \"detailed-results\" should be visible\n    And the number of votes for Candidate A with data-testid \"votes-A\" should be \"1\"\n    And the percentage for Candidate A with data-testid \"percent-A\" should be \"100%\"\n    And the number of votes for Candidate B with data-testid \"votes-B\" should be \"0\"\n    And the percentage for Candidate B with data-testid \"percent-B\" should be \"0%\"\n    And the number of votes for Candidate C with data-testid \"votes-C\" should be \"0\"\n    And the percentage for Candidate C with data-testid \"percent-C\" should be \"0%\"\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the user is on the \"Voting App\" page')\ndef step_user_on_voting_app_page(context):\n    # Initialize the WebDriver and navigate to the test page\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    context.driver.maximize_window()\n    time.sleep(1)  # Allow the page to load fully\n\n@given('the user has voted for Candidate A by clicking the button with data-testid \"vote-button-A\"')\ndef step_user_votes_for_candidate_a(context):\n    # Locate the vote button for Candidate A and click it\n    vote_button_a = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='vote-button-A']\"))\n    )\n    vote_button_a.click()\n    time.sleep(1)  # Allow the vote action to process\n\n@when('the user clicks the \"Show Results\" button with data-testid \"show-results-button\"')\ndef step_user_clicks_show_results(context):\n    # Wait for the confirmation message to disappear before clicking the \"Show Results\" button\n    WebDriverWait(context.driver, 10).until(\n        EC.invisibility_of_element_located((By.CSS_SELECTOR, \".confirmation\"))\n    )\n    # Locate the \"Show Results\" button and click it\n    show_results_button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='show-results-button']\"))\n    )\n    show_results_button.click()\n    time.sleep(1)  # Allow the results to display\n\n@then('the detailed results section with data-testid \"detailed-results\" should be visible')\ndef step_detailed_results_visible(context):\n    # Check if the detailed results section is visible\n    detailed_results = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='detailed-results']\"))\n    )\n    assert detailed_results.is_displayed(), \"Detailed results section is not visible\"\n\n@then('the number of votes for Candidate A with data-testid \"votes-A\" should be \"1\"')\ndef step_votes_for_candidate_a(context):\n    # Verify the number of votes for Candidate A\n    votes_a = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='votes-A']\")\n    assert votes_a.text.strip() == \"1\", f\"Expected 1 vote for Candidate A, but got {votes_a.text.strip()}\"\n\n@then('the percentage for Candidate A with data-testid \"percent-A\" should be \"100%\"')\ndef step_percentage_for_candidate_a(context):\n    # Verify the percentage for Candidate A\n    percent_a = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='percent-A']\")\n    assert \"100\" in percent_a.text.strip() , f\"Expected 100% for Candidate A, but got {percent_a.text.strip()}\"\n\n@then('the number of votes for Candidate B with data-testid \"votes-B\" should be \"0\"')\ndef step_votes_for_candidate_b(context):\n    # Verify the number of votes for Candidate B\n    votes_b = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='votes-B']\")\n    assert votes_b.text.strip() == \"0\", f\"Expected 0 votes for Candidate B, but got {votes_b.text.strip()}\"\n\n@then('the percentage for Candidate B with data-testid \"percent-B\" should be \"0%\"')\ndef step_percentage_for_candidate_b(context):\n    # Verify the percentage for Candidate B\n    percent_b = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='percent-B']\")\n    assert \"0\" in percent_b.text.strip(), f\"Expected 0% for Candidate B, but got {percent_b.text.strip()}\"\n\n@then('the number of votes for Candidate C with data-testid \"votes-C\" should be \"0\"')\ndef step_votes_for_candidate_c(context):\n    # Verify the number of votes for Candidate C\n    votes_c = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='votes-C']\")\n    assert \"0\" in votes_c.text.strip(), f\"Expected 0 votes for Candidate C, but got {votes_c.text.strip()}\"\n\n@then('the percentage for Candidate C with data-testid \"percent-C\" should be \"0%\"')\ndef step_percentage_for_candidate_c(context):\n    # Verify the percentage for Candidate C\n    percent_c = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='percent-C']\")\n    assert \"0\" in percent_c.text.strip(), f\"Expected 0% for Candidate C, but got {percent_c.text.strip()}\"\n\n# Teardown to close the browser after the test\ndef after_scenario(context, scenario):\n    if hasattr(context, 'driver'):\n        context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: Display Detailed Vote Breakdown\n  The system should display a detailed vote breakdown, including the number of votes and percentage for each candidate, when the user clicks the 'Show Results' button.\n\n\n  Scenario: [Edge] Display detailed results with no votes cast\n    Given the user is on the \"Voting App\" page\n    When the user clicks the \"Show Results\" button with data-testid \"show-results-button\"\n    Then the detailed results section with data-testid \"detailed-results\" should be visible\n    And the number of votes for Candidate A with data-testid \"votes-A\" should be \"0\"\n    And the percentage for Candidate A with data-testid \"percent-A\" should be \"0%\"\n    And the number of votes for Candidate B with data-testid \"votes-B\" should be \"0\"\n    And the percentage for Candidate B with data-testid \"percent-B\" should be \"0%\"\n    And the number of votes for Candidate C with data-testid \"votes-C\" should be \"0\"\n    And the percentage for Candidate C with data-testid \"percent-C\" should be \"0%\"\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the user is on the \"Voting App\" page')\ndef step_given_user_on_voting_app_page(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)\n\n@when('the user clicks the \"Show Results\" button with data-testid \"show-results-button\"')\ndef step_when_user_clicks_show_results_button(context):\n    show_results_button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='show-results-button']\"))\n    )\n    show_results_button.click()\n    time.sleep(1)\n\n@then('the detailed results section with data-testid \"detailed-results\" should be visible')\ndef step_then_detailed_results_section_visible(context):\n    detailed_results = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='detailed-results']\"))\n    )\n    assert detailed_results.is_displayed(), \"Detailed results section is not visible\"\n\n@then('the number of votes for Candidate A with data-testid \"votes-A\" should be \"0\"')\ndef step_then_votes_for_candidate_a_should_be_0(context):\n    votes_a = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='votes-A']\")\n    assert votes_a.text.strip() == \"0\", f\"Expected votes for Candidate A to be '0', but got '{votes_a.text.strip()}'\"\n\n@then('the percentage for Candidate A with data-testid \"percent-A\" should be \"0%\"')\ndef step_then_percentage_for_candidate_a_should_be_0_percent(context):\n    percent_a = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='percent-A']\")\n    assert percent_a.text.strip() == \"0%\", f\"Expected percentage for Candidate A to be '0%', but got '{percent_a.text.strip()}'\"\n\n@then('the number of votes for Candidate B with data-testid \"votes-B\" should be \"0\"')\ndef step_then_votes_for_candidate_b_should_be_0(context):\n    votes_b = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='votes-B']\")\n    assert votes_b.text.strip() == \"0\", f\"Expected votes for Candidate B to be '0', but got '{votes_b.text.strip()}'\"\n\n@then('the percentage for Candidate B with data-testid \"percent-B\" should be \"0%\"')\ndef step_then_percentage_for_candidate_b_should_be_0_percent(context):\n    percent_b = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='percent-B']\")\n    assert percent_b.text.strip() == \"0%\", f\"Expected percentage for Candidate B to be '0%', but got '{percent_b.text.strip()}'\"\n\n@then('the number of votes for Candidate C with data-testid \"votes-C\" should be \"0\"')\ndef step_then_votes_for_candidate_c_should_be_0(context):\n    votes_c = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='votes-C']\")\n    assert votes_c.text.strip() == \"0\", f\"Expected votes for Candidate C to be '0', but got '{votes_c.text.strip()}'\"\n\n@then('the percentage for Candidate C with data-testid \"percent-C\" should be \"0%\"')\ndef step_then_percentage_for_candidate_c_should_be_0_percent(context):\n    percent_c = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='percent-C']\")\n    assert percent_c.text.strip() == \"0%\", f\"Expected percentage for Candidate C to be '0%', but got '{percent_c.text.strip()}'\"\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                }
            ]
        },
        "9": {
            "requirement": {
                "description": "Upon clicking the 'Reset' button with data-testid 'reset-button', the system must reset all vote counts to zero, remove the 'hasVoted' flag from localStorage, hide the detailed results section with data-testid 'detailed-results', and display an alert message confirming the reset. This functionality should work regardless of whether the user has voted or not. After resetting, if the user clicks the 'Show Results' button with data-testid 'show-results-button', the detailed results section should become visible, showing zero votes and zero percent for all candidates. The total votes displayed in the element with data-testid 'total-votes' should be updated to '0'."
            },
            "test_cases": [
                {
                    "test_case": [
                        "Feature: Reset Vote Counts\n  The system should reset all vote counts to zero, clear the voting flag from localStorage, hide the detailed results section, and display an alert message confirming the reset when the user clicks the 'Reset' button.\n\n\nScenario: [Normal] Reset vote counts successfully\n    Given the voting page is loaded\n    And the user has voted for Candidate A by clicking the button with data-testid \"vote-button-A” \n    When the user clicks the 'Reset' button with data-testid 'reset-button'\n    Then an alert message should be displayed confirming the reset\n    And the total votes should be \"0\"\n    And the localStorage should not contain the key 'hasVoted'\n    And the detailed results section should be hidden\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the voting page is loaded')\ndef step_given_voting_page_loaded(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)\n\n@given('the user has voted for Candidate A by clicking the button with data-testid \"vote-button-A”')\ndef step_given_user_voted_for_candidate_a(context):\n    vote_button_a = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='vote-button-A']\"))\n    )\n    vote_button_a.click()\n    time.sleep(1)\n\n@when('the user clicks the \\'Reset\\' button with data-testid \\'reset-button\\'')\ndef step_when_user_clicks_reset_button(context):\n    # Wait for any confirmation message to disappear before clicking the reset button\n    WebDriverWait(context.driver, 10).until(\n        EC.invisibility_of_element_located((By.CSS_SELECTOR, \".confirmation\"))\n    )\n    reset_button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='reset-button']\"))\n    )\n    reset_button.click()\n    time.sleep(1)\n\n@then('the total votes should be \"0\"')\ndef step_then_total_votes_should_be_zero(context):\n    total_votes_element = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='total-votes']\"))\n    )\n    total_votes = total_votes_element.text.strip()\n    assert total_votes == \"0\", f\"Expected total votes to be '0', but got '{total_votes}'\"\n\n@then('the localStorage should not contain the key \\'hasVoted\\'')\ndef step_then_localstorage_should_not_contain_hasvoted(context):\n    has_voted = context.driver.execute_script(\"return localStorage.getItem('hasVoted');\")\n    assert has_voted is None, \"Expected 'hasVoted' to be None in localStorage\"\n\n@then('the detailed results section should be hidden')\ndef step_then_detailed_results_section_should_be_hidden(context):\n    detailed_results = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='detailed-results']\")\n    assert not detailed_results.is_displayed(), \"Expected detailed results section to be hidden\"\n\n@then('an alert message should be displayed confirming the reset')\ndef step_then_alert_message_should_be_displayed(context):\n    alert = WebDriverWait(context.driver, 10).until(EC.alert_is_present())\n    alert_text = alert.text\n    assert \"Votes have been reset!\" in alert_text, f\"Expected alert message to confirm reset, but got '{alert_text}'\"\n    alert.accept()\n    time.sleep(1)\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: Reset Vote Counts\n  The system should reset all vote counts to zero, clear the voting flag from localStorage, hide the detailed results section, and display an alert message confirming the reset when the user clicks the 'Reset' button.\n\n\nScenario: [Edge] Reset without prior voting\n    Given the voting page is loaded\n    And the user has not voted\n    When the user clicks the 'Reset' button with data-testid 'reset-button'\n    Then an alert message should be displayed confirming the reset\n    And the total votes should be \"0\"\n    And the localStorage should not contain the key 'hasVoted'\n    And the detailed results section should be hidden"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given(\"the voting page is loaded\")\ndef step_given_voting_page_loaded(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)  # Allow page to load\n\n@given(\"the user has not voted\")\ndef step_given_user_has_not_voted(context):\n    context.driver.execute_script(\"localStorage.removeItem('hasVoted');\")\n    time.sleep(1)  # Ensure localStorage is cleared\n\n@when(\"the user clicks the 'Reset' button with data-testid 'reset-button'\")\ndef step_when_user_clicks_reset_button(context):\n    reset_button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='reset-button']\"))\n    )\n    reset_button.click()\n    time.sleep(1)  # Allow time for reset action\n\n@then(\"an alert message should be displayed confirming the reset\")\ndef step_then_alert_message_displayed(context):\n    alert = WebDriverWait(context.driver, 10).until(EC.alert_is_present())\n    assert \"Votes have been reset!\" in alert.text\n    alert.accept()\n    time.sleep(1)  # Allow time for alert handling\n\n@then('the total votes should be \"0\"')\ndef step_then_total_votes_should_be_zero(context):\n    total_votes_element = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='total-votes']\")\n    assert total_votes_element.text.strip() == \"0\", f\"Expected total votes to be '0', but got '{total_votes_element.text.strip()}'\"\n\n@then(\"the localStorage should not contain the key 'hasVoted'\")\ndef step_then_localstorage_should_not_contain_key(context):\n    has_voted = context.driver.execute_script(\"return localStorage.getItem('hasVoted');\")\n    assert has_voted is None, \"Expected 'hasVoted' to be None, but got '{has_voted}'\"\n\n@then(\"the detailed results section should be hidden\")\ndef step_then_detailed_results_section_hidden(context):\n    detailed_results_element = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='detailed-results']\")\n    assert detailed_results_element.get_attribute(\"style\").strip() == \"display: none;\", \"Expected detailed results section to be hidden\"\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: Reset Vote Counts\n  The system should reset all vote counts to zero, clear the voting flag from localStorage, hide the detailed results section, and display an alert message confirming the reset when the user clicks the 'Reset' button.\n\n\nScenario: [Edge] Attempt to show results after resetting votes\n    Given the user is on the \"Voting App\" page\n    And the user has voted for Candidate B by clicking the button with data-testid \"vote-button-B\"\n    And the user clicks the \"Reset\" button with data-testid \"reset-button\"\n    And an alert message should be displayed confirming the reset\n    When the user clicks the \"Show Results\" button with data-testid \"show-results-button\"\n    Then the detailed results section with data-testid \"detailed-results\" should be visible\n    And the number of votes for Candidate A with data-testid \"votes-A\" should be \"0\"\n    And the percentage for Candidate A with data-testid \"percent-A\" should be \"0%\"\n    And the number of votes for Candidate B with data-testid \"votes-B\" should be \"0\"\n    And the percentage for Candidate B with data-testid \"percent-B\" should be \"0%\"\n    And the number of votes for Candidate C with data-testid \"votes-C\" should be \"0\""
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the user is on the \"Voting App\" page')\ndef step_given_user_on_voting_app_page(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)\n\n@given('the user has voted for Candidate B by clicking the button with data-testid \"vote-button-B\"')\ndef step_given_user_votes_for_candidate_b(context):\n    vote_button_b = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='vote-button-B']\"))\n    )\n    vote_button_b.click()\n    time.sleep(1)\n\n@given('the user clicks the \"Reset\" button with data-testid \"reset-button\"')\ndef step_given_user_clicks_reset_button(context):\n    # Ensure the \"confirmation\" div is removed or hidden before clicking the \"Reset\" button\n    confirmation_div = context.driver.find_elements(By.CLASS_NAME, \"confirmation\")\n    if confirmation_div:\n        WebDriverWait(context.driver, 10).until(\n            EC.invisibility_of_element_located((By.CLASS_NAME, \"confirmation\"))\n        )\n    \n    reset_button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='reset-button']\"))\n    )\n    reset_button.click()\n    time.sleep(1)\n\n@given('an alert message should be displayed confirming the reset')\ndef step_given_alert_message_displayed(context):\n    alert = WebDriverWait(context.driver, 10).until(EC.alert_is_present())\n    assert \"Votes have been reset!\" in alert.text\n    alert.accept()\n    time.sleep(1)\n\n@when('the user clicks the \"Show Results\" button with data-testid \"show-results-button\"')\ndef step_when_user_clicks_show_results_button(context):\n    show_results_button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='show-results-button']\"))\n    )\n    show_results_button.click()\n    time.sleep(1)\n\n@then('the detailed results section with data-testid \"detailed-results\" should be visible')\ndef step_then_detailed_results_section_visible(context):\n    detailed_results = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='detailed-results']\"))\n    )\n    assert detailed_results.is_displayed()\n\n@then('the number of votes for Candidate A with data-testid \"votes-A\" should be \"0\"')\ndef step_then_votes_for_candidate_a_should_be_zero(context):\n    votes_a = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='votes-A']\")\n    assert votes_a.text.strip() == \"0\"\n\n@then('the percentage for Candidate A with data-testid \"percent-A\" should be \"0%\"')\ndef step_then_percent_for_candidate_a_should_be_zero(context):\n    percent_a = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='percent-A']\")\n    assert percent_a.text.strip() == \"0%\"\n\n@then('the number of votes for Candidate B with data-testid \"votes-B\" should be \"0\"')\ndef step_then_votes_for_candidate_b_should_be_zero(context):\n    votes_b = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='votes-B']\")\n    assert votes_b.text.strip() == \"0\"\n\n@then('the percentage for Candidate B with data-testid \"percent-B\" should be \"0%\"')\ndef step_then_percent_for_candidate_b_should_be_zero(context):\n    percent_b = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='percent-B']\")\n    assert percent_b.text.strip() == \"0%\"\n\n@then('the number of votes for Candidate C with data-testid \"votes-C\" should be \"0\"')\ndef step_then_votes_for_candidate_c_should_be_zero(context):\n    votes_c = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='votes-C']\")\n    assert votes_c.text.strip() == \"0\"\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                }
            ]
        },
        "11": {
            "requirement": {
                "description": "The voting application must ensure that the detailed results section, identified by the data-testid 'detailed-results', is initially hidden upon page load. This section should only become visible when the user clicks the 'Show Results' button, identified by the data-testid 'show-results-button'. The visibility of the detailed results section should remain consistent even if the 'Show Results' button is clicked multiple times. Additionally, if the 'Reset' button, identified by the data-testid 'reset-button', is clicked, the detailed results section should be hidden again, and the user should be alerted with a confirmation message that the votes have been reset. The application must handle these interactions without errors, ensuring a seamless user experience."
            },
            "test_cases": [
                {
                    "test_case": [
                        "Feature: Detailed Results Visibility\n  The system ensures that the detailed results section is initially hidden and only becomes visible when the 'Show Results' button is clicked.\n\n\n  Scenario: [Normal] Detailed results section is hidden initially\n    Given the voting app webpage is loaded\n    Then the detailed results section with data-testid \"detailed-results\" should not be visible\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the voting app webpage is loaded')\ndef step_given_voting_app_webpage_loaded(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)\n\n@then('the detailed results section with data-testid \"detailed-results\" should not be visible')\ndef step_then_detailed_results_section_not_visible(context):\n    detailed_results = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='detailed-results']\")\n    assert not detailed_results.is_displayed(), \"Detailed results section should not be visible initially\"\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: Detailed Results Visibility\n  The system ensures that the detailed results section is initially hidden and only becomes visible when the 'Show Results' button is clicked.\n\n\n  Scenario: [Normal] Detailed results section becomes visible after clicking 'Show Results'\n    Given the voting app webpage is loaded\n    When the user clicks the 'Show Results' button with data-testid \"show-results-button\"\n    Then the detailed results section with data-testid \"detailed-results\" should be visible\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\n# Placeholder for dynamic file path\nfile_path = \"index.html\"\n\n@given(\"the voting app webpage is loaded\")\ndef step_given_voting_app_loaded(context):\n    # Initialize the Selenium WebDriver\n    context.driver = webdriver.Chrome()\n    # Load the test page\n    context.driver.get(f\"file://index.html\")\n    # Maximize the browser window\n    context.driver.maximize_window()\n    # Wait for the page to load completely\n    WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='show-results-button']\"))\n    )\n    time.sleep(1)\n\n@when(\"the user clicks the 'Show Results' button with data-testid \\\"show-results-button\\\"\")\ndef step_when_user_clicks_show_results(context):\n    # Locate the 'Show Results' button and click it\n    show_results_button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='show-results-button']\"))\n    )\n    show_results_button.click()\n    time.sleep(1)\n\n@then(\"the detailed results section with data-testid \\\"detailed-results\\\" should be visible\")\ndef step_then_detailed_results_visible(context):\n    # Locate the detailed results section\n    detailed_results_section = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='detailed-results']\"))\n    )\n    # Check if the section is visible\n    assert detailed_results_section.is_displayed(), \"Detailed results section is not visible\"\n    time.sleep(1)\n\n# Cleanup after the test\ndef after_scenario(context, scenario):\n    # Close the browser driver\n    if hasattr(context, 'driver'):\n        context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: Detailed Results Visibility\n  The system ensures that the detailed results section is initially hidden and only becomes visible when the 'Show Results' button is clicked.\n\n\n  Scenario: [Edge] Detailed results section remains visible after multiple clicks on 'Show Results'\n    Given the voting app webpage is loaded\n    When the user clicks the 'Show Results' button with data-testid \"show-results-button\" twice\n    Then the detailed results section with data-testid \"detailed-results\" should be visible\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the voting app webpage is loaded')\ndef step_given_voting_app_loaded(context):\n    # Initialize the WebDriver\n    context.driver = webdriver.Chrome()\n    # Load the test page\n    context.driver.get(f\"file://index.html\")\n    # Maximize the browser window\n    context.driver.maximize_window()\n    # Wait for the page to load completely\n    WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='show-results-button']\"))\n    )\n    time.sleep(1)\n\n@when('the user clicks the \\'Show Results\\' button with data-testid \"show-results-button\" twice')\ndef step_when_user_clicks_show_results_twice(context):\n    # Locate the 'Show Results' button\n    show_results_button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='show-results-button']\"))\n    )\n    # Click the button twice\n    show_results_button.click()\n    time.sleep(1)  # Wait for the UI to update\n    show_results_button.click()\n    time.sleep(1)  # Wait for the UI to update\n\n@then('the detailed results section with data-testid \"detailed-results\" should be visible')\ndef step_then_detailed_results_should_be_visible(context):\n    # Locate the detailed results section\n    detailed_results_section = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='detailed-results']\"))\n    )\n    # Check if the section is visible\n    assert detailed_results_section.is_displayed(), \"The detailed results section is not visible.\"\n\ndef after_scenario(context, scenario):\n    # Close the browser after each scenario\n    if hasattr(context, 'driver'):\n        context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: Detailed Results Visibility\n  The system ensures that the detailed results section is initially hidden and only becomes visible when the 'Show Results' button is clicked.\n\n\nScenario: [Error] Detailed results section visibility is affected by clicking 'Reset'\n    Given the voting app webpage is loaded\n    And the user clicks the 'Show Results' button with data-testid \"show-results-button\"\n    When the user clicks the 'Reset' button with data-testid \"reset-button\"\n    And accept the alert message displayed confirming the reset\n    Then the detailed results section with data-testid \"detailed-results\" should not be visible"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the voting app webpage is loaded')\ndef step_given_voting_app_loaded(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)\n\n@given('the user clicks the \\'Show Results\\' button with data-testid \"show-results-button\"')\ndef step_given_user_clicks_show_results(context):\n    show_results_button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='show-results-button']\"))\n    )\n    show_results_button.click()\n    time.sleep(1)\n\n@when('the user clicks the \\'Reset\\' button with data-testid \"reset-button\"')\ndef step_when_user_clicks_reset(context):\n    reset_button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='reset-button']\"))\n    )\n    reset_button.click()\n    time.sleep(1)\n\n@when('accept the alert message displayed confirming the reset')\ndef step_when_accept_alert(context):\n    alert = WebDriverWait(context.driver, 10).until(EC.alert_is_present())\n    alert.accept()\n    time.sleep(1)\n\n@then('the detailed results section with data-testid \"detailed-results\" should not be visible')\ndef step_then_detailed_results_not_visible(context):\n    detailed_results = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='detailed-results']\")\n    assert not detailed_results.is_displayed(), \"Detailed results section should not be visible\"\n    time.sleep(1)\n    context.driver.quit()"
                }
            ]
        }
    }
}