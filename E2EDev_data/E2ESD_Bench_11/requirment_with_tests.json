{
    "summary": {
        "overview": "The Loan Calculator web application allows users to calculate loan payments by entering the loan amount, interest rate, and loan term. It provides a breakdown of monthly payments, total payments, and total interest, and displays this information visually using a chart. The application also includes a dark mode feature for user interface customization.",
        "predefined_options": "The loan term slider is preset with a minimum value of 1 year and a maximum value of 30 years, with a default value of 15 years.",
        "external_resources": "The application uses Google Fonts for typography and includes a canvas element for rendering the payment chart.",
        "external_js_libraries": "The application uses Chart.js for rendering the payment chart, sourced from a CDN link: 'https://cdn.jsdelivr.net/npm/chart.js'."
    },
    "finegrained_rewith_test": {
        "1": {
            "requirement": {
                "description": "The system must allow users to toggle between light and dark themes using a dark mode switch. Specifically, when the user interacts with the dark mode switch located by the data-testid 'dark-mode-switch', the system should apply the 'dark-mode' class to the body element when the switch is in the 'checked' position, thereby enabling dark mode. Conversely, when the switch is in the 'unchecked' position, the 'dark-mode' class should be removed from the body element, reverting to light mode."
            },
            "test_cases": [
                {
                    "test_case": [
                        "Feature: Dark Mode Toggle\n  The system should apply or remove the \"dark-mode\" class to the body element when the user toggles the dark mode switch, changing the application\"s theme.\n\n\n  Scenario: [Normal] User enables dark mode\n    Given the Loan Calculator page is loaded\n    When the user toggles the dark mode switch with data-testid \"dark-mode-slider\" to the \"checked\" position\n    Then the body element should have the class \"dark-mode\"\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the Loan Calculator page is loaded')\ndef step_given_loan_calculator_page_loaded(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)  # Allow time for the page to load\n\n@when('the user toggles the dark mode switch with data-testid \"dark-mode-slider\" to the \"checked\" position')\ndef step_when_toggle_dark_mode_switch(context):\n    dark_mode_switch = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='dark-mode-slider']\"))\n    )\n    context.driver.execute_script(\"arguments[0].click();\", dark_mode_switch)\n    time.sleep(1)  # Allow time for the toggle action to take effect\n\n@then('the body element should have the class \"dark-mode\"')\ndef step_then_body_element_has_dark_mode_class(context):\n    body_element = context.driver.find_element(By.TAG_NAME, \"body\")\n    class_list = body_element.get_attribute(\"class\").split()\n    assert \"dark-mode\" in class_list, \"Expected 'dark-mode' class in body element\"\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: Dark Mode Toggle\n  The system should apply or remove the \"dark-mode\" class to the body element when the user toggles the dark mode switch, changing the application\"s theme.\n\n\nScenario: [Normal] User disables dark mode  \n  Given the \"Loan Calculator\" page is loaded and dark mode is enabled  \n  When the user toggles the dark mode slider with data-testid \"dark-mode-slider\" to the \"unchecked\" position  \n  Then the body element should not have the class \"dark-mode\""
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\ndef is_dark_mode_enabled(driver):\n    return \"dark-mode\" in driver.find_element(By.TAG_NAME, \"body\").get_attribute(\"class\")\n\n@given('the \"Loan Calculator\" page is loaded and dark mode is enabled')\ndef step_given_page_loaded_and_dark_mode_enabled(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='dark-mode-switch']\"))\n    )\n    dark_mode_switch = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='dark-mode-slider']\")\n    dark_mode_switch.click()\n    time.sleep(1)\n    assert is_dark_mode_enabled(context.driver), \"Dark mode should be enabled\"\n\n@when('the user toggles the dark mode slider with data-testid \"dark-mode-slider\" to the \"unchecked\" position')\ndef step_when_toggle_dark_mode_slider(context):\n    dark_mode_switch = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='dark-mode-slider']\")\n    dark_mode_switch.click()\n    time.sleep(1)\n\n@then('the body element should not have the class \"dark-mode\"')\ndef step_then_body_should_not_have_dark_mode_class(context):\n    assert not is_dark_mode_enabled(context.driver), \"Dark mode should be disabled\"\n    context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: Dark Mode Toggle\n  The system should apply or remove the \"dark-mode\" class to the body element when the user toggles the dark mode switch, changing the application\"s theme.\n\n\nScenario: [Edge] User rapidly toggles dark mode switch multiple times\n    Given the Loan Calculator page is loaded\n    When the user toggles the dark mode switch with data-testid \"dark-mode-slider\" to the \"checked\" position\n    And the user toggles the dark mode switch with data-testid \"dark-mode-slider” to the \"unchecked\" position\n    And the user toggles the dark mode switch with data-testid \"dark-mode-slider” to the \"checked\" position\n    Then the body element should have the class \"dark-mode\""
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the Loan Calculator page is loaded')\ndef step_given_loan_calculator_page_loaded(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='page-title']\"))\n    )\n    time.sleep(1)\n\n@when('the user toggles the dark mode switch with data-testid \"dark-mode-slider\" to the \"checked\" position')\ndef step_when_toggle_dark_mode_checked(context):\n    dark_mode_switch = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='dark-mode-slider']\"))\n    )\n    dark_mode_switch.click()\n    time.sleep(1)\n\n@when('the user toggles the dark mode switch with data-testid \"dark-mode-slider” to the \"unchecked\" position')\ndef step_when_toggle_dark_mode_unchecked(context):\n    dark_mode_switch = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='dark-mode-slider']\"))\n    )\n    dark_mode_switch.click()\n    time.sleep(1)\n\n@when('the user toggles the dark mode switch with data-testid \"dark-mode-slider” to the \"checked\" position')\ndef step_when_toggle_dark_mode_checked_again(context):\n    dark_mode_switch = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='dark-mode-slider']\"))\n    )\n    dark_mode_switch.click()\n    time.sleep(1)\n\n@then('the body element should have the class \"dark-mode\"')\ndef step_then_body_should_have_dark_mode_class(context):\n    body_element = context.driver.find_element(By.TAG_NAME, \"body\")\n    class_list = body_element.get_attribute(\"class\").split()\n    assert \"dark-mode\" in class_list, \"Expected 'dark-mode' class in body element\"\n    time.sleep(1)\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                }
            ]
        },
        "2": {
            "requirement": {
                "description": "The Loan Calculator web application must handle user valid numeric input in the 'Loan Amount' input field with data-testid 'amount-input'."
            },
            "test_cases": [
                {
                    "test_case": [
                        "Feature: Loan Amount Input Handling\n  The system should accept and store numeric values entered in the \"Loan Amount\" input field for calculation purposes.\n\n\n  Scenario: [Normal] User enters a valid loan amount\n    Given the Loan Calculator page is loaded\n    When the user enters \"10000\" into the loan amount input field with data-testid \"amount-input\"\n    Then the loan amount input field with data-testid \"amount-input\" should have the value \"10000\"\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the Loan Calculator page is loaded')\ndef step_given_loan_calculator_page_loaded(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)  # Allow page to load\n\n@when('the user enters \"{amount}\" into the loan amount input field with data-testid \"amount-input\"')\ndef step_when_user_enters_amount(context, amount):\n    amount_input = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='amount-input']\"))\n    )\n    amount_input.clear()\n    amount_input.send_keys(amount)\n    time.sleep(1)  # Allow input to be processed\n\n@then('the loan amount input field with data-testid \"amount-input\" should have the value \"{expected_amount}\"')\ndef step_then_loan_amount_should_have_value(context, expected_amount):\n    amount_input = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='amount-input']\"))\n    )\n    actual_amount = amount_input.get_attribute(\"value\")\n    assert actual_amount == expected_amount, f\"Expected amount '{expected_amount}', but got '{actual_amount}'\"\n    time.sleep(1)  # Allow assertion to be processed\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: Loan Amount Input Handling\n  The system should accept and store numeric values entered in the \"Loan Amount\" input field for calculation purposes.\n\n\n  Scenario: [Edge] User enters the minimum possible loan amount\n    Given the Loan Calculator page is loaded\n    When the user enters \"0.01\" into the loan amount input field with data-testid \"amount-input\"\n    Then the loan amount input field with data-testid \"amount-input\" should have the value \"0.01\"\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the Loan Calculator page is loaded')\ndef step_given_loan_calculator_page_loaded(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)  # Allow time for the page to load\n\n@when('the user enters \"0.01\" into the loan amount input field with data-testid \"amount-input\"')\ndef step_when_user_enters_loan_amount(context):\n    amount_input = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='amount-input']\"))\n    )\n    amount_input.clear()\n    amount_input.send_keys(\"0.01\")\n    time.sleep(1)  # Allow time for the input to be processed\n\n@then('the loan amount input field with data-testid \"amount-input\" should have the value \"0.01\"')\ndef step_then_verify_loan_amount_value(context):\n    amount_input = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='amount-input']\")\n    assert amount_input.get_attribute(\"value\") == \"0.01\", f\"Expected value '0.01', but got '{amount_input.get_attribute('value')}'\"\n    time.sleep(1)  # Allow time for any final processing\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: Loan Amount Input Handling\n  The system should accept and store numeric values entered in the \"Loan Amount\" input field for calculation purposes.\n\n\n  Scenario: [Edge] User enters a very large loan amount\n    Given the Loan Calculator page is loaded\n    When the user enters \"1000000000\" into the loan amount input field with data-testid \"amount-input\"\n    Then the loan amount input field with data-testid \"amount-input\" should have the value \"1000000000\"\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the Loan Calculator page is loaded')\ndef step_given_loan_calculator_page_loaded(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='page-title']\"))\n    )\n    time.sleep(1)\n\n@when('the user enters \"{amount}\" into the loan amount input field with data-testid \"amount-input\"')\ndef step_when_user_enters_amount(context, amount):\n    amount_input = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='amount-input']\"))\n    )\n    amount_input.clear()\n    amount_input.send_keys(amount)\n    time.sleep(1)\n\n@then('the loan amount input field with data-testid \"amount-input\" should have the value \"{expected_amount}\"')\ndef step_then_loan_amount_should_have_value(context, expected_amount):\n    amount_input = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='amount-input']\")\n    actual_amount = amount_input.get_attribute(\"value\")\n    assert actual_amount == expected_amount, f\"Expected amount '{expected_amount}', but got '{actual_amount}'\"\n    time.sleep(1)\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: Loan Amount Input Handling\n  The system should accept and store numeric values entered in the \"Loan Amount\" input field for calculation purposes.\n\n\nScenario: [Error] User enters a non-numeric value in the loan amount field\n    Given the Loan Calculator page is loaded\n    When the user enters \"abc\" into the loan amount input field with data-testid \"amount-input\"\n    Then the loan amount input field with data-testid \"amount-input\" should not accept the value \"abc\""
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the Loan Calculator page is loaded')\ndef step_given_loan_calculator_page_loaded(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)  # Allow time for the page to load\n\n@when('the user enters \"abc\" into the loan amount input field with data-testid \"amount-input\"')\ndef step_when_user_enters_non_numeric_value(context):\n    amount_input = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='amount-input']\"))\n    )\n    amount_input.clear()\n    amount_input.send_keys(\"abc\")\n    time.sleep(1)  # Allow time for the input to be processed\n\n@then('the loan amount input field with data-testid \"amount-input\" should not accept the value \"abc\"')\ndef step_then_loan_amount_should_not_accept_non_numeric_value(context):\n    amount_input = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='amount-input']\")\n    entered_value = amount_input.get_attribute(\"value\")\n    assert entered_value == \"\", f\"Expected input field to be empty, but got '{entered_value}'\"\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                }
            ]
        },
        "3": {
            "requirement": {
                "description": "When the user enters a value in the 'Interest Rate' input field with data-testid 'rate-input', the system should accept and store the numeric value for calculation purposes."
            },
            "test_cases": [
                {
                    "test_case": [
                        "Feature: Interest Rate Input Handling\n  The system should accept and store the numeric value entered in the \"Interest Rate\" input field for calculation purposes.\n\n\n  Scenario: [Normal] User enters a valid interest rate\n    Given the Loan Calculator page is loaded\n    And the user sees the interest rate input field with data-testid \"rate-input\"\n    When the user enters \"5\" into the interest rate input field with data-testid \"rate-input\"\n    Then the interest rate input field with data-testid \"rate-input\" should contain the value \"5\"\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the Loan Calculator page is loaded')\ndef step_given_loan_calculator_page_loaded(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)\n\n@given('the user sees the interest rate input field with data-testid \"rate-input\"')\ndef step_given_user_sees_interest_rate_input_field(context):\n    rate_input = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='rate-input']\"))\n    )\n    assert rate_input.is_displayed(), \"Interest rate input field is not visible\"\n    time.sleep(1)\n\n@when('the user enters \"5\" into the interest rate input field with data-testid \"rate-input\"')\ndef step_when_user_enters_interest_rate(context):\n    rate_input = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='rate-input']\")\n    rate_input.clear()\n    rate_input.send_keys(\"5\")\n    time.sleep(1)\n\n@then('the interest rate input field with data-testid \"rate-input\" should contain the value \"5\"')\ndef step_then_interest_rate_input_field_contains_value(context):\n    rate_input = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='rate-input']\")\n    value = rate_input.get_attribute(\"value\")\n    assert value == \"5\", f\"Expected value '5', but got '{value}'\"\n    time.sleep(1)\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: Interest Rate Input Handling\n  The system should accept and store the numeric value entered in the \"Interest Rate\" input field for calculation purposes.\n\n\n  Scenario: [Edge] User enters the minimum possible interest rate\n    Given the Loan Calculator page is loaded\n    And the user sees the interest rate input field with data-testid \"rate-input\"\n    When the user enters \"0\" into the interest rate input field with data-testid \"rate-input\"\n    Then the interest rate input field with data-testid \"rate-input\" should contain the value \"0\"\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the Loan Calculator page is loaded')\ndef step_given_loan_calculator_page_loaded(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)\n\n@given('the user sees the interest rate input field with data-testid \"rate-input\"')\ndef step_given_user_sees_interest_rate_input(context):\n    WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='rate-input']\"))\n    )\n    time.sleep(1)\n\n@when('the user enters \"0\" into the interest rate input field with data-testid \"rate-input\"')\ndef step_when_user_enters_interest_rate(context):\n    rate_input = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='rate-input']\")\n    rate_input.clear()\n    rate_input.send_keys(\"0\")\n    time.sleep(1)\n\n@then('the interest rate input field with data-testid \"rate-input\" should contain the value \"0\"')\ndef step_then_interest_rate_input_should_contain_value(context):\n    rate_input = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='rate-input']\")\n    assert rate_input.get_attribute(\"value\") == \"0\", f\"Expected value '0', but got '{rate_input.get_attribute('value')}'\"\n    time.sleep(1)\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: Interest Rate Input Handling\n  The system should accept and store the numeric value entered in the \"Interest Rate\" input field for calculation purposes.\n\n\n  Scenario: [Edge] User enters the maximum possible interest rate\n    Given the Loan Calculator page is loaded\n    And the user sees the interest rate input field with data-testid \"rate-input\"\n    When the user enters \"100\" into the interest rate input field with data-testid \"rate-input\"\n    Then the interest rate input field with data-testid \"rate-input\" should contain the value \"100\"\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the Loan Calculator page is loaded')\ndef step_given_loan_calculator_page_loaded(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)\n\n@given('the user sees the interest rate input field with data-testid \"rate-input\"')\ndef step_given_user_sees_interest_rate_input(context):\n    WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='rate-input']\"))\n    )\n    time.sleep(1)\n\n@when('the user enters \"100\" into the interest rate input field with data-testid \"rate-input\"')\ndef step_when_user_enters_interest_rate(context):\n    rate_input = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='rate-input']\")\n    rate_input.clear()\n    rate_input.send_keys(\"100\")\n    time.sleep(1)\n\n@then('the interest rate input field with data-testid \"rate-input\" should contain the value \"100\"')\ndef step_then_interest_rate_input_should_contain_value(context):\n    rate_input = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='rate-input']\")\n    assert rate_input.get_attribute(\"value\") == \"100\", f\"Expected input value to be '100', but got '{rate_input.get_attribute('value')}'\"\n    time.sleep(1)\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: Interest Rate Input Handling\n  The system should accept and store the numeric value entered in the \"Interest Rate\" input field for calculation purposes.\n\n\nScenario: [Error] User enters a non-numeric value in the interest rate field\n    Given the Loan Calculator page is loaded\n    And the user sees the interest rate input field with data-testid \"rate-input\"\n    When the user enters \"abc\" into the interest rate input field with data-testid \"rate-input\"\n    Then the interest rate input field with data-testid \"rate-input\" should be empty"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the Loan Calculator page is loaded')\ndef step_given_loan_calculator_page_loaded(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)\n\n@given('the user sees the interest rate input field with data-testid \"rate-input\"')\ndef step_given_user_sees_interest_rate_input(context):\n    WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='rate-input']\"))\n    )\n    time.sleep(1)\n\n@when('the user enters \"abc\" into the interest rate input field with data-testid \"rate-input\"')\ndef step_when_user_enters_non_numeric_value(context):\n    rate_input = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='rate-input']\")\n    rate_input.clear()\n    rate_input.send_keys(\"abc\")\n    time.sleep(1)\n\n@then('the interest rate input field with data-testid \"rate-input\" should be empty')\ndef step_then_interest_rate_input_should_be_empty(context):\n    rate_input = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='rate-input']\")\n    assert rate_input.get_attribute('value') == \"\", \"Expected the interest rate input field to be empty\"\n    time.sleep(1)\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                }
            ]
        },
        "4": {
            "requirement": {
                "description": "When the user interacts with the 'Loan Term' input field, the system should handle and store the numeric value for calculation purposes, covering various scenarios including normal, edge, and error cases."
            },
            "test_cases": [
                {
                    "test_case": [
                        "Feature: Loan Term Input Handling\n  The system should accept and store the numeric value entered in the \"Loan Term\" input field for calculation purposes.\n\n\n  Scenario: [Normal] User enters a valid loan term value\n    Given the Loan Calculator page is loaded\n    And the \"Loan Term\" input field with data-testid \"years-input\" is visible\n    When the user enters \"15\" into the \"Loan Term\" input field with data-testid \"years-input\"\n    Then the \"Loan Term\" input field with data-testid \"years-input\" should have the value \"15\"\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the Loan Calculator page is loaded')\ndef step_given_loan_calculator_page_loaded(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)\n\n@given('the \"Loan Term\" input field with data-testid \"years-input\" is visible')\ndef step_given_loan_term_input_visible(context):\n    WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='years-input']\"))\n    )\n    time.sleep(1)\n\n@when('the user enters \"15\" into the \"Loan Term\" input field with data-testid \"years-input\"')\ndef step_when_user_enters_loan_term(context):\n    loan_term_input = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='years-input']\")\n    loan_term_input.clear()\n    loan_term_input.send_keys(\"15\")\n    time.sleep(1)\n\n@then('the \"Loan Term\" input field with data-testid \"years-input\" should have the value \"15\"')\ndef step_then_loan_term_input_has_value(context):\n    loan_term_input = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='years-input']\")\n    assert loan_term_input.get_attribute(\"value\") == \"15\", \"Loan Term input does not have the expected value\"\n    time.sleep(1)\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: Loan Term Input Handling\n  The system should accept and store the numeric value entered in the \"Loan Term\" input field for calculation purposes.\n\n\n  Scenario: [Edge] User enters the minimum loan term value\n    Given the Loan Calculator page is loaded\n    And the \"Loan Term\" input field with data-testid \"years-input\" is visible\n    When the user enters \"1\" into the \"Loan Term\" input field with data-testid \"years-input\"\n    Then the \"Loan Term\" input field with data-testid \"years-input\" should have the value \"1\"\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the Loan Calculator page is loaded')\ndef step_given_loan_calculator_page_loaded(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)\n\n@given('the \"Loan Term\" input field with data-testid \"years-input\" is visible')\ndef step_given_loan_term_input_visible(context):\n    WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='years-input']\"))\n    )\n    time.sleep(1)\n\n@when('the user enters \"1\" into the \"Loan Term\" input field with data-testid \"years-input\"')\ndef step_when_user_enters_loan_term(context):\n    loan_term_input = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='years-input']\")\n    loan_term_input.clear()\n    loan_term_input.send_keys(\"1\")\n    time.sleep(1)\n\n@then('the \"Loan Term\" input field with data-testid \"years-input\" should have the value \"1\"')\ndef step_then_loan_term_input_has_value(context):\n    loan_term_input = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='years-input']\")\n    assert loan_term_input.get_attribute(\"value\") == \"1\", f\"Expected value '1', but got '{loan_term_input.get_attribute('value')}'\"\n    time.sleep(1)\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: Loan Term Input Handling\n  The system should accept and store the numeric value entered in the \"Loan Term\" input field for calculation purposes.\n\n\n  Scenario: [Edge] User enters the maximum loan term value\n    Given the Loan Calculator page is loaded\n    And the \"Loan Term\" input field with data-testid \"years-input\" is visible\n    When the user enters \"30\" into the \"Loan Term\" input field with data-testid \"years-input\"\n    Then the \"Loan Term\" input field with data-testid \"years-input\" should have the value \"30\"\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the Loan Calculator page is loaded')\ndef step_given_loan_calculator_page_loaded(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)\n\n@given('the \"Loan Term\" input field with data-testid \"years-input\" is visible')\ndef step_given_loan_term_input_visible(context):\n    WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='years-input']\"))\n    )\n    time.sleep(1)\n\n@when('the user enters \"30\" into the \"Loan Term\" input field with data-testid \"years-input\"')\ndef step_when_user_enters_loan_term(context):\n    loan_term_input = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='years-input']\")\n    loan_term_input.clear()\n    loan_term_input.send_keys(\"30\")\n    time.sleep(1)\n\n@then('the \"Loan Term\" input field with data-testid \"years-input\" should have the value \"30\"')\ndef step_then_loan_term_input_has_value(context):\n    loan_term_input = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='years-input']\")\n    assert loan_term_input.get_attribute(\"value\") == \"30\", f\"Expected value '30', but got '{loan_term_input.get_attribute('value')}'\"\n    time.sleep(1)\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: Loan Term Input Handling\n  The system should accept and store the numeric value entered in the \"Loan Term\" input field for calculation purposes.\n\n\nScenario: [Error] User enters a non-numeric value in the loan term field\n    Given the Loan Calculator page is loaded\n    And the \"Loan Term\" input field with data-testid \"years-input\" is visible\n    When the user enters \"abc\" into the \"Loan Term\" input field with data-testid \"years-input\"\n    Then the \"Loan Term\" input field with data-testid \"years-input\" should be empty"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the Loan Calculator page is loaded')\ndef step_given_loan_calculator_page_loaded(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)\n\n@given('the \"Loan Term\" input field with data-testid \"years-input\" is visible')\ndef step_given_loan_term_input_visible(context):\n    WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='years-input']\"))\n    )\n    time.sleep(1)\n\n@when('the user enters \"abc\" into the \"Loan Term\" input field with data-testid \"years-input\"')\ndef step_when_user_enters_non_numeric_value(context):\n    loan_term_input = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='years-input']\")\n    loan_term_input.clear()\n    loan_term_input.send_keys(\"abc\")\n    time.sleep(1)\n\n@then('the \"Loan Term\" input field with data-testid \"years-input\" should be empty')\ndef step_then_loan_term_input_should_be_empty(context):\n    loan_term_input = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='years-input']\")\n    assert loan_term_input.get_attribute('value') == \"\", \"Expected the loan term input field to be empty\"\n    time.sleep(1)\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                }
            ]
        },
        "5": {
            "requirement": {
                "description": "The Loan Calculator web application must ensure that when a user adjusts the 'Loan Term' slider, the 'Loan Term' input field is dynamically updated to reflect the slider's current value. Specifically, the slider element, identified by data-testid 'year-slider', should allow users to select a value between 1 and 30, inclusive. Upon adjustment, the input field with data-testid 'years-input' must immediately display the selected slider value. "
            },
            "test_cases": [
                {
                    "test_case": [
                        "Feature: Loan Term Slider Adjustment\n  The system should update the \"Loan Term\" input field to reflect the slider\"s current value when the user adjusts the \"Loan Term\" slider.\n\n\n  Scenario: [Normal] Adjusting the Loan Term slider updates the input field\n    Given the Loan Calculator page is loaded\n    And the Loan Term slider with data-testid \"year-slider\" is set to 15\n    When the user moves the Loan Term slider to 20\n    Then the Loan Term input field with data-testid \"years-input\" should display the value 20\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the Loan Calculator page is loaded')\ndef step_given_loan_calculator_page_loaded(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='page-title']\"))\n    )\n    time.sleep(1)\n\n@given('the Loan Term slider with data-testid \"year-slider\" is set to 15')\ndef step_given_loan_term_slider_set(context):\n    slider = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='year-slider']\"))\n    )\n    # Set the slider value and trigger the 'input' event\n    context.driver.execute_script(\"\"\"\n            const slider = arguments[0];\n            slider.value = 15;\n            const event = new Event('input', { bubbles: true });\n            slider.dispatchEvent(event);\n        \"\"\", slider)\n\n    # Optionally wait for the change to take effect\n    time.sleep(1)\n\n@when('the user moves the Loan Term slider to 20')\ndef step_when_user_moves_slider(context):\n    slider = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='year-slider']\"))\n    )\n    # Set the slider value and trigger the 'input' event\n    context.driver.execute_script(\"\"\"\n            const slider = arguments[0];\n            slider.value = 20;\n            const event = new Event('input', { bubbles: true });\n            slider.dispatchEvent(event);\n        \"\"\", slider)\n    time.sleep(1)\n\n@then('the Loan Term input field with data-testid \"years-input\" should display the value 20')\ndef step_then_loan_term_input_display(context):\n    input_field = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='years-input']\"))\n    )\n    input_value = input_field.get_attribute(\"value\")\n    assert input_value == \"20\", f\"Expected input field value to be 20, but got {input_value}\"\n    time.sleep(1)\n    context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: Loan Term Slider Adjustment\n  The system should update the \"Loan Term\" input field to reflect the slider\"s current value when the user adjusts the \"Loan Term\" slider.\n\n\n  Scenario: [Edge] Adjusting the Loan Term slider to its minimum value\n    Given the Loan Calculator page is loaded\n    And the Loan Term slider with data-testid \"year-slider\" is set to 15\n    When the user moves the Loan Term slider to 1\n    Then the Loan Term input field with data-testid \"years-input\" should display the value 1\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the Loan Calculator page is loaded')\ndef step_given_loan_calculator_page_loaded(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)  # Allow time for the page to load\n\n@given('the Loan Term slider with data-testid \"year-slider\" is set to 15')\ndef step_given_loan_term_slider_set_to_15(context):\n    slider = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='year-slider']\"))\n    )\n    slider_value = slider.get_attribute(\"value\")\n    assert slider_value == \"15\", f\"Expected slider value to be '15', but got '{slider_value}'\"\n    time.sleep(1)\n\n@when('the user moves the Loan Term slider to 1')\ndef step_when_user_moves_loan_term_slider_to_1(context):\n    slider = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='year-slider']\"))\n    )\n    # Set the slider value and trigger the 'input' event\n    context.driver.execute_script(\"\"\"\n            const slider = arguments[0];\n            slider.value = 1;\n            const event = new Event('input', { bubbles: true });\n            slider.dispatchEvent(event);\n        \"\"\", slider)  # Simulate arrow key to trigger input event\n    time.sleep(1)\n\n@then('the Loan Term input field with data-testid \"years-input\" should display the value 1')\ndef step_then_loan_term_input_field_should_display_1(context):\n    years_input = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='years-input']\"))\n    )\n    input_value = years_input.get_attribute(\"value\")\n    assert input_value == \"1\", f\"Expected input value to be '1', but got '{input_value}'\"\n    time.sleep(1)\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: Loan Term Slider Adjustment\n  The system should update the \"Loan Term\" input field to reflect the slider\"s current value when the user adjusts the \"Loan Term\" slider.\n\n\n  Scenario: [Edge] Adjusting the Loan Term slider to its maximum value\n    Given the Loan Calculator page is loaded\n    And the Loan Term slider with data-testid \"year-slider\" is set to 15\n    When the user moves the Loan Term slider to 30\n    Then the Loan Term input field with data-testid \"years-input\" should display the value 30\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the Loan Calculator page is loaded')\ndef step_given_loan_calculator_page_loaded(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)  # Allow time for the page to load\n\n@given('the Loan Term slider with data-testid \"year-slider\" is set to 15')\ndef step_given_loan_term_slider_set_to_15(context):\n    slider = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='year-slider']\"))\n    )\n    slider_value = slider.get_attribute(\"value\")\n    assert slider_value == \"15\", f\"Expected slider value to be 15, but got {slider_value}\"\n    time.sleep(1)\n\n@when('the user moves the Loan Term slider to 30')\ndef step_when_user_moves_loan_term_slider_to_30(context):\n    slider = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='year-slider']\"))\n    )\n    # Set the slider value and trigger the 'input' event\n    context.driver.execute_script(\"\"\"\n            const slider = arguments[0];\n            slider.value = 30;\n            const event = new Event('input', { bubbles: true });\n            slider.dispatchEvent(event);\n        \"\"\", slider)  # Simulate moving the slider\n    time.sleep(1)\n\n@then('the Loan Term input field with data-testid \"years-input\" should display the value 30')\ndef step_then_loan_term_input_field_should_display_30(context):\n    years_input = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='years-input']\"))\n    )\n    input_value = years_input.get_attribute(\"value\")\n    assert input_value == \"30\", f\"Expected input value to be 30, but got {input_value}\"\n    time.sleep(1)\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                }
            ]
        },
        "6": {
            "requirement": {
                "description": "The system must calculate and display the monthly payment, total payment, and total interest when the user clicks the 'Calculate' button (data-testid 'calculate-button'). The monthly payment is calculated using the formula M = P * (r * (1 + r)^n) / ((1 + r)^n - 1), with special handling for 0 interest rate (M = P / n). Total payment is M * n, and total interest is Total Payment - Principal. The results are displayed in the format 'Monthly Payment: $[value]', 'Total Payment: $[value]', and 'Total Interest: $[value]' (data-testids 'monthly-payment', 'total-payment', 'total-interest'). If any input is invalid or missing, the system must alert the user with the message \"Please check your numbers\" and prevent the calculation. "
            },
            "test_cases": [
                {
                    "test_case": [
                        "Feature: REQ-006 Calculate Loan Payments\n  The system should calculate and display the monthly payment, total payment, and total interest when the user clicks the \"Calculate\" button based on the input values.\n\n\n  Scenario: [Normal] Calculate loan payments with valid inputs\n    Given the Loan Calculator page is loaded\n    And the user enters \"10000\" into the loan amount field with data-testid \"amount-input\"\n    And the user enters \"5\" into the interest rate field with data-testid \"rate-input\"\n    And the user enters \"15\" into the loan term field with data-testid \"years-input\"\n    When the user clicks the \"Calculate\" button with data-testid \"calculate-button\"\n    Then the monthly payment should be displayed as \"Monthly Payment: $79.08\" in the result box with data-testid \"monthly-payment\"\n    And the total payment should be displayed as \"Total Payment: $14234.40\" in the result box with data-testid \"total-payment\"\n    And the total interest should be displayed as \"Total Interest: $4234.40\" in the result box with data-testid \"total-interest\"\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\nimport re\n\nfile_path = \"index.html\"\n\n@given('the Loan Calculator page is loaded')\ndef step_given_loan_calculator_page_loaded(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)\n\n@given('the user enters \"{amount}\" into the loan amount field with data-testid \"amount-input\"')\ndef step_given_enter_loan_amount(context, amount):\n    amount_input = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='amount-input']\"))\n    )\n    amount_input.clear()\n    amount_input.send_keys(amount)\n    time.sleep(1)\n\n@given('the user enters \"{rate}\" into the interest rate field with data-testid \"rate-input\"')\ndef step_given_enter_interest_rate(context, rate):\n    rate_input = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='rate-input']\"))\n    )\n    rate_input.clear()\n    rate_input.send_keys(rate)\n    time.sleep(1)\n\n@given('the user enters \"{years}\" into the loan term field with data-testid \"years-input\"')\ndef step_given_enter_loan_term(context, years):\n    years_input = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='years-input']\"))\n    )\n    years_input.clear()\n    years_input.send_keys(years)\n    time.sleep(1)\n\n@when('the user clicks the \"Calculate\" button with data-testid \"calculate-button\"')\ndef step_when_click_calculate_button(context):\n    calculate_button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='calculate-button']\"))\n    )\n    calculate_button.click()\n    time.sleep(1)\n\n@then('the monthly payment should be displayed as \"Monthly Payment: $79.08\" in the result box with data-testid \"monthly-payment\"')\ndef step_then_verify_monthly_payment(context):\n    monthly_payment = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='monthly-payment']\"))\n    )\n    match = re.search(r\"\\$(\\d+)\", monthly_payment.text)\n    assert match, f\"No numeric value found in '{monthly_payment.text}'\"\n    actual_value = int(match.group(1))\n    expected_text = \"Monthly Payment: $79.08\"\n    assert str(actual_value) in expected_text, f\"Expected '{expected_text}' but got '{monthly_payment.text}'\"\n\n@then('the total payment should be displayed as \"Total Payment: $14234.40\" in the result box with data-testid \"total-payment\"')\ndef step_then_verify_total_payment(context):\n    total_payment = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='total-payment']\"))\n    )\n    match = re.search(r\"\\$(\\d+)\", total_payment.text)\n    assert match, f\"No numeric value found in '{total_payment.text}'\"\n    actual_value = int(match.group(1))\n    expected_text = \"Total Payment: $14234.40\"\n    assert str(actual_value) in expected_text, f\"Expected '{expected_text}' but got '{total_payment.text}'\"\n\n@then('the total interest should be displayed as \"Total Interest: $4234.40\" in the result box with data-testid \"total-interest\"')\ndef step_then_verify_total_interest(context):\n    total_interest = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='total-interest']\"))\n    )\n    match = re.search(r\"\\$(\\d+)\", total_interest.text)\n    assert match, f\"No numeric value found in '{total_interest.text}'\"\n    actual_value = int(match.group(1))\n    expected_text = \"Total Interest: $4234.40\"\n    assert str(actual_value) in expected_text, f\"Expected '{expected_text}' but got '{total_interest.text}'\"\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: REQ-006 Calculate Loan Payments\n  The system should calculate and display the monthly payment, total payment, and total interest when the user clicks the \"Calculate\" button based on the input values.\n\n\n  Scenario: [Edge] Calculate loan payments with zero interest rate\n    Given the Loan Calculator page is loaded\n    And the user enters \"10000\" into the loan amount field with data-testid \"amount-input\"\n    And the user enters \"0\" into the interest rate field with data-testid \"rate-input\"\n    And the user enters \"15\" into the loan term field with data-testid \"years-input\"\n    When the user clicks the \"Calculate\" button with data-testid \"calculate-button\"\n    Then an alert should be displayed with the message \"Please check your numbers\"\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the Loan Calculator page is loaded')\ndef step_given_loan_calculator_page_loaded(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)\n\n@given('the user enters \"{amount}\" into the loan amount field with data-testid \"amount-input\"')\ndef step_given_enter_loan_amount(context, amount):\n    amount_input = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='amount-input']\"))\n    )\n    amount_input.clear()\n    amount_input.send_keys(amount)\n    time.sleep(1)\n\n@given('the user enters \"{rate}\" into the interest rate field with data-testid \"rate-input\"')\ndef step_given_enter_interest_rate(context, rate):\n    rate_input = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='rate-input']\"))\n    )\n    rate_input.clear()\n    rate_input.send_keys(rate)\n    time.sleep(1)\n\n@given('the user enters \"{years}\" into the loan term field with data-testid \"years-input\"')\ndef step_given_enter_loan_term(context, years):\n    years_input = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='years-input']\"))\n    )\n    years_input.clear()\n    years_input.send_keys(years)\n    time.sleep(1)\n\n@when('the user clicks the \"Calculate\" button with data-testid \"calculate-button\"')\ndef step_when_click_calculate_button(context):\n    calculate_button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='calculate-button']\"))\n    )\n    calculate_button.click()\n    time.sleep(1)\n\n@then('an alert should be displayed with the message \"Please check your numbers\"')\ndef step_then_alert_displayed(context):\n    alert = WebDriverWait(context.driver, 10).until(\n        EC.alert_is_present()\n    )\n    alert_text = alert.text\n    assert alert_text.lower() == \"Please check your numbers\".lower(), f\"Expected alert message not found. Found: {alert_text}\"\n    time.sleep(1)\n    alert.accept()\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: REQ-006 Calculate Loan Payments\n  The system should calculate and display the monthly payment, total payment, and total interest when the user clicks the \"Calculate\" button based on the input values.\n\n\n  Scenario: [Edge] Calculate loan payments with maximum loan term\n    Given the Loan Calculator page is loaded\n    And the user enters \"10000\" into the loan amount field with data-testid \"amount-input\"\n    And the user enters \"5\" into the interest rate field with data-testid \"rate-input\"\n    And the user enters \"30\" into the loan term field with data-testid \"years-input\"\n    When the user clicks the \"Calculate\" button with data-testid \"calculate-button\"\n    Then the monthly payment should be displayed as \"Monthly Payment: $53.68\" in the result box with data-testid \"monthly-payment\"\n    And the total payment should be displayed as \"Total Payment: $19324.80\" in the result box with data-testid \"total-payment\"\n    And the total interest should be displayed as \"Total Interest: $9324.80\" in the result box with data-testid \"total-interest\"\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\nimport re\n\nfile_path = \"index.html\"\n\ndef extract_numeric_value(text):\n    \"\"\"\n    Helper function to extract the numeric part from a string.\n    Example: \"Monthly Payment: $79.08\" -> 79.08\n    \"\"\"\n    match = re.search(r\"\\$(\\d+\\.\\d+)\", text)\n    if not match:\n        raise ValueError(f\"No numeric value found in '{text}'\")\n    return float(match.group(1))\n\n@given('the Loan Calculator page is loaded')\ndef step_given_loan_calculator_page_loaded(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)\n\n@given('the user enters \"{amount}\" into the loan amount field with data-testid \"amount-input\"')\ndef step_given_enter_loan_amount(context, amount):\n    amount_input = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='amount-input']\"))\n    )\n    amount_input.clear()\n    amount_input.send_keys(amount)\n    time.sleep(1)\n\n@given('the user enters \"{rate}\" into the interest rate field with data-testid \"rate-input\"')\ndef step_given_enter_interest_rate(context, rate):\n    rate_input = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='rate-input']\"))\n    )\n    rate_input.clear()\n    rate_input.send_keys(rate)\n    time.sleep(1)\n\n@given('the user enters \"{years}\" into the loan term field with data-testid \"years-input\"')\ndef step_given_enter_loan_term(context, years):\n    years_input = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='years-input']\"))\n    )\n    years_input.clear()\n    years_input.send_keys(years)\n    time.sleep(1)\n\n@when('the user clicks the \"Calculate\" button with data-testid \"calculate-button\"')\ndef step_when_click_calculate_button(context):\n    calculate_button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='calculate-button']\"))\n    )\n    calculate_button.click()\n    time.sleep(1)\n\n@then('the monthly payment should be displayed as \"{expected_text}\" in the result box with data-testid \"monthly-payment\"')\ndef step_then_verify_monthly_payment(context, expected_text):\n    monthly_payment = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='monthly-payment']\"))\n    )\n    monthly_payment_value = extract_numeric_value(monthly_payment.text)\n    expected_value = extract_numeric_value(expected_text)\n    assert abs(monthly_payment_value-expected_value)<5, f\"Expected '{expected_text}' in '{monthly_payment.text}'\"\n\n@then('the total payment should be displayed as \"{expected_text}\" in the result box with data-testid \"total-payment\"')\ndef step_then_verify_total_payment(context, expected_text):\n    total_payment = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='total-payment']\"))\n    )\n    total_payment_value = extract_numeric_value(total_payment.text)\n    expected_value = extract_numeric_value(expected_text)\n    assert abs(total_payment_value-expected_value)<5, f\"Expected '{expected_text}' in '{total_payment.text}'\"\n\n@then('the total interest should be displayed as \"{expected_text}\" in the result box with data-testid \"total-interest\"')\ndef step_then_verify_total_interest(context, expected_text):\n    total_interest = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='total-interest']\"))\n    )\n    total_interest_value = extract_numeric_value(total_interest.text)\n    expected_value = extract_numeric_value(expected_text)\n    assert abs(total_interest_value-expected_value)<5, f\"Expected '{expected_text}' in '{total_interest.text}'\"\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                }
            ]
        },
        "7": {
            "requirement": {
                "description": "When the user clicks the 'Calculate' button and the input values are valid, the doughnut chart (data-testid 'payment-chart') will update to show the proportions of principal and interest."
            },
            "test_cases": [
                {
                    "test_case": [
                        "Feature: REQ-007 - Update Payment Chart on Valid Input\n\n  The system should update the payment chart to visually represent the breakdown of principal and interest when the user clicks the \"Calculate\" button with valid input values.\n\n\n  Scenario: [Normal] Update payment chart with valid input values\n    Given the Loan Calculator page is loaded\n    And the user enters \"10000\" into the loan amount field with data-testid \"amount-input\"\n    And the user enters \"5\" into the interest rate field with data-testid \"rate-input\"\n    And the user enters \"15\" into the loan term field with data-testid \"years-input\"\n    When the user clicks the \"Calculate\" button with data-testid \"calculate-button\"\n    Then the payment chart with data-testid \"payment-chart\" should display a breakdown of principal and interest\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the Loan Calculator page is loaded')\ndef step_given_loan_calculator_page_loaded(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)\n\n@given('the user enters \"{amount}\" into the loan amount field with data-testid \"amount-input\"')\ndef step_given_enter_loan_amount(context, amount):\n    amount_input = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='amount-input']\"))\n    )\n    amount_input.clear()\n    amount_input.send_keys(amount)\n    time.sleep(1)\n\n@given('the user enters \"{rate}\" into the interest rate field with data-testid \"rate-input\"')\ndef step_given_enter_interest_rate(context, rate):\n    rate_input = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='rate-input']\"))\n    )\n    rate_input.clear()\n    rate_input.send_keys(rate)\n    time.sleep(1)\n\n@given('the user enters \"{years}\" into the loan term field with data-testid \"years-input\"')\ndef step_given_enter_loan_term(context, years):\n    years_input = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='years-input']\"))\n    )\n    years_input.clear()\n    years_input.send_keys(years)\n    time.sleep(1)\n\n@when('the user clicks the \"Calculate\" button with data-testid \"calculate-button\"')\ndef step_when_click_calculate_button(context):\n    calculate_button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='calculate-button']\"))\n    )\n    calculate_button.click()\n    time.sleep(1)\n\n@then('the payment chart with data-testid \"payment-chart\" should display a breakdown of principal and interest')\ndef step_then_payment_chart_display_breakdown(context):\n    payment_chart = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='payment-chart']\"))\n    )\n    # Assuming the chart is visible and has data, we check its visibility\n    is_visible = context.driver.execute_script(\n        \"return arguments[0].offsetWidth > 0 && arguments[0].offsetHeight > 0;\", payment_chart\n    )\n    assert is_visible, \"Payment chart is not visible or does not display the breakdown correctly.\"\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: REQ-007 - Update Payment Chart on Valid Input\n\n  The system should update the payment chart to visually represent the breakdown of principal and interest when the user clicks the \"Calculate\" button with valid input values.\n\n\n  Scenario: [Edge] Update payment chart with minimum valid input values\n    Given the Loan Calculator page is loaded\n    And the user enters \"1\" into the loan amount field with data-testid \"amount-input\"\n    And the user enters \"0.01\" into the interest rate field with data-testid \"rate-input\"\n    And the user enters \"1\" into the loan term field with data-testid \"years-input\"\n    When the user clicks the \"Calculate\" button with data-testid \"calculate-button\"\n    Then the payment chart with data-testid \"payment-chart\" should display a breakdown of principal and interest\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\ndef is_chart_updated(driver):\n    # Placeholder function to check if the chart is updated\n    # This can be implemented by checking the chart's data or any visual changes\n    return True\n\n@given('the Loan Calculator page is loaded')\ndef step_given_loan_calculator_page_loaded(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)  # Allow time for the page to load\n\n@given('the user enters \"{amount}\" into the loan amount field with data-testid \"amount-input\"')\ndef step_given_enter_loan_amount(context, amount):\n    amount_input = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='amount-input']\"))\n    )\n    amount_input.clear()\n    amount_input.send_keys(amount)\n    time.sleep(1)\n\n@given('the user enters \"{rate}\" into the interest rate field with data-testid \"rate-input\"')\ndef step_given_enter_interest_rate(context, rate):\n    rate_input = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='rate-input']\"))\n    )\n    rate_input.clear()\n    rate_input.send_keys(rate)\n    time.sleep(1)\n\n@given('the user enters \"{years}\" into the loan term field with data-testid \"years-input\"')\ndef step_given_enter_loan_term(context, years):\n    years_input = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='years-input']\"))\n    )\n    years_input.clear()\n    years_input.send_keys(years)\n    time.sleep(1)\n\n@when('the user clicks the \"Calculate\" button with data-testid \"calculate-button\"')\ndef step_when_click_calculate_button(context):\n    calculate_button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='calculate-button']\"))\n    )\n    calculate_button.click()\n    time.sleep(1)\n\n@then('the payment chart with data-testid \"payment-chart\" should display a breakdown of principal and interest')\ndef step_then_verify_payment_chart(context):\n    chart = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='payment-chart']\"))\n    )\n    assert is_chart_updated(context.driver), \"The payment chart did not update as expected.\"\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                }
            ]
        },
        "8": {
            "requirement": {
                "description": "When the 'Calculate' button is clicked, the system should check the validity of the input values. If any of the values are zero or invalid, an alert should be displayed with the message 'Please check your numbers'. "
            },
            "test_cases": [
                {
                    "test_case": [
                        "Feature: Alert user on invalid input values when calculating loan payments\n  The system should alert the user to check their numbers if the input values are invalid when the \"Calculate\" button is clicked.\n\n\n  Scenario: [Edge] User enters zero as interest rate and clicks \"Calculate\"\n    Given the Loan Calculator page is loaded\n    And the user enters \"10000\" into the loan amount field with data-testid \"amount-input\"\n    And the user enters \"0\" into the interest rate field with data-testid \"rate-input\"\n    And the user enters \"15\" into the loan term field with data-testid \"years-input\"\n    When the user clicks the \"Calculate\" button with data-testid \"calculate-button\"\n    Then an alert should be displayed with the message \"Please check your numbers\"\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the Loan Calculator page is loaded')\ndef step_given_loan_calculator_page_loaded(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)\n\n@given('the user enters \"{amount}\" into the loan amount field with data-testid \"amount-input\"')\ndef step_given_enter_loan_amount(context, amount):\n    amount_input = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='amount-input']\"))\n    )\n    amount_input.clear()\n    amount_input.send_keys(amount)\n    time.sleep(1)\n\n@given('the user enters \"{rate}\" into the interest rate field with data-testid \"rate-input\"')\ndef step_given_enter_interest_rate(context, rate):\n    rate_input = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='rate-input']\"))\n    )\n    rate_input.clear()\n    rate_input.send_keys(rate)\n    time.sleep(1)\n\n@given('the user enters \"{years}\" into the loan term field with data-testid \"years-input\"')\ndef step_given_enter_loan_term(context, years):\n    years_input = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='years-input']\"))\n    )\n    years_input.clear()\n    years_input.send_keys(years)\n    time.sleep(1)\n\n@when('the user clicks the \"Calculate\" button with data-testid \"calculate-button\"')\ndef step_when_click_calculate_button(context):\n    calculate_button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='calculate-button']\"))\n    )\n    calculate_button.click()\n    time.sleep(1)\n\n@then('an alert should be displayed with the message \"Please check your numbers\"')\ndef step_then_alert_displayed(context):\n    alert = WebDriverWait(context.driver, 10).until(EC.alert_is_present())\n    alert_text = alert.text\n    assert \"Please check your numbers\" in alert_text, f\"Expected alert message not found. Got: {alert_text}\"\n    alert.accept()\n    time.sleep(1)\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: Alert user on invalid input values when calculating loan payments\n  The system should alert the user to check their numbers if the input values are invalid when the \"Calculate\" button is clicked.\n\n\n  Scenario: [Edge] User enters zero as loan term and clicks \"Calculate\"\n    Given the Loan Calculator page is loaded\n    And the user enters \"10000\" into the loan amount field with data-testid \"amount-input\"\n    And the user enters \"5\" into the interest rate field with data-testid \"rate-input\"\n    And the user enters \"0\" into the loan term field with data-testid \"years-input\"\n    When the user clicks the \"Calculate\" button with data-testid \"calculate-button\"\n    Then an alert should be displayed with the message \"Please check your numbers\"\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the Loan Calculator page is loaded')\ndef step_given_loan_calculator_page_loaded(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)\n\n@given('the user enters \"{amount}\" into the loan amount field with data-testid \"amount-input\"')\ndef step_given_enter_loan_amount(context, amount):\n    amount_input = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='amount-input']\"))\n    )\n    amount_input.clear()\n    amount_input.send_keys(amount)\n    time.sleep(1)\n\n@given('the user enters \"{rate}\" into the interest rate field with data-testid \"rate-input\"')\ndef step_given_enter_interest_rate(context, rate):\n    rate_input = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='rate-input']\"))\n    )\n    rate_input.clear()\n    rate_input.send_keys(rate)\n    time.sleep(1)\n\n@given('the user enters \"{years}\" into the loan term field with data-testid \"years-input\"')\ndef step_given_enter_loan_term(context, years):\n    years_input = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='years-input']\"))\n    )\n    years_input.clear()\n    years_input.send_keys(years)\n    time.sleep(1)\n\n@when('the user clicks the \"Calculate\" button with data-testid \"calculate-button\"')\ndef step_when_click_calculate_button(context):\n    calculate_button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='calculate-button']\"))\n    )\n    calculate_button.click()\n    time.sleep(1)\n\n@then('an alert should be displayed with the message \"Please check your numbers\"')\ndef step_then_alert_displayed(context):\n    alert = WebDriverWait(context.driver, 10).until(EC.alert_is_present())\n    alert_text = alert.text\n    assert \"Please check your numbers\" in alert_text, f\"Expected alert message to be 'Please check your numbers', but got '{alert_text}'\"\n    alert.accept()\n    time.sleep(1)\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                }
            ]
        }
    }
}