{
    "summary": {
        "overview": "The application is a web-based calculator that allows users to perform basic arithmetic operations. It includes a display screen for showing inputs and results, a set of buttons for numbers and operators, and a theme toggle feature to switch between dark and light modes.",
        "predefined_options": "The calculator provides predefined buttons for numbers (0-9), operators (+, -, ร, รท), and additional functions like clear, backspace, and parentheses.",
        "external_resources": "The application uses an image as a favicon: './images/2344132.png'.",
        "external_js_libraries": "No external JavaScript libraries are explicitly mentioned in the provided code."
    },
    "finegrained_rewith_test": {
        "1": {
            "requirement": {
                "description": "The calculator application must allow users to interact with number buttons (0-9) such that when a user clicks any number button, the corresponding number is appended to the display screen. The display screen is identified by the attribute data-testid='display'. The application should handle sequences of number button clicks by appending each number in the order clicked. If the display is cleared using the button with data-testid='clear-button', subsequent number button clicks should start a new sequence on the display. The system should support clicking all number buttons in sequence, displaying '0123456789'. The application must ensure that the display accurately reflects the user's input sequence, even after clearing the display."
            },
            "test_cases": [
                {
                    "test_case": [
                        "Feature: Number Button Click Appends Number to Display Screen\n  The calculator should append the corresponding number to the display screen when a number button (0-9) is clicked.\n\n\n  Scenario: [Normal] User clicks a single number button\n    Given the calculator page is loaded\n    When the user clicks the number button with data-testid \"number-5\"\n    Then the display with data-testid \"display\" should show \"5\"\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the calculator page is loaded')\ndef step_given_calculator_page_loaded(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    context.driver.maximize_window()\n    time.sleep(1)\n\n@when('the user clicks the number button with data-testid \"number-5\"')\ndef step_when_user_clicks_number_button(context):\n    number_button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='number-5']\"))\n    )\n    number_button.click()\n    time.sleep(1)\n\n@then('the display with data-testid \"display\" should show \"5\"')\ndef step_then_display_should_show_number(context):\n    display = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='display']\"))\n    )\n    displayed_text = display.text.strip()\n    assert \"5\" in displayed_text, f\"Expected '5' in display, but got '{displayed_text}'\"\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: Number Button Click Appends Number to Display Screen\n  The calculator should append the corresponding number to the display screen when a number button (0-9) is clicked.\n\n\n  Scenario: [Normal] User clicks multiple number buttons in sequence\n    Given the calculator page is loaded\n    When the user clicks the number button with data-testid \"number-3\"\n    And the user clicks the number button with data-testid \"number-7\"\n    Then the display with data-testid \"display\" should show \"37\"\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given(\"the calculator page is loaded\")\ndef step_given_calculator_page_loaded(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='display']\"))\n    )\n    time.sleep(1)\n\n@when('the user clicks the number button with data-testid \"{data_testid}\"')\ndef step_when_user_clicks_number_button(context, data_testid):\n    button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, f\"[data-testid='{data_testid}']\"))\n    )\n    button.click()\n    time.sleep(1)\n\n@then('the display with data-testid \"display\" should show \"{expected_display}\"')\ndef step_then_display_should_show(context, expected_display):\n    display = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='display']\"))\n    )\n    actual_display = display.text.strip()\n    assert expected_display in actual_display, f\"Expected '{expected_display}' in '{actual_display}'\"\n    time.sleep(1)\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: Number Button Click Appends Number to Display Screen\n  The calculator should append the corresponding number to the display screen when a number button (0-9) is clicked.\n\n\n  Scenario: [Edge] User clicks all number buttons in sequence\n    Given the calculator page is loaded\n    When the user clicks the number button with data-testid \"number-0\"\n    And the user clicks the number button with data-testid \"number-1\"\n    And the user clicks the number button with data-testid \"number-2\"\n    And the user clicks the number button with data-testid \"number-3\"\n    And the user clicks the number button with data-testid \"number-4\"\n    And the user clicks the number button with data-testid \"number-5\"\n    And the user clicks the number button with data-testid \"number-6\"\n    And the user clicks the number button with data-testid \"number-7\"\n    And the user clicks the number button with data-testid \"number-8\"\n    And the user clicks the number button with data-testid \"number-9\"\n    Then the display with data-testid \"display\" should show \"0123456789\"\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the calculator page is loaded')\ndef step_given_calculator_page_loaded(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='display']\"))\n    )\n    time.sleep(1)\n\n@when('the user clicks the number button with data-testid \"{data_testid}\"')\ndef step_when_user_clicks_number_button(context, data_testid):\n    button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, f\"[data-testid='{data_testid}']\"))\n    )\n    button.click()\n    time.sleep(1)\n\n@then('the display with data-testid \"display\" should show \"{expected_display}\"')\ndef step_then_display_should_show(context, expected_display):\n    display = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='display']\"))\n    )\n    actual_display = display.text.strip()\n    assert expected_display in actual_display, f\"Expected '{expected_display}' in '{actual_display}'\"\n    time.sleep(1)\n    context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: Number Button Click Appends Number to Display Screen\n  The calculator should append the corresponding number to the display screen when a number button (0-9) is clicked.\n\n\n  Scenario: [Error] User clicks a number button after clearing the display\n    Given the calculator page is loaded\n    And the user clicks the number button with data-testid \"number-9\"\n    And the user clicks the clear button with data-testid \"clear-button\"\n    When the user clicks the number button with data-testid \"number-4\"\n    Then the display with data-testid \"display\" should show \"4\""
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the calculator page is loaded')\ndef step_given_calculator_page_loaded(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)  # Allow time for the page to load\n\n@given('the user clicks the number button with data-testid \"{data_testid}\"')\ndef step_given_user_clicks_number_button(context, data_testid):\n    button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, f\"[data-testid='{data_testid}']\"))\n    )\n    button.click()\n    time.sleep(1)  # Allow time for the interaction\n\n@given('the user clicks the clear button with data-testid \"{data_testid}\"')\ndef step_given_user_clicks_clear_button(context, data_testid):\n    clear_button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, f\"[data-testid='{data_testid}']\"))\n    )\n    clear_button.click()\n    time.sleep(1)  # Allow time for the interaction\n\n@when('the user clicks the number button with data-testid \"{data_testid}\"')\ndef step_when_user_clicks_number_button(context, data_testid):\n    button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, f\"[data-testid='{data_testid}']\"))\n    )\n    button.click()\n    time.sleep(1)  # Allow time for the interaction\n\n@then('the display with data-testid \"{data_testid}\" should show \"{expected_text}\"')\ndef step_then_display_should_show(context, data_testid, expected_text):\n    display = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, f\"[data-testid='{data_testid}']\"))\n    )\n    actual_text = display.text.strip()\n    assert expected_text.strip() == actual_text, f\"Expected '{expected_text}', but got '{actual_text}'\"\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                }
            ]
        },
        "2": {
            "requirement": {
                "description": "When a user interacts with the calculator's operator buttons, the system should append the corresponding operator to the display screen. The operator buttons include addition ('+', data-testid='add-button'), subtraction ('-', data-testid='subtract-button'), multiplication ('ร', data-testid='multiply-button'), and division ('รท', data-testid='divide-button'). If the display is empty and an operator button is clicked, the operator should be shown on the display. If a number is already present on the display, the operator should be appended to the existing number. In cases where multiple operator buttons are clicked consecutively, only the last operator clicked should be displayed. The display should accurately reflect the user's input sequence, ensuring that the calculator's functionality aligns with standard arithmetic operations."
            },
            "test_cases": [
                {
                    "test_case": [
                        "Feature: Operator Button Functionality\n  The calculator should append the corresponding operator to the display screen when an operator button is clicked.\n\n\n  Scenario: [Normal] User clicks the addition operator button\n    Given the calculator page is loaded\n    And the display screen is empty\n    When the user clicks the addition button with data-testid \"add-button\"\n    Then the display should show \"+\"\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the calculator page is loaded')\ndef step_given_calculator_page_loaded(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)\n\n@given('the display screen is empty')\ndef step_given_display_screen_empty(context):\n    display = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='display']\"))\n    )\n    assert display.text == \"\", f\"Expected display to be empty, but got '{display.text}'\"\n    time.sleep(1)\n\n@when('the user clicks the addition button with data-testid \"add-button\"')\ndef step_when_user_clicks_addition_button(context):\n    add_button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='add-button']\"))\n    )\n    add_button.click()\n    time.sleep(1)\n\n@then('the display should show \"+\"')\ndef step_then_display_should_show_plus(context):\n    display = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='display']\"))\n    )\n    assert display.text == \"+\", f\"Expected display to show '+', but got '{display.text}'\"\n    time.sleep(1)\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: Operator Button Functionality\n  The calculator should append the corresponding operator to the display screen when an operator button is clicked.\n\n\n  Scenario: [Normal] User clicks the subtraction operator button\n    Given the calculator page is loaded\n    And the display screen is empty\n    When the user clicks the subtraction button with data-testid \"subtract-button\"\n    Then the display should show \"-\"\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the calculator page is loaded')\ndef step_given_calculator_page_loaded(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)\n\n@given('the display screen is empty')\ndef step_given_display_screen_empty(context):\n    display = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='display']\"))\n    )\n    assert display.text == \"\", \"Expected display to be empty\"\n    time.sleep(1)\n\n@when('the user clicks the subtraction button with data-testid \"subtract-button\"')\ndef step_when_user_clicks_subtraction_button(context):\n    subtract_button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='subtract-button']\"))\n    )\n    subtract_button.click()\n    time.sleep(1)\n\n@then('the display should show \"-\"')\ndef step_then_display_should_show_minus(context):\n    display = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='display']\"))\n    )\n    assert display.text.strip() == \"-\", f\"Expected display to show '-', but got '{display.text}'\"\n    time.sleep(1)\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: Operator Button Functionality\n  The calculator should append the corresponding operator to the display screen when an operator button is clicked.\n\n\n  Scenario: [Normal] User clicks the multiplication operator button\n    Given the calculator page is loaded\n    And the display screen is empty\n    When the user clicks the multiplication button with data-testid \"multiply-button\"\n    Then the display should show \"ร\" or \"*\"\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the calculator page is loaded')\ndef step_given_calculator_page_loaded(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)\n\n@given('the display screen is empty')\ndef step_given_display_screen_empty(context):\n    display = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='display']\"))\n    )\n    assert display.text == \"\", \"Display is not empty\"\n\n@when('the user clicks the multiplication button with data-testid \"multiply-button\"')\ndef step_when_user_clicks_multiplication_button(context):\n    multiply_button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='multiply-button']\"))\n    )\n    multiply_button.click()\n    time.sleep(1)\n\n@then('the display should show \"ร\" or \"*\"')\ndef step_then_display_should_show_multiplication(context):\n    display = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='display']\"))\n    )\n    assert \"ร\" in display.text or \"*\" in display.text, f\"Expected 'ร' or '*' in '{display.text}'\"\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: Operator Button Functionality\n  The calculator should append the corresponding operator to the display screen when an operator button is clicked.\n\n\nScenario: [Normal] User clicks the division operator button\n    Given the calculator page is loaded\n    And the display screen is empty\n    When the user clicks the division button with data-testid \"divide-button\"\n    Then the display should show \"รท\" or \"/\""
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the calculator page is loaded')\ndef step_given_calculator_page_loaded(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)\n\n@given('the display screen is empty')\ndef step_given_display_screen_empty(context):\n    display = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='display']\"))\n    )\n    assert display.text == \"\", f\"Expected display to be empty, but got '{display.text}'\"\n    time.sleep(1)\n\n@when('the user clicks the division button with data-testid \"divide-button\"')\ndef step_when_user_clicks_division_button(context):\n    divide_button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='divide-button']\"))\n    )\n    divide_button.click()\n    time.sleep(1)\n\n@then('the display should show \"รท\" or \"/\"')\ndef step_then_display_should_show_division(context):\n    display = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='display']\"))\n    )\n    display_text = display.text.strip()\n    assert display_text in [\"รท\", \"/\"], f\"Expected display to show 'รท' or '/', but got '{display_text}'\"\n    time.sleep(1)\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: Operator Button Functionality\n  The calculator should append the corresponding operator to the display screen when an operator button is clicked.\n\n\nScenario: [Edge] User clicks multiple operator buttons consecutively\n    Given the calculator page is loaded\n    And the display screen is empty\n    When the user clicks the addition button with data-testid \"add-button\"\n    And the user clicks the subtraction button with data-testid \"subtract-button\"\n    And the user clicks the multiplication button with data-testid \"multiply-button\"\n    And the user clicks the division button with data-testid \"divide-button\"\n    Then the display should show \"รท\" or \"/\""
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given(\"the calculator page is loaded\")\ndef step_given_calculator_page_loaded(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)\n\n@given(\"the display screen is empty\")\ndef step_given_display_screen_empty(context):\n    display = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='display']\"))\n    )\n    assert display.text.strip() == \"\", f\"Expected display to be empty, but got '{display.text}'\"\n    time.sleep(1)\n\n@when('the user clicks the addition button with data-testid \"add-button\"')\ndef step_when_user_clicks_addition_button(context):\n    add_button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='add-button']\"))\n    )\n    add_button.click()\n    time.sleep(1)\n\n@when('the user clicks the subtraction button with data-testid \"subtract-button\"')\ndef step_when_user_clicks_subtraction_button(context):\n    subtract_button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='subtract-button']\"))\n    )\n    subtract_button.click()\n    time.sleep(1)\n\n@when('the user clicks the multiplication button with data-testid \"multiply-button\"')\ndef step_when_user_clicks_multiplication_button(context):\n    multiply_button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='multiply-button']\"))\n    )\n    multiply_button.click()\n    time.sleep(1)\n\n@when('the user clicks the division button with data-testid \"divide-button\"')\ndef step_when_user_clicks_division_button(context):\n    divide_button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='divide-button']\"))\n    )\n    divide_button.click()\n    time.sleep(1)\n\n@then('the display should show \"รท\" or \"/\"')\ndef step_then_display_should_show_division(context):\n    display = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='display']\"))\n    )\n    display_text = display.text.strip()\n    assert display_text in [\"รท\", \"/\"], f\"Expected display to show 'รท' or '/', but got '{display_text}'\"\n    time.sleep(1)\n    context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: Operator Button Functionality\n  The calculator should append the corresponding operator to the display screen when an operator button is clicked.\n\n\n  Scenario: [Error] User clicks an operator button when the display already shows a number\n    Given the calculator page is loaded\n    And the display shows \"5\"\n    When the user clicks the addition button with data-testid \"add-button\"\n    Then the display should show \"5+\""
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given(\"the calculator page is loaded\")\ndef step_given_calculator_page_loaded(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)\n\n@given(\"the display shows \\\"5\\\"\")\ndef step_given_display_shows_5(context):\n    number_button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='number-5']\"))\n    )\n    number_button.click()\n    time.sleep(1)\n\n@when(\"the user clicks the addition button with data-testid \\\"add-button\\\"\")\ndef step_when_user_clicks_addition_button(context):\n    add_button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='add-button']\"))\n    )\n    add_button.click()\n    time.sleep(1)\n\n@then(\"the display should show \\\"5+\\\"\")\ndef step_then_display_should_show_5_plus(context):\n    display = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='display']\"))\n    )\n    expected_text = \"5+\"\n    assert expected_text in display.text, f\"Expected '{expected_text}' in '{display.text}'\"\n    time.sleep(1)\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                }
            ]
        },
        "3": {
            "requirement": {
                "description": "When the user clicks the clear button with the attribute data-testid='clear-button', the system must clear all content from the display screen identified by data-testid='display'. This functionality should work regardless of the current state of the display, ensuring that if the display is already empty, it remains empty after clicking the clear button."
            },
            "test_cases": [
                {
                    "test_case": [
                        "Feature: Clear Button Functionality\n  The purpose of this feature is to ensure that the clear button effectively removes all content from the display screen when clicked.\n\n\n  Scenario: [Normal] Clear button clears the display\n    Given the calculator webpage is loaded\n    And the display screen with data-testid \"display\" shows \"123+456\"\n    When the user clicks the clear button with data-testid \"clear-button\"\n    Then the display screen with data-testid \"display\" should show \"\"\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the calculator webpage is loaded')\ndef step_given_calculator_webpage_loaded(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)\n\n@given('the display screen with data-testid \"display\" shows \"123+456\"')\ndef step_given_display_shows_expression(context):\n    buttons = ['1', '2', '3', 'plus', '4', '5', '6']\n    for btn in buttons:\n        if btn == 'plus':\n            button = WebDriverWait(context.driver, 10).until(\n                EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='add-button']\"))\n            )\n        else:\n            button = WebDriverWait(context.driver, 10).until(\n                EC.element_to_be_clickable((By.CSS_SELECTOR, f\"[data-testid='number-{btn}']\"))\n            )\n        button.click()\n        time.sleep(0.5)\n\n@when('the user clicks the clear button with data-testid \"clear-button\"')\ndef step_when_user_clicks_clear_button(context):\n    clear_button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='clear-button']\"))\n    )\n    clear_button.click()\n    time.sleep(1)\n\n@then('the display screen with data-testid \"display\" should show \"\"')\ndef step_then_display_should_be_empty(context):\n    display = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='display']\"))\n    )\n    assert display.text == \"\", f\"Expected display to be empty, but got '{display.text}'\"\n    time.sleep(1)\n    context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: Clear Button Functionality\n  The purpose of this feature is to ensure that the clear button effectively removes all content from the display screen when clicked.\n\n\n  Scenario: [Edge] Clear button when display is already empty\n    Given the calculator webpage is loaded\n    And the display screen with data-testid \"display\" is empty\n    When the user clicks the clear button with data-testid \"clear-button\"\n    Then the display screen with data-testid \"display\" should still be empty\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the calculator webpage is loaded')\ndef step_given_calculator_webpage_loaded(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)\n\n@given('the display screen with data-testid \"display\" is empty')\ndef step_given_display_screen_empty(context):\n    display = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='display']\"))\n    )\n    assert display.text.strip() == \"\", f\"Expected display to be empty, but got '{display.text}'\"\n    time.sleep(1)\n\n@when('the user clicks the clear button with data-testid \"clear-button\"')\ndef step_when_user_clicks_clear_button(context):\n    clear_button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='clear-button']\"))\n    )\n    clear_button.click()\n    time.sleep(1)\n\n@then('the display screen with data-testid \"display\" should still be empty')\ndef step_then_display_screen_should_be_empty(context):\n    display = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='display']\"))\n    )\n    assert display.text.strip() == \"\", f\"Expected display to be empty, but got '{display.text}'\"\n    time.sleep(1)\n    context.driver.quit()"
                }
            ]
        },
        "4": {
            "requirement": {
                "description": "The calculator application must allow users to remove the last character from the display screen by clicking the backspace button. The backspace button is identified by the data-testid 'backspace-button'. When clicked, if the display (identified by data-testid 'display') contains characters, the last character should be removed. If the display is empty, clicking the backspace button should have no effect, and the display should remain empty. The system should handle repeated clicks on the backspace button, removing characters one by one until the display is empty. Additionally, if the user enters an invalid character sequence and clicks backspace, the last character of the sequence should be removed, leaving the remaining valid sequence intact."
            },
            "test_cases": [
                {
                    "test_case": [
                        "Feature: Backspace Functionality\n  The calculator should allow users to remove the last character from the display screen by clicking the backspace button.\n\n\n  Scenario: [Normal] User clicks backspace after entering a number\n    Given the calculator page is loaded\n    And the user enters \"123\" into the display using buttons with data-testid \"number-1\", \"number-2\", and \"number-3\"\n    When the user clicks the backspace button with data-testid \"backspace-button\"\n    Then the display with data-testid \"display\" should show \"12\"\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given(\"the calculator page is loaded\")\ndef step_given_calculator_page_loaded(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)\n\n@given('the user enters \"123\" into the display using buttons with data-testid \"number-1\", \"number-2\", and \"number-3\"')\ndef step_given_user_enters_123(context):\n    buttons = [\"number-1\", \"number-2\", \"number-3\"]\n    for button_id in buttons:\n        button = WebDriverWait(context.driver, 10).until(\n            EC.element_to_be_clickable((By.CSS_SELECTOR, f\"[data-testid='{button_id}']\"))\n        )\n        button.click()\n        time.sleep(1)\n\n@when('the user clicks the backspace button with data-testid \"backspace-button\"')\ndef step_when_user_clicks_backspace(context):\n    backspace_button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='backspace-button']\"))\n    )\n    backspace_button.click()\n    time.sleep(1)\n\n@then('the display with data-testid \"display\" should show \"12\"')\ndef step_then_display_should_show_12(context):\n    display = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='display']\"))\n    )\n    assert \"12\" in display.text.strip(), f\"Expected '12' in '{display.text}'\"\n    context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: Backspace Functionality\n  The calculator should allow users to remove the last character from the display screen by clicking the backspace button.\n\n\n  Scenario: [Edge] User clicks backspace when the display is empty\n    Given the calculator page is loaded\n    And the display with data-testid \"display\" is empty\n    When the user clicks the backspace button with data-testid \"backspace-button\"\n    Then the display with data-testid \"display\" should remain empty\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the calculator page is loaded')\ndef step_given_calculator_page_loaded(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)\n\n@given('the display with data-testid \"display\" is empty')\ndef step_given_display_is_empty(context):\n    display = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='display']\"))\n    )\n    assert display.text.strip() == \"\", f\"Expected display to be empty, but got '{display.text}'\"\n    time.sleep(1)\n\n@when('the user clicks the backspace button with data-testid \"backspace-button\"')\ndef step_when_user_clicks_backspace(context):\n    backspace_button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='backspace-button']\"))\n    )\n    backspace_button.click()\n    time.sleep(1)\n\n@then('the display with data-testid \"display\" should remain empty')\ndef step_then_display_should_remain_empty(context):\n    display = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='display']\"))\n    )\n    assert display.text.strip() == \"\", f\"Expected display to remain empty, but got '{display.text}'\"\n    time.sleep(1)\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: Backspace Functionality\n  The calculator should allow users to remove the last character from the display screen by clicking the backspace button.\n\n\n  Scenario: [Edge] User clicks backspace repeatedly until the display is empty\n    Given the calculator page is loaded\n    And the user enters \"456\" into the display using buttons with data-testid \"number-4\", \"number-5\", and \"number-6\"\n    When the user clicks the backspace button with data-testid \"backspace-button\" three times\n    Then the display with data-testid \"display\" should be empty\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given(\"the calculator page is loaded\")\ndef step_given_calculator_page_loaded(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)\n\n@given('the user enters \"456\" into the display using buttons with data-testid \"number-4\", \"number-5\", and \"number-6\"')\ndef step_given_user_enters_456(context):\n    buttons = [\"number-4\", \"number-5\", \"number-6\"]\n    for button_id in buttons:\n        button = WebDriverWait(context.driver, 10).until(\n            EC.element_to_be_clickable((By.CSS_SELECTOR, f\"[data-testid='{button_id}']\"))\n        )\n        button.click()\n        time.sleep(1)\n\n@when('the user clicks the backspace button with data-testid \"backspace-button\" three times')\ndef step_when_user_clicks_backspace(context):\n    backspace_button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='backspace-button']\"))\n    )\n    for _ in range(3):\n        backspace_button.click()\n        time.sleep(1)\n\n@then('the display with data-testid \"display\" should be empty')\ndef step_then_display_should_be_empty(context):\n    display = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='display']\"))\n    )\n    assert display.text.strip() == \"\", f\"Expected display to be empty, but got '{display.text}'\"\n    context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: Backspace Functionality\n  The calculator should allow users to remove the last character from the display screen by clicking the backspace button.\n\n\nScenario: [Error] User clicks backspace after entering an invalid character sequence\n    Given the calculator page is loaded\n    And the user enters \"5+9\" into the display using buttons with data-testid \"number-5\", \"add-button\", and \"number-9\"\n    When the user clicks the backspace button with data-testid \"backspace-button\"\n    Then the display with data-testid \"display\" should show \"5+\""
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the calculator page is loaded')\ndef step_given_calculator_page_loaded(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)\n\n@given('the user enters \"5+9\" into the display using buttons with data-testid \"number-5\", \"add-button\", and \"number-9\"')\ndef step_given_user_enters_expression(context):\n    driver = context.driver\n    WebDriverWait(driver, 10).until(EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='number-5']\"))).click()\n    time.sleep(1)\n    WebDriverWait(driver, 10).until(EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='add-button']\"))).click()\n    time.sleep(1)\n    WebDriverWait(driver, 10).until(EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='number-9']\"))).click()\n    time.sleep(1)\n\n@when('the user clicks the backspace button with data-testid \"backspace-button\"')\ndef step_when_user_clicks_backspace(context):\n    driver = context.driver\n    WebDriverWait(driver, 10).until(EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='backspace-button']\"))).click()\n    time.sleep(1)\n\n@then('the display with data-testid \"display\" should show \"5+\"')\ndef step_then_display_should_show(context):\n    driver = context.driver\n    display_element = WebDriverWait(driver, 10).until(EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='display']\")))\n    display_text = display_element.text.strip()\n    assert display_text == \"5+\", f\"Expected display to show '5+', but it showed '{display_text}'\"\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                }
            ]
        },
        "5": {
            "requirement": {
                "description": "The calculator application must allow users to input arithmetic expressions using buttons with specific data-testid attributes for numbers (e.g., 'number-0' to 'number-9'), operators (e.g., 'add-button', 'subtract-button', 'multiply-button', 'divide-button'), and parentheses ('open-parenthesis-button', 'close-parenthesis-button'). When the user clicks the equal button (data-testid 'equal-button'), the system should evaluate the expression displayed in the element with data-testid 'display'. If the expression is valid, the display should update with the calculated result. Special cases include handling division by zero, which should display 'Infinity', and clicking the equal button with an empty display, which should temporarily show 'Empty!' for 2 seconds before clearing. The application should also support toggling between dark and light themes using the theme toggle button (data-testid 'theme-toggler'), which affects the class of the calculator element."
            },
            "test_cases": [
                {
                    "test_case": [
                        "Feature: Evaluate arithmetic expressions\n  The calculator should evaluate valid arithmetic expressions when the equal button is clicked and display the result.\n\n\n  Scenario: [Normal] Evaluate a simple addition expression\n    Given the calculator page is loaded\n    And the user enters \"2\" by clicking the button with data-testid \"number-2\"\n    And the user enters \"+\" by clicking the button with data-testid \"add-button\"\n    And the user enters \"3\" by clicking the button with data-testid \"number-3\"\n    When the user clicks the equal button with data-testid \"equal-button\"\n    Then the display with data-testid \"display\" should show \"5\"\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\ndef load_test_page(context):\n    \"\"\"Helper function to load the test page.\"\"\"\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    context.driver.maximize_window()\n\ndef close_driver(context):\n    \"\"\"Helper function to close the browser driver.\"\"\"\n    if context.driver:\n        context.driver.quit()\n\n@given(\"the calculator page is loaded\")\ndef step_given_calculator_page_loaded(context):\n    load_test_page(context)\n\n@given('the user enters \"2\" by clicking the button with data-testid \"number-2\"')\ndef step_given_user_enters_2(context):\n    button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='number-2']\"))\n    )\n    button.click()\n    time.sleep(1)\n\n@given('the user enters \"+\" by clicking the button with data-testid \"add-button\"')\ndef step_given_user_enters_plus(context):\n    button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='add-button']\"))\n    )\n    button.click()\n    time.sleep(1)\n\n@given('the user enters \"3\" by clicking the button with data-testid \"number-3\"')\ndef step_given_user_enters_3(context):\n    button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='number-3']\"))\n    )\n    button.click()\n    time.sleep(1)\n\n@when('the user clicks the equal button with data-testid \"equal-button\"')\ndef step_when_user_clicks_equal(context):\n    button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='equal-button']\"))\n    )\n    button.click()\n    time.sleep(1)\n\n@then('the display with data-testid \"display\" should show \"5\"')\ndef step_then_display_should_show_5(context):\n    display = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='display']\"))\n    )\n    displayed_text = display.text.strip()\n    assert displayed_text == \"5\", f\"Expected '5', but got '{displayed_text}'\"\n\ndef after_scenario(context, scenario):\n    \"\"\"Ensure the browser driver is closed after each scenario.\"\"\"\n    close_driver(context)"
                },
                {
                    "test_case": [
                        "Feature: Evaluate arithmetic expressions\n  The calculator should evaluate valid arithmetic expressions when the equal button is clicked and display the result.\n\n\n  Scenario: [Normal] Evaluate a complex expression with multiple operations\n    Given the calculator page is loaded\n    And the user enters \"7\" by clicking the button with data-testid \"number-7\"\n    And the user enters \"*\" by clicking the button with data-testid \"multiply-button\"\n    And the user enters \"5\" by clicking the button with data-testid \"number-5\"\n    And the user enters \"-\" by clicking the button with data-testid \"subtract-button\"\n    And the user enters \"3\" by clicking the button with data-testid \"number-3\"\n    When the user clicks the equal button with data-testid \"equal-button\"\n    Then the display with data-testid \"display\" should show \"32\"\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the calculator page is loaded')\ndef step_given_calculator_page_loaded(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)  # Allow time for the page to load\n\n@given('the user enters \"{number}\" by clicking the button with data-testid \"{data_testid}\"')\ndef step_given_user_enters_number(context, number, data_testid):\n    button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, f\"[data-testid='{data_testid}']\"))\n    )\n    button.click()\n    time.sleep(1)\n\n@when('the user clicks the equal button with data-testid \"equal-button\"')\ndef step_when_user_clicks_equal_button(context):\n    equal_button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='equal-button']\"))\n    )\n    equal_button.click()\n    time.sleep(1)\n\n@then('the display with data-testid \"display\" should show \"{expected_result}\"')\ndef step_then_display_should_show(context, expected_result):\n    display = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='display']\"))\n    )\n    actual_result = display.text.strip()\n    assert expected_result == actual_result, f\"Expected '{expected_result}', but got '{actual_result}'\"\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: Evaluate arithmetic expressions\n  The calculator should evaluate valid arithmetic expressions when the equal button is clicked and display the result.\n\n\n  Scenario: [Edge] Evaluate an expression with parentheses\n    Given the calculator page is loaded\n    And the user enters \"(\" by clicking the button with data-testid \"open-parenthesis-button\"\n    And the user enters \"8\" by clicking the button with data-testid \"number-8\"\n    And the user enters \"+\" by clicking the button with data-testid \"add-button\"\n    And the user enters \"2\" by clicking the button with data-testid \"number-2\"\n    And the user enters \")\" by clicking the button with data-testid \"close-parenthesis-button\"\n    And the user enters \"*\" by clicking the button with data-testid \"multiply-button\"\n    And the user enters \"3\" by clicking the button with data-testid \"number-3\"\n    When the user clicks the equal button with data-testid \"equal-button\"\n    Then the display with data-testid \"display\" should show \"30\"\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the calculator page is loaded')\ndef step_given_calculator_page_loaded(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)\n\n@given('the user enters \"(\" by clicking the button with data-testid \"open-parenthesis-button\"')\ndef step_given_user_enters_open_parenthesis(context):\n    button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='open-parenthesis-button']\"))\n    )\n    button.click()\n    time.sleep(1)\n\n@given('the user enters \"8\" by clicking the button with data-testid \"number-8\"')\ndef step_given_user_enters_8(context):\n    button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='number-8']\"))\n    )\n    button.click()\n    time.sleep(1)\n\n@given('the user enters \"+\" by clicking the button with data-testid \"add-button\"')\ndef step_given_user_enters_add(context):\n    button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='add-button']\"))\n    )\n    button.click()\n    time.sleep(1)\n\n@given('the user enters \"2\" by clicking the button with data-testid \"number-2\"')\ndef step_given_user_enters_2(context):\n    button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='number-2']\"))\n    )\n    button.click()\n    time.sleep(1)\n\n@given('the user enters \")\" by clicking the button with data-testid \"close-parenthesis-button\"')\ndef step_given_user_enters_close_parenthesis(context):\n    button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='close-parenthesis-button']\"))\n    )\n    button.click()\n    time.sleep(1)\n\n@given('the user enters \"*\" by clicking the button with data-testid \"multiply-button\"')\ndef step_given_user_enters_multiply(context):\n    button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='multiply-button']\"))\n    )\n    button.click()\n    time.sleep(1)\n\n@given('the user enters \"3\" by clicking the button with data-testid \"number-3\"')\ndef step_given_user_enters_3(context):\n    button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='number-3']\"))\n    )\n    button.click()\n    time.sleep(1)\n\n@when('the user clicks the equal button with data-testid \"equal-button\"')\ndef step_when_user_clicks_equal(context):\n    button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='equal-button']\"))\n    )\n    button.click()\n    time.sleep(1)\n\n@then('the display with data-testid \"display\" should show \"30\"')\ndef step_then_display_should_show_30(context):\n    display = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='display']\"))\n    )\n    expected_text = \"30\"\n    assert expected_text in display.text, f\"Expected '{expected_text}' in '{display.text}'\"\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: Evaluate arithmetic expressions\n  The calculator should evaluate valid arithmetic expressions when the equal button is clicked and display the result.\n\n\n  Scenario: [Error] Evaluate an expression with division by zero\n    Given the calculator page is loaded\n    And the user enters \"9\" by clicking the button with data-testid \"number-9\"\n    And the user enters \"รท\" by clicking the button with data-testid \"divide-button\"\n    And the user enters \"0\" by clicking the button with data-testid \"number-0\"\n    When the user clicks the equal button with data-testid \"equal-button\"\n    Then the display with data-testid \"display\" should show \"Infinity\"\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the calculator page is loaded')\ndef step_given_calculator_page_loaded(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    context.driver.maximize_window()\n    time.sleep(1)\n\n@given('the user enters \"9\" by clicking the button with data-testid \"number-9\"')\ndef step_given_user_enters_9(context):\n    button_9 = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='number-9']\"))\n    )\n    button_9.click()\n    time.sleep(1)\n\n@given('the user enters \"รท\" by clicking the button with data-testid \"divide-button\"')\ndef step_given_user_enters_divide(context):\n    divide_button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='divide-button']\"))\n    )\n    divide_button.click()\n    time.sleep(1)\n\n@given('the user enters \"0\" by clicking the button with data-testid \"number-0\"')\ndef step_given_user_enters_0(context):\n    button_0 = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='number-0']\"))\n    )\n    button_0.click()\n    time.sleep(1)\n\n@when('the user clicks the equal button with data-testid \"equal-button\"')\ndef step_when_user_clicks_equal(context):\n    equal_button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='equal-button']\"))\n    )\n    equal_button.click()\n    time.sleep(1)\n\n@then('the display with data-testid \"display\" should show \"Infinity\"')\ndef step_then_display_should_show_infinity(context):\n    display = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='display']\"))\n    )\n    display_text = display.text.strip()\n    assert \"Infinity\" in display_text, f\"Expected 'Infinity' in display, but got '{display_text}'\"\n\n    # Close the browser after the test\n    context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: Evaluate arithmetic expressions\n  The calculator should evaluate valid arithmetic expressions when the equal button is clicked and display the result.\n\n\n  Scenario: [Error] Evaluate an expression with an empty display\n    Given the calculator page is loaded\n    When the user clicks the equal button with data-testid \"equal-button\"\n    Then the display with data-testid \"display\" should show \"Empty!\"\n    And after 2 seconds, the display with data-testid \"display\" should be empty"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given(\"the calculator page is loaded\")\ndef step_given_calculator_page_loaded(context):\n    # Initialize the WebDriver\n    context.driver = webdriver.Chrome()\n    # Load the test page\n    context.driver.get(f\"file://index.html\")\n    # Maximize the browser window\n    context.driver.maximize_window()\n    # Wait for the page to load completely\n    WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='display']\"))\n    )\n    time.sleep(1)\n\n@when('the user clicks the equal button with data-testid \"equal-button\"')\ndef step_when_user_clicks_equal_button(context):\n    # Locate the equal button using data-testid and click it\n    equal_button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='equal-button']\"))\n    )\n    equal_button.click()\n    time.sleep(1)\n\n@then('the display with data-testid \"display\" should show \"Empty!\"')\ndef step_then_display_shows_empty_message(context):\n    # Locate the display element and verify its text content\n    display = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='display']\"))\n    )\n    assert display.text.strip() == \"Empty!\", f\"Expected 'Empty!', but got '{display.text.strip()}'\"\n    time.sleep(1)\n\n@then('after 2 seconds, the display with data-testid \"display\" should be empty')\ndef step_then_display_is_empty_after_timeout(context):\n    # Wait for 2 seconds and verify the display is empty\n    time.sleep(2)\n    display = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='display']\"))\n    )\n    assert display.text.strip() == \"\", f\"Expected display to be empty, but got '{display.text.strip()}'\"\n\n# Teardown step to close the browser after the test\ndef after_scenario(context, scenario):\n    if hasattr(context, 'driver'):\n        context.driver.quit()"
                }
            ]
        },
        "7": {
            "requirement": {
                "description": "The web application must provide a theme toggle functionality for the calculator interface. Initially, the calculator is displayed in dark mode. The theme toggle button, identifiable by the attribute data-testid='theme-toggler', allows users to switch between dark and light themes. Upon clicking this button, the calculator element with the class 'calculator' should toggle the 'dark' class, effectively changing the theme. Additionally, the theme toggle button itself should toggle the 'active' class to reflect the current theme state. This interaction should be seamless and immediate, ensuring that users can easily switch themes without any delay or additional actions."
            },
            "test_cases": [
                {
                    "test_case": [
                        "Feature: Theme Toggle Functionality\n  The calculator should allow the user to switch between dark and light themes by clicking the theme toggle button. The initial theme is dark mode.\n\n\n  Scenario: [Normal] Switch from dark mode to light mode\n    Given the calculator is loaded with the initial theme set to dark mode\n      And the theme toggle button with data-testid \"theme-toggler\" is visible\n    When the user clicks the theme toggle button with data-testid \"theme-toggler\"\n    Then the calculator element with class \"calculator\" should not have the class \"dark\"\n      And the theme toggle button with data-testid \"theme-toggler\" should not have the class \"active\"\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\ndef is_dark_mode_active(driver):\n    calculator = driver.find_element(By.CSS_SELECTOR, \".calculator\")\n    return \"dark\" in calculator.get_attribute(\"class\").split()\n\n@given('the calculator is loaded with the initial theme set to dark mode')\ndef step_given_calculator_loaded_with_dark_mode(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)\n    assert is_dark_mode_active(context.driver), \"Calculator should be in dark mode initially\"\n\n@given('the theme toggle button with data-testid \"theme-toggler\" is visible')\ndef step_given_theme_toggle_button_visible(context):\n    theme_toggle_btn = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='theme-toggler']\"))\n    )\n    assert theme_toggle_btn.is_displayed(), \"Theme toggle button should be visible\"\n\n@when('the user clicks the theme toggle button with data-testid \"theme-toggler\"')\ndef step_when_user_clicks_theme_toggle_button(context):\n    theme_toggle_btn = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='theme-toggler']\")\n    theme_toggle_btn.click()\n    time.sleep(1)\n\n@then('the calculator element with class \"calculator\" should not have the class \"dark\"')\ndef step_then_calculator_should_not_have_dark_class(context):\n    calculator = context.driver.find_element(By.CSS_SELECTOR, \".calculator\")\n    assert \"dark\" not in calculator.get_attribute(\"class\").split(), \"Calculator should not have 'dark' class\"\n\n@then('the theme toggle button with data-testid \"theme-toggler\" should not have the class \"active\"')\ndef step_then_theme_toggle_button_should_not_have_active_class(context):\n    theme_toggle_btn = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='theme-toggler']\")\n    assert \"active\" not in theme_toggle_btn.get_attribute(\"class\").split(), \"Theme toggle button should not have 'active' class\"\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                }
            ]
        }
    }
}