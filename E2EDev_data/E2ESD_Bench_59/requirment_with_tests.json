{
    "summary": {
        "overview": "The Quiz App is a web application that presents users with a series of multiple-choice questions. Users can select one answer per question and submit their choice. The application provides immediate feedback on the user's performance after all questions are answered.",
        "predefined_options": "The application uses a predefined set of questions and answers stored in a JavaScript array. Each question has four possible answers, and one correct answer is specified.",
        "external_resources": "No external resources such as links, images, or audio files are used in the provided code.",
        "external_js_libraries": "No external JavaScript libraries are used in the provided code."
    },
    "finegrained_rewith_test": {
        "1": {
            "requirement": {
                "description": "Upon loading the Quiz App webpage, the system must automatically display the first question from the predefined quiz data within the element identified by data-testid 'question'. The question text should be visible to the user. Additionally, four radio buttons, each associated with a unique answer option, must be presented. These radio buttons should have the following attributes: data-testid 'answer-a', 'answer-b', 'answer-c', and 'answer-d', and must be initially unchecked. Corresponding labels for each radio button, identified by data-testid 'answer-a-text', 'answer-b-text', 'answer-c-text', and 'answer-d-text', should display the respective answer options. No radio button should be pre-selected when the page loads, ensuring the user can make an unbiased choice."
            },
            "test_cases": [
                {
                    "test_case": [
                        "Feature: Display First Question and Answer Options on Page Load\n  The system must display the first question and its corresponding answer options from the predefined quiz data when the page loads.\n\n\n  Scenario: [Normal] Display first question and answer options on page load\n    Given the user opens the Quiz App webpage\n    When the page is fully loaded\n    Then the question element with data-testid \"question\" should display the text \"Which language runs in a web browser?\"\n    And the radio button with data-testid \"answer-a\" should be present and unchecked\n    And the label with data-testid \"answer-a-text\" should display the text \"Java\"\n    And the radio button with data-testid \"answer-b\" should be present and unchecked\n    And the label with data-testid \"answer-b-text\" should display the text \"C\"\n    And the radio button with data-testid \"answer-c\" should be present and unchecked\n    And the label with data-testid \"answer-c-text\" should display the text \"Python\"\n    And the radio button with data-testid \"answer-d\" should be present and unchecked\n    And the label with data-testid \"answer-d-text\" should display the text \"JavaScript\"\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the user opens the Quiz App webpage')\ndef step_given_user_opens_quiz_app(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)\n\n@when('the page is fully loaded')\ndef step_when_page_fully_loaded(context):\n    WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='question']\"))\n    )\n    time.sleep(1)\n\n@then('the question element with data-testid \"question\" should display the text \"Which language runs in a web browser?\"')\ndef step_then_question_displayed(context):\n    question_element = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='question']\")\n    expected_text = \"Which language runs in a web browser?\"\n    assert expected_text.lower() in question_element.text.lower(), f\"Expected '{expected_text}' in '{question_element.text}'\"\n    time.sleep(1)\n\n@then('the radio button with data-testid \"answer-a\" should be present and unchecked')\ndef step_then_radio_a_present_unchecked(context):\n    answer_a = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='answer-a']\")\n    assert not answer_a.is_selected(), \"Radio button 'answer-a' should be unchecked\"\n    time.sleep(1)\n\n@then('the label with data-testid \"answer-a-text\" should display the text \"Java\"')\ndef step_then_label_a_text(context):\n    label_a_text = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='answer-a-text']\")\n    expected_text = \"Java\"\n    assert expected_text.lower() in label_a_text.text.lower(), f\"Expected '{expected_text}' in '{label_a_text.text}'\"\n    time.sleep(1)\n\n@then('the radio button with data-testid \"answer-b\" should be present and unchecked')\ndef step_then_radio_b_present_unchecked(context):\n    answer_b = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='answer-b']\")\n    assert not answer_b.is_selected(), \"Radio button 'answer-b' should be unchecked\"\n    time.sleep(1)\n\n@then('the label with data-testid \"answer-b-text\" should display the text \"C\"')\ndef step_then_label_b_text(context):\n    label_b_text = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='answer-b-text']\")\n    expected_text = \"C\"\n    assert expected_text.lower() in label_b_text.text.lower(), f\"Expected '{expected_text}' in '{label_b_text.text}'\"\n    time.sleep(1)\n\n@then('the radio button with data-testid \"answer-c\" should be present and unchecked')\ndef step_then_radio_c_present_unchecked(context):\n    answer_c = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='answer-c']\")\n    assert not answer_c.is_selected(), \"Radio button 'answer-c' should be unchecked\"\n    time.sleep(1)\n\n@then('the label with data-testid \"answer-c-text\" should display the text \"Python\"')\ndef step_then_label_c_text(context):\n    label_c_text = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='answer-c-text']\")\n    expected_text = \"Python\"\n    assert expected_text.lower() in label_c_text.text.lower(), f\"Expected '{expected_text}' in '{label_c_text.text}'\"\n    time.sleep(1)\n\n@then('the radio button with data-testid \"answer-d\" should be present and unchecked')\ndef step_then_radio_d_present_unchecked(context):\n    answer_d = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='answer-d']\")\n    assert not answer_d.is_selected(), \"Radio button 'answer-d' should be unchecked\"\n    time.sleep(1)\n\n@then('the label with data-testid \"answer-d-text\" should display the text \"JavaScript\"')\ndef step_then_label_d_text(context):\n    label_d_text = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='answer-d-text']\")\n    expected_text = \"JavaScript\"\n    assert expected_text.lower() in label_d_text.text.lower(), f\"Expected '{expected_text}' in '{label_d_text.text}'\"\n    time.sleep(1)\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: Display First Question and Answer Options on Page Load\n  The system must display the first question and its corresponding answer options from the predefined quiz data when the page loads.\n\n\n  Scenario: [Edge] Verify no answer is pre-selected on page load\n    Given the user opens the Quiz App webpage\n    When the page is fully loaded\n    Then none of the radio buttons with data-testid \"answer-a\", \"answer-b\", \"answer-c\", or \"answer-d\" should be checked\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the user opens the Quiz App webpage')\ndef step_given_user_opens_quiz_app(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)\n\n@when('the page is fully loaded')\ndef step_when_page_fully_loaded(context):\n    # Wait for the quiz container to be visible\n    WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='quiz']\"))\n    )\n    time.sleep(1)\n\n@then('none of the radio buttons with data-testid \"answer-a\", \"answer-b\", \"answer-c\", or \"answer-d\" should be checked')\ndef step_then_no_radio_buttons_checked(context):\n    # Check each radio button to ensure it is not selected\n    answer_ids = [\"answer-a\", \"answer-b\", \"answer-c\", \"answer-d\"]\n    for answer_id in answer_ids:\n        radio_button = context.driver.find_element(By.CSS_SELECTOR, f\"[data-testid='{answer_id}']\")\n        assert not radio_button.is_selected(), f\"Radio button {answer_id} should not be selected\"\n    time.sleep(1)\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                }
            ]
        },
        "2": {
            "requirement": {
                "description": "The quiz application must allow users to select one answer option per question by interacting with radio buttons, ensuring mutual exclusivity among the options. The UI must include radio buttons with specific data-testid attributes ('answer-a', 'answer-b', 'answer-c', 'answer-d') within the quiz container (data-testid='quiz'). Upon page load, all answer options should be deselected. When a user clicks on a radio button, it should become selected, and all other radio buttons should remain deselected, even if clicked rapidly or repeatedly. The selected answer can be submitted using the submit button (data-testid='submit-button'), which triggers the evaluation of the answer and updates the score. The system should handle edge cases such as rapid clicks or re-selection of the same option without compromising the exclusivity of the selection. After answering all questions, the quiz container should display the user's score and provide a 'Play Again' button (data-testid='play-again-button') to restart the quiz."
            },
            "test_cases": [
                {
                    "test_case": [
                        "Feature: Ensure mutual exclusivity of answer selection in the quiz\n  The user can select one answer option by clicking on a radio button. The system must allow only one radio button to be selected at a time, ensuring mutual exclusivity among the options.\n\n\n  Scenario: [Normal] User selects one answer option\n    Given the quiz page is loaded with the first question displayed\n    And all answer options are deselected\n    When the user clicks on the radio button with data-testid \"answer-a\"\n    Then the radio button with data-testid \"answer-a\" is selected\n    And the radio buttons with data-testid \"answer-b\", \"answer-c\", and \"answer-d\" remain deselected\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\n\n# Placeholder for the file path to dynamically load the test page\nfile_path = \"index.html\"\n\n@given(u'the quiz page is loaded with the first question displayed')\ndef step_impl(context):\n    # Initialize the Selenium WebDriver\n    context.driver = webdriver.Chrome()\n    # Navigate to the test page\n    context.driver.get(f\"file://index.html\")\n    # Verify the first question is displayed\n    question_element = context.driver.find_element(By.CSS_SELECTOR, '[data-testid=\"question\"]')\n    assert question_element.is_displayed(), \"The first question is not displayed.\"\n\n@given(u'all answer options are deselected')\ndef step_impl(context):\n    # Ensure all radio buttons are deselected\n    answer_elements = context.driver.find_elements(By.CSS_SELECTOR, '.answer')\n    for answer in answer_elements:\n        assert not answer.is_selected(), f\"Radio button with id {answer.get_attribute('id')} is selected.\"\n\n@when(u'the user clicks on the radio button with data-testid \"answer-a\"')\ndef step_impl(context):\n    # Click on the radio button with data-testid \"answer-a\"\n    answer_a = context.driver.find_element(By.CSS_SELECTOR, '[data-testid=\"answer-a\"]')\n    answer_a.click()\n\n@then(u'the radio button with data-testid \"answer-a\" is selected')\ndef step_impl(context):\n    # Verify the radio button with data-testid \"answer-a\" is selected\n    answer_a = context.driver.find_element(By.CSS_SELECTOR, '[data-testid=\"answer-a\"]')\n    assert answer_a.is_selected(), \"The radio button with data-testid 'answer-a' is not selected.\"\n\n@then(u'the radio buttons with data-testid \"answer-b\", \"answer-c\", and \"answer-d\" remain deselected')\ndef step_impl(context):\n    # Verify the other radio buttons remain deselected\n    answer_b = context.driver.find_element(By.CSS_SELECTOR, '[data-testid=\"answer-b\"]')\n    answer_c = context.driver.find_element(By.CSS_SELECTOR, '[data-testid=\"answer-c\"]')\n    answer_d = context.driver.find_element(By.CSS_SELECTOR, '[data-testid=\"answer-d\"]')\n    assert not answer_b.is_selected(), \"The radio button with data-testid 'answer-b' is selected.\"\n    assert not answer_c.is_selected(), \"The radio button with data-testid 'answer-c' is selected.\"\n    assert not answer_d.is_selected(), \"The radio button with data-testid 'answer-d' is selected.\"\n\n# Ensure the browser driver is closed at the end of the test\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: Ensure mutual exclusivity of answer selection in the quiz\n  The user can select one answer option by clicking on a radio button. The system must allow only one radio button to be selected at a time, ensuring mutual exclusivity among the options.\n\n\n  Scenario: [Edge] User changes selection to another answer option\n    Given the quiz page is loaded with the first question displayed\n    And the radio button with data-testid \"answer-a\" is selected\n    When the user clicks on the radio button with data-testid \"answer-c\"\n    Then the radio button with data-testid \"answer-c\" is selected\n    And the radio buttons with data-testid \"answer-a\", \"answer-b\", and \"answer-d\" remain deselected\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the quiz page is loaded with the first question displayed')\ndef step_given_quiz_page_loaded(context):\n    # Initialize the WebDriver and load the test page\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    context.driver.maximize_window()\n    \n    # Wait for the quiz container to be visible\n    WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='quiz']\"))\n    )\n    # Ensure the first question is displayed\n    question_element = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='question']\")\n    assert question_element.is_displayed(), \"The first question is not displayed.\"\n    time.sleep(1)\n\n@given('the radio button with data-testid \"answer-a\" is selected')\ndef step_given_radio_button_a_selected(context):\n    # Select the radio button with data-testid \"answer-a\"\n    answer_a = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='answer-a']\")\n    WebDriverWait(context.driver, 10).until(EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='answer-a']\")))\n    answer_a.click()\n    time.sleep(1)\n    # Verify that the radio button is selected\n    assert answer_a.is_selected(), \"The radio button with data-testid 'answer-a' is not selected.\"\n\n@when('the user clicks on the radio button with data-testid \"answer-c\"')\ndef step_when_user_clicks_radio_button_c(context):\n    # Click the radio button with data-testid \"answer-c\"\n    answer_c = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='answer-c']\")\n    WebDriverWait(context.driver, 10).until(EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='answer-c']\")))\n    answer_c.click()\n    time.sleep(1)\n\n@then('the radio button with data-testid \"answer-c\" is selected')\ndef step_then_radio_button_c_selected(context):\n    # Verify that the radio button with data-testid \"answer-c\" is selected\n    answer_c = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='answer-c']\")\n    assert answer_c.is_selected(), \"The radio button with data-testid 'answer-c' is not selected.\"\n\n@then('the radio buttons with data-testid \"answer-a\", \"answer-b\", and \"answer-d\" remain deselected')\ndef step_then_other_radio_buttons_deselected(context):\n    # Verify that the other radio buttons are not selected\n    answer_a = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='answer-a']\")\n    answer_b = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='answer-b']\")\n    answer_d = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='answer-d']\")\n    \n    assert not answer_a.is_selected(), \"The radio button with data-testid 'answer-a' is still selected.\"\n    assert not answer_b.is_selected(), \"The radio button with data-testid 'answer-b' is still selected.\"\n    assert not answer_d.is_selected(), \"The radio button with data-testid 'answer-d' is still selected.\"\n\n# Hook for cleanup after each scenario\ndef after_scenario(context, scenario):\n    # Close the browser driver\n    if hasattr(context, 'driver'):\n        context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: Ensure mutual exclusivity of answer selection in the quiz\n  The user can select one answer option by clicking on a radio button. The system must allow only one radio button to be selected at a time, ensuring mutual exclusivity among the options.\n\n\n  Scenario: [Error] User clicks on multiple radio buttons rapidly\n    Given the quiz page is loaded with the first question displayed\n    And all answer options are deselected\n    When the user clicks on the radio button with data-testid \"answer-b\"\n    And immediately clicks on the radio button with data-testid \"answer-d\"\n    Then the radio button with data-testid \"answer-d\" is selected\n    And the radio buttons with data-testid \"answer-a\", \"answer-b\", and \"answer-c\" remain deselected\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the quiz page is loaded with the first question displayed')\ndef step_given_quiz_page_loaded(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='question']\"))\n    )\n    time.sleep(1)\n\n@given('all answer options are deselected')\ndef step_given_all_answers_deselected(context):\n    answer_elements = context.driver.find_elements(By.CSS_SELECTOR, \".answer\")\n    for answer in answer_elements:\n        if answer.is_selected():\n            answer.click()\n    time.sleep(1)\n\n@when('the user clicks on the radio button with data-testid \"answer-b\"')\ndef step_when_click_answer_b(context):\n    answer_b = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='answer-b']\")\n    WebDriverWait(context.driver, 10).until(EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='answer-b']\")))\n    answer_b.click()\n    time.sleep(1)\n\n@when('immediately clicks on the radio button with data-testid \"answer-d\"')\ndef step_when_click_answer_d(context):\n    answer_d = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='answer-d']\")\n    WebDriverWait(context.driver, 10).until(EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='answer-d']\")))\n    answer_d.click()\n    time.sleep(1)\n\n@then('the radio button with data-testid \"answer-d\" is selected')\ndef step_then_answer_d_selected(context):\n    answer_d = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='answer-d']\")\n    assert answer_d.is_selected(), \"Radio button 'answer-d' should be selected\"\n    time.sleep(1)\n\n@then('the radio buttons with data-testid \"answer-a\", \"answer-b\", and \"answer-c\" remain deselected')\ndef step_then_other_answers_deselected(context):\n    answer_a = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='answer-a']\")\n    answer_b = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='answer-b']\")\n    answer_c = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='answer-c']\")\n    \n    assert not answer_a.is_selected(), \"Radio button 'answer-a' should be deselected\"\n    assert not answer_b.is_selected(), \"Radio button 'answer-b' should be deselected\"\n    assert not answer_c.is_selected(), \"Radio button 'answer-c' should be deselected\"\n    time.sleep(1)\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: Ensure mutual exclusivity of answer selection in the quiz\n  The user can select one answer option by clicking on a radio button. The system must allow only one radio button to be selected at a time, ensuring mutual exclusivity among the options.\n\n\n  Scenario: [Edge] User clicks on an already selected radio button\n    Given the quiz page is loaded with the first question displayed\n    And the radio button with data-testid \"answer-a\" is selected\n    When the user clicks again on the radio button with data-testid \"answer-a\"\n    Then the radio button with data-testid \"answer-a\" remains selected\n    And the radio buttons with data-testid \"answer-b\", \"answer-c\", and \"answer-d\" remain deselected\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the quiz page is loaded with the first question displayed')\ndef step_given_quiz_page_loaded(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='question']\"))\n    )\n    time.sleep(1)\n\n@given('the radio button with data-testid \"answer-a\" is selected')\ndef step_given_radio_button_a_selected(context):\n    answer_a = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='answer-a']\"))\n    )\n    answer_a.click()\n    time.sleep(1)\n\n@when('the user clicks again on the radio button with data-testid \"answer-a\"')\ndef step_when_user_clicks_radio_button_a_again(context):\n    answer_a = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='answer-a']\"))\n    )\n    answer_a.click()\n    time.sleep(1)\n\n@then('the radio button with data-testid \"answer-a\" remains selected')\ndef step_then_radio_button_a_remains_selected(context):\n    answer_a = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='answer-a']\")\n    assert answer_a.is_selected(), \"Radio button 'answer-a' should remain selected\"\n\n@then('the radio buttons with data-testid \"answer-b\", \"answer-c\", and \"answer-d\" remain deselected')\ndef step_then_other_radio_buttons_remain_deselected(context):\n    answer_b = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='answer-b']\")\n    answer_c = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='answer-c']\")\n    answer_d = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='answer-d']\")\n    \n    assert not answer_b.is_selected(), \"Radio button 'answer-b' should remain deselected\"\n    assert not answer_c.is_selected(), \"Radio button 'answer-c' should remain deselected\"\n    assert not answer_d.is_selected(), \"Radio button 'answer-d' should remain deselected\"\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                }
            ]
        },
        "4": {
            "requirement": {
                "description": "When the user clicks the 'Submit' button (identified by data-testid 'submit-button'), the system must evaluate the currently selected answer (if any) and proceed as follows: 1) If no answer is selected, the system must not proceed to the next question, and the current question and its answer options remain displayed without any changes. 2) If an answer is selected, the system evaluates whether the selected answer is correct or incorrect. If there are remaining questions, the system must load the next question and update the UI to display the new question text (via the element with data-testid 'question') and its corresponding answer options (via elements with data-testid 'answer-a-text', 'answer-b-text', 'answer-c-text', and 'answer-d-text'). All previously selected answers must be deselected before displaying the new question. 3) If there are no remaining questions, the system must display a final score message in the quiz container (identified by data-testid 'quiz') in the format 'You answered X/Y questions correctly', where X is the number of correct answers and Y is the total number of questions. Additionally, a 'Play Again' button (identified by data-testid 'play-again-button') must be displayed, which reloads the page when clicked. The system must ensure that all interactions and updates are reflected in the DOM as specified, and no unintended behavior occurs when no answer is selected or when the quiz ends."
            },
            "test_cases": [
                {
                    "test_case": [
                        "Feature: Evaluate selected answer and load next question\n  The system must evaluate the selected answer upon clicking the 'Submit' button and load the next question with its answer options if there are remaining questions.\n\n\n  Scenario: [Normal] User submits a correct answer and proceeds to the next question\n    Given the quiz page is loaded with the first question displayed\n    And the user selects the correct answer \"JavaScript\" using the radio button with data-testid \"answer-d\"\n    When the user clicks the 'Submit' button with data-testid \"submit-button\"\n    Then the system evaluates the answer is selected\n    And the next question \"What does CSS stand for?\" is displayed with answer options\n    And the user can select an answer\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\ndef is_visible(element):\n    return element.is_displayed()\n\n@given('the quiz page is loaded with the first question displayed')\ndef step_given_quiz_page_loaded(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='question']\"))\n    )\n    time.sleep(1)\n\n@given('the user selects the correct answer \"JavaScript\" using the radio button with data-testid \"answer-d\"')\ndef step_given_select_correct_answer(context):\n    answer_d = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='answer-d']\"))\n    )\n    answer_d.click()\n    time.sleep(0.5)\n\n@when('the user clicks the \\'Submit\\' button with data-testid \"submit-button\"')\ndef step_when_click_submit_button(context):\n    submit_button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='submit-button']\"))\n    )\n    submit_button.click()\n    time.sleep(0.5)\n\n@then('the system evaluates the answer is selected')\ndef step_then_evaluate_answer_correct(context):\n    pass\n\n@then('the next question \"What does CSS stand for?\" is displayed with answer options')\ndef step_then_next_question_displayed(context):\n    question_element = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='question']\"))\n    )\n    assert \"What does CSS stand for?\" in question_element.text, \"The next question is not displayed\"\n\n@then('the user can select an answer')\ndef step_then_user_can_select_answer(context):\n    answer_elements = context.driver.find_elements(By.CSS_SELECTOR, \".answer\")\n    assert all(answer.is_enabled() for answer in answer_elements), \"Not all answer options are selectable\"\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: Evaluate selected answer and load next question\n  The system must evaluate the selected answer upon clicking the 'Submit' button and load the next question with its answer options if there are remaining questions.\n\n\n  Scenario: [Edge] User submits without selecting an answer\n    Given the quiz page is loaded with the first question displayed\n    And no answer is selected\n    When the user clicks the 'Submit' button with data-testid \"submit-button\"\n    Then the system does not proceed to the next question\n    And the current question \"Which language runs in a web browser?\" remains displayed\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\ndef is_visible(element):\n    return element.is_displayed()\n\n@given('the quiz page is loaded with the first question displayed')\ndef step_given_quiz_page_loaded(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='question']\"))\n    )\n    time.sleep(1)\n\n@given('no answer is selected')\ndef step_given_no_answer_selected(context):\n    answer_elements = context.driver.find_elements(By.CSS_SELECTOR, \".answer\")\n    for answer in answer_elements:\n        assert not answer.is_selected(), \"Expected no answer to be selected\"\n    time.sleep(1)\n\n@when('the user clicks the \\'Submit\\' button with data-testid \"submit-button\"')\ndef step_when_user_clicks_submit(context):\n    submit_button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='submit-button']\"))\n    )\n    submit_button.click()\n    time.sleep(1)\n\n@then('the system does not proceed to the next question')\ndef step_then_system_does_not_proceed(context):\n    current_question = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='question']\")\n    assert \"Which language runs in a web browser?\" in current_question.text, \"Expected the current question to remain the same\"\n    time.sleep(1)\n\n@then('the current question \"Which language runs in a web browser?\" remains displayed')\ndef step_then_current_question_remains_displayed(context):\n    current_question = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='question']\")\n    assert \"Which language runs in a web browser?\" in current_question.text, \"Expected the current question to remain displayed\"\n    time.sleep(1)\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: Evaluate selected answer and load next question\n  The system must evaluate the selected answer upon clicking the 'Submit' button and load the next question with its answer options if there are remaining questions.\n\n\n  Scenario: [Error] User submits an answer when no questions are left\n    Given the quiz page is loaded with the last question \"What year was JavaScript launched?\"\n    And the user selects the correct answer \"1995\" using the radio button with data-testid \"answer-b\"\n    When the user clicks the 'Submit' button with data-testid \"submit-button\"\n    Then the quiz with data-testid \"quiz\" displays the final score message \"You answered X/4 questions correctly\"\n    And a 'Play Again' button with data-testid \"play-again-button\" is displayed"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\ndef is_expanded(element):\n    aria = element.get_attribute(\"aria-expanded\")\n    if aria is not None:\n        return aria == \"true\"\n\n    class_list = element.get_attribute(\"class\").split()\n    if any(cls in class_list for cls in [\"expanded\", \"open\", \"show\"]):\n        return True\n\n    data_expanded = element.get_attribute(\"data-expanded\")\n    if data_expanded is not None:\n        return data_expanded == \"true\"\n\n    return element.is_displayed()\n\ndef is_collapsed(element):\n    aria = element.get_attribute(\"aria-expanded\")\n    if aria is not None and aria.lower() == \"false\":\n        return True\n\n    class_attr = element.get_attribute(\"class\") or \"\"\n    class_list = class_attr.split()\n    if \"collapsed\" in class_list:\n        return True\n\n    data_expanded = element.get_attribute(\"data-expanded\")\n    if data_expanded is not None and data_expanded.lower() == \"false\":\n        return True\n\n    style = element.get_attribute(\"style\") or \"\"\n    if \"display: none\" in style or \"visibility: hidden\" in style or \"height: 0\" in style:\n        return True\n\n    return not element.is_displayed()\n\n@given('the quiz page is loaded with the last question \"What year was JavaScript launched?\"')\ndef step_given_quiz_page_loaded_with_last_question(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)\n    for i in range(3):\n        answer_b = WebDriverWait(context.driver, 10).until(\n            EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='answer-b']\"))\n        )\n        answer_b.click()\n        time.sleep(0.2)\n        submit_button = WebDriverWait(context.driver, 10).until(\n            EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='submit-button']\"))\n        )\n        submit_button.click()\n        time.sleep(0.2)\n    WebDriverWait(context.driver, 10).until(\n        EC.text_to_be_present_in_element((By.CSS_SELECTOR, \"[data-testid='question']\"), \"What year was JavaScript launched?\")\n    )\n\n@given('the user selects the correct answer \"1995\" using the radio button with data-testid \"answer-b\"')\ndef step_given_user_selects_correct_answer(context):\n    answer_b = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='answer-b']\"))\n    )\n    answer_b.click()\n    time.sleep(0.5)\n\n@when('the user clicks the \\'Submit\\' button with data-testid \"submit-button\"')\ndef step_when_user_clicks_submit_button(context):\n    submit_button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='submit-button']\"))\n    )\n    submit_button.click()\n    time.sleep(1)\n\n\n@then('the quiz with data-testid \"quiz\" displays the final score message \"You answered X/4 questions correctly\"')\ndef step_then_quiz_displays_final_score_message(context):\n    final_score_message = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='quiz']\"))\n    )\n    assert \"you answered\" in final_score_message.text.lower(), f\"Expected 'You answered' in '{final_score_message.text}'\"\n    time.sleep(1)\n\n@then('a \\'Play Again\\' button with data-testid \"play-again-button\" is displayed')\ndef step_then_play_again_button_is_displayed(context):\n    play_again_button = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='play-again-button']\"))\n    )\n    assert play_again_button.is_displayed(), \"Expected 'Play Again' button to be displayed\"\n    time.sleep(1)\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                }
            ]
        },
        "5": {
            "requirement": {
                "description": "Upon completing all questions in the quiz, the system must dynamically update the DOM to display the user's total score in the format 'You answered X/Y questions correctly', where X is the number of correct answers and Y is the total number of questions. This message should be inserted into the element with data-testid 'quiz'. Additionally, a 'Play Again' button with data-testid 'play-again-button' must be rendered below the score message. This button should be configured to reload the page when clicked, effectively restarting the quiz. The system must ensure that all radio buttons with the class 'answer' are deselected at the start of each new quiz session, and the first question is displayed with its corresponding answer options. The submit button with data-testid 'submit-button' should be used to progress through the quiz, checking the selected answer against the correct answer stored in the quizData array. The system must handle both correct and incorrect answers, updating the score accordingly and ensuring the quiz progresses until all questions are answered."
            },
            "test_cases": [
                {
                    "test_case": [
                        "Feature: Display total score and allow quiz restart after answering all questions\n  The system must display the user's total score and a 'Play Again' button after all questions are answered. The user can see a summary of their performance and restart the quiz by clicking the button.\n\n\n  Scenario: [Normal] User completes the quiz and sees the total score\n    Given the quiz page is loaded with the first question displayed\n    When the user selects the correct answer for each question and clicks the submit button with data-testid \"submit-button\"\n    Then the quiz should display \"You answered 4/4 questions correctly\" with a 'Play Again' button having data-testid \"play-again-button\"\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the quiz page is loaded with the first question displayed')\ndef step_given_quiz_page_loaded(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='question']\"))\n    )\n    time.sleep(1)\n\n@when('the user selects the correct answer for each question and clicks the submit button with data-testid \"submit-button\"')\ndef step_when_user_selects_correct_answers(context):\n    quiz_data = [\n        {\"correct\": \"d\"},\n        {\"correct\": \"b\"},\n        {\"correct\": \"a\"},\n        {\"correct\": \"b\"}\n    ]\n\n    for question in quiz_data:\n        correct_answer_id = question[\"correct\"]\n        answer_selector = f\"[data-testid='answer-{correct_answer_id}']\"\n        WebDriverWait(context.driver, 10).until(\n            EC.element_to_be_clickable((By.CSS_SELECTOR, answer_selector))\n        ).click()\n        time.sleep(1)\n\n        submit_button = WebDriverWait(context.driver, 10).until(\n            EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='submit-button']\"))\n        )\n        submit_button.click()\n        time.sleep(1)\n\n@then('the quiz should display \"You answered 4/4 questions correctly\" with a \\'Play Again\\' button having data-testid \"play-again-button\"')\ndef step_then_display_score_and_play_again(context):\n    result_text = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"h2\"))\n    ).text\n    expected_text = \"You answered 4/4 questions correctly\"\n    assert expected_text in result_text, f\"Expected '{expected_text}' in '{result_text}'\"\n\n    play_again_button = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='play-again-button']\"))\n    )\n    assert play_again_button.is_displayed(), \"Play Again button is not displayed\"\n\n    context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: Display total score and allow quiz restart after answering all questions\n  The system must display the user's total score and a 'Play Again' button after all questions are answered. The user can see a summary of their performance and restart the quiz by clicking the button.\n\n\n  Scenario: [Edge] User completes the quiz with some incorrect answers\n    Given the quiz page is loaded with the first question displayed\n    When the user selects incorrect answers for some questions and clicks the submit button with data-testid \"submit-button\"\n    Then the quiz should display \"You answered 1/4 questions correctly\" with a 'Play Again' button having data-testid \"play-again-button\"\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the quiz page is loaded with the first question displayed')\ndef step_given_quiz_page_loaded(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='question']\"))\n    )\n    time.sleep(1)\n\n@when('the user selects incorrect answers for some questions and clicks the submit button with data-testid \"submit-button\"')\ndef step_when_user_selects_incorrect_answers(context):\n    # Select incorrect answers for the first two questions\n    for i in range(4):\n        answer_element = WebDriverWait(context.driver, 10).until(\n            EC.element_to_be_clickable((By.CSS_SELECTOR, f\"[data-testid='answer-a']\"))\n        )\n        answer_element.click()\n        time.sleep(0.2)\n        submit_button = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='submit-button']\")\n        submit_button.click()\n        time.sleep(0.2)\n\n@then('the quiz should display \"You answered 1/4 questions correctly\" with a \\'Play Again\\' button having data-testid \"play-again-button\"')\ndef step_then_display_score_and_play_again(context):\n    result_text = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"h2\"))\n    ).text\n    expected_text = \"You answered 1/4 questions correctly\"\n    assert expected_text in result_text, f\"Expected '{expected_text}' in '{result_text}'\"\n\n    play_again_button = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='play-again-button']\")\n    assert play_again_button.is_displayed(), \"Play Again button is not displayed\"\n\n    # Close the browser after the test\n    context.driver.quit()"
                }
            ]
        },
        "6": {
            "requirement": {
                "description": "Upon completion of the quiz, the system must display a 'Play Again' button with the attribute data-testid set to 'play-again-button'. When this button is clicked, the system must reload the page, which should reset the quiz to the first question and reset the user's score to zero. The first question, 'Which language runs in a web browser?', must be displayed in the element with data-testid 'question'. The answer options should be displayed as 'Java', 'C', 'Python', and 'JavaScript' in the elements with data-testid 'answer-a-text', 'answer-b-text', 'answer-c-text', and 'answer-d-text' respectively. The page reload should ensure that no previous selections or scores are retained, effectively starting a new quiz session."
            },
            "test_cases": [
                {
                    "test_case": [
                        "Feature: REQ-006 - Play Again Button Functionality\n  The system must reload the page, resetting the quiz to the first question and resetting the user's score to zero when the 'Play Again' button is clicked.\n\n\nScenario: [Normal] Clicking 'Play Again' button reloads the quiz\n    Given the quiz is completed and the 'Play Again' button with data-testid 'play-again-button' is displayed\n    When the user clicks the 'Play Again' button\n    Then the page should reload\n    And the first question \"Which language runs in a web browser?\" should be displayed in the element with data-testid 'question'\n    And the answers should be \"Java\", \"C\", \"Python\", \"JavaScript\" in the elements with data-testid 'answer-a-text', 'answer-b-text', 'answer-c-text', 'answer-d-text' respectively"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\ndef is_visible(element):\n    return element.is_displayed()\n\n@given('the quiz is completed and the \\'Play Again\\' button with data-testid \\'play-again-button\\' is displayed')\ndef step_given_quiz_completed(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)  # Allow page to load\n\n    # Simulate completing the quiz\n    for _ in range(4):\n        # Click on the answer options\n        answer_a = WebDriverWait(context.driver, 10).until(\n            EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='answer-a']\"))\n        )\n        answer_a.click()\n        time.sleep(0.1)  # Allow time for the answer to be processed\n        WebDriverWait(context.driver, 10).until(\n            EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='submit-button']\"))\n        ).click()\n        time.sleep(0.1)\n\n    # Ensure 'Play Again' button is displayed\n    play_again_button = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='play-again-button']\"))\n    )\n    assert is_visible(play_again_button), \"Play Again button is not visible\"\n\n@when('the user clicks the \\'Play Again\\' button')\ndef step_when_click_play_again(context):\n    play_again_button = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='play-again-button']\")\n    play_again_button.click()\n    time.sleep(1)  # Allow page to reload\n\n@then('the page should reload')\ndef step_then_page_reload(context):\n    # Check if the page has reloaded by verifying the first question is displayed\n    question_element = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='question']\"))\n    )\n    assert \"Which language runs in a web browser?\" in question_element.text, \"Page did not reload correctly\"\n\n@then('the first question \"Which language runs in a web browser?\" should be displayed in the element with data-testid \\'question\\'')\ndef step_then_first_question_displayed(context):\n    question_element = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='question']\")\n    assert \"Which language runs in a web browser?\" in question_element.text, \"First question is not displayed\"\n\n@then('the answers should be \"Java\", \"C\", \"Python\", \"JavaScript\" in the elements with data-testid \\'answer-a-text\\', \\'answer-b-text\\', \\'answer-c-text\\', \\'answer-d-text\\' respectively')\ndef step_then_answers_displayed(context):\n    a_text = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='answer-a-text']\")\n    b_text = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='answer-b-text']\")\n    c_text = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='answer-c-text']\")\n    d_text = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='answer-d-text']\")\n\n    assert \"Java\" in a_text.text, \"Answer A is incorrect\"\n    assert \"C\" in b_text.text, \"Answer B is incorrect\"\n    assert \"Python\" in c_text.text, \"Answer C is incorrect\"\n    assert \"JavaScript\" in d_text.text, \"Answer D is incorrect\"\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                }
            ]
        }
    }
}