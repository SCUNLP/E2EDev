
    You are tasked with implementing a complete web application using HTML, JavaScript, and CSS. Your implementation must strictly follow the specifications described below.
    SUMMARY:
    {
    "overview": "The Quiz App is a web application that presents users with a series of multiple-choice questions. Users can select one answer per question and submit their choice. The application provides immediate feedback on the user's performance after all questions are answered.",
    "predefined_options": "The application uses a predefined set of questions and answers stored in a JavaScript array. Each question has four possible answers, and one correct answer is specified.",
    "external_resources": "No external resources such as links, images, or audio files are used in the provided code.",
    "external_js_libraries": "No external JavaScript libraries are used in the provided code."
}
    ## Functional Requirements
    Implement the following features as described. For each requirement, make sure the HTML structure, JavaScript behavior, and CSS styles match the specifications exactly.
    REQUIREMENTS:
    - Requirement 1: 
Upon loading the Quiz App webpage, the system must automatically display the first question from the predefined quiz data within the element identified by data-testid 'question'. The question text should be visible to the user. Additionally, four radio buttons, each associated with a unique answer option, must be presented. These radio buttons should have the following attributes: data-testid 'answer-a', 'answer-b', 'answer-c', and 'answer-d', and must be initially unchecked. Corresponding labels for each radio button, identified by data-testid 'answer-a-text', 'answer-b-text', 'answer-c-text', and 'answer-d-text', should display the respective answer options. No radio button should be pre-selected when the page loads, ensuring the user can make an unbiased choice.
- Requirement 2: 
The quiz application must allow users to select one answer option per question by interacting with radio buttons, ensuring mutual exclusivity among the options. The UI must include radio buttons with specific data-testid attributes ('answer-a', 'answer-b', 'answer-c', 'answer-d') within the quiz container (data-testid='quiz'). Upon page load, all answer options should be deselected. When a user clicks on a radio button, it should become selected, and all other radio buttons should remain deselected, even if clicked rapidly or repeatedly. The selected answer can be submitted using the submit button (data-testid='submit-button'), which triggers the evaluation of the answer and updates the score. The system should handle edge cases such as rapid clicks or re-selection of the same option without compromising the exclusivity of the selection. After answering all questions, the quiz container should display the user's score and provide a 'Play Again' button (data-testid='play-again-button') to restart the quiz.
- Requirement 3: 
When the user clicks the 'Submit' button (identified by data-testid 'submit-button'), the system must evaluate the currently selected answer (if any) and proceed as follows: 1) If no answer is selected, the system must not proceed to the next question, and the current question and its answer options remain displayed without any changes. 2) If an answer is selected, the system evaluates whether the selected answer is correct or incorrect. If there are remaining questions, the system must load the next question and update the UI to display the new question text (via the element with data-testid 'question') and its corresponding answer options (via elements with data-testid 'answer-a-text', 'answer-b-text', 'answer-c-text', and 'answer-d-text'). All previously selected answers must be deselected before displaying the new question. 3) If there are no remaining questions, the system must display a final score message in the quiz container (identified by data-testid 'quiz') in the format 'You answered X/Y questions correctly', where X is the number of correct answers and Y is the total number of questions. Additionally, a 'Play Again' button (identified by data-testid 'play-again-button') must be displayed, which reloads the page when clicked. The system must ensure that all interactions and updates are reflected in the DOM as specified, and no unintended behavior occurs when no answer is selected or when the quiz ends.
- Requirement 4: 
Upon completing all questions in the quiz, the system must dynamically update the DOM to display the user's total score in the format 'You answered X/Y questions correctly', where X is the number of correct answers and Y is the total number of questions. This message should be inserted into the element with data-testid 'quiz'. Additionally, a 'Play Again' button with data-testid 'play-again-button' must be rendered below the score message. This button should be configured to reload the page when clicked, effectively restarting the quiz. The system must ensure that all radio buttons with the class 'answer' are deselected at the start of each new quiz session, and the first question is displayed with its corresponding answer options. The submit button with data-testid 'submit-button' should be used to progress through the quiz, checking the selected answer against the correct answer stored in the quizData array. The system must handle both correct and incorrect answers, updating the score accordingly and ensuring the quiz progresses until all questions are answered.
- Requirement 5: 
Upon completion of the quiz, the system must display a 'Play Again' button with the attribute data-testid set to 'play-again-button'. When this button is clicked, the system must reload the page, which should reset the quiz to the first question and reset the user's score to zero. The first question, 'Which language runs in a web browser?', must be displayed in the element with data-testid 'question'. The answer options should be displayed as 'Java', 'C', 'Python', and 'JavaScript' in the elements with data-testid 'answer-a-text', 'answer-b-text', 'answer-c-text', and 'answer-d-text' respectively. The page reload should ensure that no previous selections or scores are retained, effectively starting a new quiz session.

    
    ## Output Format
    Provide a clean and complete implementation including:
    1. HTML structure (including necessary `data-testid`, `id`, and `class` values).
    2. JavaScript functionality that matches the behavior described.
    3. CSS for styling according to BEM and required class names.
    4. Ensure that the text content in the components is exactly as specified in the requirements.
    Do not include any extra components or libraries not listed above. Keep your code concise, semantic, and standards-compliant.
    