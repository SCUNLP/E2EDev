{
    "summary": {
        "overview": "The application is a web-based music player that allows users to play, pause, and navigate through a playlist of songs. It provides visual feedback through a progress bar and displays the current song's title and cover image.",
        "predefined_options": "The application has a predefined playlist consisting of three songs: 'hey', 'summer', and 'ukulele'. These are set by the system and loaded dynamically.",
        "external_resources": [
            {
                "songs": [
                    "hey",
                    "summer",
                    "ukulele"
                ],
                "song_audio_src": "https://github.com/bradtraversy/vanillawebprojects/blob/master/music-player/music/${song}.mp3?raw=true",
                "song_cover_src": "https://github.com/bradtraversy/vanillawebprojects/blob/master/music-player/images/${song}.jpg?raw=true"
            }
        ],
        "external_js_libraries": [
            {
                "name": "Font Awesome",
                "source": "https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.1/css/all.min.css"
            }
        ]
    },
    "finegrained_rewith_test": {
        "1": {
            "requirement": {
                "description": "When the user clicks the play button (data-testid='play-button'), if the music is not playing (the music container doesn't have the 'play' class and the button shows a play icon with class 'fa-play'), the audio (data-testid='audio') should start playing, the 'play' class should be added to the music container (data-testid='music-container'), and the play icon should change to a pause icon (class 'fa-pause'). If the music is already playing (the container has the 'play' class and the button shows a pause icon with class 'fa-pause'), clicking the button should pause the audio, remove the 'play' class from the container, and switch the icon back to play. The music is paused by default when the page loads, and no play/pause state is saved in localStorage."
            },
            "test_cases": [
                {
                    "test_case": [
                        "Feature: Play Button Functionality\n  The play button should start playing the current song, change its icon to a pause icon, and add a \"play\" class to the music container when clicked.\n\n\n  Scenario: [Normal] User clicks the play button to start playing the song\n    Given the webpage is loaded with the music player visible\n    And the music container does not have the \"play\" class\n    And the play button icon is a play icon with data-testid \"play-button\"\n    When the user clicks the play button with data-testid \"play-button\"\n    Then the audio should start playing\n    And the play button icon should change to a pause icon\n    And the music container should have the \"play\" class\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the webpage is loaded with the music player visible')\ndef step_given_webpage_loaded(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='music-container']\"))\n    )\n    time.sleep(1)\n\n@given('the music container does not have the \"play\" class')\ndef step_given_music_container_no_play_class(context):\n    music_container = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='music-container']\")\n    assert \"play\" not in music_container.get_attribute(\"class\").split(), \"Music container should not have 'play' class\"\n    time.sleep(1)\n\n@given('the play button icon is a play icon with data-testid \"play-button\"')\ndef step_given_play_button_icon_is_play(context):\n    play_button_icon = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='play-button'] i.fas\")\n    assert \"fa-play\" in play_button_icon.get_attribute(\"class\").split(), \"Play button icon should be 'fa-play'\"\n    time.sleep(1)\n\n@when('the user clicks the play button with data-testid \"play-button\"')\ndef step_when_user_clicks_play_button(context):\n    play_button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='play-button']\"))\n    )\n    play_button.click()\n    time.sleep(1)\n\n@then('the audio should start playing')\ndef step_then_audio_should_start_playing(context):\n    audio_element = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='audio']\")\n\n    # 执行 JavaScript 取 audio.paused 属性\n    is_paused = context.driver.execute_script(\"return arguments[0].paused;\", audio_element)\n\n    assert not is_paused, \"Expected the song to be playing, but it is paused.\"\n    time.sleep(1)\n\n@then('the play button icon should change to a pause icon')\ndef step_then_play_button_icon_should_change(context):\n    play_button_icon = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='play-button'] i.fas\")\n    assert \"fa-pause\" in play_button_icon.get_attribute(\"class\").split(), \"Play button icon should be 'fa-pause'\"\n    time.sleep(1)\n\n@then('the music container should have the \"play\" class')\ndef step_then_music_container_should_have_play_class(context):\n    music_container = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='music-container']\")\n    assert \"play\" in music_container.get_attribute(\"class\").split(), \"Music container should have 'play' class\"\n    time.sleep(1)\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: Play Button Functionality\n  The play button should start playing the current song, change its icon to a pause icon, and add a \"play\" class to the music container when clicked.\n\n\nScenario: [Edge] User clicks the play button when the song is already playing\n    Given the webpage is loaded with the music player visible\n    And the user clicks the play button with data-testid \"play-button\"\n    And the music container has the \"play\" class\n    And the play button icon is a pause icon with data-testid \"play-button\"\n    When the user clicks the play button with data-testid \"play-button\"\n    Then the audio should pause\n    And the play button icon should change to a play icon\n    And the music container should not have the \"play\" class"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the webpage is loaded with the music player visible')\ndef step_impl(context):\n    # Initialize the WebDriver and load the test page\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    context.driver.maximize_window()\n    # Wait for the music player container to be visible\n    WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='music-container']\"))\n    )\n    time.sleep(1)\n\n@given('the user clicks the play button with data-testid \"play-button\"')\ndef step_impl(context):\n    # Locate the play button and click it\n    play_button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='play-button']\"))\n    )\n    play_button.click()\n    time.sleep(1)\n\n@given('the music container has the \"play\" class')\ndef step_impl(context):\n    # Verify that the music container has the \"play\" class\n    music_container = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='music-container']\")\n    assert \"play\" in music_container.get_attribute(\"class\"), \"Music container does not have the 'play' class\"\n    time.sleep(1)\n\n@given('the play button icon is a pause icon with data-testid \"play-button\"')\ndef step_impl(context):\n    # Verify that the play button icon is a pause icon\n    play_button_icon = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='play-button'] i.fas\")\n    assert \"fa-pause\" in play_button_icon.get_attribute(\"class\"), \"Play button icon is not a pause icon\"\n    time.sleep(1)\n\n@when('the user clicks the play button with data-testid \"play-button\"')\ndef step_impl(context):\n    # Locate the play button and click it again\n    play_button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='play-button']\"))\n    )\n    play_button.click()\n    time.sleep(1)\n\n@then('the audio should pause')\ndef step_impl(context):\n    # Verify that the audio is paused\n    audio = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='audio']\")\n    assert audio.get_attribute(\"paused\") == \"true\", \"Audio is not paused\"\n    time.sleep(1)\n\n@then('the play button icon should change to a play icon')\ndef step_impl(context):\n    # Verify that the play button icon has changed to a play icon\n    play_button_icon = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='play-button'] i.fas\")\n    assert \"fa-play\" in play_button_icon.get_attribute(\"class\"), \"Play button icon did not change to a play icon\"\n    time.sleep(1)\n\n@then('the music container should not have the \"play\" class')\ndef step_impl(context):\n    # Verify that the music container no longer has the \"play\" class\n    music_container = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='music-container']\")\n    assert \"play\" not in music_container.get_attribute(\"class\"), \"Music container still has the 'play' class\"\n    time.sleep(1)\n\n# Hook for cleanup after each scenario\ndef after_scenario(context, scenario):\n    if hasattr(context, 'driver'):\n        context.driver.quit()"
                }
            ]
        },
        "3": {
            "requirement": {
                "description": "When the user clicks the next button (data-testid='next-button'), the system should move to the next song in the playlist, update the song title (data-testid='title'), cover image (data-testid='cover'), and audio source (data-testid='audio'), and automatically start playback. If the currently playing song is not the last one, it simply switches to the next; if it's the last song (like \"Ukulele\"), the playlist loops back to the first song (\"Hey\"). In both cases, the play button icon (data-testid='play-button') should reflect the playing state by showing a pause icon (fa-pause). All updates should be seamless, with audio playback starting immediately and UI reflecting the new song."
            },
            "test_cases": [
                {
                    "test_case": [
                        "Feature: Switch to the next song in the playlist\n  The system should switch to the next song in the playlist, update the song title and cover image, and start playing the song when the user clicks the next button.\n\n\nScenario: [Normal] User clicks the next button to switch to the next song\n    Given the music player is loaded\n      And the play button is clicked with data-testid \"play-button\"\n      And the song title is displayed as \"Summer\" in the element with data-testid \"title\"\n      And the cover image source is \"https://github.com/bradtraversy/vanillawebprojects/blob/master/music-player/images/summer.jpg?raw=true\"\n      And the audio source is \"https://github.com/bradtraversy/vanillawebprojects/blob/master/music-player/music/summer.mp3?raw=true\"\n    When the user clicks the next button with data-testid \"next-button\"\n    Then the song title should change to \"Ukulele\" in the element with data-testid \"title\"\n      And the cover image source should update to \"https://github.com/bradtraversy/vanillawebprojects/blob/master/music-player/images/ukulele.jpg?raw=true\"\n      And the audio source should change to \"https://github.com/bradtraversy/vanillawebprojects/blob/master/music-player/music/ukulele.mp3?raw=true\"\n      And the new song should start playing\n      And the play button icon should change to a pause icon in the element with data-testid \"play-button\""
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the music player is loaded')\ndef step_impl(context):\n    # Initialize the WebDriver and load the test page\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    context.driver.maximize_window()\n\n\n@given('the play button is clicked with data-testid \"play-button\"')\ndef step_impl(context):\n    play_button = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='play-button']\")\n    WebDriverWait(context.driver, 10).until(EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='play-button']\")))\n    play_button.click()\n    time.sleep(1)\n\n@given('the song title is displayed as \"Summer\" in the element with data-testid \"title\"')\ndef step_impl(context):\n    title_element = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='title']\")\n    assert \"Summer\" in title_element.text, f\"Expected song title to be 'Summer', but got '{title_element.text}'\"\n\n@given('the cover image source is \"https://github.com/bradtraversy/vanillawebprojects/blob/master/music-player/images/summer.jpg?raw=true\"')\ndef step_impl(context):\n    cover_element = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='cover']\")\n    expected_src = \"https://github.com/bradtraversy/vanillawebprojects/blob/master/music-player/images/summer.jpg?raw=true\"\n    assert cover_element.get_attribute(\"src\") == expected_src, f\"Expected cover image source to be '{expected_src}'\"\n\n@given('the audio source is \"https://github.com/bradtraversy/vanillawebprojects/blob/master/music-player/music/summer.mp3?raw=true\"')\ndef step_impl(context):\n    audio_element = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='audio']\")\n    expected_src = \"https://github.com/bradtraversy/vanillawebprojects/blob/master/music-player/music/summer.mp3?raw=true\"\n    assert audio_element.get_attribute(\"src\") == expected_src, f\"Expected audio source to be '{expected_src}'\"\n\n@when('the user clicks the next button with data-testid \"next-button\"')\ndef step_impl(context):\n    next_button = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='next-button']\")\n    WebDriverWait(context.driver, 10).until(EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='next-button']\")))\n    next_button.click()\n    time.sleep(1)\n\n@then('the song title should change to \"Ukulele\" in the element with data-testid \"title\"')\ndef step_impl(context):\n    title_element = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='title']\")\n    assert \"Ukulele\" in title_element.text, f\"Expected song title to be 'Ukulele', but got '{title_element.text}'\"\n\n@then('the cover image source should update to \"https://github.com/bradtraversy/vanillawebprojects/blob/master/music-player/images/ukulele.jpg?raw=true\"')\ndef step_impl(context):\n    cover_element = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='cover']\")\n    expected_src = \"https://github.com/bradtraversy/vanillawebprojects/blob/master/music-player/images/ukulele.jpg?raw=true\"\n    assert cover_element.get_attribute(\"src\") == expected_src, f\"Expected cover image source to be '{expected_src}'\"\n\n@then('the audio source should change to \"https://github.com/bradtraversy/vanillawebprojects/blob/master/music-player/music/ukulele.mp3?raw=true\"')\ndef step_impl(context):\n    audio_element = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='audio']\")\n    expected_src = \"https://github.com/bradtraversy/vanillawebprojects/blob/master/music-player/music/ukulele.mp3?raw=true\"\n    assert audio_element.get_attribute(\"src\") == expected_src, f\"Expected audio source to be '{expected_src}'\"\n\n@then('the new song should start playing')\ndef step_impl(context):\n    audio_element = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='audio']\")\n    is_playing = context.driver.execute_script(\"return arguments[0].paused === false;\", audio_element)\n    assert is_playing, \"Expected the audio to be playing, but it is paused\"\n\n@then('the play button icon should change to a pause icon in the element with data-testid \"play-button\"')\ndef step_impl(context):\n    play_button_icon = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='play-button'] i.fas\")\n    assert \"fa-pause\" in play_button_icon.get_attribute(\"class\"), \"Expected play button icon to be 'fa-pause'\"\n\n# Teardown\ndef after_scenario(context, scenario):\n    if hasattr(context, 'driver'):\n        context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: Switch to the next song in the playlist\n  The system should switch to the next song in the playlist, update the song title and cover image, and start playing the song when the user clicks the next button.\n\n\n  Scenario: [Edge] User clicks the next button when the last song in the playlist is playing\n    Given the music player is loaded with the song \"Ukulele\" currently playing\n      And the song title is displayed as \"Ukulele\" in the element with data-testid \"title\"\n      And the cover image source is \"https://github.com/bradtraversy/vanillawebprojects/blob/master/music-player/images/ukulele.jpg?raw=true\"\n      And the audio source is \"https://github.com/bradtraversy/vanillawebprojects/blob/master/music-player/music/ukulele.mp3?raw=true\"\n    When the user clicks the button with data-testid \"next-button\"\n    Then the song title should update to \"Hey\" in the element with data-testid \"title\"\n      And the cover image source should update to \"https://github.com/bradtraversy/vanillawebprojects/blob/master/music-player/images/hey.jpg?raw=true\"\n      And the audio source should update to \"https://github.com/bradtraversy/vanillawebprojects/blob/master/music-player/music/hey.mp3?raw=true\"\n      And the song should start playing\n      And the play button icon should change to a pause icon in the element with data-testid \"play-button\"\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the music player is loaded with the song \"Ukulele\" currently playing')\ndef step_impl(context):\n    # Initialize the WebDriver and load the test page\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    context.driver.maximize_window()\n\n    next_button = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='next-button']\")\n    WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='next-button']\")))\n    next_button.click()\n    time.sleep(1)\n\n@given('the song title is displayed as \"Ukulele\" in the element with data-testid \"title\"')\ndef step_impl(context):\n    title_element = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='title']\")\n    assert title_element.text == \"Ukulele\", f\"Expected title to be 'Ukulele', but got '{title_element.text}'\"\n\n@given('the cover image source is \"https://github.com/bradtraversy/vanillawebprojects/blob/master/music-player/images/ukulele.jpg?raw=true\"')\ndef step_impl(context):\n    cover_element = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='cover']\")\n    expected_src = \"https://github.com/bradtraversy/vanillawebprojects/blob/master/music-player/images/ukulele.jpg?raw=true\"\n    assert cover_element.get_attribute(\"src\") == expected_src, f\"Expected cover image source to be '{expected_src}', but got '{cover_element.get_attribute('src')}'\"\n\n@given('the audio source is \"https://github.com/bradtraversy/vanillawebprojects/blob/master/music-player/music/ukulele.mp3?raw=true\"')\ndef step_impl(context):\n    audio_element = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='audio']\")\n    expected_src = \"https://github.com/bradtraversy/vanillawebprojects/blob/master/music-player/music/ukulele.mp3?raw=true\"\n    assert audio_element.get_attribute(\"src\") == expected_src, f\"Expected audio source to be '{expected_src}', but got '{audio_element.get_attribute('src')}'\"\n\n@when('the user clicks the button with data-testid \"next-button\"')\ndef step_impl(context):\n    next_button = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='next-button']\")\n    WebDriverWait(context.driver, 10).until(EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='next-button']\")))\n    next_button.click()\n    time.sleep(1)\n\n@then('the song title should update to \"Hey\" in the element with data-testid \"title\"')\ndef step_impl(context):\n    title_element = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='title']\")\n    assert title_element.text == \"Hey\", f\"Expected title to be 'Hey', but got '{title_element.text}'\"\n\n@then('the cover image source should update to \"https://github.com/bradtraversy/vanillawebprojects/blob/master/music-player/images/hey.jpg?raw=true\"')\ndef step_impl(context):\n    cover_element = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='cover']\")\n    expected_src = \"https://github.com/bradtraversy/vanillawebprojects/blob/master/music-player/images/hey.jpg?raw=true\"\n    assert cover_element.get_attribute(\"src\") == expected_src, f\"Expected cover image source to be '{expected_src}', but got '{cover_element.get_attribute('src')}'\"\n\n@then('the audio source should update to \"https://github.com/bradtraversy/vanillawebprojects/blob/master/music-player/music/hey.mp3?raw=true\"')\ndef step_impl(context):\n    audio_element = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='audio']\")\n    expected_src = \"https://github.com/bradtraversy/vanillawebprojects/blob/master/music-player/music/hey.mp3?raw=true\"\n    assert audio_element.get_attribute(\"src\") == expected_src, f\"Expected audio source to be '{expected_src}', but got '{audio_element.get_attribute('src')}'\"\n\n@then('the song should start playing')\ndef step_impl(context):\n    pass\n\n@then('the play button icon should change to a pause icon in the element with data-testid \"play-button\"')\ndef step_impl(context):\n    play_button_icon = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='play-button'] i.fas\")\n    assert \"fa-pause\" in play_button_icon.get_attribute(\"class\"), \"Expected play button icon to be 'fa-pause', but it is not\"\n\ndef after_scenario(context, scenario):\n    # Close the browser after each scenario\n    if hasattr(context, \"driver\"):\n        context.driver.quit()"
                }
            ]
        },
        "4": {
            "requirement": {
                "description": "When the user clicks the previous button (data-testid='prev-button'), the music player should switch to the correct song and start playing it immediately. If the current song is \"Summer\", it should go back to \"Hey\"; if it's \"Hey\" (the first song), it should loop to the last song, \"Ukulele\". In each case, the song title (data-testid='title'), cover image (data-testid='cover'), and audio source (data-testid='audio') should all update to match the new song, and playback should start automatically. This ensures smooth and continuous music navigation for the user."
            },
            "test_cases": [
                {
                    "test_case": [
                        "Feature: Previous Song Functionality\n  The system should switch to the previous song in the playlist, update the song title and cover image, and start playing the song when the user clicks the previous button.\n\n\n  Scenario: [Normal] User clicks the previous button to switch to the previous song\n    Given the music player is loaded with the current song \"Summer\"\n      And the song title is displayed as \"Summer\" in the element with data-testid \"title\"\n      And the cover image source is \"https://github.com/bradtraversy/vanillawebprojects/blob/master/music-player/images/summer.jpg?raw=true\" in the element with data-testid \"cover\"\n      And the audio source is \"https://github.com/bradtraversy/vanillawebprojects/blob/master/music-player/music/summer.mp3?raw=true\" in the element with data-testid \"audio\"\n    When the user clicks the previous button with data-testid \"prev-button\"\n    Then the song title should update to \"Hey\" in the element with data-testid \"title\"\n      And the cover image source should update to \"https://github.com/bradtraversy/vanillawebprojects/blob/master/music-player/images/hey.jpg?raw=true\" in the element with data-testid \"cover\"\n      And the audio source should update to \"https://github.com/bradtraversy/vanillawebprojects/blob/master/music-player/music/hey.mp3?raw=true\" in the element with data-testid \"audio\"\n      And the audio should start playing\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\ndef is_audio_playing(driver, audio_element):\n    return driver.execute_script(\"return arguments[0].paused === false;\", audio_element)\n\n@given(\"the music player is loaded with the current song \\\"Summer\\\"\")\ndef step_given_music_player_loaded(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='music-container']\"))\n    )\n    time.sleep(1)\n\n@given(\"the song title is displayed as \\\"Summer\\\" in the element with data-testid \\\"title\\\"\")\ndef step_given_song_title_displayed(context):\n    # click the play button to start the song\n    play_button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='play-button']\"))\n    )\n    play_button.click()\n    time.sleep(1)\n    title_element = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='title']\"))\n    )\n    assert \"Summer\" in title_element.text.strip(), f\"Expected 'Summer', but got '{title_element.text.strip()}'\"\n\n@given(\"the cover image source is \\\"https://github.com/bradtraversy/vanillawebprojects/blob/master/music-player/images/summer.jpg?raw=true\\\" in the element with data-testid \\\"cover\\\"\")\ndef step_given_cover_image_source(context):\n    cover_element = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='cover']\"))\n    )\n    expected_src = \"https://github.com/bradtraversy/vanillawebprojects/blob/master/music-player/images/summer.jpg?raw=true\"\n    assert cover_element.get_attribute(\"src\") == expected_src, f\"Expected '{expected_src}', but got '{cover_element.get_attribute('src')}'\"\n\n@given(\"the audio source is \\\"https://github.com/bradtraversy/vanillawebprojects/blob/master/music-player/music/summer.mp3?raw=true\\\" in the element with data-testid \\\"audio\\\"\")\ndef step_given_audio_source(context):\n    audio_element = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='audio']\"))\n    )\n    expected_src = \"https://github.com/bradtraversy/vanillawebprojects/blob/master/music-player/music/summer.mp3?raw=true\"\n    assert audio_element.get_attribute(\"src\") == expected_src, f\"Expected '{expected_src}', but got '{audio_element.get_attribute('src')}'\"\n\n@when(\"the user clicks the previous button with data-testid \\\"prev-button\\\"\")\ndef step_when_user_clicks_previous_button(context):\n    prev_button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='prev-button']\"))\n    )\n    prev_button.click()\n    time.sleep(1)\n\n@then(\"the song title should update to \\\"Hey\\\" in the element with data-testid \\\"title\\\"\")\ndef step_then_song_title_updated(context):\n    title_element = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='title']\"))\n    )\n    assert \"Hey\" in title_element.text.strip(), f\"Expected 'Hey', but got '{title_element.text.strip()}'\"\n\n@then(\"the cover image source should update to \\\"https://github.com/bradtraversy/vanillawebprojects/blob/master/music-player/images/hey.jpg?raw=true\\\" in the element with data-testid \\\"cover\\\"\")\ndef step_then_cover_image_source_updated(context):\n    cover_element = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='cover']\"))\n    )\n    expected_src = \"https://github.com/bradtraversy/vanillawebprojects/blob/master/music-player/images/hey.jpg?raw=true\"\n    assert cover_element.get_attribute(\"src\") == expected_src, f\"Expected '{expected_src}', but got '{cover_element.get_attribute('src')}'\"\n\n@then(\"the audio source should update to \\\"https://github.com/bradtraversy/vanillawebprojects/blob/master/music-player/music/hey.mp3?raw=true\\\" in the element with data-testid \\\"audio\\\"\")\ndef step_then_audio_source_updated(context):\n    audio_element = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='audio']\"))\n    )\n    expected_src = \"https://github.com/bradtraversy/vanillawebprojects/blob/master/music-player/music/hey.mp3?raw=true\"\n    assert audio_element.get_attribute(\"src\") == expected_src, f\"Expected '{expected_src}', but got '{audio_element.get_attribute('src')}'\"\n\n@then(\"the audio should start playing\")\ndef step_then_audio_playing(context):\n    audio_element = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='audio']\"))\n    )\n    assert is_audio_playing(context.driver, audio_element), \"Audio is not playing\"\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: Previous Song Functionality\n  The system should switch to the previous song in the playlist, update the song title and cover image, and start playing the song when the user clicks the previous button.\n\n\n  Scenario: [Edge] User clicks the previous button when the first song in the playlist is playing\n    Given the music player is loaded with the current song \"Hey\"\n      And the song title is displayed as \"Hey\" in the element with data-testid \"title\"\n    When the user clicks the previous button with data-testid \"prev-button\"\n    Then the song title should update to \"Ukulele\" in the element with data-testid \"title\"\n\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\ndef is_playing(audio_element):\n    return audio_element.get_attribute(\"paused\") == \"false\"\n\n@given('the music player is loaded with the current song \"Hey\"')\ndef step_given_music_player_loaded_with_hey(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)  # Allow time for the page to load\n\n    # Load the song \"Hey\"\n    prev_button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='prev-button']\"))\n    )\n    prev_button.click()\n    time.sleep(2)\n\n@given('the song title is displayed as \"Hey\" in the element with data-testid \"title\"')\ndef step_given_song_title_displayed_as_hey(context):\n    title_element = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='title']\"))\n    )\n    assert \"Hey\" in title_element.text, f\"Expected 'Hey' in '{title_element.text}'\"\n\n@given('the cover image source is \"https://github.com/bradtraversy/vanillawebprojects/blob/master/music-player/images/hey.jpg?raw=true\" in the element with data-testid \"cover\"')\ndef step_given_cover_image_source_is_hey(context):\n    pass\n\n@given('the audio source is \"https://github.com/bradtraversy/vanillawebprojects/blob/master/music-player/music/hey.mp3?raw=true\" in the element with data-testid \"audio\"')\ndef step_given_audio_source_is_hey(context):\n    pass\n\n@when('the user clicks the previous button with data-testid \"prev-button\"')\ndef step_when_user_clicks_prev_button(context):\n    prev_button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='prev-button']\"))\n    )\n    prev_button.click()\n    time.sleep(1)\n\n@then('the song title should update to \"Ukulele\" in the element with data-testid \"title\"')\ndef step_then_song_title_updates_to_ukulele(context):\n    title_element = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='title']\"))\n    )\n    assert \"Ukulele\" in title_element.text, f\"Expected 'Ukulele' in '{title_element.text}'\"\n\n@then('the cover image source should update to \"https://github.com/bradtraversy/vanillawebprojects/blob/master/music-player/images/ukulele.jpg?raw=true\" in the element with data-testid \"cover\"')\ndef step_then_cover_image_source_updates_to_ukulele(context):\n    cover_element = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='cover']\"))\n    )\n    expected_src = \"https://github.com/bradtraversy/vanillawebprojects/blob/master/music-player/images/ukulele.jpg?raw=true\"\n    assert cover_element.get_attribute(\"src\") == expected_src, f\"Expected src '{expected_src}', but got '{cover_element.get_attribute('src')}'\"\n\n@then('the audio source should update to \"https://github.com/bradtraversy/vanillawebprojects/blob/master/music-player/music/ukulele.mp3?raw=true\" in the element with data-testid \"audio\"')\ndef step_then_audio_source_updates_to_ukulele(context):\n    audio_element = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='audio']\"))\n    )\n    expected_src = \"https://github.com/bradtraversy/vanillawebprojects/blob/master/music-player/music/ukulele.mp3?raw=true\"\n    assert audio_element.get_attribute(\"src\") == expected_src, f\"Expected src '{expected_src}', but got '{audio_element.get_attribute('src')}'\"\n\n@then('the audio should start playing')\ndef step_then_audio_should_start_playing(context):\n    audio_element = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='audio']\"))\n    )\n    assert is_playing(audio_element), \"Expected audio to be playing\"\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                }
            ]
        },
        "7": {
            "requirement": {
                "description": "When a song finishes playing, the music player should automatically switch to the next song and start playing it without user action. If the current song is \"Summer\", it should move to \"Ukulele\"; if it's the last song \"Ukulele\", it should loop back to the first song \"Hey\". In all cases, the audio should play automatically, and the song title (data-testid='title'), cover image (data-testid='cover'), and audio source (data-testid='audio') must update accordingly to ensure a smooth and uninterrupted listening experience."
            },
            "test_cases": [
                {
                    "test_case": [
                        "Feature: Automatic Transition to Next Song in Playlist\n  The system should automatically transition to the next song in the playlist and start playing it when a song ends.\n\n\n  Scenario: [Normal] Transition to next song when current song ends\n    Given the music player is loaded with the song \"Summer\"\n    And the audio element with data-testid \"audio\" is playing\n    When the song \"Summer\" ends\n    Then the next song \"Ukulele\" should be loaded\n    And the audio element with data-testid \"audio\" should start playing\n    And the title element with data-testid \"title\" should display \"Ukulele\"\n    And the cover image with data-testid \"cover\" should be updated to \"ukulele.jpg\"\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\ndef is_playing(context):\n    music_container = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='music-container']\")\n    return \"play\" in music_container.get_attribute(\"class\").split()\n\n@given('the music player is loaded with the song \"Summer\"')\ndef step_given_music_player_loaded(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)\n\n@given('the audio element with data-testid \"audio\" is playing')\ndef step_given_audio_playing(context):\n    # click the play button\n    play_button = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='play-button']\")\n    play_button.click()\n    time.sleep(1)\n    assert is_playing(context), \"Audio is not playing\"\n\n@when('the song \"Summer\" ends')\ndef step_when_song_ends(context):\n    audio_element = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='audio']\")\n    context.driver.execute_script(\"arguments[0].currentTime = arguments[0].duration;\", audio_element)\n    time.sleep(1)\n\n@then('the next song \"Ukulele\" should be loaded')\ndef step_then_next_song_loaded(context):\n    WebDriverWait(context.driver, 10).until(\n        EC.text_to_be_present_in_element((By.CSS_SELECTOR, \"[data-testid='title']\"), \"Ukulele\")\n    )\n    title_element = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='title']\")\n    assert \"Ukulele\" in title_element.text, f\"Expected 'Ukulele' in '{title_element.text}'\"\n    time.sleep(1)\n\n@then('the audio element with data-testid \"audio\" should start playing')\ndef step_then_audio_playing(context):\n    assert is_playing(context), \"Audio is not playing\"\n\n@then('the title element with data-testid \"title\" should display \"Ukulele\"')\ndef step_then_title_display(context):\n    title_element = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='title']\")\n    assert \"Ukulele\" in title_element.text, f\"Expected 'Ukulele' in '{title_element.text}'\"\n    time.sleep(1)\n\n@then('the cover image with data-testid \"cover\" should be updated to \"ukulele.jpg\"')\ndef step_then_cover_image_updated(context):\n    cover_element = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='cover']\")\n    assert \"ukulele.jpg\" in cover_element.get_attribute(\"src\"), f\"Expected 'ukulele.jpg' in '{cover_element.get_attribute('src')}'\"\n    time.sleep(1)\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: Automatic Transition to Next Song in Playlist\n  The system should automatically transition to the next song in the playlist and start playing it when a song ends.\n\n\n  Scenario: [Edge] Transition to first song when the last song ends\n    Given the music player is loaded with the last song \"Ukulele\"\n    And the audio element with data-testid \"audio\" is playing\n    When the song \"Ukulele\" ends\n    Then the first song \"Hey\" should be loaded\n    And the audio element with data-testid \"audio\" should start playing\n    And the title element with data-testid \"title\" should display \"Hey\"\n    And the cover image with data-testid \"cover\" should be updated to \"hey.jpg\"\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\ndef load_test_page(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)\n\ndef close_driver(context):\n    context.driver.quit()\n\n@given('the music player is loaded with the last song \"Ukulele\"')\ndef step_given_music_player_loaded_with_last_song(context):\n    load_test_page(context)\n    # Load the last song \"Ukulele\"\n    time.sleep(1)\n    # to prev song\n    next_button = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='next-button']\")\n    next_button.click()\n    time.sleep(1)\n\n@given('the audio element with data-testid \"audio\" is playing')\ndef step_given_audio_element_is_playing(context):\n    audio_element = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='audio']\")\n    context.driver.execute_script(\"arguments[0].play()\", audio_element)\n    time.sleep(1)\n\n@when('the song \"Ukulele\" ends')\ndef step_when_song_ends(context):\n    # Simulate the end of the song by triggering the 'ended' event\n    audio_element = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='audio']\")\n    context.driver.execute_script(\"arguments[0].dispatchEvent(new Event('ended'))\", audio_element)\n    time.sleep(1)\n\n@then('the first song \"Hey\" should be loaded')\ndef step_then_first_song_should_be_loaded(context):\n    title_element = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='title']\")\n    expected_title = \"Hey\"\n    assert expected_title.lower() in title_element.text.lower(), f\"Expected '{expected_title}' in '{title_element.text}'\"\n\n@then('the audio element with data-testid \"audio\" should start playing')\ndef step_then_audio_should_start_playing(context):\n    audio_element = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='audio']\")\n    is_playing = context.driver.execute_script(\"return !arguments[0].paused\", audio_element)\n    assert is_playing, \"Audio element is not playing\"\n\n@then('the title element with data-testid \"title\" should display \"Hey\"')\ndef step_then_title_should_display_hey(context):\n    title_element = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='title']\")\n    expected_title = \"Hey\"\n    assert expected_title.lower() in title_element.text.lower(), f\"Expected '{expected_title}' in '{title_element.text}'\"\n\n@then('the cover image with data-testid \"cover\" should be updated to \"hey.jpg\"')\ndef step_then_cover_image_should_be_updated(context):\n    cover_element = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='cover']\")\n    expected_src = \"hey.jpg\"\n    assert expected_src in cover_element.get_attribute(\"src\"), f\"Expected '{expected_src}' in '{cover_element.get_attribute('src')}'\"\n\ndef after_scenario(context, scenario):\n    close_driver(context)"
                }
            ]
        }
    }
}