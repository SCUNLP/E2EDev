
    You are tasked with implementing a complete web application using HTML, JavaScript, and CSS. Your implementation must strictly follow the specifications described below.
    SUMMARY:
    {
    "overview": "The Bill Splitter application allows users to input a bill amount, select or enter a tip percentage, specify the number of people to split the bill, and calculate the total amount each person needs to pay. It provides a simple interface for managing shared expenses.",
    "predefined_options": "Predefined tip percentages are available as button selections: 5%, 10%, 15%, 25%, 50%, 75%. These options standardize tip selection and reduce manual input errors.",
    "external_resources": "The application includes a link to the developer's GitHub profile: https://github.com/msranjana.",
    "external_js_libraries": "No external JavaScript libraries are used in the provided code."
}
    ## Functional Requirements
    Implement the following features as described. For each requirement, make sure the HTML structure, JavaScript behavior, and CSS styles match the specifications exactly.
    REQUIREMENTS:
    - Requirement 1: 
When the user enters a valid numeric value in the 'Bill Amount' input field (data-testid='bill-amount'), the system must enable the following UI elements to allow further interactions: (1) 'Select Tip' buttons (class='tip', located within the container with class='tip-container'), (2) 'Custom Tip' input field (data-testid='custom-tip-input'), and (3) 'Number of People' input field (data-testid='number-of-people-input'). The system must validate that the entered value is numeric and greater than zero. If the input is invalid (e.g., non-numeric or empty), the system must disable these elements and visually indicate their disabled state by applying the 'disabled' class to the 'tip-container' and the 'gray-input' class to the input fields. Additionally, the system must ensure that the 'Generate Bill' button (data-testid='generate-bill-button') remains disabled until both the 'Number of People' input field and a tip percentage are provided.
- Requirement 2: 
When the user clicks on a predefined tip percentage button (identified by the class 'tip' and data-testid attributes such as 'tip-button-5', 'tip-button-10', etc.), the system must update the selected tip percentage to the value displayed on the button, visually indicate the selection by adding the 'selected' class to the clicked button and removing it from any previously selected buttons, and clear the value in the custom tip input field (data-testid 'custom-tip-input'). If the 'Number of People' input field (data-testid 'number-of-people-input') contains a valid numeric value greater than or equal to 1, the 'Generate Bill' button (data-testid 'generate-bill-button') must be enabled. If the 'Number of People' input field is empty or invalid, the 'Generate Bill' button must remain disabled. The system must ensure that clicking on a predefined tip button has no effect if the 'Bill Amount' input field (data-testid 'bill-amount') is empty, as the tip container (class 'tip-container') will remain disabled in such cases.
- Requirement 3: 
When the user enters a value into the 'Custom Tip' input field (data-testid='custom-tip-input'), the system must validate the input as a positive number. If valid, the system updates the tip percentage to the entered value, removes the 'selected' class from any predefined tip buttons, and enables the 'Generate Bill' button (data-testid='generate-bill-button') if the 'Number of People' input field (data-testid='number-of-people-input') contains a valid positive number. If the input is invalid (e.g., negative numbers, empty, or non-numeric values), the tip percentage should not be updated, predefined tip buttons should remain deselected, and the 'Generate Bill' button should remain disabled. Additionally, switching from a predefined tip button to a custom tip input should clear the selection of the predefined tip button and update the tip percentage to the custom value.
- Requirement 4: 
The system should enable the 'Generate Bill' button (data-testid: 'generate-bill-button') only when the following conditions are met: 1) The user has entered a valid, non-zero number in the 'Number of People' input field (data-testid: 'number-of-people-input'). 2) A tip percentage is selected from the predefined tip buttons (data-testid: 'tip-button-5', 'tip-button-10', 'tip-button-15', 'tip-button-25', 'tip-button-50', 'tip-button-75') or a custom tip percentage is entered in the 'Custom Tip' input field (data-testid: 'custom-tip-input'). The 'Generate Bill' button should remain disabled if either the 'Number of People' input is zero or empty, or if no tip percentage is selected or entered. Additionally, the 'Generate Bill' button should be disabled by default and only become enabled when both conditions are satisfied.
- Requirement 5: 
When the user clicks the 'Generate Bill' button (data-testid='generate-bill-button'), the system calculates the tip amount, total bill, and per-person bill based on the following inputs: the bill amount (data-testid='bill-amount'), the selected tip percentage (via tip buttons with data-testid='tip-button-{percentage}' or a custom tip percentage entered in the custom tip input field with data-testid='custom-tip-input'), and the number of people (data-testid='number-of-people-input'). The calculated values are displayed in the respective output fields: tip amount (data-testid='tip-amount-value'), total bill (data-testid='total-value'), and per-person bill (data-testid='each-person-bill-value'). The 'Reset' button (data-testid='reset-button') is enabled after the calculation. The system supports the following scenarios: (1) using predefined tip percentages, (2) using a custom tip percentage, and (3) handling edge cases such as high tip percentages. The system ensures that the 'Generate Bill' button is only enabled when all required inputs are valid and disables it otherwise. Additionally, the 'Reset' button clears all inputs, resets the output fields, and disables itself and the 'Generate Bill' button.
- Requirement 6: 
When the user clicks the 'Reset' button (data-testid: 'reset-button'), the system must perform the following actions: clear the 'Bill Amount' input field (data-testid: 'bill-amount'), the 'Number of People' input field (data-testid: 'number-of-people-input'), and the 'Custom Tip' input field (data-testid: 'custom-tip-input'). It should also clear the 'Tip Amount' output display (data-testid: 'tip-amount-value'), the 'Total Bill' output display (data-testid: 'total-value'), and the 'Each Person Bill' output display (data-testid: 'each-person-bill-value'). Additionally, the system should reset the tip percentage to 0, remove the 'selected' class from any tip buttons within the 'tip-container', and disable both the 'Generate Bill' button (data-testid: 'generate-bill-button') and the 'Reset' button (data-testid: 'reset-button').

    
    ## Output Format
    Provide a clean and complete implementation including:
    1. HTML structure (including necessary `data-testid`, `id`, and `class` values).
    2. JavaScript functionality that matches the behavior described.
    3. CSS for styling according to BEM and required class names.
    4. Ensure that the text content in the components is exactly as specified in the requirements.
    Do not include any extra components or libraries not listed above. Keep your code concise, semantic, and standards-compliant.
    