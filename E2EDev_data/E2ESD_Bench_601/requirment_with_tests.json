{
    "summary": {
        "overview": "The Bill Splitter application allows users to input a bill amount, select or enter a tip percentage, specify the number of people to split the bill, and calculate the total amount each person needs to pay. It provides a simple interface for managing shared expenses.",
        "predefined_options": "Predefined tip percentages are available as button selections: 5%, 10%, 15%, 25%, 50%, 75%. These options standardize tip selection and reduce manual input errors.",
        "external_resources": "The application includes a link to the developer's GitHub profile: https://github.com/msranjana.",
        "external_js_libraries": "No external JavaScript libraries are used in the provided code."
    },
    "finegrained_rewith_test": {
        "1": {
            "requirement": {
                "description": "When the user enters a valid numeric value in the 'Bill Amount' input field (data-testid='bill-amount'), the system must enable the following UI elements to allow further interactions: (1) 'Select Tip' buttons (class='tip', located within the container with class='tip-container'), (2) 'Custom Tip' input field (data-testid='custom-tip-input'), and (3) 'Number of People' input field (data-testid='number-of-people-input'). The system must validate that the entered value is numeric and greater than zero. If the input is invalid (e.g., non-numeric or empty), the system must disable these elements and visually indicate their disabled state by applying the 'disabled' class to the 'tip-container' and the 'gray-input' class to the input fields. Additionally, the system must ensure that the 'Generate Bill' button (data-testid='generate-bill-button') remains disabled until both the 'Number of People' input field and a tip percentage are provided."
            },
            "test_cases": [
                {
                    "test_case": [
                        "Feature: Enable Tip and People Inputs on Valid Bill Amount Entry\n  The system should enable the 'Select Tip' buttons, 'Custom Tip' input, and 'Number of People' input when a valid bill amount is entered.\n\n\n  Scenario: [Normal] User enters a valid bill amount\n    Given the Bill Splitter page is loaded\n    And the \"Bill Amount\" input field with data-testid \"bill-amount\" is present\n    When the user enters \"1000\" into the \"Bill Amount\" input field\n    Then the \"Select Tip\" buttons should be enabled\n    And the \"Custom Tip\" input with data-testid \"custom-tip-input\" should be enabled\n    And the \"Number of People\" input with data-testid \"number-of-people-input\" should be enabled\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the Bill Splitter page is loaded')\ndef step_given_bill_splitter_page_loaded(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)\n\n@given('the \"Bill Amount\" input field with data-testid \"bill-amount\" is present')\ndef step_given_bill_amount_input_present(context):\n    WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='bill-amount']\"))\n    )\n    time.sleep(1)\n\n@when('the user enters \"1000\" into the \"Bill Amount\" input field')\ndef step_when_user_enters_bill_amount(context):\n    bill_amount_input = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='bill-amount']\")\n    bill_amount_input.clear()\n    bill_amount_input.send_keys(\"1000\")\n    time.sleep(1)\n\n@then('the \"Select Tip\" buttons should be enabled')\ndef step_then_select_tip_buttons_enabled(context):\n    tip_buttons = context.driver.find_elements(By.CSS_SELECTOR, \".tip-container .tip\")\n    for button in tip_buttons:\n        assert button.is_enabled(), \"Expected tip button to be enabled\"\n    time.sleep(1)\n\n@then('the \"Custom Tip\" input with data-testid \"custom-tip-input\" should be enabled')\ndef step_then_custom_tip_input_enabled(context):\n    custom_tip_input = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='custom-tip-input']\")\n    assert custom_tip_input.is_enabled(), \"Expected custom tip input to be enabled\"\n    time.sleep(1)\n\n@then('the \"Number of People\" input with data-testid \"number-of-people-input\" should be enabled')\ndef step_then_number_of_people_input_enabled(context):\n    number_of_people_input = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='number-of-people-input']\")\n    assert number_of_people_input.is_enabled(), \"Expected number of people input to be enabled\"\n    time.sleep(1)\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: Enable Tip and People Inputs on Valid Bill Amount Entry\n  The system should enable the 'Select Tip' buttons, 'Custom Tip' input, and 'Number of People' input when a valid bill amount is entered.\n\n\n  Scenario: [Edge] User enters a very large bill amount\n    Given the Bill Splitter page is loaded\n    And the \"Bill Amount\" input field with data-testid \"bill-amount\" is present\n    When the user enters \"1000000\" into the \"Bill Amount\" input field\n    Then the \"Select Tip\" buttons should be enabled\n    And the \"Custom Tip\" input with data-testid \"custom-tip-input\" should be enabled\n    And the \"Number of People\" input with data-testid \"number-of-people-input\" should be enabled\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the Bill Splitter page is loaded')\ndef step_impl(context):\n    # Initialize the WebDriver and load the test page\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    context.driver.maximize_window()\n    time.sleep(1)  # Allow the page to load completely\n\n@given('the \"Bill Amount\" input field with data-testid \"bill-amount\" is present')\ndef step_impl(context):\n    # Wait for the \"Bill Amount\" input field to be present\n    WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='bill-amount']\"))\n    )\n\n@when('the user enters \"1000000\" into the \"Bill Amount\" input field')\ndef step_impl(context):\n    # Locate the \"Bill Amount\" input field and enter the value\n    bill_amount_input = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='bill-amount']\")\n    bill_amount_input.clear()\n    bill_amount_input.send_keys(\"1000000\")\n    time.sleep(1)  # Allow the UI to update\n\n@then('the \"Select Tip\" buttons should be enabled')\ndef step_impl(context):\n    # Verify that the \"Select Tip\" buttons are enabled\n    tip_buttons = context.driver.find_elements(By.CSS_SELECTOR, \".tip-container button\")\n    for button in tip_buttons:\n        assert button.is_enabled(), f\"Tip button {button.text} is not enabled\"\n\n@then('the \"Custom Tip\" input with data-testid \"custom-tip-input\" should be enabled')\ndef step_impl(context):\n    # Verify that the \"Custom Tip\" input is enabled\n    custom_tip_input = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='custom-tip-input']\")\n    assert custom_tip_input.is_enabled(), \"Custom Tip input is not enabled\"\n\n@then('the \"Number of People\" input with data-testid \"number-of-people-input\" should be enabled')\ndef step_impl(context):\n    # Verify that the \"Number of People\" input is enabled\n    number_of_people_input = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='number-of-people-input']\")\n    assert number_of_people_input.is_enabled(), \"Number of People input is not enabled\"\n\ndef after_scenario(context, scenario):\n    # Close the browser after each scenario\n    if hasattr(context, 'driver'):\n        context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: Enable Tip and People Inputs on Valid Bill Amount Entry\n  The system should enable the 'Select Tip' buttons, 'Custom Tip' input, and 'Number of People' input when a valid bill amount is entered.\n\n\n  Scenario: [Error] User enters a non-numeric bill amount\n    Given the Bill Splitter page is loaded\n    And the \"Bill Amount\" input field with data-testid \"bill-amount\" is present\n    When the user enters \"abc\" into the \"Bill Amount\" input field\n    Then the \"Select Tip\" buttons should remain disabled\n    And the \"Custom Tip\" input with data-testid \"custom-tip-input\" should remain disabled\n    And the \"Number of People\" input with data-testid \"number-of-people-input\" should remain disabled"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the Bill Splitter page is loaded')\ndef step_given_bill_splitter_page_loaded(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)\n\n@given('the \"Bill Amount\" input field with data-testid \"bill-amount\" is present')\ndef step_given_bill_amount_input_present(context):\n    WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='bill-amount']\"))\n    )\n    time.sleep(1)\n\n@when('the user enters \"abc\" into the \"Bill Amount\" input field')\ndef step_when_user_enters_non_numeric_bill_amount(context):\n    bill_amount_input = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='bill-amount']\")\n    bill_amount_input.clear()\n    bill_amount_input.send_keys(\"abc\")\n    time.sleep(1)\n\n@then('the \"Select Tip\" buttons should remain disabled')\ndef step_then_select_tip_buttons_disabled(context):\n    tips_container = context.driver.find_element(By.CSS_SELECTOR, \".tip-container\")\n    assert \"disabled\" in tips_container.get_attribute(\"class\"), \"Expected 'Select Tip' buttons to be disabled\"\n    time.sleep(1)\n\n@then('the \"Custom Tip\" input with data-testid \"custom-tip-input\" should remain disabled')\ndef step_then_custom_tip_input_disabled(context):\n    custom_tip_input = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='custom-tip-input']\")\n    assert custom_tip_input.get_attribute(\"disabled\") is not None, \"Expected 'Custom Tip' input to be disabled\"\n    time.sleep(1)\n\n@then('the \"Number of People\" input with data-testid \"number-of-people-input\" should remain disabled')\ndef step_then_number_of_people_input_disabled(context):\n    number_of_people_input = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='number-of-people-input']\")\n    assert number_of_people_input.get_attribute(\"disabled\") is not None, \"Expected 'Number of People' input to be disabled\"\n    time.sleep(1)\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                }
            ]
        },
        "2": {
            "requirement": {
                "description": "When the user clicks on a predefined tip percentage button (identified by the class 'tip' and data-testid attributes such as 'tip-button-5', 'tip-button-10', etc.), the system must update the selected tip percentage to the value displayed on the button, visually indicate the selection by adding the 'selected' class to the clicked button and removing it from any previously selected buttons, and clear the value in the custom tip input field (data-testid 'custom-tip-input'). If the 'Number of People' input field (data-testid 'number-of-people-input') contains a valid numeric value greater than or equal to 1, the 'Generate Bill' button (data-testid 'generate-bill-button') must be enabled. If the 'Number of People' input field is empty or invalid, the 'Generate Bill' button must remain disabled. The system must ensure that clicking on a predefined tip button has no effect if the 'Bill Amount' input field (data-testid 'bill-amount') is empty, as the tip container (class 'tip-container') will remain disabled in such cases."
            },
            "test_cases": [
                {
                    "test_case": [
                        "Feature: Predefined Tip Selection\n  The system should allow users to select a predefined tip percentage, clear any custom tip input, and enable the 'Generate Bill' button if the 'Number of People' input has a valid value.\n\n\n  Scenario: [Normal] User selects a predefined tip percentage with a valid number of people\n    Given the Bill Splitter page is loaded\n    And the user enters \"1000\" into the bill amount field with data-testid \"bill-amount\"\n    And the user enters \"4\" into the number of people field with data-testid \"number-of-people-input\"\n    When the user clicks on the \"10%\" tip button with data-testid \"tip-button-10\"\n    Then the tip percentage should be updated to \"10\"\n    And the custom tip input with data-testid \"custom-tip-input\" should be cleared\n    And the \"Generate Bill\" button with data-testid \"generate-bill-button\" should be enabled\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the Bill Splitter page is loaded')\ndef step_given_bill_splitter_page_loaded(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)\n\n@given('the user enters \"{amount}\" into the bill amount field with data-testid \"bill-amount\"')\ndef step_given_enter_bill_amount(context, amount):\n    bill_amount_input = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='bill-amount']\"))\n    )\n    bill_amount_input.clear()\n    bill_amount_input.send_keys(amount)\n    time.sleep(1)\n\n@given('the user enters \"{people}\" into the number of people field with data-testid \"number-of-people-input\"')\ndef step_given_enter_number_of_people(context, people):\n    number_of_people_input = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='number-of-people-input']\"))\n    )\n    number_of_people_input.clear()\n    number_of_people_input.send_keys(people)\n    time.sleep(1)\n\n@when('the user clicks on the \"10%\" tip button with data-testid \"tip-button-10\"')\ndef step_when_click_tip_button(context):\n    tip_button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='tip-button-10']\"))\n    )\n    tip_button.click()\n    time.sleep(1)\n\n@then('the tip percentage should be updated to \"10\"')\ndef step_then_tip_percentage_updated(context):\n    selected_tip_button = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='tip-button-10']\")\n    assert \"selected\" in selected_tip_button.get_attribute(\"class\"), \"Tip button is not selected\"\n    time.sleep(1)\n\n@then('the custom tip input with data-testid \"custom-tip-input\" should be cleared')\ndef step_then_custom_tip_input_cleared(context):\n    custom_tip_input = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='custom-tip-input']\")\n    assert custom_tip_input.get_attribute(\"value\") == \"\", \"Custom tip input is not cleared\"\n    time.sleep(1)\n\n@then('the \"Generate Bill\" button with data-testid \"generate-bill-button\" should be enabled')\ndef step_then_generate_bill_button_enabled(context):\n    generate_bill_button = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='generate-bill-button']\")\n    assert generate_bill_button.is_enabled(), \"Generate Bill button is not enabled\"\n    time.sleep(1)\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: Predefined Tip Selection\n  The system should allow users to select a predefined tip percentage, clear any custom tip input, and enable the 'Generate Bill' button if the 'Number of People' input has a valid value.\n\n\n  Scenario: [Edge] User selects a predefined tip percentage with the minimum valid number of people\n    Given the Bill Splitter page is loaded\n    And the user enters \"500\" into the bill amount field with data-testid \"bill-amount\"\n    And the user enters \"1\" into the number of people field with data-testid \"number-of-people-input\"\n    When the user clicks on the \"25%\" tip button with data-testid \"tip-button-25\"\n    Then the tip percentage should be updated to \"25\"\n    And the custom tip input with data-testid \"custom-tip-input\" should be cleared\n    And the \"Generate Bill\" button with data-testid \"generate-bill-button\" should be enabled\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the Bill Splitter page is loaded')\ndef step_given_bill_splitter_page_loaded(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)\n\n@given('the user enters \"{amount}\" into the bill amount field with data-testid \"bill-amount\"')\ndef step_given_user_enters_bill_amount(context, amount):\n    bill_amount_input = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='bill-amount']\"))\n    )\n    bill_amount_input.clear()\n    bill_amount_input.send_keys(amount)\n    time.sleep(1)\n\n@given('the user enters \"{people}\" into the number of people field with data-testid \"number-of-people-input\"')\ndef step_given_user_enters_number_of_people(context, people):\n    number_of_people_input = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='number-of-people-input']\"))\n    )\n    number_of_people_input.clear()\n    number_of_people_input.send_keys(people)\n    time.sleep(1)\n\n@when('the user clicks on the \"25%\" tip button with data-testid \"tip-button-25\"')\ndef step_when_user_clicks_tip_button(context):\n    tip_button_25 = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='tip-button-25']\"))\n    )\n    tip_button_25.click()\n    time.sleep(1)\n\n@then('the tip percentage should be updated to \"25\"')\ndef step_then_tip_percentage_updated(context):\n    selected_tip_button = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='tip-button-25']\")\n    assert \"selected\" in selected_tip_button.get_attribute(\"class\"), \"Tip percentage not updated to 25\"\n\n@then('the custom tip input with data-testid \"custom-tip-input\" should be cleared')\ndef step_then_custom_tip_input_cleared(context):\n    custom_tip_input = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='custom-tip-input']\")\n    assert custom_tip_input.get_attribute(\"value\") == \"\", \"Custom tip input not cleared\"\n\n@then('the \"Generate Bill\" button with data-testid \"generate-bill-button\" should be enabled')\ndef step_then_generate_bill_button_enabled(context):\n    generate_bill_button = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='generate-bill-button']\")\n    assert generate_bill_button.is_enabled(), \"Generate Bill button is not enabled\"\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: Predefined Tip Selection\n  The system should allow users to select a predefined tip percentage, clear any custom tip input, and enable the 'Generate Bill' button if the 'Number of People' input has a valid value.\n\n\n  Scenario: [Error] User selects a predefined tip percentage without entering the number of people\n    Given the Bill Splitter page is loaded\n    And the user enters \"750\" into the bill amount field with data-testid \"bill-amount\"\n    When the user clicks on the \"50%\" tip button with data-testid \"tip-button-50\"\n    Then the tip percentage should be updated to \"50\"\n    And the custom tip input with data-testid \"custom-tip-input\" should be cleared\n    And the \"Generate Bill\" button with data-testid \"generate-bill-button\" should be disabled"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the Bill Splitter page is loaded')\ndef step_impl(context):\n    # Initialize the WebDriver and load the test page\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    context.driver.maximize_window()\n    time.sleep(1)  # Allow the page to load fully\n\n@given('the user enters \"{amount}\" into the bill amount field with data-testid \"bill-amount\"')\ndef step_impl(context, amount):\n    driver = context.driver\n    bill_amount_input = WebDriverWait(driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='bill-amount']\"))\n    )\n    bill_amount_input.clear()\n    bill_amount_input.send_keys(amount)\n    time.sleep(1)\n\n@when('the user clicks on the \"50%\" tip button with data-testid \"tip-button-50\"')\ndef step_impl(context):\n    driver = context.driver\n    tip_button_50 = WebDriverWait(driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='tip-button-50']\"))\n    )\n    tip_button_50.click()\n    time.sleep(1)\n\n@then('the tip percentage should be updated to \"50\"')\ndef step_impl(context):\n    driver = context.driver\n    tip_button_50 = WebDriverWait(driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='tip-button-50']\"))\n    )\n    assert \"selected\" in tip_button_50.get_attribute(\"class\"), \"Tip button 50% is not selected\"\n\n@then('the custom tip input with data-testid \"custom-tip-input\" should be cleared')\ndef step_impl(context):\n    driver = context.driver\n    custom_tip_input = WebDriverWait(driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='custom-tip-input']\"))\n    )\n    assert custom_tip_input.get_attribute(\"value\") == \"\", \"Custom tip input is not cleared\"\n\n@then('the \"Generate Bill\" button with data-testid \"generate-bill-button\" should be disabled')\ndef step_impl(context):\n    driver = context.driver\n    generate_bill_button = WebDriverWait(driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='generate-bill-button']\"))\n    )\n    assert not generate_bill_button.is_enabled(), \"Generate Bill button is not disabled\"\n\n# Teardown to close the browser after the test\ndef after_scenario(context, scenario):\n    if hasattr(context, 'driver'):\n        context.driver.quit()"
                }
            ]
        },
        "3": {
            "requirement": {
                "description": "When the user enters a value into the 'Custom Tip' input field (data-testid='custom-tip-input'), the system must validate the input as a positive number. If valid, the system updates the tip percentage to the entered value, removes the 'selected' class from any predefined tip buttons, and enables the 'Generate Bill' button (data-testid='generate-bill-button') if the 'Number of People' input field (data-testid='number-of-people-input') contains a valid positive number. If the input is invalid (e.g., negative numbers, empty, or non-numeric values), the tip percentage should not be updated, predefined tip buttons should remain deselected, and the 'Generate Bill' button should remain disabled. Additionally, switching from a predefined tip button to a custom tip input should clear the selection of the predefined tip button and update the tip percentage to the custom value."
            },
            "test_cases": [
                {
                    "test_case": [
                        "Feature: Custom Tip Percentage Input Functionality\n\n  The system should allow users to enter a custom tip percentage, update the tip percentage accordingly, deselect any predefined tip buttons, and enable the 'Generate Bill' button if the 'Number of People' input has a valid value.\n\n\n  Scenario: [Normal] Entering a valid custom tip percentage with a valid number of people\n    Given the Bill Splitter page is loaded\n    And the user enters \"1000\" into the bill amount field with data-testid \"bill-amount\"\n    And the user enters \"3\" into the number of people field with data-testid \"number-of-people-input\"\n    When the user enters \"20\" into the custom tip input field with data-testid \"custom-tip-input\"\n    Then the tip percentage should be updated to \"20\"\n    And no predefined tip buttons should be selected\n    And the \"Generate Bill\" button with data-testid \"generate-bill-button\" should be enabled\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the Bill Splitter page is loaded')\ndef step_impl(context):\n    # Initialize the WebDriver and load the test page\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    context.driver.maximize_window()\n    time.sleep(1)  # Allow the page to load completely\n\n@given('the user enters \"{bill_amount}\" into the bill amount field with data-testid \"bill-amount\"')\ndef step_impl(context, bill_amount):\n    # Locate the bill amount input field and enter the value\n    bill_amount_input = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='bill-amount']\"))\n    )\n    bill_amount_input.clear()\n    bill_amount_input.send_keys(bill_amount)\n    time.sleep(1)\n\n@given('the user enters \"{number_of_people}\" into the number of people field with data-testid \"number-of-people-input\"')\ndef step_impl(context, number_of_people):\n    # Locate the number of people input field and enter the value\n    number_of_people_input = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='number-of-people-input']\"))\n    )\n    number_of_people_input.clear()\n    number_of_people_input.send_keys(number_of_people)\n    time.sleep(1)\n\n@when('the user enters \"{custom_tip}\" into the custom tip input field with data-testid \"custom-tip-input\"')\ndef step_impl(context, custom_tip):\n    # Locate the custom tip input field and enter the value\n    custom_tip_input = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='custom-tip-input']\"))\n    )\n    custom_tip_input.clear()\n    custom_tip_input.send_keys(custom_tip)\n    time.sleep(1)\n\n@then('the tip percentage should be updated to \"{expected_tip_percentage}\"')\ndef step_impl(context, expected_tip_percentage):\n    # Verify that the tip percentage is updated correctly\n    custom_tip_input = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='custom-tip-input']\"))\n    )\n    actual_tip_percentage = custom_tip_input.get_attribute(\"value\")\n    assert actual_tip_percentage == expected_tip_percentage, f\"Expected tip percentage '{expected_tip_percentage}', but got '{actual_tip_percentage}'\"\n\n@then('no predefined tip buttons should be selected')\ndef step_impl(context):\n    # Verify that no predefined tip buttons are selected\n    tip_buttons = context.driver.find_elements(By.CSS_SELECTOR, \".tip.selected\")\n    assert len(tip_buttons) == 0, \"Expected no predefined tip buttons to be selected\"\n\n@then('the \"Generate Bill\" button with data-testid \"generate-bill-button\" should be enabled')\ndef step_impl(context):\n    # Verify that the Generate Bill button is enabled\n    generate_bill_button = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='generate-bill-button']\"))\n    )\n    assert generate_bill_button.is_enabled(), \"Expected the 'Generate Bill' button to be enabled\"\n\n# Teardown to close the browser after the test\ndef after_scenario(context, scenario):\n    if hasattr(context, 'driver'):\n        context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: Custom Tip Percentage Input Functionality\n\n  The system should allow users to enter a custom tip percentage, update the tip percentage accordingly, deselect any predefined tip buttons, and enable the 'Generate Bill' button if the 'Number of People' input has a valid value.\n\n\n  Scenario: [Edge] Entering a custom tip percentage with no number of people\n    Given the Bill Splitter page is loaded\n    And the user enters \"1000\" into the bill amount field with data-testid \"bill-amount\"\n    When the user enters \"15\" into the custom tip input field with data-testid \"custom-tip-input\"\n    Then the tip percentage should be updated to \"15\"\n    And no predefined tip buttons should be selected\n    And the \"Generate Bill\" button with data-testid \"generate-bill-button\" should be disabled\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the Bill Splitter page is loaded')\ndef step_impl(context):\n    # Initialize the WebDriver and load the test page\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    context.driver.maximize_window()\n    time.sleep(1)  # Allow the page to load completely\n\n@given('the user enters \"{bill_amount}\" into the bill amount field with data-testid \"bill-amount\"')\ndef step_impl(context, bill_amount):\n    driver = context.driver\n    bill_amount_input = WebDriverWait(driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='bill-amount']\"))\n    )\n    bill_amount_input.clear()\n    bill_amount_input.send_keys(bill_amount)\n    time.sleep(1)\n\n@when('the user enters \"{custom_tip}\" into the custom tip input field with data-testid \"custom-tip-input\"')\ndef step_impl(context, custom_tip):\n    driver = context.driver\n    custom_tip_input = WebDriverWait(driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='custom-tip-input']\"))\n    )\n    custom_tip_input.clear()\n    custom_tip_input.send_keys(custom_tip)\n    time.sleep(1)\n\n@then('the tip percentage should be updated to \"{expected_tip_percentage}\"')\ndef step_impl(context, expected_tip_percentage):\n    driver = context.driver\n    custom_tip_input = WebDriverWait(driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='custom-tip-input']\"))\n    )\n    actual_tip_percentage = custom_tip_input.get_attribute(\"value\")\n    assert actual_tip_percentage == expected_tip_percentage, f\"Expected tip percentage to be '{expected_tip_percentage}', but got '{actual_tip_percentage}'\"\n    time.sleep(1)\n\n@then('no predefined tip buttons should be selected')\ndef step_impl(context):\n    driver = context.driver\n    tip_buttons = driver.find_elements(By.CSS_SELECTOR, \".tip\")\n    for button in tip_buttons:\n        assert \"selected\" not in button.get_attribute(\"class\"), f\"Tip button '{button.text}' is unexpectedly selected\"\n    time.sleep(1)\n\n@then('the \"Generate Bill\" button with data-testid \"generate-bill-button\" should be disabled')\ndef step_impl(context):\n    driver = context.driver\n    generate_bill_button = WebDriverWait(driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='generate-bill-button']\"))\n    )\n    assert not generate_bill_button.is_enabled(), \"Generate Bill button is unexpectedly enabled\"\n    time.sleep(1)\n\n# Teardown to close the browser after the test\ndef after_scenario(context, scenario):\n    if hasattr(context, 'driver'):\n        context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: Custom Tip Percentage Input Functionality\n\n  The system should allow users to enter a custom tip percentage, update the tip percentage accordingly, deselect any predefined tip buttons, and enable the 'Generate Bill' button if the 'Number of People' input has a valid value.\n\n\n  Scenario: [Error] Entering an invalid custom tip percentage\n    Given the Bill Splitter page is loaded\n    And the user enters \"1000\" into the bill amount field with data-testid \"bill-amount\"\n    And the user enters \"3\" into the number of people field with data-testid \"number-of-people-input\"\n    When the user enters \"-5\" into the custom tip input field with data-testid \"custom-tip-input\"\n    Then the tip percentage should not be updated\n    And no predefined tip buttons should be selected\n    And the \"Generate Bill\" button with data-testid \"generate-bill-button\" should be disabled\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the Bill Splitter page is loaded')\ndef step_given_bill_splitter_page_loaded(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)\n\n@given('the user enters \"{amount}\" into the bill amount field with data-testid \"bill-amount\"')\ndef step_given_enter_bill_amount(context, amount):\n    bill_amount_input = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='bill-amount']\"))\n    )\n    bill_amount_input.clear()\n    bill_amount_input.send_keys(amount)\n    time.sleep(1)\n\n@given('the user enters \"{people}\" into the number of people field with data-testid \"number-of-people-input\"')\ndef step_given_enter_number_of_people(context, people):\n    number_of_people_input = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='number-of-people-input']\"))\n    )\n    number_of_people_input.clear()\n    number_of_people_input.send_keys(people)\n    time.sleep(1)\n\n@when('the user enters \"{tip}\" into the custom tip input field with data-testid \"custom-tip-input\"')\ndef step_when_enter_custom_tip(context, tip):\n    custom_tip_input = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='custom-tip-input']\"))\n    )\n    custom_tip_input.clear()\n    custom_tip_input.send_keys(tip)\n    time.sleep(1)\n\n@then('the tip percentage should not be updated')\ndef step_then_tip_percentage_not_updated(context):\n    # Assuming there's a way to verify the tip percentage is not updated\n    # This might require checking the state of the UI or some internal variable\n    pass\n\n@then('no predefined tip buttons should be selected')\ndef step_then_no_predefined_tip_buttons_selected(context):\n    tips_container = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \".tip-container\"))\n    )\n    selected_tips = tips_container.find_elements(By.CSS_SELECTOR, \".selected\")\n    assert len(selected_tips) == 0, \"Expected no tip buttons to be selected\"\n\n@then('the \"Generate Bill\" button with data-testid \"generate-bill-button\" should be disabled')\ndef step_then_generate_bill_button_disabled(context):\n    generate_bill_button = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='generate-bill-button']\"))\n    )\n    assert not generate_bill_button.is_enabled(), \"Expected 'Generate Bill' button to be disabled\"\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: Custom Tip Percentage Input Functionality\n\n  The system should allow users to enter a custom tip percentage, update the tip percentage accordingly, deselect any predefined tip buttons, and enable the 'Generate Bill' button if the 'Number of People' input has a valid value.\n\n\n  Scenario: [Normal] Switching from a predefined tip to a custom tip\n    Given the Bill Splitter page is loaded\n    And the user enters \"1000\" into the bill amount field with data-testid \"bill-amount\"\n    And the user enters \"3\" into the number of people field with data-testid \"number-of-people-input\"\n    And the user clicks the \"10%\" tip button with data-testid \"tip-button-10\"\n    When the user enters \"25\" into the custom tip input field with data-testid \"custom-tip-input\"\n    Then the tip percentage should be updated to \"25\"\n    And no predefined tip buttons should be selected\n    And the \"Generate Bill\" button with data-testid \"generate-bill-button\" should be enabled"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the Bill Splitter page is loaded')\ndef step_impl(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    context.driver.maximize_window()\n\n@given('the user enters \"{amount}\" into the bill amount field with data-testid \"bill-amount\"')\ndef step_impl(context, amount):\n    bill_amount_field = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='bill-amount']\"))\n    )\n    bill_amount_field.clear()\n    bill_amount_field.send_keys(amount)\n    time.sleep(1)\n\n@given('the user enters \"{people}\" into the number of people field with data-testid \"number-of-people-input\"')\ndef step_impl(context, people):\n    number_of_people_field = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='number-of-people-input']\"))\n    )\n    number_of_people_field.clear()\n    number_of_people_field.send_keys(people)\n    time.sleep(1)\n\n@given('the user clicks the \"10%\" tip button with data-testid \"tip-button-10\"')\ndef step_impl(context):\n    tip_button_10 = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='tip-button-10']\"))\n    )\n    tip_button_10.click()\n    time.sleep(1)\n\n@when('the user enters \"{custom_tip}\" into the custom tip input field with data-testid \"custom-tip-input\"')\ndef step_impl(context, custom_tip):\n    custom_tip_input = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='custom-tip-input']\"))\n    )\n    custom_tip_input.clear()\n    custom_tip_input.send_keys(custom_tip)\n    time.sleep(1)\n\n@then('the tip percentage should be updated to \"{expected_tip}\"')\ndef step_impl(context, expected_tip):\n    custom_tip_input = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='custom-tip-input']\"))\n    )\n    actual_tip = custom_tip_input.get_attribute(\"value\")\n    assert actual_tip == expected_tip, f\"Expected tip percentage to be '{expected_tip}', but got '{actual_tip}'\"\n\n@then('no predefined tip buttons should be selected')\ndef step_impl(context):\n    tip_buttons = context.driver.find_elements(By.CSS_SELECTOR, \".tip\")\n    for button in tip_buttons:\n        class_list = button.get_attribute(\"class\").split()\n        assert \"selected\" not in class_list, f\"Tip button '{button.text}' is unexpectedly selected\"\n\n@then('the \"Generate Bill\" button with data-testid \"generate-bill-button\" should be enabled')\ndef step_impl(context):\n    generate_bill_button = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='generate-bill-button']\"))\n    )\n    assert generate_bill_button.is_enabled(), \"Generate Bill button is not enabled\"\n\n# Teardown to close the browser after the test\ndef after_scenario(context, scenario):\n    if hasattr(context, 'driver'):\n        context.driver.quit()"
                }
            ]
        },
        "4": {
            "requirement": {
                "description": "The system should enable the 'Generate Bill' button (data-testid: 'generate-bill-button') only when the following conditions are met: 1) The user has entered a valid, non-zero number in the 'Number of People' input field (data-testid: 'number-of-people-input'). 2) A tip percentage is selected from the predefined tip buttons (data-testid: 'tip-button-5', 'tip-button-10', 'tip-button-15', 'tip-button-25', 'tip-button-50', 'tip-button-75') or a custom tip percentage is entered in the 'Custom Tip' input field (data-testid: 'custom-tip-input'). The 'Generate Bill' button should remain disabled if either the 'Number of People' input is zero or empty, or if no tip percentage is selected or entered. Additionally, the 'Generate Bill' button should be disabled by default and only become enabled when both conditions are satisfied."
            },
            "test_cases": [
                {
                    "test_case": [
                        "Feature: Enable 'Generate Bill' Button Based on 'Number of People' Input and Tip Selection\n\n  The system should enable the 'Generate Bill' button when a valid number is entered in the 'Number of People' input field and a tip percentage is selected or entered.\n\n\n  Scenario: [Normal] Enable 'Generate Bill' button with valid 'Number of People' and selected tip\n    Given the Bill Splitter page is loaded\n    And the user enters \"1000\" into the bill amount field with data-testid \"bill-amount\"\n    And the user enters \"3\" into the number of people field with data-testid \"number-of-people-input\"\n    And the user clicks on the \"10%\" tip button with data-testid \"tip-button-10\"\n    When the user checks the \"Generate Bill\" button with data-testid \"generate-bill-button\"\n    Then the \"Generate Bill\" button should be enabled\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\n# Path to the local HTML file\nfile_path = \"index.html\"\n\n@given('the Bill Splitter page is loaded')\ndef step_impl(context):\n    # Initialize the WebDriver and load the test page\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)  # Allow the page to load\n\n@given('the user enters \"{amount}\" into the bill amount field with data-testid \"bill-amount\"')\ndef step_impl(context, amount):\n    # Locate the bill amount input field and enter the specified amount\n    bill_amount_input = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='bill-amount']\"))\n    )\n    bill_amount_input.clear()\n    bill_amount_input.send_keys(amount)\n    time.sleep(1)\n\n@given('the user enters \"{people}\" into the number of people field with data-testid \"number-of-people-input\"')\ndef step_impl(context, people):\n    # Locate the number of people input field and enter the specified number\n    number_of_people_input = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='number-of-people-input']\"))\n    )\n    number_of_people_input.clear()\n    number_of_people_input.send_keys(people)\n    time.sleep(1)\n\n@given('the user clicks on the \"{tip}\" tip button with data-testid \"{tip_button}\"')\ndef step_impl(context, tip, tip_button):\n    # Locate the specified tip button and click it\n    tip_button_element = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, f\"[data-testid='{tip_button}']\"))\n    )\n    tip_button_element.click()\n    time.sleep(1)\n\n@when('the user checks the \"Generate Bill\" button with data-testid \"generate-bill-button\"')\ndef step_impl(context):\n    # Locate the \"Generate Bill\" button\n    context.generate_bill_button = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='generate-bill-button']\"))\n    )\n    time.sleep(1)\n\n@then('the \"Generate Bill\" button should be enabled')\ndef step_impl(context):\n    # Verify that the \"Generate Bill\" button is enabled\n    assert context.generate_bill_button.is_enabled(), \"Generate Bill button is not enabled\"\n    time.sleep(1)\n\n# Ensure the browser is closed after each scenario\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: Enable 'Generate Bill' Button Based on 'Number of People' Input and Tip Selection\n\n  The system should enable the 'Generate Bill' button when a valid number is entered in the 'Number of People' input field and a tip percentage is selected or entered.\n\n\n  Scenario: [Edge] Enable 'Generate Bill' button with valid 'Number of People' and custom tip\n    Given the Bill Splitter page is loaded\n    And the user enters \"500\" into the bill amount field with data-testid \"bill-amount\"\n    And the user enters \"1\" into the number of people field with data-testid \"number-of-people-input\"\n    And the user enters \"20\" into the custom tip input with data-testid \"custom-tip-input\"\n    When the user checks the \"Generate Bill\" button with data-testid \"generate-bill-button\"\n    Then the \"Generate Bill\" button should be enabled\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\n\n# Placeholder for the file path to dynamically load the test page\nfile_path = \"index.html\"\n\n@given('the Bill Splitter page is loaded')\ndef step_given_page_is_loaded(context):\n    # Initialize the Selenium WebDriver and navigate to the test page\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.TAG_NAME, \"body\"))\n    )\n\n@given('the user enters \"{amount}\" into the bill amount field with data-testid \"bill-amount\"')\ndef step_given_enter_bill_amount(context, amount):\n    bill_amount_input = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='bill-amount']\"))\n    )\n    bill_amount_input.clear()\n    bill_amount_input.send_keys(amount)\n\n@given('the user enters \"{people}\" into the number of people field with data-testid \"number-of-people-input\"')\ndef step_given_enter_number_of_people(context, people):\n    number_of_people_input = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='number-of-people-input']\"))\n    )\n    number_of_people_input.clear()\n    number_of_people_input.send_keys(people)\n\n@given('the user enters \"{tip}\" into the custom tip input with data-testid \"custom-tip-input\"')\ndef step_given_enter_custom_tip(context, tip):\n    custom_tip_input = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='custom-tip-input']\"))\n    )\n    custom_tip_input.clear()\n    custom_tip_input.send_keys(tip)\n\n@when('the user checks the \"Generate Bill\" button with data-testid \"generate-bill-button\"')\ndef step_when_check_generate_bill_button(context):\n    generate_bill_button = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='generate-bill-button']\"))\n    )\n    context.generate_bill_button_enabled = generate_bill_button.is_enabled()\n\n@then('the \"Generate Bill\" button should be enabled')\ndef step_then_generate_bill_button_should_be_enabled(context):\n    assert context.generate_bill_button_enabled, \"The 'Generate Bill' button is not enabled.\"\n\n# Ensure the browser driver is properly closed at the end of the test\ndef after_scenario(context, scenario):\n    if hasattr(context, 'driver'):\n        context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: Enable 'Generate Bill' Button Based on 'Number of People' Input and Tip Selection\n\n  The system should enable the 'Generate Bill' button when a valid number is entered in the 'Number of People' input field and a tip percentage is selected or entered.\n\n\nScenario: [Error] Do not enable \"Generate Bill\" button with valid \"Number of People\" but no tip selected\n    Given the Bill Splitter page is loaded\n    And the user enters \"750\" into the bill amount field with data-testid \"bill-amount\"\n    And the user enters \"4\" into the number of people field with data-testid \"number-of-people-input\"\n    When the user checks the \"Generate Bill\" button with data-testid \"generate-bill-button\"\n    Then the \"Generate Bill\" button should be disabled"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the Bill Splitter page is loaded')\ndef step_given_bill_splitter_page_loaded(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)\n\n@given('the user enters \"{amount}\" into the bill amount field with data-testid \"bill-amount\"')\ndef step_given_user_enters_bill_amount(context, amount):\n    bill_amount_input = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='bill-amount']\"))\n    )\n    bill_amount_input.clear()\n    bill_amount_input.send_keys(amount)\n    time.sleep(1)\n\n@given('the user enters \"{people}\" into the number of people field with data-testid \"number-of-people-input\"')\ndef step_given_user_enters_number_of_people(context, people):\n    number_of_people_input = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='number-of-people-input']\"))\n    )\n    number_of_people_input.clear()\n    number_of_people_input.send_keys(people)\n    time.sleep(1)\n\n@when('the user checks the \"Generate Bill\" button with data-testid \"generate-bill-button\"')\ndef step_when_user_checks_generate_bill_button(context):\n    generate_bill_button = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='generate-bill-button']\"))\n    )\n    context.generate_bill_button_enabled = generate_bill_button.is_enabled()\n    time.sleep(1)\n\n@then('the \"Generate Bill\" button should be disabled')\ndef step_then_generate_bill_button_should_be_disabled(context):\n    assert not context.generate_bill_button_enabled, \"Expected 'Generate Bill' button to be disabled\"\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: Enable 'Generate Bill' Button Based on 'Number of People' Input and Tip Selection\n\n  The system should enable the 'Generate Bill' button when a valid number is entered in the 'Number of People' input field and a tip percentage is selected or entered.\n\n\nScenario: [Error] Do not enable \"Generate Bill\" button with invalid \"Number of People\" and selected tip\n    Given the Bill Splitter page is loaded\n    And the user enters \"1200\" into the bill amount field with data-testid \"bill-amount\"\n    And the user enters \"0\" into the number of people field with data-testid \"number-of-people-input\"\n    And the user clicks on the \"15%\" tip button with data-testid \"tip-button-15\"\n    When the user checks the \"Generate Bill\" button with data-testid \"generate-bill-button\"\n    Then the \"Generate Bill\" button should be disabled"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the Bill Splitter page is loaded')\ndef step_impl(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)\n\n@given('the user enters \"{amount}\" into the bill amount field with data-testid \"bill-amount\"')\ndef step_impl(context, amount):\n    bill_amount_input = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='bill-amount']\"))\n    )\n    bill_amount_input.clear()\n    bill_amount_input.send_keys(amount)\n    time.sleep(1)\n\n@given('the user enters \"{people}\" into the number of people field with data-testid \"number-of-people-input\"')\ndef step_impl(context, people):\n    number_of_people_input = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='number-of-people-input']\"))\n    )\n    number_of_people_input.clear()\n    number_of_people_input.send_keys(people)\n    time.sleep(1)\n\n@given('the user clicks on the \"{tip}\" tip button with data-testid \"tip-button-15\"')\ndef step_impl(context, tip):\n    tip_button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, f\"[data-testid='tip-button-{tip}']\"))\n    )\n    tip_button.click()\n    time.sleep(1)\n\n@when('the user checks the \"Generate Bill\" button with data-testid \"generate-bill-button\"')\ndef step_impl(context):\n    context.generate_bill_button = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='generate-bill-button']\"))\n    )\n    time.sleep(1)\n\n@then('the \"Generate Bill\" button should be disabled')\ndef step_impl(context):\n    assert not context.generate_bill_button.is_enabled(), \"Generate Bill button should be disabled\"\n    context.driver.quit()"
                }
            ]
        },
        "5": {
            "requirement": {
                "description": "When the user clicks the 'Generate Bill' button (data-testid='generate-bill-button'), the system calculates the tip amount, total bill, and per-person bill based on the following inputs: the bill amount (data-testid='bill-amount'), the selected tip percentage (via tip buttons with data-testid='tip-button-{percentage}' or a custom tip percentage entered in the custom tip input field with data-testid='custom-tip-input'), and the number of people (data-testid='number-of-people-input'). The calculated values are displayed in the respective output fields: tip amount (data-testid='tip-amount-value'), total bill (data-testid='total-value'), and per-person bill (data-testid='each-person-bill-value'). The 'Reset' button (data-testid='reset-button') is enabled after the calculation. The system supports the following scenarios: (1) using predefined tip percentages, (2) using a custom tip percentage, and (3) handling edge cases such as high tip percentages. The system ensures that the 'Generate Bill' button is only enabled when all required inputs are valid and disables it otherwise. Additionally, the 'Reset' button clears all inputs, resets the output fields, and disables itself and the 'Generate Bill' button."
            },
            "test_cases": [
                {
                    "test_case": [
                        "Feature: Calculate and display bill details upon clicking the 'Generate Bill' button\n\n  Description: \n    When the user clicks the 'Generate Bill' button, the system calculates the tip amount, total bill, and per-person bill based on the provided inputs. These values are displayed in the respective output fields, and the 'Reset' button is enabled.\n\n\n  Scenario: [Normal] Calculate and display bill details with valid inputs\n    Given the user navigates to the Bill Splitter page\n    And the user enters \"1000\" into the bill amount field with data-testid \"bill-amount\"\n    And the user enters \"4\" into the number of people field with data-testid \"number-of-people-input\"\n    And the user clicks the \"10%\" tip button with data-testid \"tip-button-10\"\n    When the user clicks the \"Generate Bill\" button with data-testid \"generate-bill-button\"\n    Then the tip amount field with data-testid \"tip-amount-value\" should display \"₹100\"\n    And the total bill field with data-testid \"total-value\" should display \"₹1100\"\n    And the each-person bill field with data-testid \"each-person-bill-value\" should display \"₹275\"\n    And the \"Reset\" button with data-testid \"reset-button\" should be enabled\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the user navigates to the Bill Splitter page')\ndef step_navigate_to_bill_splitter_page(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    context.driver.maximize_window()\n    time.sleep(1)\n\n@given('the user enters \"{amount}\" into the bill amount field with data-testid \"bill-amount\"')\ndef step_enter_bill_amount(context, amount):\n    bill_amount_field = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='bill-amount']\"))\n    )\n    bill_amount_field.clear()\n    bill_amount_field.send_keys(amount)\n    time.sleep(1)\n\n@given('the user enters \"{people}\" into the number of people field with data-testid \"number-of-people-input\"')\ndef step_enter_number_of_people(context, people):\n    number_of_people_field = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='number-of-people-input']\"))\n    )\n    number_of_people_field.clear()\n    number_of_people_field.send_keys(people)\n    time.sleep(1)\n\n@given('the user clicks the \"10%\" tip button with data-testid \"tip-button-10\"')\ndef step_click_tip_button_10(context):\n    tip_button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='tip-button-10']\"))\n    )\n    tip_button.click()\n    time.sleep(1)\n\n@when('the user clicks the \"Generate Bill\" button with data-testid \"generate-bill-button\"')\ndef step_click_generate_bill_button(context):\n    generate_bill_button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='generate-bill-button']\"))\n    )\n    generate_bill_button.click()\n    time.sleep(1)\n\n@then('the tip amount field with data-testid \"tip-amount-value\" should display \"₹{expected_tip}\"')\ndef step_verify_tip_amount(context, expected_tip):\n    tip_amount_field = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='tip-amount-value']\"))\n    )\n    actual_tip = tip_amount_field.text.strip()\n    assert expected_tip in actual_tip, f\"Expected tip amount to be '{expected_tip}', but got '{actual_tip}'\"\n\n@then('the total bill field with data-testid \"total-value\" should display \"₹{expected_total}\"')\ndef step_verify_total_bill(context, expected_total):\n    total_bill_field = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='total-value']\"))\n    )\n    actual_total = total_bill_field.text.strip()\n    assert expected_total in actual_total, f\"Expected total bill to be '{expected_total}', but got '{actual_total}'\"\n\n@then('the each-person bill field with data-testid \"each-person-bill-value\" should display \"₹{expected_each_person}\"')\ndef step_verify_each_person_bill(context, expected_each_person):\n    each_person_bill_field = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='each-person-bill-value']\"))\n    )\n    actual_each_person = each_person_bill_field.text.strip()\n    assert expected_each_person in actual_each_person, f\"Expected each person bill to be '{expected_each_person}', but got '{actual_each_person}'\"\n\n@then('the \"Reset\" button with data-testid \"reset-button\" should be enabled')\ndef step_verify_reset_button_enabled(context):\n    reset_button = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='reset-button']\"))\n    )\n    assert reset_button.is_enabled(), \"Expected the 'Reset' button to be enabled, but it was disabled\"\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: Calculate and display bill details upon clicking the 'Generate Bill' button\n\n  Description: \n    When the user clicks the 'Generate Bill' button, the system calculates the tip amount, total bill, and per-person bill based on the provided inputs. These values are displayed in the respective output fields, and the 'Reset' button is enabled.\n\n\n  Scenario: [Edge] Calculate and display bill details with a custom tip percentage\n    Given the user navigates to the Bill Splitter page\n    And the user enters \"500\" into the bill amount field with data-testid \"bill-amount\"\n    And the user enters \"2\" into the number of people field with data-testid \"number-of-people-input\"\n    And the user enters \"20\" into the custom tip field with data-testid \"custom-tip-input\"\n    When the user clicks the \"Generate Bill\" button with data-testid \"generate-bill-button\"\n    Then the tip amount field with data-testid \"tip-amount-value\" should display \"₹100\"\n    And the total bill field with data-testid \"total-value\" should display \"₹600\"\n    And the each-person bill field with data-testid \"each-person-bill-value\" should display \"₹300\"\n    And the \"Reset\" button with data-testid \"reset-button\" should be enabled\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the user navigates to the Bill Splitter page')\ndef step_navigate_to_page(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    context.driver.maximize_window()\n    time.sleep(1)\n\n@given('the user enters \"{bill_amount}\" into the bill amount field with data-testid \"bill-amount\"')\ndef step_enter_bill_amount(context, bill_amount):\n    bill_amount_field = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='bill-amount']\"))\n    )\n    bill_amount_field.clear()\n    bill_amount_field.send_keys(bill_amount)\n    time.sleep(1)\n\n@given('the user enters \"{num_people}\" into the number of people field with data-testid \"number-of-people-input\"')\ndef step_enter_number_of_people(context, num_people):\n    num_people_field = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='number-of-people-input']\"))\n    )\n    num_people_field.clear()\n    num_people_field.send_keys(num_people)\n    time.sleep(1)\n\n@given('the user enters \"{custom_tip}\" into the custom tip field with data-testid \"custom-tip-input\"')\ndef step_enter_custom_tip(context, custom_tip):\n    custom_tip_field = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='custom-tip-input']\"))\n    )\n    custom_tip_field.clear()\n    custom_tip_field.send_keys(custom_tip)\n    time.sleep(1)\n\n@when('the user clicks the \"Generate Bill\" button with data-testid \"generate-bill-button\"')\ndef step_click_generate_bill(context):\n    generate_bill_button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='generate-bill-button']\"))\n    )\n    generate_bill_button.click()\n    time.sleep(1)\n\n@then('the tip amount field with data-testid \"tip-amount-value\" should display \"₹{expected_tip}\"')\ndef step_verify_tip_amount(context, expected_tip):\n    tip_amount_field = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='tip-amount-value']\"))\n    )\n    actual_tip = tip_amount_field.text.strip()\n    assert expected_tip in actual_tip, f\"Expected tip amount to be '{expected_tip}', but got '{actual_tip}'\"\n\n@then('the total bill field with data-testid \"total-value\" should display \"₹{expected_total}\"')\ndef step_verify_total_bill(context, expected_total):\n    total_bill_field = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='total-value']\"))\n    )\n    actual_total = total_bill_field.text.strip()\n    assert expected_total in actual_total, f\"Expected total bill to be '{expected_total}', but got '{actual_total}'\"\n\n@then('the each-person bill field with data-testid \"each-person-bill-value\" should display \"₹{expected_each_person}\"')\ndef step_verify_each_person_bill(context, expected_each_person):\n    each_person_bill_field = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='each-person-bill-value']\"))\n    )\n    actual_each_person = each_person_bill_field.text.strip()\n    assert expected_each_person in actual_each_person, f\"Expected each person bill to be '{expected_each_person}', but got '{actual_each_person}'\"\n\n@then('the \"Reset\" button with data-testid \"reset-button\" should be enabled')\ndef step_verify_reset_button_enabled(context):\n    reset_button = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='reset-button']\"))\n    )\n    assert reset_button.is_enabled(), \"Expected the 'Reset' button to be enabled, but it is disabled\"\n\ndef after_scenario(context, scenario):\n    if hasattr(context, 'driver'):\n        context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: Calculate and display bill details upon clicking the 'Generate Bill' button\n\n  Description: \n    When the user clicks the 'Generate Bill' button, the system calculates the tip amount, total bill, and per-person bill based on the provided inputs. These values are displayed in the respective output fields, and the 'Reset' button is enabled.\n\n\n  Scenario: [Edge] Calculate and display bill details with a high tip percentage\n    Given the user navigates to the Bill Splitter page\n    And the user enters \"2000\" into the bill amount field with data-testid \"bill-amount\"\n    And the user enters \"5\" into the number of people field with data-testid \"number-of-people-input\"\n    And the user clicks the \"75%\" tip button with data-testid \"tip-button-75\"\n    When the user clicks the \"Generate Bill\" button with data-testid \"generate-bill-button\"\n    Then the tip amount field with data-testid \"tip-amount-value\" should display \"₹1500\"\n    And the total bill field with data-testid \"total-value\" should display \"₹3500\"\n    And the each-person bill field with data-testid \"each-person-bill-value\" should display \"₹700\"\n    And the \"Reset\" button with data-testid \"reset-button\" should be enabled\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\ndef is_enabled(element):\n    return element.is_enabled()\n\n@given('the user navigates to the Bill Splitter page')\ndef step_navigate_to_page(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    context.driver.maximize_window()\n    time.sleep(1)\n\n@given('the user enters \"{bill_amount}\" into the bill amount field with data-testid \"bill-amount\"')\ndef step_enter_bill_amount(context, bill_amount):\n    bill_amount_field = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='bill-amount']\"))\n    )\n    bill_amount_field.clear()\n    bill_amount_field.send_keys(bill_amount)\n    time.sleep(1)\n\n@given('the user enters \"{number_of_people}\" into the number of people field with data-testid \"number-of-people-input\"')\ndef step_enter_number_of_people(context, number_of_people):\n    number_of_people_field = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='number-of-people-input']\"))\n    )\n    number_of_people_field.clear()\n    number_of_people_field.send_keys(number_of_people)\n    time.sleep(1)\n\n@given('the user clicks the \"75%\" tip button with data-testid \"tip-button-75\"')\ndef step_click_tip_button(context):\n    tip_button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, f\"[data-testid='tip-button-75']\"))\n    )\n    tip_button.click()\n    time.sleep(1)\n\n@when('the user clicks the \"Generate Bill\" button with data-testid \"generate-bill-button\"')\ndef step_click_generate_bill_button(context):\n    generate_bill_button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='generate-bill-button']\"))\n    )\n    generate_bill_button.click()\n    time.sleep(1)\n\n@then('the tip amount field with data-testid \"tip-amount-value\" should display \"{expected_tip_amount}\"')\ndef step_validate_tip_amount(context, expected_tip_amount):\n    tip_amount_field = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='tip-amount-value']\"))\n    )\n    actual_tip_amount = tip_amount_field.text.strip()\n    assert expected_tip_amount in actual_tip_amount, f\"Expected '{expected_tip_amount}', but got '{actual_tip_amount}'\"\n\n@then('the total bill field with data-testid \"total-value\" should display \"{expected_total_bill}\"')\ndef step_validate_total_bill(context, expected_total_bill):\n    total_bill_field = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='total-value']\"))\n    )\n    actual_total_bill = total_bill_field.text.strip()\n    assert expected_total_bill in actual_total_bill, f\"Expected '{expected_total_bill}', but got '{actual_total_bill}'\"\n\n@then('the each-person bill field with data-testid \"each-person-bill-value\" should display \"{expected_each_person_bill}\"')\ndef step_validate_each_person_bill(context, expected_each_person_bill):\n    each_person_bill_field = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='each-person-bill-value']\"))\n    )\n    actual_each_person_bill = each_person_bill_field.text.strip()\n    assert expected_each_person_bill in actual_each_person_bill, f\"Expected '{expected_each_person_bill}', but got '{actual_each_person_bill}'\"\n\n@then('the \"Reset\" button with data-testid \"reset-button\" should be enabled')\ndef step_validate_reset_button_enabled(context):\n    reset_button = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='reset-button']\"))\n    )\n    assert is_enabled(reset_button), \"Reset button is not enabled\"\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                }
            ]
        },
        "6": {
            "requirement": {
                "description": "When the user clicks the 'Reset' button (data-testid: 'reset-button'), the system must perform the following actions: clear the 'Bill Amount' input field (data-testid: 'bill-amount'), the 'Number of People' input field (data-testid: 'number-of-people-input'), and the 'Custom Tip' input field (data-testid: 'custom-tip-input'). It should also clear the 'Tip Amount' output display (data-testid: 'tip-amount-value'), the 'Total Bill' output display (data-testid: 'total-value'), and the 'Each Person Bill' output display (data-testid: 'each-person-bill-value'). Additionally, the system should reset the tip percentage to 0, remove the 'selected' class from any tip buttons within the 'tip-container', and disable both the 'Generate Bill' button (data-testid: 'generate-bill-button') and the 'Reset' button (data-testid: 'reset-button')."
            },
            "test_cases": [
                {
                    "test_case": [
                        "Feature: Reset Functionality\n  The system should clear all input fields and output displays, reset the tip percentage, and disable the 'Generate Bill' and 'Reset' buttons when the user clicks the 'Reset' button.\n\n\n  Scenario: [Normal] Reset button clears inputs and outputs\n    Given the webpage is loaded\n    And the user enters \"1000\" into the bill amount field with data-testid \"bill-amount\"\n    And the user enters \"4\" into the number of people field with data-testid \"number-of-people-input\"\n    And the user clicks the tip button with data-testid \"tip-button-10\"\n    And the user clicks the \"Generate Bill\" button with data-testid \"generate-bill-button\"\n    When the user clicks the \"Reset\" button with data-testid \"reset-button\"\n    Then the bill amount field with data-testid \"bill-amount\" should be empty\n    And the number of people field with data-testid \"number-of-people-input\" should be empty\n    And the tip amount output with data-testid \"tip-amount-value\" should be empty\n    And the total bill output with data-testid \"total-value\" should be empty\n    And the each person bill output with data-testid \"each-person-bill-value\" should be empty\n    And the \"Generate Bill\" button with data-testid \"generate-bill-button\" should be disabled\n    And the \"Reset\" button with data-testid \"reset-button\" should be disabled\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the webpage is loaded')\ndef step_impl(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    context.driver.maximize_window()\n    WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='bill-amount']\"))\n    )\n\n@given('the user enters \"{amount}\" into the bill amount field with data-testid \"bill-amount\"')\ndef step_impl(context, amount):\n    bill_amount_field = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='bill-amount']\"))\n    )\n    bill_amount_field.clear()\n    bill_amount_field.send_keys(amount)\n    time.sleep(1)\n\n@given('the user enters \"{people}\" into the number of people field with data-testid \"number-of-people-input\"')\ndef step_impl(context, people):\n    number_of_people_field = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='number-of-people-input']\"))\n    )\n    number_of_people_field.clear()\n    number_of_people_field.send_keys(people)\n    time.sleep(1)\n\n@given('the user clicks the tip button with data-testid \"tip-button-10\"')\ndef step_impl(context):\n    tip_button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='tip-button-10']\"))\n    )\n    tip_button.click()\n    time.sleep(1)\n\n@given('the user clicks the \"Generate Bill\" button with data-testid \"generate-bill-button\"')\ndef step_impl(context):\n    generate_bill_button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='generate-bill-button']\"))\n    )\n    generate_bill_button.click()\n    time.sleep(1)\n\n@when('the user clicks the \"Reset\" button with data-testid \"reset-button\"')\ndef step_impl(context):\n    reset_button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='reset-button']\"))\n    )\n    reset_button.click()\n    time.sleep(1)\n\n@then('the bill amount field with data-testid \"bill-amount\" should be empty')\ndef step_impl(context):\n    bill_amount_field = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='bill-amount']\"))\n    )\n    assert bill_amount_field.get_attribute(\"value\") == \"\", \"Bill amount field is not empty\"\n\n@then('the number of people field with data-testid \"number-of-people-input\" should be empty')\ndef step_impl(context):\n    number_of_people_field = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='number-of-people-input']\"))\n    )\n    assert number_of_people_field.get_attribute(\"value\") == \"\", \"Number of people field is not empty\"\n\n@then('the tip amount output with data-testid \"tip-amount-value\" should be empty')\ndef step_impl(context):\n    tip_amount_output = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='tip-amount-value']\"))\n    )\n    assert tip_amount_output.text.strip() == \"\", \"Tip amount output is not empty\"\n\n@then('the total bill output with data-testid \"total-value\" should be empty')\ndef step_impl(context):\n    total_bill_output = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='total-value']\"))\n    )\n    assert total_bill_output.text.strip() == \"\", \"Total bill output is not empty\"\n\n@then('the each person bill output with data-testid \"each-person-bill-value\" should be empty')\ndef step_impl(context):\n    each_person_bill_output = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='each-person-bill-value']\"))\n    )\n    assert each_person_bill_output.text.strip() == \"\", \"Each person bill output is not empty\"\n\n@then('the \"Generate Bill\" button with data-testid \"generate-bill-button\" should be disabled')\ndef step_impl(context):\n    generate_bill_button = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='generate-bill-button']\"))\n    )\n    assert not generate_bill_button.is_enabled(), \"Generate Bill button is not disabled\"\n\n@then('the \"Reset\" button with data-testid \"reset-button\" should be disabled')\ndef step_impl(context):\n    reset_button = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='reset-button']\"))\n    )\n    assert not reset_button.is_enabled(), \"Reset button is not disabled\"\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                }
            ]
        }
    }
}