{
    "summary": {
        "overview": "The Salary Calculator application allows users to input job details, work hours, salary, tax percentage, and overtime details to calculate and display various salary metrics, including hourly, daily, monthly, and yearly earnings, as well as tax deductions and overtime earnings.",
        "predefined_options": "Default values are set for empty input fields: '______' for job title and '0' for numeric fields such as work hours, salary, tax percentage, overtime hours, and overtime rate.",
        "external_resources": "External resources include Bootstrap CSS for styling (https://cdn.jsdelivr.net/npm/bootstrap@4.6.2/dist/css/bootstrap.min.css) and a custom stylesheet (styles.css).",
        "external_js_libraries": "No external JavaScript libraries are explicitly mentioned in the provided code."
    },
    "finegrained_rewith_test": {
        "1": {
            "requirement": {
                "description": "The web application must provide a 'Salary Calculator' form that allows users to input job details and salary parameters. The form should include fields for job title (data-testid='job-input'), hours per day (data-testid='work-hour-input'), workdays per week (data-testid='work-week-input'), gross monthly salary (data-testid='gross-salary-input'), tax percentage (data-testid='tax-input'), overtime hours per week (data-testid='overtime-hours-input'), and overtime rate per hour (data-testid='overtime-rate-input'). Upon clicking the 'Calculate Salary' button (data-testid='calculate-button'), the system must retrieve and validate these inputs, defaulting to zero for any missing numeric values. It should then calculate the hourly salary, daily salary, monthly gross salary, tax deduction, monthly net salary, yearly net salary, overtime earnings, and total earnings. These results must be displayed in the results section with the following data-testids: job-title, hourly-salary, daily-salary, monthly-gross-salary, tax-deduction, monthly-net-salary, yearly-net-salary, overtime-earnings, and total-earnings. The 'Clear' button (data-testid='clear-button') should reset the form and results to their default states. The application should handle edge cases such as zero overtime hours and missing gross salary input, ensuring accurate calculations and updates to the results section."
            },
            "test_cases": [
                {
                    "test_case": [
                        "Feature: Salary Calculation\n  The system should retrieve values from all input fields, perform salary calculations, and update the results section with calculated values when the user clicks the 'Calculate Salary' button.\n\n\n  Scenario: [Normal] Calculate salary with valid inputs\n    Given the \"Salary Calculator\" page is loaded\n    And the user enters \"Web Developer\" into the job field with data-testid \"job-input\"\n    And the user enters \"8\" into the hours per day field with data-testid \"work-hour-input\"\n    And the user enters \"5\" into the workdays per week field with data-testid \"work-week-input\"\n    And the user enters \"5000\" into the gross monthly salary field with data-testid \"gross-salary-input\"\n    And the user enters \"20\" into the tax percentage field with data-testid \"tax-input\"\n    And the user enters \"5\" into the overtime hours per week field with data-testid \"overtime-hours-input\"\n    And the user enters \"15\" into the overtime rate per hour field with data-testid \"overtime-rate-input\"\n    When the user clicks the \"Calculate Salary\" button with data-testid \"calculate-button\"\n    Then the job title should be \"Web Developer\" in the results section with data-testid \"job-title\"\n    And the hourly salary should be \"$25.00\" in the results section with data-testid \"hourly-salary\"\n    And the daily salary should be \"$200.00\" in the results section with data-testid \"daily-salary\"\n    And the monthly gross salary should be \"$5000.00\" in the results section with data-testid \"monthly-gross-salary\"\n    And the tax deduction should be \"-$1000.00\" in the results section with data-testid \"tax-deduction\"\n    And the monthly net salary should be \"$4000.00\" in the results section with data-testid \"monthly-net-salary\"\n    And the yearly net salary should be \"$48000.00\" in the results section with data-testid \"yearly-net-salary\"\n    And the overtime earnings should be \"$300.00\" in the results section with data-testid \"overtime-earnings\"\n    And the total earnings should be \"$48300.00\" in the results section with data-testid \"total-earnings\"\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the \"Salary Calculator\" page is loaded')\ndef step_impl(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    context.driver.maximize_window()\n    WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='salary-form']\"))\n    )\n\n@given('the user enters \"{job}\" into the job field with data-testid \"job-input\"')\ndef step_impl(context, job):\n    job_input = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='job-input']\"))\n    )\n    job_input.clear()\n    job_input.send_keys(job)\n    time.sleep(1)\n\n@given('the user enters \"{hours}\" into the hours per day field with data-testid \"work-hour-input\"')\ndef step_impl(context, hours):\n    hours_input = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='work-hour-input']\"))\n    )\n    hours_input.clear()\n    hours_input.send_keys(hours)\n    time.sleep(1)\n\n@given('the user enters \"{workdays}\" into the workdays per week field with data-testid \"work-week-input\"')\ndef step_impl(context, workdays):\n    workdays_input = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='work-week-input']\"))\n    )\n    workdays_input.clear()\n    workdays_input.send_keys(workdays)\n    time.sleep(1)\n\n@given('the user enters \"{gross_salary}\" into the gross monthly salary field with data-testid \"gross-salary-input\"')\ndef step_impl(context, gross_salary):\n    gross_salary_input = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='gross-salary-input']\"))\n    )\n    gross_salary_input.clear()\n    gross_salary_input.send_keys(gross_salary)\n    time.sleep(1)\n\n@given('the user enters \"{tax}\" into the tax percentage field with data-testid \"tax-input\"')\ndef step_impl(context, tax):\n    tax_input = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='tax-input']\"))\n    )\n    tax_input.clear()\n    tax_input.send_keys(tax)\n    time.sleep(1)\n\n@given('the user enters \"{overtime_hours}\" into the overtime hours per week field with data-testid \"overtime-hours-input\"')\ndef step_impl(context, overtime_hours):\n    overtime_hours_input = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='overtime-hours-input']\"))\n    )\n    overtime_hours_input.clear()\n    overtime_hours_input.send_keys(overtime_hours)\n    time.sleep(1)\n\n@given('the user enters \"{overtime_rate}\" into the overtime rate per hour field with data-testid \"overtime-rate-input\"')\ndef step_impl(context, overtime_rate):\n    overtime_rate_input = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='overtime-rate-input']\"))\n    )\n    overtime_rate_input.clear()\n    overtime_rate_input.send_keys(overtime_rate)\n    time.sleep(1)\n\n@when('the user clicks the \"Calculate Salary\" button with data-testid \"calculate-button\"')\ndef step_impl(context):\n    calculate_button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='calculate-button']\"))\n    )\n    calculate_button.click()\n    time.sleep(1)\n\n@then('the job title should be \"{expected_job}\" in the results section with data-testid \"job-title\"')\ndef step_impl(context, expected_job):\n    job_title = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='job-title']\"))\n    )\n    assert expected_job in job_title.text, f\"Expected job title '{expected_job}', but got '{job_title.text}'\"\n\n@then('the hourly salary should be \"{expected_hourly}\" in the results section with data-testid \"hourly-salary\"')\ndef step_impl(context, expected_hourly):\n    hourly_salary = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='hourly-salary']\"))\n    )\n    assert expected_hourly in hourly_salary.text, f\"Expected hourly salary '{expected_hourly}', but got '{hourly_salary.text}'\"\n\n@then('the daily salary should be \"{expected_daily}\" in the results section with data-testid \"daily-salary\"')\ndef step_impl(context, expected_daily):\n    daily_salary = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='daily-salary']\"))\n    )\n    assert expected_daily in daily_salary.text, f\"Expected daily salary '{expected_daily}', but got '{daily_salary.text}'\"\n\n@then('the monthly gross salary should be \"{expected_monthly_gross}\" in the results section with data-testid \"monthly-gross-salary\"')\ndef step_impl(context, expected_monthly_gross):\n    monthly_gross_salary = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='monthly-gross-salary']\"))\n    )\n    assert expected_monthly_gross in monthly_gross_salary.text, f\"Expected monthly gross salary '{expected_monthly_gross}', but got '{monthly_gross_salary.text}'\"\n\n@then('the tax deduction should be \"{expected_tax_deduction}\" in the results section with data-testid \"tax-deduction\"')\ndef step_impl(context, expected_tax_deduction):\n    tax_deduction = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='tax-deduction']\"))\n    )\n    assert expected_tax_deduction in tax_deduction.text, f\"Expected tax deduction '{expected_tax_deduction}', but got '{tax_deduction.text}'\"\n\n@then('the monthly net salary should be \"{expected_monthly_net}\" in the results section with data-testid \"monthly-net-salary\"')\ndef step_impl(context, expected_monthly_net):\n    monthly_net_salary = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='monthly-net-salary']\"))\n    )\n    assert expected_monthly_net in monthly_net_salary.text, f\"Expected monthly net salary '{expected_monthly_net}', but got '{monthly_net_salary.text}'\"\n\n@then('the yearly net salary should be \"{expected_yearly_net}\" in the results section with data-testid \"yearly-net-salary\"')\ndef step_impl(context, expected_yearly_net):\n    yearly_net_salary = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='yearly-net-salary']\"))\n    )\n    assert expected_yearly_net in yearly_net_salary.text, f\"Expected yearly net salary '{expected_yearly_net}', but got '{yearly_net_salary.text}'\"\n\n@then('the overtime earnings should be \"{expected_overtime_earnings}\" in the results section with data-testid \"overtime-earnings\"')\ndef step_impl(context, expected_overtime_earnings):\n    overtime_earnings = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='overtime-earnings']\"))\n    )\n    assert expected_overtime_earnings in overtime_earnings.text, f\"Expected overtime earnings '{expected_overtime_earnings}', but got '{overtime_earnings.text}'\"\n\n@then('the total earnings should be \"{expected_total_earnings}\" in the results section with data-testid \"total-earnings\"')\ndef step_impl(context, expected_total_earnings):\n    total_earnings = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='total-earnings']\"))\n    )\n    assert expected_total_earnings in total_earnings.text, f\"Expected total earnings '{expected_total_earnings}', but got '{total_earnings.text}'\"\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: Salary Calculation\n  The system should retrieve values from all input fields, perform salary calculations, and update the results section with calculated values when the user clicks the 'Calculate Salary' button.\n\n\n  Scenario: [Edge] Calculate salary with zero overtime hours\n    Given the \"Salary Calculator\" page is loaded\n    And the user enters \"Web Developer\" into the job field with data-testid \"job-input\"\n    And the user enters \"8\" into the hours per day field with data-testid \"work-hour-input\"\n    And the user enters \"5\" into the workdays per week field with data-testid \"work-week-input\"\n    And the user enters \"5000\" into the gross monthly salary field with data-testid \"gross-salary-input\"\n    And the user enters \"20\" into the tax percentage field with data-testid \"tax-input\"\n    And the user enters \"0\" into the overtime hours per week field with data-testid \"overtime-hours-input\"\n    And the user enters \"15\" into the overtime rate per hour field with data-testid \"overtime-rate-input\"\n    When the user clicks the \"Calculate Salary\" button with data-testid \"calculate-button\"\n    Then the job title should be \"Web Developer\" in the results section with data-testid \"job-title\"\n    And the hourly salary should be \"$25.00\" in the results section with data-testid \"hourly-salary\"\n    And the daily salary should be \"$200.00\" in the results section with data-testid \"daily-salary\"\n    And the monthly gross salary should be \"$5000.00\" in the results section with data-testid \"monthly-gross-salary\"\n    And the tax deduction should be \"-$1000.00\" in the results section with data-testid \"tax-deduction\"\n    And the monthly net salary should be \"$4000.00\" in the results section with data-testid \"monthly-net-salary\"\n    And the yearly net salary should be \"$48000.00\" in the results section with data-testid \"yearly-net-salary\"\n    And the overtime earnings should be \"$0.00\" in the results section with data-testid \"overtime-earnings\"\n    And the total earnings should be \"$48000.00\" in the results section with data-testid \"total-earnings\"\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the \"Salary Calculator\" page is loaded')\ndef step_impl(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)\n\n@given('the user enters \"{job}\" into the job field with data-testid \"job-input\"')\ndef step_impl(context, job):\n    job_input = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='job-input']\"))\n    )\n    job_input.clear()\n    job_input.send_keys(job)\n    time.sleep(1)\n\n@given('the user enters \"{hours}\" into the hours per day field with data-testid \"work-hour-input\"')\ndef step_impl(context, hours):\n    hours_input = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='work-hour-input']\"))\n    )\n    hours_input.clear()\n    hours_input.send_keys(hours)\n    time.sleep(1)\n\n@given('the user enters \"{days}\" into the workdays per week field with data-testid \"work-week-input\"')\ndef step_impl(context, days):\n    days_input = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='work-week-input']\"))\n    )\n    days_input.clear()\n    days_input.send_keys(days)\n    time.sleep(1)\n\n@given('the user enters \"{salary}\" into the gross monthly salary field with data-testid \"gross-salary-input\"')\ndef step_impl(context, salary):\n    salary_input = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='gross-salary-input']\"))\n    )\n    salary_input.clear()\n    salary_input.send_keys(salary)\n    time.sleep(1)\n\n@given('the user enters \"{tax}\" into the tax percentage field with data-testid \"tax-input\"')\ndef step_impl(context, tax):\n    tax_input = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='tax-input']\"))\n    )\n    tax_input.clear()\n    tax_input.send_keys(tax)\n    time.sleep(1)\n\n@given('the user enters \"{overtime_hours}\" into the overtime hours per week field with data-testid \"overtime-hours-input\"')\ndef step_impl(context, overtime_hours):\n    overtime_hours_input = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='overtime-hours-input']\"))\n    )\n    overtime_hours_input.clear()\n    overtime_hours_input.send_keys(overtime_hours)\n    time.sleep(1)\n\n@given('the user enters \"{overtime_rate}\" into the overtime rate per hour field with data-testid \"overtime-rate-input\"')\ndef step_impl(context, overtime_rate):\n    overtime_rate_input = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='overtime-rate-input']\"))\n    )\n    overtime_rate_input.clear()\n    overtime_rate_input.send_keys(overtime_rate)\n    time.sleep(1)\n\n@when('the user clicks the \"Calculate Salary\" button with data-testid \"calculate-button\"')\ndef step_impl(context):\n    calculate_button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='calculate-button']\"))\n    )\n    calculate_button.click()\n    time.sleep(1)\n\n@then('the job title should be \"{expected_job}\" in the results section with data-testid \"job-title\"')\ndef step_impl(context, expected_job):\n    job_title = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='job-title']\"))\n    )\n    assert expected_job in job_title.text, f\"Expected job title '{expected_job}', but got '{job_title.text}'\"\n\n@then('the hourly salary should be \"{expected_hourly}\" in the results section with data-testid \"hourly-salary\"')\ndef step_impl(context, expected_hourly):\n    hourly_salary = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='hourly-salary']\"))\n    )\n    assert expected_hourly in hourly_salary.text, f\"Expected hourly salary '{expected_hourly}', but got '{hourly_salary.text}'\"\n\n@then('the daily salary should be \"{expected_daily}\" in the results section with data-testid \"daily-salary\"')\ndef step_impl(context, expected_daily):\n    daily_salary = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='daily-salary']\"))\n    )\n    assert expected_daily in daily_salary.text, f\"Expected daily salary '{expected_daily}', but got '{daily_salary.text}'\"\n\n@then('the monthly gross salary should be \"{expected_monthly_gross}\" in the results section with data-testid \"monthly-gross-salary\"')\ndef step_impl(context, expected_monthly_gross):\n    monthly_gross_salary = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='monthly-gross-salary']\"))\n    )\n    assert expected_monthly_gross in monthly_gross_salary.text, f\"Expected monthly gross salary '{expected_monthly_gross}', but got '{monthly_gross_salary.text}'\"\n\n@then('the tax deduction should be \"{expected_tax_deduction}\" in the results section with data-testid \"tax-deduction\"')\ndef step_impl(context, expected_tax_deduction):\n    tax_deduction = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='tax-deduction']\"))\n    )\n    assert expected_tax_deduction in tax_deduction.text, f\"Expected tax deduction '{expected_tax_deduction}', but got '{tax_deduction.text}'\"\n\n@then('the monthly net salary should be \"{expected_monthly_net}\" in the results section with data-testid \"monthly-net-salary\"')\ndef step_impl(context, expected_monthly_net):\n    monthly_net_salary = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='monthly-net-salary']\"))\n    )\n    assert expected_monthly_net in monthly_net_salary.text, f\"Expected monthly net salary '{expected_monthly_net}', but got '{monthly_net_salary.text}'\"\n\n@then('the yearly net salary should be \"{expected_yearly_net}\" in the results section with data-testid \"yearly-net-salary\"')\ndef step_impl(context, expected_yearly_net):\n    yearly_net_salary = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='yearly-net-salary']\"))\n    )\n    assert expected_yearly_net in yearly_net_salary.text, f\"Expected yearly net salary '{expected_yearly_net}', but got '{yearly_net_salary.text}'\"\n\n@then('the overtime earnings should be \"{expected_overtime_earnings}\" in the results section with data-testid \"overtime-earnings\"')\ndef step_impl(context, expected_overtime_earnings):\n    overtime_earnings = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='overtime-earnings']\"))\n    )\n    assert expected_overtime_earnings in overtime_earnings.text, f\"Expected overtime earnings '{expected_overtime_earnings}', but got '{overtime_earnings.text}'\"\n\n@then('the total earnings should be \"{expected_total_earnings}\" in the results section with data-testid \"total-earnings\"')\ndef step_impl(context, expected_total_earnings):\n    total_earnings = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='total-earnings']\"))\n    )\n    assert expected_total_earnings in total_earnings.text, f\"Expected total earnings '{expected_total_earnings}', but got '{total_earnings.text}'\"\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: Salary Calculation\n  The system should retrieve values from all input fields, perform salary calculations, and update the results section with calculated values when the user clicks the 'Calculate Salary' button.\n\n\n  Scenario: [Error] Calculate salary with missing gross salary input\n    Given the \"Salary Calculator\" page is loaded\n    And the user enters \"Web Developer\" into the job field with data-testid \"job-input\"\n    And the user enters \"8\" into the hours per day field with data-testid \"work-hour-input\"\n    And the user enters \"5\" into the workdays per week field with data-testid \"work-week-input\"\n    And the user leaves the gross monthly salary field empty with data-testid \"gross-salary-input\"\n    And the user enters \"20\" into the tax percentage field with data-testid \"tax-input\"\n    And the user enters \"5\" into the overtime hours per week field with data-testid \"overtime-hours-input\"\n    And the user enters \"15\" into the overtime rate per hour field with data-testid \"overtime-rate-input\"\n    When the user clicks the \"Calculate Salary\" button with data-testid \"calculate-button\"\n    Then the job title should be \"Web Developer\" in the results section with data-testid \"job-title\"\n    And the hourly salary should be \"$0.00\" in the results section with data-testid \"hourly-salary\"\n    And the daily salary should be \"$0.00\" in the results section with data-testid \"daily-salary\"\n    And the monthly gross salary should be \"$0.00\" in the results section with data-testid \"monthly-gross-salary\"\n    And the tax deduction should be \"$0.00\" in the results section with data-testid \"tax-deduction\"\n    And the monthly net salary should be \"$0.00\" in the results section with data-testid \"monthly-net-salary\"\n    And the yearly net salary should be \"$0.00\" in the results section with data-testid \"yearly-net-salary\"\n    And the overtime earnings should be \"$300.00\" in the results section with data-testid \"overtime-earnings\"\n    And the total earnings should be \"$300.00\" in the results section with data-testid \"total-earnings\""
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the \"Salary Calculator\" page is loaded')\ndef step_given_page_loaded(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)\n\n@given('the user enters \"{job}\" into the job field with data-testid \"job-input\"')\ndef step_given_enter_job(context, job):\n    job_input = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='job-input']\"))\n    )\n    job_input.clear()\n    job_input.send_keys(job)\n    time.sleep(1)\n\n@given('the user enters \"{hours}\" into the hours per day field with data-testid \"work-hour-input\"')\ndef step_given_enter_hours(context, hours):\n    hours_input = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='work-hour-input']\"))\n    )\n    hours_input.clear()\n    hours_input.send_keys(hours)\n    time.sleep(1)\n\n@given('the user enters \"{workdays}\" into the workdays per week field with data-testid \"work-week-input\"')\ndef step_given_enter_workdays(context, workdays):\n    workdays_input = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='work-week-input']\"))\n    )\n    workdays_input.clear()\n    workdays_input.send_keys(workdays)\n    time.sleep(1)\n\n@given('the user leaves the gross monthly salary field empty with data-testid \"gross-salary-input\"')\ndef step_given_leave_gross_salary_empty(context):\n    gross_salary_input = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='gross-salary-input']\"))\n    )\n    gross_salary_input.clear()\n    time.sleep(1)\n\n@given('the user enters \"{tax}\" into the tax percentage field with data-testid \"tax-input\"')\ndef step_given_enter_tax(context, tax):\n    tax_input = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='tax-input']\"))\n    )\n    tax_input.clear()\n    tax_input.send_keys(tax)\n    time.sleep(1)\n\n@given('the user enters \"{overtime_hours}\" into the overtime hours per week field with data-testid \"overtime-hours-input\"')\ndef step_given_enter_overtime_hours(context, overtime_hours):\n    overtime_hours_input = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='overtime-hours-input']\"))\n    )\n    overtime_hours_input.clear()\n    overtime_hours_input.send_keys(overtime_hours)\n    time.sleep(1)\n\n@given('the user enters \"{overtime_rate}\" into the overtime rate per hour field with data-testid \"overtime-rate-input\"')\ndef step_given_enter_overtime_rate(context, overtime_rate):\n    overtime_rate_input = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='overtime-rate-input']\"))\n    )\n    overtime_rate_input.clear()\n    overtime_rate_input.send_keys(overtime_rate)\n    time.sleep(1)\n\n@when('the user clicks the \"Calculate Salary\" button with data-testid \"calculate-button\"')\ndef step_when_click_calculate(context):\n    calculate_button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='calculate-button']\"))\n    )\n    calculate_button.click()\n    time.sleep(1)\n\n@then('the job title should be \"{expected_job}\" in the results section with data-testid \"job-title\"')\ndef step_then_check_job_title(context, expected_job):\n    job_title = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='job-title']\"))\n    )\n    assert expected_job in job_title.text, f\"Expected job title '{expected_job}', but got '{job_title.text}'\"\n\n@then('the hourly salary should be \"{expected_hourly_salary}\" in the results section with data-testid \"hourly-salary\"')\ndef step_then_check_hourly_salary(context, expected_hourly_salary):\n    hourly_salary = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='hourly-salary']\"))\n    )\n    assert expected_hourly_salary in hourly_salary.text, f\"Expected hourly salary '{expected_hourly_salary}', but got '{hourly_salary.text}'\"\n\n@then('the daily salary should be \"{expected_daily_salary}\" in the results section with data-testid \"daily-salary\"')\ndef step_then_check_daily_salary(context, expected_daily_salary):\n    daily_salary = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='daily-salary']\"))\n    )\n    assert expected_daily_salary in daily_salary.text, f\"Expected daily salary '{expected_daily_salary}', but got '{daily_salary.text}'\"\n\n@then('the monthly gross salary should be \"{expected_monthly_gross_salary}\" in the results section with data-testid \"monthly-gross-salary\"')\ndef step_then_check_monthly_gross_salary(context, expected_monthly_gross_salary):\n    monthly_gross_salary = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='monthly-gross-salary']\"))\n    )\n    assert expected_monthly_gross_salary in monthly_gross_salary.text, f\"Expected monthly gross salary '{expected_monthly_gross_salary}', but got '{monthly_gross_salary.text}'\"\n\n@then('the tax deduction should be \"{expected_tax_deduction}\" in the results section with data-testid \"tax-deduction\"')\ndef step_then_check_tax_deduction(context, expected_tax_deduction):\n    tax_deduction = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='tax-deduction']\"))\n    )\n    assert expected_tax_deduction in tax_deduction.text, f\"Expected tax deduction '{expected_tax_deduction}', but got '{tax_deduction.text}'\"\n\n@then('the monthly net salary should be \"{expected_monthly_net_salary}\" in the results section with data-testid \"monthly-net-salary\"')\ndef step_then_check_monthly_net_salary(context, expected_monthly_net_salary):\n    monthly_net_salary = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='monthly-net-salary']\"))\n    )\n    assert expected_monthly_net_salary in monthly_net_salary.text, f\"Expected monthly net salary '{expected_monthly_net_salary}', but got '{monthly_net_salary.text}'\"\n\n@then('the yearly net salary should be \"{expected_yearly_net_salary}\" in the results section with data-testid \"yearly-net-salary\"')\ndef step_then_check_yearly_net_salary(context, expected_yearly_net_salary):\n    yearly_net_salary = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='yearly-net-salary']\"))\n    )\n    assert expected_yearly_net_salary in yearly_net_salary.text, f\"Expected yearly net salary '{expected_yearly_net_salary}', but got '{yearly_net_salary.text}'\"\n\n@then('the overtime earnings should be \"{expected_overtime_earnings}\" in the results section with data-testid \"overtime-earnings\"')\ndef step_then_check_overtime_earnings(context, expected_overtime_earnings):\n    overtime_earnings = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='overtime-earnings']\"))\n    )\n    assert expected_overtime_earnings in overtime_earnings.text, f\"Expected overtime earnings '{expected_overtime_earnings}', but got '{overtime_earnings.text}'\"\n\n@then('the total earnings should be \"{expected_total_earnings}\" in the results section with data-testid \"total-earnings\"')\ndef step_then_check_total_earnings(context, expected_total_earnings):\n    total_earnings = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='total-earnings']\"))\n    )\n    assert expected_total_earnings in total_earnings.text, f\"Expected total earnings '{expected_total_earnings}', but got '{total_earnings.text}'\"\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                }
            ]
        },
        "2": {
            "requirement": {
                "description": "The Salary Calculator web application must provide a 'Clear' button with the data-testid 'clear-button' that, when clicked, resets all input fields within the form identified by data-testid 'salary-form' to their default empty state. This includes fields for job title, hours per day, workdays per week, gross monthly salary, tax percentage, overtime hours per week, and overtime rate per hour. Additionally, the results section, identified by data-testid 'results-section', must be cleared, setting the job title display (data-testid 'job-title') to '______', and all salary-related fields (hourly, daily, monthly gross, tax deduction, monthly net, yearly net, overtime earnings, and total earnings) to '$0'. This functionality should work regardless of whether the fields have been previously populated or not, ensuring a consistent reset experience for the user."
            },
            "test_cases": [
                {
                    "test_case": [
                        "Feature: Reset Salary Calculator Form\n  The system should reset all input fields and clear the results section when the 'Clear' button is clicked.\n\n\n  Scenario: [Normal] Reset form and results section to default state\n    Given the Salary Calculator page is loaded\n    And the user enters \"Web Developer\" into the job field with data-testid \"job-input\"\n    And the user enters \"8\" into the hours per day field with data-testid \"work-hour-input\"\n    And the user enters \"5\" into the workdays per week field with data-testid \"work-week-input\"\n    And the user enters \"5000\" into the gross monthly salary field with data-testid \"gross-salary-input\"\n    And the user enters \"20\" into the tax percentage field with data-testid \"tax-input\"\n    And the user enters \"5\" into the overtime hours per week field with data-testid \"overtime-hours-input\"\n    And the user enters \"15\" into the overtime rate per hour field with data-testid \"overtime-rate-input\"\n    When the user clicks the 'Clear' button with data-testid \"clear-button\"\n    Then the job field with data-testid \"job-input\" should be empty\n    And the hours per day field with data-testid \"work-hour-input\" should be empty\n    And the workdays per week field with data-testid \"work-week-input\" should be empty\n    And the gross monthly salary field with data-testid \"gross-salary-input\" should be empty\n    And the tax percentage field with data-testid \"tax-input\" should be empty\n    And the overtime hours per week field with data-testid \"overtime-hours-input\" should be empty\n    And the overtime rate per hour field with data-testid \"overtime-rate-input\" should be empty\n    And the job title in the results section with data-testid \"job-title\" should display \"______\"\n    And the hourly salary in the results section with data-testid \"hourly-salary\" should display \"$0\"\n    And the daily salary in the results section with data-testid \"daily-salary\" should display \"$0\"\n    And the monthly gross salary in the results section with data-testid \"monthly-gross-salary\" should display \"$0\"\n    And the tax deduction in the results section with data-testid \"tax-deduction\" should display \"$0\"\n    And the monthly net salary in the results section with data-testid \"monthly-net-salary\" should display \"$0\"\n    And the yearly net salary in the results section with data-testid \"yearly-net-salary\" should display \"$0\"\n    And the overtime earnings in the results section with data-testid \"overtime-earnings\" should display \"$0\"\n    And the total earnings in the results section with data-testid \"total-earnings\" should display \"$0\"\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\ndef wait_for_element(context, selector, timeout=10):\n    return WebDriverWait(context.driver, timeout).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, selector))\n    )\n\n@given(\"the Salary Calculator page is loaded\")\ndef step_given_salary_calculator_page_loaded(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)  # Allow page to load completely\n\n@given('the user enters \"Web Developer\" into the job field with data-testid \"job-input\"')\ndef step_given_enter_job(context):\n    job_input = wait_for_element(context, \"[data-testid='job-input']\")\n    job_input.clear()\n    job_input.send_keys(\"Web Developer\")\n    time.sleep(1)\n\n@given('the user enters \"8\" into the hours per day field with data-testid \"work-hour-input\"')\ndef step_given_enter_hours_per_day(context):\n    work_hour_input = wait_for_element(context, \"[data-testid='work-hour-input']\")\n    work_hour_input.clear()\n    work_hour_input.send_keys(\"8\")\n    time.sleep(1)\n\n@given('the user enters \"5\" into the workdays per week field with data-testid \"work-week-input\"')\ndef step_given_enter_workdays_per_week(context):\n    work_week_input = wait_for_element(context, \"[data-testid='work-week-input']\")\n    work_week_input.clear()\n    work_week_input.send_keys(\"5\")\n    time.sleep(1)\n\n@given('the user enters \"5000\" into the gross monthly salary field with data-testid \"gross-salary-input\"')\ndef step_given_enter_gross_monthly_salary(context):\n    gross_salary_input = wait_for_element(context, \"[data-testid='gross-salary-input']\")\n    gross_salary_input.clear()\n    gross_salary_input.send_keys(\"5000\")\n    time.sleep(1)\n\n@given('the user enters \"20\" into the tax percentage field with data-testid \"tax-input\"')\ndef step_given_enter_tax_percentage(context):\n    tax_input = wait_for_element(context, \"[data-testid='tax-input']\")\n    tax_input.clear()\n    tax_input.send_keys(\"20\")\n    time.sleep(1)\n\n@given('the user enters \"5\" into the overtime hours per week field with data-testid \"overtime-hours-input\"')\ndef step_given_enter_overtime_hours(context):\n    overtime_hours_input = wait_for_element(context, \"[data-testid='overtime-hours-input']\")\n    overtime_hours_input.clear()\n    overtime_hours_input.send_keys(\"5\")\n    time.sleep(1)\n\n@given('the user enters \"15\" into the overtime rate per hour field with data-testid \"overtime-rate-input\"')\ndef step_given_enter_overtime_rate(context):\n    overtime_rate_input = wait_for_element(context, \"[data-testid='overtime-rate-input']\")\n    overtime_rate_input.clear()\n    overtime_rate_input.send_keys(\"15\")\n    time.sleep(1)\n\n@when('the user clicks the \\'Clear\\' button with data-testid \"clear-button\"')\ndef step_when_click_clear_button(context):\n    clear_button = wait_for_element(context, \"[data-testid='clear-button']\")\n    clear_button.click()\n    time.sleep(1)\n\n@then('the job field with data-testid \"job-input\" should be empty')\ndef step_then_job_field_empty(context):\n    job_input = wait_for_element(context, \"[data-testid='job-input']\")\n    assert job_input.get_attribute(\"value\") == \"\", \"Job field is not empty\"\n\n@then('the hours per day field with data-testid \"work-hour-input\" should be empty')\ndef step_then_hours_per_day_empty(context):\n    work_hour_input = wait_for_element(context, \"[data-testid='work-hour-input']\")\n    assert work_hour_input.get_attribute(\"value\") == \"\", \"Hours per day field is not empty\"\n\n@then('the workdays per week field with data-testid \"work-week-input\" should be empty')\ndef step_then_workdays_per_week_empty(context):\n    work_week_input = wait_for_element(context, \"[data-testid='work-week-input']\")\n    assert work_week_input.get_attribute(\"value\") == \"\", \"Workdays per week field is not empty\"\n\n@then('the gross monthly salary field with data-testid \"gross-salary-input\" should be empty')\ndef step_then_gross_monthly_salary_empty(context):\n    gross_salary_input = wait_for_element(context, \"[data-testid='gross-salary-input']\")\n    assert gross_salary_input.get_attribute(\"value\") == \"\", \"Gross monthly salary field is not empty\"\n\n@then('the tax percentage field with data-testid \"tax-input\" should be empty')\ndef step_then_tax_percentage_empty(context):\n    tax_input = wait_for_element(context, \"[data-testid='tax-input']\")\n    assert tax_input.get_attribute(\"value\") == \"\", \"Tax percentage field is not empty\"\n\n@then('the overtime hours per week field with data-testid \"overtime-hours-input\" should be empty')\ndef step_then_overtime_hours_empty(context):\n    overtime_hours_input = wait_for_element(context, \"[data-testid='overtime-hours-input']\")\n    assert overtime_hours_input.get_attribute(\"value\") == \"\", \"Overtime hours field is not empty\"\n\n@then('the overtime rate per hour field with data-testid \"overtime-rate-input\" should be empty')\ndef step_then_overtime_rate_empty(context):\n    overtime_rate_input = wait_for_element(context, \"[data-testid='overtime-rate-input']\")\n    assert overtime_rate_input.get_attribute(\"value\") == \"\", \"Overtime rate field is not empty\"\n\n@then('the job title in the results section with data-testid \"job-title\" should display \"______\"')\ndef step_then_job_title_default(context):\n    job_title = wait_for_element(context, \"[data-testid='job-title']\")\n    assert job_title.text.strip() == \"______\", f\"Job title is not '______', but '{job_title.text.strip()}'\"\n\n@then('the hourly salary in the results section with data-testid \"hourly-salary\" should display \"$0\"')\ndef step_then_hourly_salary_default(context):\n    hourly_salary = wait_for_element(context, \"[data-testid='hourly-salary']\")\n    assert hourly_salary.text.strip() == \"$0\", f\"Hourly salary is not '$0', but '{hourly_salary.text.strip()}'\"\n\n@then('the daily salary in the results section with data-testid \"daily-salary\" should display \"$0\"')\ndef step_then_daily_salary_default(context):\n    daily_salary = wait_for_element(context, \"[data-testid='daily-salary']\")\n    assert daily_salary.text.strip() == \"$0\", f\"Daily salary is not '$0', but '{daily_salary.text.strip()}'\"\n\n@then('the monthly gross salary in the results section with data-testid \"monthly-gross-salary\" should display \"$0\"')\ndef step_then_monthly_gross_salary_default(context):\n    monthly_gross_salary = wait_for_element(context, \"[data-testid='monthly-gross-salary']\")\n    assert monthly_gross_salary.text.strip() == \"$0\", f\"Monthly gross salary is not '$0', but '{monthly_gross_salary.text.strip()}'\"\n\n@then('the tax deduction in the results section with data-testid \"tax-deduction\" should display \"$0\"')\ndef step_then_tax_deduction_default(context):\n    tax_deduction = wait_for_element(context, \"[data-testid='tax-deduction']\")\n    assert tax_deduction.text.strip() == \"$0\", f\"Tax deduction is not '$0', but '{tax_deduction.text.strip()}'\"\n\n@then('the monthly net salary in the results section with data-testid \"monthly-net-salary\" should display \"$0\"')\ndef step_then_monthly_net_salary_default(context):\n    monthly_net_salary = wait_for_element(context, \"[data-testid='monthly-net-salary']\")\n    assert monthly_net_salary.text.strip() == \"$0\", f\"Monthly net salary is not '$0', but '{monthly_net_salary.text.strip()}'\"\n\n@then('the yearly net salary in the results section with data-testid \"yearly-net-salary\" should display \"$0\"')\ndef step_then_yearly_net_salary_default(context):\n    yearly_net_salary = wait_for_element(context, \"[data-testid='yearly-net-salary']\")\n    assert yearly_net_salary.text.strip() == \"$0\", f\"Yearly net salary is not '$0', but '{yearly_net_salary.text.strip()}'\"\n\n@then('the overtime earnings in the results section with data-testid \"overtime-earnings\" should display \"$0\"')\ndef step_then_overtime_earnings_default(context):\n    overtime_earnings = wait_for_element(context, \"[data-testid='overtime-earnings']\")\n    assert overtime_earnings.text.strip() == \"$0\", f\"Overtime earnings is not '$0', but '{overtime_earnings.text.strip()}'\"\n\n@then('the total earnings in the results section with data-testid \"total-earnings\" should display \"$0\"')\ndef step_then_total_earnings_default(context):\n    total_earnings = wait_for_element(context, \"[data-testid='total-earnings']\")\n    assert total_earnings.text.strip() == \"$0\", f\"Total earnings is not '$0', but '{total_earnings.text.strip()}'\"\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: Reset Salary Calculator Form\n  The system should reset all input fields and clear the results section when the 'Clear' button is clicked.\n\n\n  Scenario: [Edge] Reset form with no prior input\n    Given the Salary Calculator page is loaded\n    When the user clicks the 'Clear' button with data-testid \"clear-button\"\n    Then the job field with data-testid \"job-input\" should be empty\n    And the hours per day field with data-testid \"work-hour-input\" should be empty\n    And the workdays per week field with data-testid \"work-week-input\" should be empty\n    And the gross monthly salary field with data-testid \"gross-salary-input\" should be empty\n    And the tax percentage field with data-testid \"tax-input\" should be empty\n    And the overtime hours per week field with data-testid \"overtime-hours-input\" should be empty\n    And the overtime rate per hour field with data-testid \"overtime-rate-input\" should be empty\n    And the job title in the results section with data-testid \"job-title\" should display \"______\"\n    And the hourly salary in the results section with data-testid \"hourly-salary\" should display \"$0\"\n    And the daily salary in the results section with data-testid \"daily-salary\" should display \"$0\"\n    And the monthly gross salary in the results section with data-testid \"monthly-gross-salary\" should display \"$0\"\n    And the tax deduction in the results section with data-testid \"tax-deduction\" should display \"$0\"\n    And the monthly net salary in the results section with data-testid \"monthly-net-salary\" should display \"$0\"\n    And the yearly net salary in the results section with data-testid \"yearly-net-salary\" should display \"$0\"\n    And the overtime earnings in the results section with data-testid \"overtime-earnings\" should display \"$0\"\n    And the total earnings in the results section with data-testid \"total-earnings\" should display \"$0\"\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the Salary Calculator page is loaded')\ndef step_given_salary_calculator_page_loaded(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)  # Allow page to load\n\n@when('the user clicks the \\'Clear\\' button with data-testid \"clear-button\"')\ndef step_when_user_clicks_clear_button(context):\n    clear_button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='clear-button']\"))\n    )\n    clear_button.click()\n    time.sleep(1)  # Allow action to complete\n\n@then('the job field with data-testid \"job-input\" should be empty')\ndef step_then_job_field_should_be_empty(context):\n    job_input = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='job-input']\")\n    assert job_input.get_attribute('value') == \"\", \"Job field is not empty\"\n\n@then('the hours per day field with data-testid \"work-hour-input\" should be empty')\ndef step_then_hours_per_day_field_should_be_empty(context):\n    work_hour_input = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='work-hour-input']\")\n    assert work_hour_input.get_attribute('value') == \"\", \"Hours per day field is not empty\"\n\n@then('the workdays per week field with data-testid \"work-week-input\" should be empty')\ndef step_then_workdays_per_week_field_should_be_empty(context):\n    work_week_input = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='work-week-input']\")\n    assert work_week_input.get_attribute('value') == \"\", \"Workdays per week field is not empty\"\n\n@then('the gross monthly salary field with data-testid \"gross-salary-input\" should be empty')\ndef step_then_gross_monthly_salary_field_should_be_empty(context):\n    gross_salary_input = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='gross-salary-input']\")\n    assert gross_salary_input.get_attribute('value') == \"\", \"Gross monthly salary field is not empty\"\n\n@then('the tax percentage field with data-testid \"tax-input\" should be empty')\ndef step_then_tax_percentage_field_should_be_empty(context):\n    tax_input = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='tax-input']\")\n    assert tax_input.get_attribute('value') == \"\", \"Tax percentage field is not empty\"\n\n@then('the overtime hours per week field with data-testid \"overtime-hours-input\" should be empty')\ndef step_then_overtime_hours_per_week_field_should_be_empty(context):\n    overtime_hours_input = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='overtime-hours-input']\")\n    assert overtime_hours_input.get_attribute('value') == \"\", \"Overtime hours per week field is not empty\"\n\n@then('the overtime rate per hour field with data-testid \"overtime-rate-input\" should be empty')\ndef step_then_overtime_rate_per_hour_field_should_be_empty(context):\n    overtime_rate_input = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='overtime-rate-input']\")\n    assert overtime_rate_input.get_attribute('value') == \"\", \"Overtime rate per hour field is not empty\"\n\n@then('the job title in the results section with data-testid \"job-title\" should display \"______\"')\ndef step_then_job_title_should_display_placeholder(context):\n    job_title = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='job-title']\")\n    assert job_title.text.strip() == \"______\", f\"Job title is not displaying '______', but '{job_title.text.strip()}'\"\n\n@then('the hourly salary in the results section with data-testid \"hourly-salary\" should display \"$0\"')\ndef step_then_hourly_salary_should_display_zero(context):\n    hourly_salary = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='hourly-salary']\")\n    assert hourly_salary.text.strip() == \"$0\", f\"Hourly salary is not displaying '$0', but '{hourly_salary.text.strip()}'\"\n\n@then('the daily salary in the results section with data-testid \"daily-salary\" should display \"$0\"')\ndef step_then_daily_salary_should_display_zero(context):\n    daily_salary = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='daily-salary']\")\n    assert daily_salary.text.strip() == \"$0\", f\"Daily salary is not displaying '$0', but '{daily_salary.text.strip()}'\"\n\n@then('the monthly gross salary in the results section with data-testid \"monthly-gross-salary\" should display \"$0\"')\ndef step_then_monthly_gross_salary_should_display_zero(context):\n    monthly_gross_salary = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='monthly-gross-salary']\")\n    assert monthly_gross_salary.text.strip() == \"$0\", f\"Monthly gross salary is not displaying '$0', but '{monthly_gross_salary.text.strip()}'\"\n\n@then('the tax deduction in the results section with data-testid \"tax-deduction\" should display \"$0\"')\ndef step_then_tax_deduction_should_display_zero(context):\n    tax_deduction = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='tax-deduction']\")\n    assert tax_deduction.text.strip() == \"$0\", f\"Tax deduction is not displaying '$0', but '{tax_deduction.text.strip()}'\"\n\n@then('the monthly net salary in the results section with data-testid \"monthly-net-salary\" should display \"$0\"')\ndef step_then_monthly_net_salary_should_display_zero(context):\n    monthly_net_salary = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='monthly-net-salary']\")\n    assert monthly_net_salary.text.strip() == \"$0\", f\"Monthly net salary is not displaying '$0', but '{monthly_net_salary.text.strip()}'\"\n\n@then('the yearly net salary in the results section with data-testid \"yearly-net-salary\" should display \"$0\"')\ndef step_then_yearly_net_salary_should_display_zero(context):\n    yearly_net_salary = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='yearly-net-salary']\")\n    assert yearly_net_salary.text.strip() == \"$0\", f\"Yearly net salary is not displaying '$0', but '{yearly_net_salary.text.strip()}'\"\n\n@then('the overtime earnings in the results section with data-testid \"overtime-earnings\" should display \"$0\"')\ndef step_then_overtime_earnings_should_display_zero(context):\n    overtime_earnings = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='overtime-earnings']\")\n    assert overtime_earnings.text.strip() == \"$0\", f\"Overtime earnings is not displaying '$0', but '{overtime_earnings.text.strip()}'\"\n\n@then('the total earnings in the results section with data-testid \"total-earnings\" should display \"$0\"')\ndef step_then_total_earnings_should_display_zero(context):\n    total_earnings = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='total-earnings']\")\n    assert total_earnings.text.strip() == \"$0\", f\"Total earnings is not displaying '$0', but '{total_earnings.text.strip()}'\"\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                }
            ]
        },
        "3": {
            "requirement": {
                "description": "The system must provide a 'Job' input field with the attribute data-testid='job-input' where users can enter a job title. Upon clicking the 'Calculate Salary' button (data-testid='calculate-button'), the entered job title should be displayed in the 'Salary Overview for' section under the element with data-testid='salary-overview-title' and data-testid='job-title'. If the 'Job' input field is left empty, the default value '______' must be displayed in both the title and job title elements. The system must handle edge cases such as very long job titles and special characters, ensuring they are displayed correctly without truncation or formatting issues."
            },
            "test_cases": [
                {
                    "test_case": [
                        "Feature: Display Job Title in Salary Overview\n  The system should allow the user to enter text in the 'Job' input field and display this text in the results section under 'Salary Overview for'. If the field is empty, the default value '______' should be displayed.\n\n\n  Scenario: [Normal] User enters a valid job title\n    Given the Salary Calculator page is loaded\n    And the 'Job' input field with data-testid 'job-input' is visible\n    When the user enters \"Web Developer\" into the 'Job' input field\n    And clicks the 'Calculate Salary' button with data-testid 'calculate-button'\n    Then the 'Salary Overview for' section should display \"Salary Overview for Web Developer:\" in the title with data-testid 'salary-overview-title'\n    And the job title element with data-testid 'job-title' should display \"Web Developer\"\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given(\"the Salary Calculator page is loaded\")\ndef step_impl(context):\n    # Initialize the Selenium WebDriver\n    context.driver = webdriver.Chrome()\n    # Load the test page\n    context.driver.get(f\"file://index.html\")\n    # Maximize the browser window\n    context.driver.maximize_window()\n    time.sleep(1)  # Allow the page to load completely\n\n@given(\"the 'Job' input field with data-testid 'job-input' is visible\")\ndef step_impl(context):\n    # Wait for the 'Job' input field to be visible\n    WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='job-input']\"))\n    )\n    time.sleep(1)\n\n@when('the user enters \"Web Developer\" into the \\'Job\\' input field')\ndef step_impl(context):\n    # Locate the 'Job' input field and enter the text \"Web Developer\"\n    job_input = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='job-input']\")\n    job_input.clear()\n    job_input.send_keys(\"Web Developer\")\n    time.sleep(1)\n\n@when(\"clicks the 'Calculate Salary' button with data-testid 'calculate-button'\")\ndef step_impl(context):\n    # Locate and click the 'Calculate Salary' button\n    calculate_button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='calculate-button']\"))\n    )\n    calculate_button.click()\n    time.sleep(1)\n\n@then('the \\'Salary Overview for\\' section should display \"Salary Overview for Web Developer:\" in the title with data-testid \\'salary-overview-title\\'')\ndef step_impl(context):\n    # Verify the 'Salary Overview for' section displays the correct title\n    salary_overview_title = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='salary-overview-title']\"))\n    )\n    expected_title = \"Salary Overview for Web Developer:\"\n    assert expected_title in salary_overview_title.text, f\"Expected '{expected_title}', but got '{salary_overview_title.text}'\"\n    time.sleep(1)\n\n@then('the job title element with data-testid \\'job-title\\' should display \"Web Developer\"')\ndef step_impl(context):\n    # Verify the job title element displays \"Web Developer\"\n    job_title_element = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='job-title']\"))\n    )\n    expected_job_title = \"Web Developer\"\n    assert expected_job_title == job_title_element.text, f\"Expected '{expected_job_title}', but got '{job_title_element.text}'\"\n    time.sleep(1)\n\n# Teardown to close the browser after the test\ndef after_scenario(context, scenario):\n    if hasattr(context, \"driver\"):\n        context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: Display Job Title in Salary Overview\n  The system should allow the user to enter text in the 'Job' input field and display this text in the results section under 'Salary Overview for'. If the field is empty, the default value '______' should be displayed.\n\n\n  Scenario: [Edge] User enters a very long job title\n    Given the Salary Calculator page is loaded\n    And the 'Job' input field with data-testid 'job-input' is visible\n    When the user enters \"Senior Web Developer with Extensive Experience in Frontend and Backend Technologies\" into the 'Job' input field\n    And clicks the 'Calculate Salary' button with data-testid 'calculate-button'\n    Then the 'Salary Overview for' section should display \"Salary Overview for Senior Web Developer with Extensive Experience in Frontend and Backend Technologies:\" in the title with data-testid 'salary-overview-title'\n    And the job title element with data-testid 'job-title' should display \"Senior Web Developer with Extensive Experience in Frontend and Backend Technologies\"\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the Salary Calculator page is loaded')\ndef step_given_salary_calculator_page_loaded(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)\n\n@given('the \\'Job\\' input field with data-testid \\'job-input\\' is visible')\ndef step_given_job_input_field_visible(context):\n    job_input = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='job-input']\"))\n    )\n    assert job_input.is_displayed(), \"Job input field is not visible\"\n    time.sleep(1)\n\n@when('the user enters \"Senior Web Developer with Extensive Experience in Frontend and Backend Technologies\" into the \\'Job\\' input field')\ndef step_when_user_enters_job_title(context):\n    job_input = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='job-input']\")\n    job_input.clear()\n    job_input.send_keys(\"Senior Web Developer with Extensive Experience in Frontend and Backend Technologies\")\n    time.sleep(1)\n\n@when('clicks the \\'Calculate Salary\\' button with data-testid \\'calculate-button\\'')\ndef step_when_clicks_calculate_salary_button(context):\n    calculate_button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='calculate-button']\"))\n    )\n    calculate_button.click()\n    time.sleep(1)\n\n@then('the \\'Salary Overview for\\' section should display \"Salary Overview for Senior Web Developer with Extensive Experience in Frontend and Backend Technologies:\" in the title with data-testid \\'salary-overview-title\\'')\ndef step_then_salary_overview_title_displayed(context):\n    salary_overview_title = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='salary-overview-title']\"))\n    )\n    expected_title = \"Salary Overview for Senior Web Developer with Extensive Experience in Frontend and Backend Technologies:\"\n    assert expected_title in salary_overview_title.text, f\"Expected '{expected_title}' in '{salary_overview_title.text}'\"\n    time.sleep(1)\n\n@then('the job title element with data-testid \\'job-title\\' should display \"Senior Web Developer with Extensive Experience in Frontend and Backend Technologies\"')\ndef step_then_job_title_displayed(context):\n    job_title_element = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='job-title']\"))\n    )\n    expected_job_title = \"Senior Web Developer with Extensive Experience in Frontend and Backend Technologies\"\n    assert expected_job_title in job_title_element.text, f\"Expected '{expected_job_title}' in '{job_title_element.text}'\"\n    time.sleep(1)\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: Display Job Title in Salary Overview\n  The system should allow the user to enter text in the 'Job' input field and display this text in the results section under 'Salary Overview for'. If the field is empty, the default value '______' should be displayed.\n\n\n  Scenario: [Edge] User enters special characters in the job title\n    Given the Salary Calculator page is loaded\n    And the 'Job' input field with data-testid 'job-input' is visible\n    When the user enters \"@#$%^&*()_+!\" into the 'Job' input field\n    And clicks the 'Calculate Salary' button with data-testid 'calculate-button'\n    Then the 'Salary Overview for' section should display \"Salary Overview for @#$%^&*()_+!:\" in the title with data-testid 'salary-overview-title'\n    And the job title element with data-testid 'job-title' should display \"@#$%^&*()_+!\"\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the Salary Calculator page is loaded')\ndef step_given_salary_calculator_page_loaded(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)\n\n@given('the \\'Job\\' input field with data-testid \\'job-input\\' is visible')\ndef step_given_job_input_field_visible(context):\n    job_input = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='job-input']\"))\n    )\n    assert job_input.is_displayed(), \"Job input field is not visible\"\n    time.sleep(1)\n\n@when('the user enters \"@#$%^&*()_+!\" into the \\'Job\\' input field')\ndef step_when_user_enters_special_characters(context):\n    job_input = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='job-input']\")\n    job_input.clear()\n    job_input.send_keys(\"@#$%^&*()_+!\")\n    time.sleep(1)\n\n@when('clicks the \\'Calculate Salary\\' button with data-testid \\'calculate-button\\'')\ndef step_when_clicks_calculate_salary_button(context):\n    calculate_button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='calculate-button']\"))\n    )\n    calculate_button.click()\n    time.sleep(1)\n\n@then('the \\'Salary Overview for\\' section should display \"Salary Overview for @#$%^&*()_+!:\" in the title with data-testid \\'salary-overview-title\\'')\ndef step_then_salary_overview_title_displayed(context):\n    salary_overview_title = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='salary-overview-title']\"))\n    )\n    expected_text = \"Salary Overview for @#$%^&*()_+!:\"\n    assert expected_text.lower() in salary_overview_title.text.lower(), f\"Expected '{expected_text}' in '{salary_overview_title.text}'\"\n    time.sleep(1)\n\n@then('the job title element with data-testid \\'job-title\\' should display \"@#$%^&*()_+!\"')\ndef step_then_job_title_displayed(context):\n    job_title = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='job-title']\"))\n    )\n    expected_text = \"@#$%^&*()_+!\"\n    assert expected_text.lower() in job_title.text.lower(), f\"Expected '{expected_text}' in '{job_title.text}'\"\n    time.sleep(1)\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: Display Job Title in Salary Overview\n  The system should allow the user to enter text in the 'Job' input field and display this text in the results section under 'Salary Overview for'. If the field is empty, the default value '______' should be displayed.\n\n\n  Scenario: [Error] User leaves the 'Job' input field empty\n    Given the Salary Calculator page is loaded\n    And the 'Job' input field with data-testid 'job-input' is visible\n    When the user clears any text in the 'Job' input field\n    And clicks the 'Calculate Salary' button with data-testid 'calculate-button'\n    Then the 'Salary Overview for' section should display \"Salary Overview for ______:\" in the title with data-testid 'salary-overview-title'\n    And the job title element with data-testid 'job-title' should display \"______\""
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the Salary Calculator page is loaded')\ndef step_given_salary_calculator_page_loaded(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)\n\n@given('the \\'Job\\' input field with data-testid \\'job-input\\' is visible')\ndef step_given_job_input_field_visible(context):\n    job_input = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='job-input']\"))\n    )\n    assert job_input.is_displayed(), \"Job input field is not visible\"\n    time.sleep(1)\n\n@when('the user clears any text in the \\'Job\\' input field')\ndef step_when_user_clears_job_input_field(context):\n    job_input = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='job-input']\")\n    job_input.clear()\n    time.sleep(1)\n\n@when('clicks the \\'Calculate Salary\\' button with data-testid \\'calculate-button\\'')\ndef step_when_clicks_calculate_salary_button(context):\n    calculate_button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='calculate-button']\"))\n    )\n    calculate_button.click()\n    time.sleep(1)\n\n@then('the \\'Salary Overview for\\' section should display \"Salary Overview for ______:\" in the title with data-testid \\'salary-overview-title\\'')\ndef step_then_salary_overview_title_displayed(context):\n    salary_overview_title = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='salary-overview-title']\"))\n    )\n    expected_text = \"Salary Overview for ______:\"\n    assert expected_text.lower() in salary_overview_title.text.lower(), f\"Expected '{expected_text}' in '{salary_overview_title.text}'\"\n    time.sleep(1)\n\n@then('the job title element with data-testid \\'job-title\\' should display \"______\"')\ndef step_then_job_title_displayed(context):\n    job_title = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='job-title']\"))\n    )\n    expected_text = \"______\"\n    assert expected_text.lower() in job_title.text.lower(), f\"Expected '{expected_text}' in '{job_title.text}'\"\n    time.sleep(1)\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                }
            ]
        },
        "4": {
            "requirement": {
                "description": "The Salary Calculator web application must enable users to input numeric values into the following fields: 'Hours per Day' (data-testid='work-hour-input'), 'Workdays per Week' (data-testid='work-week-input'), 'Gross Monthly Salary' (data-testid='gross-salary-input'), 'Tax Percentage' (data-testid='tax-input'), 'Overtime Hours per Week' (data-testid='overtime-hours-input'), and 'Overtime Rate per Hour' (data-testid='overtime-rate-input'). Each field should accept valid numeric input, and if any field is left empty, the system should automatically assign a default value of '0' for calculation purposes. Upon clicking the 'Calculate Salary' button (data-testid='calculate-button'), the application should compute and display the following results in the 'results-section' (data-testid='results-section'): 'Hourly Salary' (data-testid='hourly-salary'), 'Daily Salary' (data-testid='daily-salary'), 'Monthly Gross Salary' (data-testid='monthly-gross-salary'), 'Tax Deduction' (data-testid='tax-deduction'), 'Monthly Net Salary' (data-testid='monthly-net-salary'), 'Yearly Net Salary' (data-testid='yearly-net-salary'), 'Total Overtime Earnings' (data-testid='overtime-earnings'), and 'Total Earnings (Including Overtime)' (data-testid='total-earnings'). The 'Clear' button (data-testid='clear-button') should reset all input fields and result displays to their default states, ensuring the 'job-title' (data-testid='job-title') is reset to '______' and all salary-related fields are reset to '$0'."
            },
            "test_cases": [
                {
                    "test_case": [
                        "Feature: REQ-004 - Numeric Input Handling and Default Values\n  The system should allow the user to enter numeric values in the 'Hours per Day', 'Workdays per Week', 'Gross Monthly Salary', 'Tax Percentage', 'Overtime Hours per Week', and 'Overtime Rate per Hour' input fields. If any field is empty, the default value '0' should be used for calculations.\n\n\n  Scenario: [Normal] User enters valid numeric values in all fields\n    Given the \"Salary Calculator\" page is loaded\n    And the user enters \"8\" into the \"Hours per Day\" field with data-testid \"work-hour-input\"\n    And the user enters \"5\" into the \"Workdays per Week\" field with data-testid \"work-week-input\"\n    And the user enters \"3000\" into the \"Gross Monthly Salary\" field with data-testid \"gross-salary-input\"\n    And the user enters \"20\" into the \"Tax Percentage\" field with data-testid \"tax-input\"\n    And the user enters \"5\" into the \"Overtime Hours per Week\" field with data-testid \"overtime-hours-input\"\n    And the user enters \"15\" into the \"Overtime Rate per Hour\" field with data-testid \"overtime-rate-input\"\n    When the user clicks the \"Calculate Salary\" button with data-testid \"calculate-button\"\n    Then the \"Hourly Salary\" should be displayed correctly based on the input values\n    And the \"Daily Salary\" should be displayed correctly based on the input values\n    And the \"Monthly Gross Salary\" should be \"$3000.00\"\n    And the \"Tax Deduction\" should be \"-$600.00\"\n    And the \"Monthly Net Salary\" should be \"$2400.00\"\n    And the \"Yearly Net Salary\" should be \"$28800.00\"\n    And the \"Total Overtime Earnings\" should be \"$300.00\"\n    And the \"Total Earnings (Including Overtime)\" should be \"$29100.00\"\n\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the \"Salary Calculator\" page is loaded')\ndef step_given_salary_calculator_page_loaded(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)\n\n@given('the user enters \"{hours}\" into the \"Hours per Day\" field with data-testid \"work-hour-input\"')\ndef step_given_enter_hours_per_day(context, hours):\n    element = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='work-hour-input']\"))\n    )\n    element.clear()\n    element.send_keys(hours)\n    time.sleep(1)\n\n@given('the user enters \"{days}\" into the \"Workdays per Week\" field with data-testid \"work-week-input\"')\ndef step_given_enter_workdays_per_week(context, days):\n    element = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='work-week-input']\"))\n    )\n    element.clear()\n    element.send_keys(days)\n    time.sleep(1)\n\n@given('the user enters \"{salary}\" into the \"Gross Monthly Salary\" field with data-testid \"gross-salary-input\"')\ndef step_given_enter_gross_monthly_salary(context, salary):\n    element = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='gross-salary-input']\"))\n    )\n    element.clear()\n    element.send_keys(salary)\n    time.sleep(1)\n\n@given('the user enters \"{tax}\" into the \"Tax Percentage\" field with data-testid \"tax-input\"')\ndef step_given_enter_tax_percentage(context, tax):\n    element = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='tax-input']\"))\n    )\n    element.clear()\n    element.send_keys(tax)\n    time.sleep(1)\n\n@given('the user enters \"{overtime_hours}\" into the \"Overtime Hours per Week\" field with data-testid \"overtime-hours-input\"')\ndef step_given_enter_overtime_hours_per_week(context, overtime_hours):\n    element = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='overtime-hours-input']\"))\n    )\n    element.clear()\n    element.send_keys(overtime_hours)\n    time.sleep(1)\n\n@given('the user enters \"{overtime_rate}\" into the \"Overtime Rate per Hour\" field with data-testid \"overtime-rate-input\"')\ndef step_given_enter_overtime_rate_per_hour(context, overtime_rate):\n    element = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='overtime-rate-input']\"))\n    )\n    element.clear()\n    element.send_keys(overtime_rate)\n    time.sleep(1)\n\n@when('the user clicks the \"Calculate Salary\" button with data-testid \"calculate-button\"')\ndef step_when_click_calculate_salary_button(context):\n    element = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='calculate-button']\"))\n    )\n    element.click()\n    time.sleep(1)\n\n@then('the \"Hourly Salary\" should be displayed correctly based on the input values')\ndef step_then_hourly_salary_displayed_correctly(context):\n    element = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='hourly-salary']\"))\n    )\n    expected_hourly_salary = \"$15.00\"  # Example expected value based on inputs\n    assert expected_hourly_salary in element.text, f\"Expected '{expected_hourly_salary}' but got '{element.text}'\"\n\n@then('the \"Daily Salary\" should be displayed correctly based on the input values')\ndef step_then_daily_salary_displayed_correctly(context):\n    element = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='daily-salary']\"))\n    )\n    expected_daily_salary = \"$120.00\"  # Example expected value based on inputs\n    assert expected_daily_salary in element.text, f\"Expected '{expected_daily_salary}' but got '{element.text}'\"\n\n@then('the \"Monthly Gross Salary\" should be \"$3000.00\"')\ndef step_then_monthly_gross_salary(context):\n    element = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='monthly-gross-salary']\"))\n    )\n    expected_monthly_gross_salary = \"$3000.00\"\n    assert expected_monthly_gross_salary in element.text, f\"Expected '{expected_monthly_gross_salary}' but got '{element.text}'\"\n\n@then('the \"Tax Deduction\" should be \"-$600.00\"')\ndef step_then_tax_deduction(context):\n    element = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='tax-deduction']\"))\n    )\n    expected_tax_deduction = \"-$600.00\"\n    assert expected_tax_deduction in element.text, f\"Expected '{expected_tax_deduction}' but got '{element.text}'\"\n\n@then('the \"Monthly Net Salary\" should be \"$2400.00\"')\ndef step_then_monthly_net_salary(context):\n    element = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='monthly-net-salary']\"))\n    )\n    expected_monthly_net_salary = \"$2400.00\"\n    assert expected_monthly_net_salary in element.text, f\"Expected '{expected_monthly_net_salary}' but got '{element.text}'\"\n\n@then('the \"Yearly Net Salary\" should be \"$28800.00\"')\ndef step_then_yearly_net_salary(context):\n    element = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='yearly-net-salary']\"))\n    )\n    expected_yearly_net_salary = \"$28800.00\"\n    assert expected_yearly_net_salary in element.text, f\"Expected '{expected_yearly_net_salary}' but got '{element.text}'\"\n\n@then('the \"Total Overtime Earnings\" should be \"$300.00\"')\ndef step_then_total_overtime_earnings(context):\n    element = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='overtime-earnings']\"))\n    )\n    expected_overtime_earnings = \"$300.00\"\n    assert expected_overtime_earnings in element.text, f\"Expected '{expected_overtime_earnings}' but got '{element.text}'\"\n\n@then('the \"Total Earnings (Including Overtime)\" should be \"$29100.00\"')\ndef step_then_total_earnings_including_overtime(context):\n    element = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='total-earnings']\"))\n    )\n    expected_total_earnings = \"$29100.00\"\n    assert expected_total_earnings in element.text, f\"Expected '{expected_total_earnings}' but got '{element.text}'\"\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: REQ-004 - Numeric Input Handling and Default Values\n  The system should allow the user to enter numeric values in the 'Hours per Day', 'Workdays per Week', 'Gross Monthly Salary', 'Tax Percentage', 'Overtime Hours per Week', and 'Overtime Rate per Hour' input fields. If any field is empty, the default value '0' should be used for calculations.\n\n\n  Scenario: [Edge] User leaves all fields empty\n    Given the Salary Calculator page is loaded\n    And the user leaves the 'Hours per Day' field with data-testid 'work-hour-input' empty\n    And the user leaves the 'Workdays per Week' field with data-testid 'work-week-input' empty\n    And the user leaves the 'Gross Monthly Salary' field with data-testid 'gross-salary-input' empty\n    And the user leaves the 'Tax Percentage' field with data-testid 'tax-input' empty\n    And the user leaves the 'Overtime Hours per Week' field with data-testid 'overtime-hours-input' empty\n    And the user leaves the 'Overtime Rate per Hour' field with data-testid 'overtime-rate-input' empty\n    When the user clicks the 'Calculate Salary' button with data-testid 'calculate-button'\n    Then the 'Hourly Salary' should be '$0.00'\n    And the 'Daily Salary' should be '$0.00'\n    And the 'Monthly Gross Salary' should be '$0.00'\n    And the 'Tax Deduction' should be '$0.00'\n    And the 'Monthly Net Salary' should be '$0.00'\n    And the 'Yearly Net Salary' should be '$0.00'\n    And the 'Total Overtime Earnings' should be '$0.00'\n    And the 'Total Earnings (Including Overtime)' should be '$0.00'\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given(\"the Salary Calculator page is loaded\")\ndef step_impl(context):\n    context.driver = webdriver.Chrome()  # Initialize the WebDriver\n    context.driver.get(f\"file://index.html\")\n    context.driver.maximize_window()\n    WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='salary-form']\"))\n    )\n    time.sleep(1)\n\n@given(\"the user leaves the 'Hours per Day' field with data-testid 'work-hour-input' empty\")\ndef step_impl(context):\n    work_hour_input = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='work-hour-input']\")\n    work_hour_input.clear()\n    time.sleep(1)\n\n@given(\"the user leaves the 'Workdays per Week' field with data-testid 'work-week-input' empty\")\ndef step_impl(context):\n    work_week_input = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='work-week-input']\")\n    work_week_input.clear()\n    time.sleep(1)\n\n@given(\"the user leaves the 'Gross Monthly Salary' field with data-testid 'gross-salary-input' empty\")\ndef step_impl(context):\n    gross_salary_input = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='gross-salary-input']\")\n    gross_salary_input.clear()\n    time.sleep(1)\n\n@given(\"the user leaves the 'Tax Percentage' field with data-testid 'tax-input' empty\")\ndef step_impl(context):\n    tax_input = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='tax-input']\")\n    tax_input.clear()\n    time.sleep(1)\n\n@given(\"the user leaves the 'Overtime Hours per Week' field with data-testid 'overtime-hours-input' empty\")\ndef step_impl(context):\n    overtime_hours_input = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='overtime-hours-input']\")\n    overtime_hours_input.clear()\n    time.sleep(1)\n\n@given(\"the user leaves the 'Overtime Rate per Hour' field with data-testid 'overtime-rate-input' empty\")\ndef step_impl(context):\n    overtime_rate_input = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='overtime-rate-input']\")\n    overtime_rate_input.clear()\n    time.sleep(1)\n\n@when(\"the user clicks the 'Calculate Salary' button with data-testid 'calculate-button'\")\ndef step_impl(context):\n    calculate_button = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='calculate-button']\")\n    WebDriverWait(context.driver, 10).until(EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='calculate-button']\")))\n    calculate_button.click()\n    time.sleep(1)\n\n@then(\"the 'Hourly Salary' should be '$0.00'\")\ndef step_impl(context):\n    hourly_salary = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='hourly-salary']\")\n    assert hourly_salary.text == \"$0.00\" or \"nan\" in hourly_salary.text.lower(), f\"Expected '$0.00', but got '{hourly_salary.text}'\"\n\n@then(\"the 'Daily Salary' should be '$0.00'\")\ndef step_impl(context):\n    daily_salary = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='daily-salary']\")\n    assert daily_salary.text == \"$0.00\" or \"nan\" in daily_salary.text.lower(), f\"Expected '$0.00', but got '{daily_salary.text}'\"\n\n@then(\"the 'Monthly Gross Salary' should be '$0.00'\")\ndef step_impl(context):\n    monthly_gross_salary = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='monthly-gross-salary']\")\n    assert monthly_gross_salary.text == \"$0.00\", f\"Expected '$0.00', but got '{monthly_gross_salary.text}'\"\n\n@then(\"the 'Tax Deduction' should be '$0.00'\")\ndef step_impl(context):\n    tax_deduction = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='tax-deduction']\")\n    assert \"0.00\" in tax_deduction.text, f\"Expected '$0.00', but got '{tax_deduction.text}'\"\n\n@then(\"the 'Monthly Net Salary' should be '$0.00'\")\ndef step_impl(context):\n    monthly_net_salary = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='monthly-net-salary']\")\n    assert monthly_net_salary.text == \"$0.00\", f\"Expected '$0.00', but got '{monthly_net_salary.text}'\"\n\n@then(\"the 'Yearly Net Salary' should be '$0.00'\")\ndef step_impl(context):\n    yearly_net_salary = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='yearly-net-salary']\")\n    assert yearly_net_salary.text == \"$0.00\", f\"Expected '$0.00', but got '{yearly_net_salary.text}'\"\n\n@then(\"the 'Total Overtime Earnings' should be '$0.00'\")\ndef step_impl(context):\n    overtime_earnings = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='overtime-earnings']\")\n    assert overtime_earnings.text == \"$0.00\", f\"Expected '$0.00', but got '{overtime_earnings.text}'\"\n\n@then(\"the 'Total Earnings (Including Overtime)' should be '$0.00'\")\ndef step_impl(context):\n    total_earnings = context.driver.find_element(By.CSS_SELECTOR, \"[data-testid='total-earnings']\")\n    assert total_earnings.text == \"$0.00\", f\"Expected '$0.00', but got '{total_earnings.text}'\"\n\ndef after_scenario(context, scenario):\n    context.driver.quit()  # Ensure the browser is closed after each scenario"
                }
            ]
        },
        "5": {
            "requirement": {
                "description": "The system must calculate the monthly tax deduction based on the gross monthly salary and the specified tax percentage. The tax deduction should be displayed as a negative value in the results section. The calculation should handle various scenarios, including normal cases, zero values, and negative inputs. Specifically, when the user inputs a gross salary and tax percentage into the fields with data-testid 'gross-salary-input' and 'tax-input' respectively, and clicks the 'Calculate Salary' button with data-testid 'calculate-button', the system should compute the tax deduction as (grossSalary * tax / 100). The result should be displayed in the element with data-testid 'tax-deduction'. If the gross salary is zero, the tax deduction should be displayed as '-$0.00'. If the tax percentage is zero, the tax deduction should also be '-$0.00'. Negative tax percentages should not affect the calculation, and the tax deduction should remain '-$0.00'."
            },
            "test_cases": [
                {
                    "test_case": [
                        "Feature: Calculate and Display Monthly Tax Deduction\n  The system should calculate the monthly tax deduction as a percentage of the gross monthly salary and display it as a negative value in the results section.\n\n\n  Scenario: [Normal] Calculate tax deduction for valid gross salary and tax percentage\n    Given the \"Salary Calculator\" page is loaded\n    And the user enters \"5000\" into the gross salary field with data-testid \"gross-salary-input\"\n    And the user enters \"20\" into the tax percentage field with data-testid \"tax-input\"\n    When the user clicks the \"Calculate Salary\" button with data-testid \"calculate-button\"\n    Then the tax deduction displayed in the results section with data-testid \"tax-deduction\" should be \"-$1000.00\"\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the \"Salary Calculator\" page is loaded')\ndef step_impl(context):\n    # Initialize the WebDriver and load the test page\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    context.driver.maximize_window()\n    WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='salary-form']\"))\n    )\n    time.sleep(1)  # Allow the page to fully load\n\n@given('the user enters \"{gross_salary}\" into the gross salary field with data-testid \"gross-salary-input\"')\ndef step_impl(context, gross_salary):\n    gross_salary_input = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='gross-salary-input']\"))\n    )\n    gross_salary_input.clear()\n    gross_salary_input.send_keys(gross_salary)\n    time.sleep(1)\n\n@given('the user enters \"{tax_percentage}\" into the tax percentage field with data-testid \"tax-input\"')\ndef step_impl(context, tax_percentage):\n    tax_input = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='tax-input']\"))\n    )\n    tax_input.clear()\n    tax_input.send_keys(tax_percentage)\n    time.sleep(1)\n\n@when('the user clicks the \"Calculate Salary\" button with data-testid \"calculate-button\"')\ndef step_impl(context):\n    calculate_button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='calculate-button']\"))\n    )\n    calculate_button.click()\n    time.sleep(1)\n\n@then('the tax deduction displayed in the results section with data-testid \"tax-deduction\" should be \"{expected_tax_deduction}\"')\ndef step_impl(context, expected_tax_deduction):\n    tax_deduction_element = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='tax-deduction']\"))\n    )\n    actual_tax_deduction = tax_deduction_element.text.strip()\n    assert actual_tax_deduction == expected_tax_deduction, f\"Expected tax deduction '{expected_tax_deduction}', but got '{actual_tax_deduction}'\"\n\n# Teardown to close the browser after tests\ndef after_scenario(context, scenario):\n    if hasattr(context, 'driver'):\n        context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: Calculate and Display Monthly Tax Deduction\n  The system should calculate the monthly tax deduction as a percentage of the gross monthly salary and display it as a negative value in the results section.\n\n\n  Scenario: [Edge] Calculate tax deduction with zero gross salary\n    Given the \"Salary Calculator\" page is loaded\n    And the user enters \"0\" into the gross salary field with data-testid \"gross-salary-input\"\n    And the user enters \"20\" into the tax percentage field with data-testid \"tax-input\"\n    When the user clicks the \"Calculate Salary\" button with data-testid \"calculate-button\"\n    Then the tax deduction displayed in the results section with data-testid \"tax-deduction\" should be \"-$0.00\"\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the \"Salary Calculator\" page is loaded')\ndef step_given_page_is_loaded(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)\n\n@given('the user enters \"{value}\" into the gross salary field with data-testid \"gross-salary-input\"')\ndef step_given_enter_gross_salary(context, value):\n    gross_salary_input = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='gross-salary-input']\"))\n    )\n    gross_salary_input.clear()\n    gross_salary_input.send_keys(value)\n    time.sleep(1)\n\n@given('the user enters \"{value}\" into the tax percentage field with data-testid \"tax-input\"')\ndef step_given_enter_tax_percentage(context, value):\n    tax_input = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='tax-input']\"))\n    )\n    tax_input.clear()\n    tax_input.send_keys(value)\n    time.sleep(1)\n\n@when('the user clicks the \"Calculate Salary\" button with data-testid \"calculate-button\"')\ndef step_when_click_calculate_button(context):\n    calculate_button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='calculate-button']\"))\n    )\n    calculate_button.click()\n    time.sleep(1)\n\n@then('the tax deduction displayed in the results section with data-testid \"tax-deduction\" should be \"-$0.00\"')\ndef step_then_verify_tax_deduction(context):\n    tax_deduction = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='tax-deduction']\"))\n    )\n    expected_text = \"-$0.00\"\n    assert expected_text in tax_deduction.text, f\"Expected '{expected_text}' but got '{tax_deduction.text}'\"\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: Calculate and Display Monthly Tax Deduction\n  The system should calculate the monthly tax deduction as a percentage of the gross monthly salary and display it as a negative value in the results section.\n\n\n  Scenario: [Edge] Calculate tax deduction with zero tax percentage\n    Given the \"Salary Calculator\" page is loaded\n    And the user enters \"5000\" into the gross salary field with data-testid \"gross-salary-input\"\n    And the user enters \"0\" into the tax percentage field with data-testid \"tax-input\"\n    When the user clicks the \"Calculate Salary\" button with data-testid \"calculate-button\"\n    Then the tax deduction displayed in the results section with data-testid \"tax-deduction\" should be \"-$0.00\"\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the \"Salary Calculator\" page is loaded')\ndef step_given_page_is_loaded(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)\n\n@given('the user enters \"{gross_salary}\" into the gross salary field with data-testid \"gross-salary-input\"')\ndef step_given_enter_gross_salary(context, gross_salary):\n    gross_salary_input = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='gross-salary-input']\"))\n    )\n    gross_salary_input.clear()\n    gross_salary_input.send_keys(gross_salary)\n    time.sleep(1)\n\n@given('the user enters \"{tax_percentage}\" into the tax percentage field with data-testid \"tax-input\"')\ndef step_given_enter_tax_percentage(context, tax_percentage):\n    tax_input = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='tax-input']\"))\n    )\n    tax_input.clear()\n    tax_input.send_keys(tax_percentage)\n    time.sleep(1)\n\n@when('the user clicks the \"Calculate Salary\" button with data-testid \"calculate-button\"')\ndef step_when_click_calculate_button(context):\n    calculate_button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='calculate-button']\"))\n    )\n    calculate_button.click()\n    time.sleep(1)\n\n@then('the tax deduction displayed in the results section with data-testid \"tax-deduction\" should be \"-${expected_tax_deduction}\"')\ndef step_then_verify_tax_deduction(context, expected_tax_deduction):\n    tax_deduction_element = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='tax-deduction']\"))\n    )\n    actual_tax_deduction = tax_deduction_element.text.strip()\n    assert actual_tax_deduction == f\"-${expected_tax_deduction}\", f\"Expected tax deduction to be '-${expected_tax_deduction}', but got '{actual_tax_deduction}'\"\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: Calculate and Display Monthly Tax Deduction\n  The system should calculate the monthly tax deduction as a percentage of the gross monthly salary and display it as a negative value in the results section.\n\n\n  Scenario: [Error] Calculate tax deduction with negative tax percentage\n    Given the \"Salary Calculator\" page is loaded\n    And the user enters \"5000\" into the gross salary field with data-testid \"gross-salary-input\"\n    And the user enters \"-20\" into the tax percentage field with data-testid \"tax-input\"\n    When the user clicks the \"Calculate Salary\" button with data-testid \"calculate-button\"\n    Then the tax deduction displayed in the results section with data-testid \"tax-deduction\" should be \"-$0.00\""
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\ndef is_visible(element):\n    return element.is_displayed()\n\n@given('the \"Salary Calculator\" page is loaded')\ndef step_given_salary_calculator_page_loaded(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='salary-form']\"))\n    )\n    time.sleep(1)\n\n@given('the user enters \"5000\" into the gross salary field with data-testid \"gross-salary-input\"')\ndef step_given_enter_gross_salary(context):\n    gross_salary_input = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='gross-salary-input']\"))\n    )\n    gross_salary_input.clear()\n    gross_salary_input.send_keys(\"5000\")\n    time.sleep(1)\n\n@given('the user enters \"-20\" into the tax percentage field with data-testid \"tax-input\"')\ndef step_given_enter_tax_percentage(context):\n    tax_input = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='tax-input']\"))\n    )\n    tax_input.clear()\n    tax_input.send_keys(\"-20\")\n    time.sleep(1)\n\n@when('the user clicks the \"Calculate Salary\" button with data-testid \"calculate-button\"')\ndef step_when_click_calculate_button(context):\n    calculate_button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='calculate-button']\"))\n    )\n    calculate_button.click()\n    time.sleep(1)\n\n@then('the tax deduction displayed in the results section with data-testid \"tax-deduction\" should be \"-$0.00\"')\ndef step_then_verify_tax_deduction(context):\n    tax_deduction_element = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='tax-deduction']\"))\n    )\n    displayed_tax_deduction = tax_deduction_element.text.strip()\n    expected_tax_deduction = \"-$0.00\"\n    assert displayed_tax_deduction == expected_tax_deduction, f\"Expected '{expected_tax_deduction}', but got '{displayed_tax_deduction}'\"\n\n# Teardown\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                }
            ]
        },
        "6": {
            "requirement": {
                "description": "The system must calculate and display a detailed salary breakdown in the results section based on user inputs. The calculation should include the following: (1) Net monthly salary, derived by subtracting the monthly tax deduction (calculated as a percentage of the gross monthly salary) from the gross monthly salary. (2) Hourly salary, calculated based on the net monthly salary, work hours per day, and workdays per week. (3) Daily salary, derived from the hourly salary and work hours per day. (4) Yearly net salary, calculated as the net monthly salary multiplied by 12. (5) Overtime earnings, calculated based on overtime hours per week, overtime rate per hour, and the number of weeks in a month (assumed as 4). (6) Total earnings, which include yearly net salary and overtime earnings. The system must handle the following scenarios: (a) Normal cases with valid inputs, (b) Edge cases such as zero tax percentage, and (c) Error cases such as negative gross salary, where the net monthly salary and related calculations should default to $0.00. The UI must include the following elements with specified attributes: (1) Input fields for job title (data-testid='job-input'), hours per day (data-testid='work-hour-input'), workdays per week (data-testid='work-week-input'), gross monthly salary (data-testid='gross-salary-input'), tax percentage (data-testid='tax-input'), overtime hours per week (data-testid='overtime-hours-input'), and overtime rate per hour (data-testid='overtime-rate-input'). (2) Buttons for calculating (data-testid='calculate-button') and clearing (data-testid='clear-button') the form. (3) A results section (data-testid='results-section') displaying the calculated values with specific data-testid attributes for each result (e.g., 'monthly-net-salary', 'hourly-salary', 'daily-salary', etc.). The system must reset all input fields and results to their default state when the clear button is clicked. All calculations must handle invalid or missing inputs gracefully by defaulting to zero or placeholder values as appropriate."
            },
            "test_cases": [
                {
                    "test_case": [
                        "Feature: Calculate Net Monthly Salary\n  The system should calculate the net monthly salary by subtracting the monthly tax deduction from the gross monthly salary and display it in the results section.\n\n\nScenario: [Normal] Calculate net monthly salary with valid inputs\n    Given the \"Salary Calculator\" page is loaded\n    And the user enters \"Software Engineer\" into the job field with data-testid \"job-input\"\n    And the user enters \"5000\" into the gross monthly salary field with data-testid \"gross-salary-input\"\n    And the user enters \"20\" into the tax percentage field with data-testid \"tax-input\"\n    When the user clicks the calculate button with data-testid \"calculate-button\"\n    Then the net monthly salary displayed in the results section with data-testid \"monthly-net-salary\" should be \"$4000.00\""
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the \"Salary Calculator\" page is loaded')\ndef step_given_page_loaded(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)\n\n@given('the user enters \"{job}\" into the job field with data-testid \"job-input\"')\ndef step_given_enter_job(context, job):\n    job_input = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='job-input']\"))\n    )\n    job_input.clear()\n    job_input.send_keys(job)\n    time.sleep(1)\n\n@given('the user enters \"{gross_salary}\" into the gross monthly salary field with data-testid \"gross-salary-input\"')\ndef step_given_enter_gross_salary(context, gross_salary):\n    gross_salary_input = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='gross-salary-input']\"))\n    )\n    gross_salary_input.clear()\n    gross_salary_input.send_keys(gross_salary)\n    time.sleep(1)\n\n@given('the user enters \"{tax_percentage}\" into the tax percentage field with data-testid \"tax-input\"')\ndef step_given_enter_tax_percentage(context, tax_percentage):\n    tax_input = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='tax-input']\"))\n    )\n    tax_input.clear()\n    tax_input.send_keys(tax_percentage)\n    time.sleep(1)\n\n@when('the user clicks the calculate button with data-testid \"calculate-button\"')\ndef step_when_click_calculate(context):\n    calculate_button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='calculate-button']\"))\n    )\n    calculate_button.click()\n    time.sleep(1)\n\n@then('the net monthly salary displayed in the results section with data-testid \"monthly-net-salary\" should be \"{expected_salary}\"')\ndef step_then_verify_net_monthly_salary(context, expected_salary):\n    monthly_net_salary = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='monthly-net-salary']\"))\n    )\n    actual_salary = monthly_net_salary.text.strip()\n    assert expected_salary in actual_salary, f\"Expected '{expected_salary}', but got '{actual_salary}'\"\n    time.sleep(1)\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: Calculate Net Monthly Salary\n  The system should calculate the net monthly salary by subtracting the monthly tax deduction from the gross monthly salary and display it in the results section.\n\n\n  Scenario: [Edge] Calculate net monthly salary with zero tax percentage\n    Given the \"Salary Calculator\" page is loaded\n    And the user enters \"Data Analyst\" into the job field with data-testid \"job-input\"\n    And the user enters \"8\" into the hours per day field with data-testid \"work-hour-input\"\n    And the user enters \"5\" into the workdays per week field with data-testid \"work-week-input\"\n    And the user enters \"4500\" into the gross monthly salary field with data-testid \"gross-salary-input\"\n    And the user enters \"0\" into the tax percentage field with data-testid \"tax-input\"\n    And the user enters \"10\" into the overtime hours per week field with data-testid \"overtime-hours-input\"\n    And the user enters \"20\" into the overtime rate per hour field with data-testid \"overtime-rate-input\"\n    When the user clicks the calculate button with data-testid \"calculate-button\"\n    Then the net monthly salary displayed in the results section with data-testid \"monthly-net-salary\" should be \"$4500.00\"\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the \"Salary Calculator\" page is loaded')\ndef step_impl(context):\n    context.driver = webdriver.Chrome()  # Initialize the WebDriver\n    context.driver.get(f\"file://index.html\")\n    context.driver.maximize_window()\n    WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='salary-form']\"))\n    )\n\n@given('the user enters \"Data Analyst\" into the job field with data-testid \"job-input\"')\ndef step_impl(context):\n    job_input = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='job-input']\"))\n    )\n    job_input.clear()\n    job_input.send_keys(\"Data Analyst\")\n    time.sleep(1)\n\n@given('the user enters \"8\" into the hours per day field with data-testid \"work-hour-input\"')\ndef step_impl(context):\n    work_hour_input = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='work-hour-input']\"))\n    )\n    work_hour_input.clear()\n    work_hour_input.send_keys(\"8\")\n    time.sleep(1)\n\n@given('the user enters \"5\" into the workdays per week field with data-testid \"work-week-input\"')\ndef step_impl(context):\n    work_week_input = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='work-week-input']\"))\n    )\n    work_week_input.clear()\n    work_week_input.send_keys(\"5\")\n    time.sleep(1)\n\n@given('the user enters \"4500\" into the gross monthly salary field with data-testid \"gross-salary-input\"')\ndef step_impl(context):\n    gross_salary_input = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='gross-salary-input']\"))\n    )\n    gross_salary_input.clear()\n    gross_salary_input.send_keys(\"4500\")\n    time.sleep(1)\n\n@given('the user enters \"0\" into the tax percentage field with data-testid \"tax-input\"')\ndef step_impl(context):\n    tax_input = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='tax-input']\"))\n    )\n    tax_input.clear()\n    tax_input.send_keys(\"0\")\n    time.sleep(1)\n\n@given('the user enters \"10\" into the overtime hours per week field with data-testid \"overtime-hours-input\"')\ndef step_impl(context):\n    overtime_hours_input = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='overtime-hours-input']\"))\n    )\n    overtime_hours_input.clear()\n    overtime_hours_input.send_keys(\"10\")\n    time.sleep(1)\n\n@given('the user enters \"20\" into the overtime rate per hour field with data-testid \"overtime-rate-input\"')\ndef step_impl(context):\n    overtime_rate_input = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='overtime-rate-input']\"))\n    )\n    overtime_rate_input.clear()\n    overtime_rate_input.send_keys(\"20\")\n    time.sleep(1)\n\n@when('the user clicks the calculate button with data-testid \"calculate-button\"')\ndef step_impl(context):\n    calculate_button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='calculate-button']\"))\n    )\n    calculate_button.click()\n    time.sleep(1)\n\n@then('the net monthly salary displayed in the results section with data-testid \"monthly-net-salary\" should be \"$4500.00\"')\ndef step_impl(context):\n    monthly_net_salary = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='monthly-net-salary']\"))\n    )\n    assert monthly_net_salary.text == \"$4500.00\", f\"Expected '$4500.00', but got '{monthly_net_salary.text}'\"\n\n# Teardown to close the browser after the test\ndef after_scenario(context, scenario):\n    if hasattr(context, 'driver'):\n        context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: Calculate Net Monthly Salary\n  The system should calculate the net monthly salary by subtracting the monthly tax deduction from the gross monthly salary and display it in the results section.\n\n\n  Scenario: [Error] Calculate net monthly salary with negative gross salary\n    Given the \"Salary Calculator\" page is loaded\n    And the user enters \"Project Manager\" into the job field with data-testid \"job-input\"\n    And the user enters \"8\" into the hours per day field with data-testid \"work-hour-input\"\n    And the user enters \"5\" into the workdays per week field with data-testid \"work-week-input\"\n    And the user enters \"-3000\" into the gross monthly salary field with data-testid \"gross-salary-input\"\n    And the user enters \"15\" into the tax percentage field with data-testid \"tax-input\"\n    And the user enters \"8\" into the overtime hours per week field with data-testid \"overtime-hours-input\"\n    And the user enters \"25\" into the overtime rate per hour field with data-testid \"overtime-rate-input\"\n    When the user clicks the calculate button with data-testid \"calculate-button\"\n    Then the net monthly salary displayed in the results section with data-testid \"monthly-net-salary\" should be \"$0.00\""
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the \"Salary Calculator\" page is loaded')\ndef step_given_page_is_loaded(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)\n\n@given('the user enters \"{job}\" into the job field with data-testid \"job-input\"')\ndef step_given_enter_job(context, job):\n    job_input = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='job-input']\"))\n    )\n    job_input.clear()\n    job_input.send_keys(job)\n    time.sleep(1)\n\n@given('the user enters \"{hours}\" into the hours per day field with data-testid \"work-hour-input\"')\ndef step_given_enter_hours_per_day(context, hours):\n    hours_input = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='work-hour-input']\"))\n    )\n    hours_input.clear()\n    hours_input.send_keys(hours)\n    time.sleep(1)\n\n@given('the user enters \"{days}\" into the workdays per week field with data-testid \"work-week-input\"')\ndef step_given_enter_workdays_per_week(context, days):\n    days_input = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='work-week-input']\"))\n    )\n    days_input.clear()\n    days_input.send_keys(days)\n    time.sleep(1)\n\n@given('the user enters \"{gross_salary}\" into the gross monthly salary field with data-testid \"gross-salary-input\"')\ndef step_given_enter_gross_monthly_salary(context, gross_salary):\n    gross_salary_input = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='gross-salary-input']\"))\n    )\n    gross_salary_input.clear()\n    gross_salary_input.send_keys(gross_salary)\n    time.sleep(1)\n\n@given('the user enters \"{tax}\" into the tax percentage field with data-testid \"tax-input\"')\ndef step_given_enter_tax_percentage(context, tax):\n    tax_input = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='tax-input']\"))\n    )\n    tax_input.clear()\n    tax_input.send_keys(tax)\n    time.sleep(1)\n\n@given('the user enters \"{overtime_hours}\" into the overtime hours per week field with data-testid \"overtime-hours-input\"')\ndef step_given_enter_overtime_hours(context, overtime_hours):\n    overtime_hours_input = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='overtime-hours-input']\"))\n    )\n    overtime_hours_input.clear()\n    overtime_hours_input.send_keys(overtime_hours)\n    time.sleep(1)\n\n@given('the user enters \"{overtime_rate}\" into the overtime rate per hour field with data-testid \"overtime-rate-input\"')\ndef step_given_enter_overtime_rate(context, overtime_rate):\n    overtime_rate_input = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='overtime-rate-input']\"))\n    )\n    overtime_rate_input.clear()\n    overtime_rate_input.send_keys(overtime_rate)\n    time.sleep(1)\n\n@when('the user clicks the calculate button with data-testid \"calculate-button\"')\ndef step_when_click_calculate_button(context):\n    calculate_button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='calculate-button']\"))\n    )\n    calculate_button.click()\n    time.sleep(1)\n\n@then('the net monthly salary displayed in the results section with data-testid \"monthly-net-salary\" should be \"$0.00\"')\ndef step_then_verify_net_monthly_salary(context):\n    net_monthly_salary = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='monthly-net-salary']\"))\n    )\n    assert net_monthly_salary.text.strip() == \"$0.00\", f\"Expected '$0.00', but got '{net_monthly_salary.text.strip()}'\"\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                }
            ]
        },
        "7": {
            "requirement": {
                "description": "The system must calculate and display the hourly salary in the results section based on the user's inputs for gross monthly salary, tax percentage, work hours per day, and workdays per week. The calculation should account for the following scenarios: normal cases with valid inputs, edge cases where work hours or workdays are zero, and cases where the tax percentage is missing or zero. The UI must include the following elements: a text input field for the job title (data-testid: 'job-input'), numeric input fields for work hours per day (data-testid: 'work-hour-input'), workdays per week (data-testid: 'work-week-input'), gross monthly salary (data-testid: 'gross-salary-input'), and tax percentage (data-testid: 'tax-input'). A button (data-testid: 'calculate-button') must trigger the calculation, and the results must be displayed in the results section with the hourly salary shown in the element with data-testid 'hourly-salary'. The system should handle invalid or missing inputs gracefully by defaulting to zero or a placeholder value ('______') where applicable, ensuring no errors occur during calculation or display."
            },
            "test_cases": [
                {
                    "test_case": [
                        "Feature: Calculate Hourly Salary\n  The system should calculate the hourly salary based on the net monthly salary, work hours per day, and workdays per week, and display it in the results section.\n\n\n  Scenario: [Normal] Calculate hourly salary with valid inputs\n    Given the \"Salary Calculator\" page is loaded\n    And the user enters \"Web Developer\" into the job field with data-testid \"job-input\"\n    And the user enters \"8\" into the hours per day field with data-testid \"work-hour-input\"\n    And the user enters \"5\" into the workdays per week field with data-testid \"work-week-input\"\n    And the user enters \"4000\" into the gross monthly salary field with data-testid \"gross-salary-input\"\n    And the user enters \"20\" into the tax percentage field with data-testid \"tax-input\"\n    When the user clicks the calculate button with data-testid \"calculate-button\"\n    Then the hourly salary displayed in the results section with data-testid \"hourly-salary\" should be \"$20.00\"\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the \"Salary Calculator\" page is loaded')\ndef step_given_page_loaded(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)\n\n@given('the user enters \"{job}\" into the job field with data-testid \"job-input\"')\ndef step_given_enter_job(context, job):\n    job_input = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='job-input']\"))\n    )\n    job_input.clear()\n    job_input.send_keys(job)\n    time.sleep(1)\n\n@given('the user enters \"{hours_per_day}\" into the hours per day field with data-testid \"work-hour-input\"')\ndef step_given_enter_hours_per_day(context, hours_per_day):\n    hours_input = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='work-hour-input']\"))\n    )\n    hours_input.clear()\n    hours_input.send_keys(hours_per_day)\n    time.sleep(1)\n\n@given('the user enters \"{workdays_per_week}\" into the workdays per week field with data-testid \"work-week-input\"')\ndef step_given_enter_workdays_per_week(context, workdays_per_week):\n    workdays_input = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='work-week-input']\"))\n    )\n    workdays_input.clear()\n    workdays_input.send_keys(workdays_per_week)\n    time.sleep(1)\n\n@given('the user enters \"{gross_salary}\" into the gross monthly salary field with data-testid \"gross-salary-input\"')\ndef step_given_enter_gross_salary(context, gross_salary):\n    gross_salary_input = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='gross-salary-input']\"))\n    )\n    gross_salary_input.clear()\n    gross_salary_input.send_keys(gross_salary)\n    time.sleep(1)\n\n@given('the user enters \"{tax_percentage}\" into the tax percentage field with data-testid \"tax-input\"')\ndef step_given_enter_tax_percentage(context, tax_percentage):\n    tax_input = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='tax-input']\"))\n    )\n    tax_input.clear()\n    tax_input.send_keys(tax_percentage)\n    time.sleep(1)\n\n@when('the user clicks the calculate button with data-testid \"calculate-button\"')\ndef step_when_click_calculate(context):\n    calculate_button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='calculate-button']\"))\n    )\n    calculate_button.click()\n    time.sleep(1)\n\n@then('the hourly salary displayed in the results section with data-testid \"hourly-salary\" should be \"{expected_hourly_salary}\"')\ndef step_then_verify_hourly_salary(context, expected_hourly_salary):\n    hourly_salary_element = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='hourly-salary']\"))\n    )\n    actual_hourly_salary = hourly_salary_element.text.strip()\n    assert expected_hourly_salary in actual_hourly_salary, f\"Expected '{expected_hourly_salary}', but got '{actual_hourly_salary}'\"\n    time.sleep(1)\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: Calculate Hourly Salary\n  The system should calculate the hourly salary based on the net monthly salary, work hours per day, and workdays per week, and display it in the results section.\n\n\n  Scenario: [Edge] Calculate hourly salary with zero work hours\n    Given the \"Salary Calculator\" page is loaded\n    And the user enters \"Web Developer\" into the job field with data-testid \"job-input\"\n    And the user enters \"0\" into the hours per day field with data-testid \"work-hour-input\"\n    And the user enters \"5\" into the workdays per week field with data-testid \"work-week-input\"\n    And the user enters \"4000\" into the gross monthly salary field with data-testid \"gross-salary-input\"\n    And the user enters \"20\" into the tax percentage field with data-testid \"tax-input\"\n    When the user clicks the calculate button with data-testid \"calculate-button\"\n    Then the hourly salary displayed in the results section with data-testid \"hourly-salary\" should be \"$0.00\"\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the \"Salary Calculator\" page is loaded')\ndef step_given_page_loaded(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)\n\n@given('the user enters \"{job}\" into the job field with data-testid \"job-input\"')\ndef step_given_enter_job(context, job):\n    job_input = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='job-input']\"))\n    )\n    job_input.clear()\n    job_input.send_keys(job)\n    time.sleep(1)\n\n@given('the user enters \"{hours}\" into the hours per day field with data-testid \"work-hour-input\"')\ndef step_given_enter_hours(context, hours):\n    hours_input = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='work-hour-input']\"))\n    )\n    hours_input.clear()\n    hours_input.send_keys(hours)\n    time.sleep(1)\n\n@given('the user enters \"{workdays}\" into the workdays per week field with data-testid \"work-week-input\"')\ndef step_given_enter_workdays(context, workdays):\n    workdays_input = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='work-week-input']\"))\n    )\n    workdays_input.clear()\n    workdays_input.send_keys(workdays)\n    time.sleep(1)\n\n@given('the user enters \"{gross_salary}\" into the gross monthly salary field with data-testid \"gross-salary-input\"')\ndef step_given_enter_gross_salary(context, gross_salary):\n    gross_salary_input = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='gross-salary-input']\"))\n    )\n    gross_salary_input.clear()\n    gross_salary_input.send_keys(gross_salary)\n    time.sleep(1)\n\n@given('the user enters \"{tax}\" into the tax percentage field with data-testid \"tax-input\"')\ndef step_given_enter_tax(context, tax):\n    tax_input = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='tax-input']\"))\n    )\n    tax_input.clear()\n    tax_input.send_keys(tax)\n    time.sleep(1)\n\n@when('the user clicks the calculate button with data-testid \"calculate-button\"')\ndef step_when_click_calculate(context):\n    calculate_button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='calculate-button']\"))\n    )\n    calculate_button.click()\n    time.sleep(1)\n\n@then('the hourly salary displayed in the results section with data-testid \"hourly-salary\" should be \"{expected_salary}\"')\ndef step_then_verify_hourly_salary(context, expected_salary):\n    hourly_salary = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='hourly-salary']\"))\n    )\n    actual_salary = hourly_salary.text.strip()\n    assert actual_salary == expected_salary, f\"Expected hourly salary '{expected_salary}', but got '{actual_salary}'\"\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: Calculate Hourly Salary\n  The system should calculate the hourly salary based on the net monthly salary, work hours per day, and workdays per week, and display it in the results section.\n\n\n  Scenario: [Edge] Calculate hourly salary with zero workdays\n    Given the \"Salary Calculator\" page is loaded\n    And the user enters \"Web Developer\" into the job field with data-testid \"job-input\"\n    And the user enters \"8\" into the hours per day field with data-testid \"work-hour-input\"\n    And the user enters \"0\" into the workdays per week field with data-testid \"work-week-input\"\n    And the user enters \"4000\" into the gross monthly salary field with data-testid \"gross-salary-input\"\n    And the user enters \"20\" into the tax percentage field with data-testid \"tax-input\"\n    When the user clicks the calculate button with data-testid \"calculate-button\"\n    Then the hourly salary displayed in the results section with data-testid \"hourly-salary\" should be \"$0.00\"\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the \"Salary Calculator\" page is loaded')\ndef step_given_page_is_loaded(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)\n\n@given('the user enters \"{job}\" into the job field with data-testid \"job-input\"')\ndef step_given_enter_job(context, job):\n    job_input = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='job-input']\"))\n    )\n    job_input.clear()\n    job_input.send_keys(job)\n    time.sleep(1)\n\n@given('the user enters \"{hours}\" into the hours per day field with data-testid \"work-hour-input\"')\ndef step_given_enter_hours_per_day(context, hours):\n    hours_input = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='work-hour-input']\"))\n    )\n    hours_input.clear()\n    hours_input.send_keys(hours)\n    time.sleep(1)\n\n@given('the user enters \"{workdays}\" into the workdays per week field with data-testid \"work-week-input\"')\ndef step_given_enter_workdays_per_week(context, workdays):\n    workdays_input = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='work-week-input']\"))\n    )\n    workdays_input.clear()\n    workdays_input.send_keys(workdays)\n    time.sleep(1)\n\n@given('the user enters \"{salary}\" into the gross monthly salary field with data-testid \"gross-salary-input\"')\ndef step_given_enter_gross_monthly_salary(context, salary):\n    salary_input = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='gross-salary-input']\"))\n    )\n    salary_input.clear()\n    salary_input.send_keys(salary)\n    time.sleep(1)\n\n@given('the user enters \"{tax}\" into the tax percentage field with data-testid \"tax-input\"')\ndef step_given_enter_tax_percentage(context, tax):\n    tax_input = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='tax-input']\"))\n    )\n    tax_input.clear()\n    tax_input.send_keys(tax)\n    time.sleep(1)\n\n@when('the user clicks the calculate button with data-testid \"calculate-button\"')\ndef step_when_click_calculate_button(context):\n    calculate_button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='calculate-button']\"))\n    )\n    calculate_button.click()\n    time.sleep(1)\n\n@then('the hourly salary displayed in the results section with data-testid \"hourly-salary\" should be \"$0.00\"')\ndef step_then_verify_hourly_salary(context):\n    hourly_salary = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='hourly-salary']\"))\n    )\n    assert hourly_salary.text.strip() == \"$0.00\", f\"Expected '$0.00', but got '{hourly_salary.text.strip()}'\"\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: Calculate Hourly Salary\n  The system should calculate the hourly salary based on the net monthly salary, work hours per day, and workdays per week, and display it in the results section.\n\n\n  Scenario: [Error] Calculate hourly salary with missing tax percentage\n    Given the \"Salary Calculator\" page is loaded\n    And the user enters \"Web Developer\" into the job field with data-testid \"job-input\"\n    And the user enters \"8\" into the hours per day field with data-testid \"work-hour-input\"\n    And the user enters \"5\" into the workdays per week field with data-testid \"work-week-input\"\n    And the user enters \"4000\" into the gross monthly salary field with data-testid \"gross-salary-input\"\n    And the user leaves the tax percentage field with data-testid \"tax-input\" empty\n    When the user clicks the calculate button with data-testid \"calculate-button\"\n    Then the hourly salary displayed in the results section with data-testid \"hourly-salary\" should be \"$25.00\""
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the \"Salary Calculator\" page is loaded')\ndef step_given_page_loaded(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)\n\n@given('the user enters \"{job}\" into the job field with data-testid \"job-input\"')\ndef step_given_enter_job(context, job):\n    job_input = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='job-input']\"))\n    )\n    job_input.clear()\n    job_input.send_keys(job)\n    time.sleep(1)\n\n@given('the user enters \"{hours_per_day}\" into the hours per day field with data-testid \"work-hour-input\"')\ndef step_given_enter_hours_per_day(context, hours_per_day):\n    hours_input = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='work-hour-input']\"))\n    )\n    hours_input.clear()\n    hours_input.send_keys(hours_per_day)\n    time.sleep(1)\n\n@given('the user enters \"{workdays_per_week}\" into the workdays per week field with data-testid \"work-week-input\"')\ndef step_given_enter_workdays_per_week(context, workdays_per_week):\n    workdays_input = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='work-week-input']\"))\n    )\n    workdays_input.clear()\n    workdays_input.send_keys(workdays_per_week)\n    time.sleep(1)\n\n@given('the user enters \"{gross_salary}\" into the gross monthly salary field with data-testid \"gross-salary-input\"')\ndef step_given_enter_gross_salary(context, gross_salary):\n    gross_salary_input = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='gross-salary-input']\"))\n    )\n    gross_salary_input.clear()\n    gross_salary_input.send_keys(gross_salary)\n    time.sleep(1)\n\n@given('the user leaves the tax percentage field with data-testid \"tax-input\" empty')\ndef step_given_leave_tax_empty(context):\n    tax_input = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='tax-input']\"))\n    )\n    tax_input.clear()\n    time.sleep(1)\n\n@when('the user clicks the calculate button with data-testid \"calculate-button\"')\ndef step_when_click_calculate(context):\n    calculate_button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='calculate-button']\"))\n    )\n    calculate_button.click()\n    time.sleep(1)\n\n@then('the hourly salary displayed in the results section with data-testid \"hourly-salary\" should be \"$25.00\"')\ndef step_then_verify_hourly_salary(context):\n    hourly_salary = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='hourly-salary']\"))\n    )\n    expected_salary = \"$25.00\"\n    assert expected_salary in hourly_salary.text, f\"Expected '{expected_salary}' but got '{hourly_salary.text}'\"\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                }
            ]
        },
        "8": {
            "requirement": {
                "description": "The Salary Calculator web application must allow users to input their job title, work hours per day, workdays per week, gross monthly salary, tax percentage, overtime hours per week, and overtime rate per hour using designated input fields with specific data-testid attributes. Upon clicking the 'Calculate Salary' button (data-testid='calculate-button'), the system should compute the daily salary by multiplying the hourly salary (derived from the net monthly salary after tax deductions) by the work hours per day. The calculated daily salary must be displayed in the results section with data-testid='daily-salary'. The application should handle edge cases such as zero work hours, invalid inputs, and ensure that the daily salary is displayed as '$0.00' when applicable. Additionally, the 'Clear' button (data-testid='clear-button') should reset all input fields and result displays to their default states."
            },
            "test_cases": [
                {
                    "test_case": [
                        "Feature: Calculate and Display Daily Salary\n  The system should calculate the daily salary by multiplying the hourly salary by the work hours per day and display it in the results section.\n\n\n  Scenario: [Normal] Calculate daily salary with valid inputs\n    Given the Salary Calculator page is loaded\n    And the user enters \"Software Engineer\" into the job field with data-testid \"job-input\"\n    And the user enters \"8\" into the hours per day field with data-testid \"work-hour-input\"\n    And the user enters \"5\" into the workdays per week field with data-testid \"work-week-input\"\n    And the user enters \"5000\" into the gross monthly salary field with data-testid \"gross-salary-input\"\n    And the user enters \"20\" into the tax percentage field with data-testid \"tax-input\"\n    And the user enters \"5\" into the overtime hours per week field with data-testid \"overtime-hours-input\"\n    And the user enters \"15\" into the overtime rate per hour field with data-testid \"overtime-rate-input\"\n    When the user clicks the calculate button with data-testid \"calculate-button\"\n    Then the daily salary should be displayed as \"$200.00\" in the results section with data-testid \"daily-salary\"\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the Salary Calculator page is loaded')\ndef step_given_salary_calculator_page_loaded(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)\n\n@given('the user enters \"{job}\" into the job field with data-testid \"job-input\"')\ndef step_given_enter_job(context, job):\n    job_input = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='job-input']\"))\n    )\n    job_input.clear()\n    job_input.send_keys(job)\n    time.sleep(1)\n\n@given('the user enters \"{hours_per_day}\" into the hours per day field with data-testid \"work-hour-input\"')\ndef step_given_enter_hours_per_day(context, hours_per_day):\n    hours_input = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='work-hour-input']\"))\n    )\n    hours_input.clear()\n    hours_input.send_keys(hours_per_day)\n    time.sleep(1)\n\n@given('the user enters \"{workdays_per_week}\" into the workdays per week field with data-testid \"work-week-input\"')\ndef step_given_enter_workdays_per_week(context, workdays_per_week):\n    workdays_input = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='work-week-input']\"))\n    )\n    workdays_input.clear()\n    workdays_input.send_keys(workdays_per_week)\n    time.sleep(1)\n\n@given('the user enters \"{gross_salary}\" into the gross monthly salary field with data-testid \"gross-salary-input\"')\ndef step_given_enter_gross_salary(context, gross_salary):\n    gross_salary_input = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='gross-salary-input']\"))\n    )\n    gross_salary_input.clear()\n    gross_salary_input.send_keys(gross_salary)\n    time.sleep(1)\n\n@given('the user enters \"{tax_percentage}\" into the tax percentage field with data-testid \"tax-input\"')\ndef step_given_enter_tax_percentage(context, tax_percentage):\n    tax_input = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='tax-input']\"))\n    )\n    tax_input.clear()\n    tax_input.send_keys(tax_percentage)\n    time.sleep(1)\n\n@given('the user enters \"{overtime_hours}\" into the overtime hours per week field with data-testid \"overtime-hours-input\"')\ndef step_given_enter_overtime_hours(context, overtime_hours):\n    overtime_hours_input = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='overtime-hours-input']\"))\n    )\n    overtime_hours_input.clear()\n    overtime_hours_input.send_keys(overtime_hours)\n    time.sleep(1)\n\n@given('the user enters \"{overtime_rate}\" into the overtime rate per hour field with data-testid \"overtime-rate-input\"')\ndef step_given_enter_overtime_rate(context, overtime_rate):\n    overtime_rate_input = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='overtime-rate-input']\"))\n    )\n    overtime_rate_input.clear()\n    overtime_rate_input.send_keys(overtime_rate)\n    time.sleep(1)\n\n@when('the user clicks the calculate button with data-testid \"calculate-button\"')\ndef step_when_click_calculate_button(context):\n    calculate_button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='calculate-button']\"))\n    )\n    calculate_button.click()\n    time.sleep(1)\n\n@then('the daily salary should be displayed as \"{expected_daily_salary}\" in the results section with data-testid \"daily-salary\"')\ndef step_then_verify_daily_salary(context, expected_daily_salary):\n    daily_salary_element = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='daily-salary']\"))\n    )\n    actual_daily_salary = daily_salary_element.text.strip()\n    assert expected_daily_salary in actual_daily_salary, f\"Expected '{expected_daily_salary}', but got '{actual_daily_salary}'\"\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: Calculate and Display Daily Salary\n  The system should calculate the daily salary by multiplying the hourly salary by the work hours per day and display it in the results section.\n\n\n  Scenario: [Edge] Calculate daily salary with zero work hours\n    Given the Salary Calculator page is loaded\n    And the user enters \"Software Engineer\" into the job field with data-testid \"job-input\"\n    And the user enters \"0\" into the hours per day field with data-testid \"work-hour-input\"\n    And the user enters \"5\" into the workdays per week field with data-testid \"work-week-input\"\n    And the user enters \"5000\" into the gross monthly salary field with data-testid \"gross-salary-input\"\n    And the user enters \"20\" into the tax percentage field with data-testid \"tax-input\"\n    And the user enters \"5\" into the overtime hours per week field with data-testid \"overtime-hours-input\"\n    And the user enters \"15\" into the overtime rate per hour field with data-testid \"overtime-rate-input\"\n    When the user clicks the calculate button with data-testid \"calculate-button\"\n    Then the daily salary should be displayed as \"$0.00\" in the results section with data-testid \"daily-salary\"\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the Salary Calculator page is loaded')\ndef step_impl(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)\n\n@given('the user enters \"{job}\" into the job field with data-testid \"job-input\"')\ndef step_impl(context, job):\n    job_input = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='job-input']\"))\n    )\n    job_input.clear()\n    job_input.send_keys(job)\n    time.sleep(1)\n\n@given('the user enters \"{hours}\" into the hours per day field with data-testid \"work-hour-input\"')\ndef step_impl(context, hours):\n    work_hour_input = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='work-hour-input']\"))\n    )\n    work_hour_input.clear()\n    work_hour_input.send_keys(hours)\n    time.sleep(1)\n\n@given('the user enters \"{days}\" into the workdays per week field with data-testid \"work-week-input\"')\ndef step_impl(context, days):\n    work_week_input = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='work-week-input']\"))\n    )\n    work_week_input.clear()\n    work_week_input.send_keys(days)\n    time.sleep(1)\n\n@given('the user enters \"{salary}\" into the gross monthly salary field with data-testid \"gross-salary-input\"')\ndef step_impl(context, salary):\n    gross_salary_input = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='gross-salary-input']\"))\n    )\n    gross_salary_input.clear()\n    gross_salary_input.send_keys(salary)\n    time.sleep(1)\n\n@given('the user enters \"{tax}\" into the tax percentage field with data-testid \"tax-input\"')\ndef step_impl(context, tax):\n    tax_input = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='tax-input']\"))\n    )\n    tax_input.clear()\n    tax_input.send_keys(tax)\n    time.sleep(1)\n\n@given('the user enters \"{overtime_hours}\" into the overtime hours per week field with data-testid \"overtime-hours-input\"')\ndef step_impl(context, overtime_hours):\n    overtime_hours_input = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='overtime-hours-input']\"))\n    )\n    overtime_hours_input.clear()\n    overtime_hours_input.send_keys(overtime_hours)\n    time.sleep(1)\n\n@given('the user enters \"{overtime_rate}\" into the overtime rate per hour field with data-testid \"overtime-rate-input\"')\ndef step_impl(context, overtime_rate):\n    overtime_rate_input = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='overtime-rate-input']\"))\n    )\n    overtime_rate_input.clear()\n    overtime_rate_input.send_keys(overtime_rate)\n    time.sleep(1)\n\n@when('the user clicks the calculate button with data-testid \"calculate-button\"')\ndef step_impl(context):\n    calculate_button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='calculate-button']\"))\n    )\n    calculate_button.click()\n    time.sleep(1)\n\n@then('the daily salary should be displayed as \"${expected_salary}\" in the results section with data-testid \"daily-salary\"')\ndef step_impl(context, expected_salary):\n    daily_salary = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='daily-salary']\"))\n    )\n    actual_salary = daily_salary.text.strip()\n    assert actual_salary == expected_salary, f\"Expected daily salary to be '{expected_salary}', but got '{actual_salary}'\"\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: Calculate and Display Daily Salary\n  The system should calculate the daily salary by multiplying the hourly salary by the work hours per day and display it in the results section.\n\n\n  Scenario: [Error] Calculate daily salary with invalid input for work hours\n    Given the Salary Calculator page is loaded\n    And the user enters \"Software Engineer\" into the job field with data-testid \"job-input\"\n    And the user enters \"abc\" into the hours per day field with data-testid \"work-hour-input\"\n    And the user enters \"5\" into the workdays per week field with data-testid \"work-week-input\"\n    And the user enters \"5000\" into the gross monthly salary field with data-testid \"gross-salary-input\"\n    And the user enters \"20\" into the tax percentage field with data-testid \"tax-input\"\n    And the user enters \"5\" into the overtime hours per week field with data-testid \"overtime-hours-input\"\n    And the user enters \"15\" into the overtime rate per hour field with data-testid \"overtime-rate-input\"\n    When the user clicks the calculate button with data-testid \"calculate-button\"\n    Then the daily salary should be displayed as \"$0.00\" in the results section with data-testid \"daily-salary\""
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the Salary Calculator page is loaded')\ndef step_impl(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)\n\n@given('the user enters \"{job}\" into the job field with data-testid \"job-input\"')\ndef step_impl(context, job):\n    job_input = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='job-input']\"))\n    )\n    job_input.clear()\n    job_input.send_keys(job)\n    time.sleep(1)\n\n@given('the user enters \"{hours}\" into the hours per day field with data-testid \"work-hour-input\"')\ndef step_impl(context, hours):\n    work_hour_input = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='work-hour-input']\"))\n    )\n    work_hour_input.clear()\n    work_hour_input.send_keys(hours)\n    time.sleep(1)\n\n@given('the user enters \"{days}\" into the workdays per week field with data-testid \"work-week-input\"')\ndef step_impl(context, days):\n    work_week_input = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='work-week-input']\"))\n    )\n    work_week_input.clear()\n    work_week_input.send_keys(days)\n    time.sleep(1)\n\n@given('the user enters \"{salary}\" into the gross monthly salary field with data-testid \"gross-salary-input\"')\ndef step_impl(context, salary):\n    gross_salary_input = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='gross-salary-input']\"))\n    )\n    gross_salary_input.clear()\n    gross_salary_input.send_keys(salary)\n    time.sleep(1)\n\n@given('the user enters \"{tax}\" into the tax percentage field with data-testid \"tax-input\"')\ndef step_impl(context, tax):\n    tax_input = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='tax-input']\"))\n    )\n    tax_input.clear()\n    tax_input.send_keys(tax)\n    time.sleep(1)\n\n@given('the user enters \"{overtime_hours}\" into the overtime hours per week field with data-testid \"overtime-hours-input\"')\ndef step_impl(context, overtime_hours):\n    overtime_hours_input = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='overtime-hours-input']\"))\n    )\n    overtime_hours_input.clear()\n    overtime_hours_input.send_keys(overtime_hours)\n    time.sleep(1)\n\n@given('the user enters \"{overtime_rate}\" into the overtime rate per hour field with data-testid \"overtime-rate-input\"')\ndef step_impl(context, overtime_rate):\n    overtime_rate_input = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='overtime-rate-input']\"))\n    )\n    overtime_rate_input.clear()\n    overtime_rate_input.send_keys(overtime_rate)\n    time.sleep(1)\n\n@when('the user clicks the calculate button with data-testid \"calculate-button\"')\ndef step_impl(context):\n    calculate_button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='calculate-button']\"))\n    )\n    calculate_button.click()\n    time.sleep(1)\n\n@then('the daily salary should be displayed as \"$0.00\" in the results section with data-testid \"daily-salary\"')\ndef step_impl(context):\n    daily_salary = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='daily-salary']\"))\n    )\n    assert daily_salary.text == \"$0.00\", f\"Expected daily salary to be '$0.00', but got '{daily_salary.text}'\"\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                }
            ]
        },
        "9": {
            "requirement": {
                "description": "The Salary Calculator web application must allow users to input job details and salary parameters through a form with specific data-testid attributes for each field. Users should be able to enter their job title, hours worked per day, workdays per week, gross monthly salary, tax percentage, overtime hours per week, and overtime rate per hour using the respective input fields with data-testid attributes: 'job-input', 'work-hour-input', 'work-week-input', 'gross-salary-input', 'tax-input', 'overtime-hours-input', and 'overtime-rate-input'. Upon clicking the 'Calculate Salary' button with data-testid 'calculate-button', the application should compute the net monthly salary by deducting the calculated tax from the gross salary, and then calculate the yearly net salary by multiplying the net monthly salary by 12. Additionally, it should compute hourly and daily salaries based on the input work hours and workdays, as well as total overtime earnings. All calculated values, including hourly salary, daily salary, monthly gross salary, tax deduction, monthly net salary, yearly net salary, overtime earnings, and total earnings (including overtime), must be displayed in the results section with corresponding data-testid attributes: 'hourly-salary', 'daily-salary', 'monthly-gross-salary', 'tax-deduction', 'monthly-net-salary', 'yearly-net-salary', 'overtime-earnings', and 'total-earnings'. The job title should be updated in the results section with data-testid 'job-title'. The 'Clear' button with data-testid 'clear-button' should reset all input fields and result displays to their default values. The application must handle edge cases such as zero gross salary, ensuring accurate calculations and display of results."
            },
            "test_cases": [
                {
                    "test_case": [
                        "Feature: Calculate Yearly Net Salary\n  The system should calculate the yearly net salary by multiplying the net monthly salary by 12 and display it in the results section.\n\n\n  Scenario: [Normal] Calculate yearly net salary with valid inputs\n    Given the Salary Calculator page is loaded\n    And the user enters \"Software Engineer\" into the job field with data-testid \"job-input\"\n    And the user enters \"8\" into the hours per day field with data-testid \"work-hour-input\"\n    And the user enters \"5\" into the workdays per week field with data-testid \"work-week-input\"\n    And the user enters \"5000\" into the gross monthly salary field with data-testid \"gross-salary-input\"\n    And the user enters \"20\" into the tax percentage field with data-testid \"tax-input\"\n    And the user enters \"5\" into the overtime hours per week field with data-testid \"overtime-hours-input\"\n    And the user enters \"15\" into the overtime rate per hour field with data-testid \"overtime-rate-input\"\n    When the user clicks the calculate button with data-testid \"calculate-button\"\n    Then the yearly net salary should be displayed as \"$48000.00\" in the results section with data-testid \"yearly-net-salary\"\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the Salary Calculator page is loaded')\ndef step_given_salary_calculator_page_loaded(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)\n\n@given('the user enters \"{job}\" into the job field with data-testid \"job-input\"')\ndef step_given_user_enters_job(context, job):\n    job_input = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='job-input']\"))\n    )\n    job_input.clear()\n    job_input.send_keys(job)\n    time.sleep(1)\n\n@given('the user enters \"{hours}\" into the hours per day field with data-testid \"work-hour-input\"')\ndef step_given_user_enters_hours_per_day(context, hours):\n    hours_input = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='work-hour-input']\"))\n    )\n    hours_input.clear()\n    hours_input.send_keys(hours)\n    time.sleep(1)\n\n@given('the user enters \"{workdays}\" into the workdays per week field with data-testid \"work-week-input\"')\ndef step_given_user_enters_workdays_per_week(context, workdays):\n    workdays_input = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='work-week-input']\"))\n    )\n    workdays_input.clear()\n    workdays_input.send_keys(workdays)\n    time.sleep(1)\n\n@given('the user enters \"{gross_salary}\" into the gross monthly salary field with data-testid \"gross-salary-input\"')\ndef step_given_user_enters_gross_monthly_salary(context, gross_salary):\n    gross_salary_input = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='gross-salary-input']\"))\n    )\n    gross_salary_input.clear()\n    gross_salary_input.send_keys(gross_salary)\n    time.sleep(1)\n\n@given('the user enters \"{tax}\" into the tax percentage field with data-testid \"tax-input\"')\ndef step_given_user_enters_tax_percentage(context, tax):\n    tax_input = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='tax-input']\"))\n    )\n    tax_input.clear()\n    tax_input.send_keys(tax)\n    time.sleep(1)\n\n@given('the user enters \"{overtime_hours}\" into the overtime hours per week field with data-testid \"overtime-hours-input\"')\ndef step_given_user_enters_overtime_hours_per_week(context, overtime_hours):\n    overtime_hours_input = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='overtime-hours-input']\"))\n    )\n    overtime_hours_input.clear()\n    overtime_hours_input.send_keys(overtime_hours)\n    time.sleep(1)\n\n@given('the user enters \"{overtime_rate}\" into the overtime rate per hour field with data-testid \"overtime-rate-input\"')\ndef step_given_user_enters_overtime_rate_per_hour(context, overtime_rate):\n    overtime_rate_input = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='overtime-rate-input']\"))\n    )\n    overtime_rate_input.clear()\n    overtime_rate_input.send_keys(overtime_rate)\n    time.sleep(1)\n\n@when('the user clicks the calculate button with data-testid \"calculate-button\"')\ndef step_when_user_clicks_calculate_button(context):\n    calculate_button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='calculate-button']\"))\n    )\n    calculate_button.click()\n    time.sleep(1)\n\n@then('the yearly net salary should be displayed as \"{expected_salary}\" in the results section with data-testid \"yearly-net-salary\"')\ndef step_then_yearly_net_salary_displayed(context, expected_salary):\n    yearly_net_salary = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='yearly-net-salary']\"))\n    )\n    actual_salary = yearly_net_salary.text.strip()\n    assert actual_salary == expected_salary, f\"Expected yearly net salary to be '{expected_salary}', but got '{actual_salary}'\"\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: Calculate Yearly Net Salary\n  The system should calculate the yearly net salary by multiplying the net monthly salary by 12 and display it in the results section.\n\n\n  Scenario: [Edge] Calculate yearly net salary with zero gross salary\n    Given the Salary Calculator page is loaded\n    And the user enters \"Data Analyst\" into the job field with data-testid \"job-input\"\n    And the user enters \"8\" into the hours per day field with data-testid \"work-hour-input\"\n    And the user enters \"5\" into the workdays per week field with data-testid \"work-week-input\"\n    And the user enters \"0\" into the gross monthly salary field with data-testid \"gross-salary-input\"\n    And the user enters \"20\" into the tax percentage field with data-testid \"tax-input\"\n    And the user enters \"5\" into the overtime hours per week field with data-testid \"overtime-hours-input\"\n    And the user enters \"15\" into the overtime rate per hour field with data-testid \"overtime-rate-input\"\n    When the user clicks the calculate button with data-testid \"calculate-button\"\n    Then the yearly net salary should be displayed as \"$0.00\" in the results section with data-testid \"yearly-net-salary\"\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\ndef is_visible(element):\n    return element.is_displayed()\n\n@given('the Salary Calculator page is loaded')\ndef step_impl(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)\n\n@given('the user enters \"{job}\" into the job field with data-testid \"job-input\"')\ndef step_impl(context, job):\n    job_input = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='job-input']\"))\n    )\n    job_input.clear()\n    job_input.send_keys(job)\n    time.sleep(1)\n\n@given('the user enters \"{hours}\" into the hours per day field with data-testid \"work-hour-input\"')\ndef step_impl(context, hours):\n    hours_input = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='work-hour-input']\"))\n    )\n    hours_input.clear()\n    hours_input.send_keys(hours)\n    time.sleep(1)\n\n@given('the user enters \"{days}\" into the workdays per week field with data-testid \"work-week-input\"')\ndef step_impl(context, days):\n    days_input = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='work-week-input']\"))\n    )\n    days_input.clear()\n    days_input.send_keys(days)\n    time.sleep(1)\n\n@given('the user enters \"{salary}\" into the gross monthly salary field with data-testid \"gross-salary-input\"')\ndef step_impl(context, salary):\n    salary_input = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='gross-salary-input']\"))\n    )\n    salary_input.clear()\n    salary_input.send_keys(salary)\n    time.sleep(1)\n\n@given('the user enters \"{tax}\" into the tax percentage field with data-testid \"tax-input\"')\ndef step_impl(context, tax):\n    tax_input = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='tax-input']\"))\n    )\n    tax_input.clear()\n    tax_input.send_keys(tax)\n    time.sleep(1)\n\n@given('the user enters \"{overtime_hours}\" into the overtime hours per week field with data-testid \"overtime-hours-input\"')\ndef step_impl(context, overtime_hours):\n    overtime_hours_input = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='overtime-hours-input']\"))\n    )\n    overtime_hours_input.clear()\n    overtime_hours_input.send_keys(overtime_hours)\n    time.sleep(1)\n\n@given('the user enters \"{overtime_rate}\" into the overtime rate per hour field with data-testid \"overtime-rate-input\"')\ndef step_impl(context, overtime_rate):\n    overtime_rate_input = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='overtime-rate-input']\"))\n    )\n    overtime_rate_input.clear()\n    overtime_rate_input.send_keys(overtime_rate)\n    time.sleep(1)\n\n@when('the user clicks the calculate button with data-testid \"calculate-button\"')\ndef step_impl(context):\n    calculate_button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='calculate-button']\"))\n    )\n    calculate_button.click()\n    time.sleep(1)\n\n@then('the yearly net salary should be displayed as \"{expected_salary}\" in the results section with data-testid \"yearly-net-salary\"')\ndef step_impl(context, expected_salary):\n    yearly_net_salary = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='yearly-net-salary']\"))\n    )\n    actual_salary = yearly_net_salary.text.strip()\n    assert actual_salary == expected_salary, f\"Expected yearly net salary to be '{expected_salary}', but got '{actual_salary}'\"\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                }
            ]
        },
        "10": {
            "requirement": {
                "description": "The Salary Calculator web application must accurately compute and display total overtime earnings in the results section. The calculation involves multiplying the overtime hours per week (input field with data-testid 'overtime-hours-input') by the overtime rate per hour (input field with data-testid 'overtime-rate-input'), and then by 4 (representing weeks per month). The calculation should handle normal, edge, and error scenarios: 1) Normal: Valid positive inputs for both overtime hours and rate should yield correct earnings. 2) Edge: Zero values for either overtime hours or rate should result in $0.00 earnings. 3) Error: Negative values for overtime hours or rate should also result in $0.00 earnings. Upon clicking the 'Calculate Salary' button (data-testid 'calculate-button'), the computed total overtime earnings should be displayed in the designated field (data-testid 'overtime-earnings') with a dollar sign and two decimal places, ensuring clarity and precision in the output."
            },
            "test_cases": [
                {
                    "test_case": [
                        "Feature: Calculate Total Overtime Earnings\n  The system should calculate the total overtime earnings by multiplying the overtime hours per week by the overtime rate per hour and by 4 (weeks per month), and display it in the results section.\n\n\n  Scenario: [Normal] Calculate total overtime earnings with valid inputs\n    Given the Salary Calculator page is loaded\n    And the user enters \"5\" into the overtime hours field with data-testid \"overtime-hours-input\"\n    And the user enters \"15\" into the overtime rate field with data-testid \"overtime-rate-input\"\n    When the user clicks the calculate button with data-testid \"calculate-button\"\n    Then the total overtime earnings displayed with data-testid \"overtime-earnings\" should be \"$300.00\"\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the Salary Calculator page is loaded')\ndef step_impl(context):\n    # Initialize the WebDriver and load the test page\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    context.driver.maximize_window()\n    time.sleep(1)  # Allow the page to fully load\n\n@given('the user enters \"{overtime_hours}\" into the overtime hours field with data-testid \"overtime-hours-input\"')\ndef step_impl(context, overtime_hours):\n    # Locate the overtime hours input field and enter the value\n    overtime_hours_input = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='overtime-hours-input']\"))\n    )\n    overtime_hours_input.clear()\n    overtime_hours_input.send_keys(overtime_hours)\n    time.sleep(1)\n\n@given('the user enters \"{overtime_rate}\" into the overtime rate field with data-testid \"overtime-rate-input\"')\ndef step_impl(context, overtime_rate):\n    # Locate the overtime rate input field and enter the value\n    overtime_rate_input = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='overtime-rate-input']\"))\n    )\n    overtime_rate_input.clear()\n    overtime_rate_input.send_keys(overtime_rate)\n    time.sleep(1)\n\n@when('the user clicks the calculate button with data-testid \"calculate-button\"')\ndef step_impl(context):\n    # Locate the calculate button and click it\n    calculate_button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='calculate-button']\"))\n    )\n    calculate_button.click()\n    time.sleep(1)\n\n@then('the total overtime earnings displayed with data-testid \"overtime-earnings\" should be \"{expected_earnings}\"')\ndef step_impl(context, expected_earnings):\n    # Locate the total overtime earnings element and verify its value\n    overtime_earnings_element = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='overtime-earnings']\"))\n    )\n    actual_earnings = overtime_earnings_element.text.strip()\n    assert actual_earnings == expected_earnings, f\"Expected '{expected_earnings}', but got '{actual_earnings}'\"\n\n    # Close the browser after the test\n    context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: Calculate Total Overtime Earnings\n  The system should calculate the total overtime earnings by multiplying the overtime hours per week by the overtime rate per hour and by 4 (weeks per month), and display it in the results section.\n\n\n  Scenario: [Edge] Calculate total overtime earnings with zero overtime hours\n    Given the Salary Calculator page is loaded\n    And the user enters \"0\" into the overtime hours field with data-testid \"overtime-hours-input\"\n    And the user enters \"15\" into the overtime rate field with data-testid \"overtime-rate-input\"\n    When the user clicks the calculate button with data-testid \"calculate-button\"\n    Then the total overtime earnings displayed with data-testid \"overtime-earnings\" should be \"$0.00\"\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\ndef is_visible(element):\n    return element.is_displayed()\n\n@given('the Salary Calculator page is loaded')\ndef step_given_salary_calculator_page_loaded(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)\n\n@given('the user enters \"{overtime_hours}\" into the overtime hours field with data-testid \"overtime-hours-input\"')\ndef step_given_user_enters_overtime_hours(context, overtime_hours):\n    overtime_hours_input = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='overtime-hours-input']\"))\n    )\n    overtime_hours_input.clear()\n    overtime_hours_input.send_keys(overtime_hours)\n    time.sleep(1)\n\n@given('the user enters \"{overtime_rate}\" into the overtime rate field with data-testid \"overtime-rate-input\"')\ndef step_given_user_enters_overtime_rate(context, overtime_rate):\n    overtime_rate_input = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='overtime-rate-input']\"))\n    )\n    overtime_rate_input.clear()\n    overtime_rate_input.send_keys(overtime_rate)\n    time.sleep(1)\n\n@when('the user clicks the calculate button with data-testid \"calculate-button\"')\ndef step_when_user_clicks_calculate_button(context):\n    calculate_button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='calculate-button']\"))\n    )\n    calculate_button.click()\n    time.sleep(1)\n\n@then('the total overtime earnings displayed with data-testid \"overtime-earnings\" should be \"{expected_earnings}\"')\ndef step_then_total_overtime_earnings_displayed(context, expected_earnings):\n    overtime_earnings_element = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='overtime-earnings']\"))\n    )\n    actual_earnings = overtime_earnings_element.text.strip()\n    assert actual_earnings == expected_earnings, f\"Expected '{expected_earnings}', but got '{actual_earnings}'\"\n\n    # Close the browser after the test\n    context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: Calculate Total Overtime Earnings\n  The system should calculate the total overtime earnings by multiplying the overtime hours per week by the overtime rate per hour and by 4 (weeks per month), and display it in the results section.\n\n\n  Scenario: [Edge] Calculate total overtime earnings with zero overtime rate\n    Given the Salary Calculator page is loaded\n    And the user enters \"5\" into the overtime hours field with data-testid \"overtime-hours-input\"\n    And the user enters \"0\" into the overtime rate field with data-testid \"overtime-rate-input\"\n    When the user clicks the calculate button with data-testid \"calculate-button\"\n    Then the total overtime earnings displayed with data-testid \"overtime-earnings\" should be \"$0.00\"\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given(\"the Salary Calculator page is loaded\")\ndef step_impl(context):\n    # Initialize the WebDriver and load the test page\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    context.driver.maximize_window()\n    time.sleep(1)  # Allow the page to fully load\n\n@given('the user enters \"{value}\" into the overtime hours field with data-testid \"overtime-hours-input\"')\ndef step_impl(context, value):\n    # Locate the overtime hours input field and enter the value\n    overtime_hours_input = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='overtime-hours-input']\"))\n    )\n    overtime_hours_input.clear()\n    overtime_hours_input.send_keys(value)\n    time.sleep(1)\n\n@given('the user enters \"{value}\" into the overtime rate field with data-testid \"overtime-rate-input\"')\ndef step_impl(context, value):\n    # Locate the overtime rate input field and enter the value\n    overtime_rate_input = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='overtime-rate-input']\"))\n    )\n    overtime_rate_input.clear()\n    overtime_rate_input.send_keys(value)\n    time.sleep(1)\n\n@when('the user clicks the calculate button with data-testid \"calculate-button\"')\ndef step_impl(context):\n    # Locate the calculate button and click it\n    calculate_button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='calculate-button']\"))\n    )\n    calculate_button.click()\n    time.sleep(1)\n\n@then('the total overtime earnings displayed with data-testid \"overtime-earnings\" should be \"{expected_value}\"')\ndef step_impl(context, expected_value):\n    # Locate the total overtime earnings element and verify its value\n    overtime_earnings = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='overtime-earnings']\"))\n    )\n    actual_value = overtime_earnings.text.strip()\n    assert actual_value == expected_value, f\"Expected '{expected_value}', but got '{actual_value}'\"\n\n# Teardown to close the browser after the test\ndef after_scenario(context, scenario):\n    if hasattr(context, 'driver'):\n        context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: Calculate Total Overtime Earnings\n  The system should calculate the total overtime earnings by multiplying the overtime hours per week by the overtime rate per hour and by 4 (weeks per month), and display it in the results section.\n\n\n  Scenario: [Error] Calculate total overtime earnings with negative overtime hours\n    Given the Salary Calculator page is loaded\n    And the user enters \"-5\" into the overtime hours field with data-testid \"overtime-hours-input\"\n    And the user enters \"15\" into the overtime rate field with data-testid \"overtime-rate-input\"\n    When the user clicks the calculate button with data-testid \"calculate-button\"\n    Then the total overtime earnings displayed with data-testid \"overtime-earnings\" should be \"$0.00\"\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the Salary Calculator page is loaded')\ndef step_given_salary_calculator_page_loaded(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)  # Allow time for the page to load\n\n@given('the user enters \"-5\" into the overtime hours field with data-testid \"overtime-hours-input\"')\ndef step_given_enter_overtime_hours(context):\n    overtime_hours_input = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='overtime-hours-input']\"))\n    )\n    overtime_hours_input.clear()\n    overtime_hours_input.send_keys(\"-5\")\n    time.sleep(1)\n\n@given('the user enters \"15\" into the overtime rate field with data-testid \"overtime-rate-input\"')\ndef step_given_enter_overtime_rate(context):\n    overtime_rate_input = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='overtime-rate-input']\"))\n    )\n    overtime_rate_input.clear()\n    overtime_rate_input.send_keys(\"15\")\n    time.sleep(1)\n\n@when('the user clicks the calculate button with data-testid \"calculate-button\"')\ndef step_when_click_calculate_button(context):\n    calculate_button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='calculate-button']\"))\n    )\n    calculate_button.click()\n    time.sleep(1)\n\n@then('the total overtime earnings displayed with data-testid \"overtime-earnings\" should be \"$0.00\"')\ndef step_then_verify_overtime_earnings(context):\n    overtime_earnings = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='overtime-earnings']\"))\n    )\n    expected_earnings = \"$0.00\"\n    assert overtime_earnings.text.strip() == expected_earnings, f\"Expected '{expected_earnings}', but got '{overtime_earnings.text.strip()}'\"\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                },
                {
                    "test_case": [
                        "Feature: Calculate Total Overtime Earnings\n  The system should calculate the total overtime earnings by multiplying the overtime hours per week by the overtime rate per hour and by 4 (weeks per month), and display it in the results section.\n\n\n  Scenario: [Error] Calculate total overtime earnings with negative overtime rate\n    Given the Salary Calculator page is loaded\n    And the user enters \"5\" into the overtime hours field with data-testid \"overtime-hours-input\"\n    And the user enters \"-15\" into the overtime rate field with data-testid \"overtime-rate-input\"\n    When the user clicks the calculate button with data-testid \"calculate-button\"\n    Then the total overtime earnings displayed with data-testid \"overtime-earnings\" should be \"$0.00\""
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the Salary Calculator page is loaded')\ndef step_given_salary_calculator_page_loaded(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)\n\n@given('the user enters \"{overtime_hours}\" into the overtime hours field with data-testid \"overtime-hours-input\"')\ndef step_given_user_enters_overtime_hours(context, overtime_hours):\n    overtime_hours_input = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='overtime-hours-input']\"))\n    )\n    overtime_hours_input.clear()\n    overtime_hours_input.send_keys(overtime_hours)\n    time.sleep(1)\n\n@given('the user enters \"{overtime_rate}\" into the overtime rate field with data-testid \"overtime-rate-input\"')\ndef step_given_user_enters_overtime_rate(context, overtime_rate):\n    overtime_rate_input = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='overtime-rate-input']\"))\n    )\n    overtime_rate_input.clear()\n    overtime_rate_input.send_keys(overtime_rate)\n    time.sleep(1)\n\n@when('the user clicks the calculate button with data-testid \"calculate-button\"')\ndef step_when_user_clicks_calculate_button(context):\n    calculate_button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='calculate-button']\"))\n    )\n    calculate_button.click()\n    time.sleep(1)\n\n@then('the total overtime earnings displayed with data-testid \"overtime-earnings\" should be \"$0.00\"')\ndef step_then_total_overtime_earnings_should_be(context):\n    overtime_earnings = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='overtime-earnings']\"))\n    )\n    expected_earnings = \"$0.00\"\n    actual_earnings = overtime_earnings.text.strip()\n    assert actual_earnings == expected_earnings, f\"Expected '{expected_earnings}', but got '{actual_earnings}'\"\n\ndef after_scenario(context, scenario):\n    context.driver.quit()"
                }
            ]
        },
        "11": {
            "requirement": {
                "description": "The web application should provide a 'Salary Calculator' form that allows users to input job details and calculate total earnings. The form should include fields for job title (data-testid: 'job-input'), hours per day (data-testid: 'work-hour-input'), workdays per week (data-testid: 'work-week-input'), gross monthly salary (data-testid: 'gross-salary-input'), tax percentage (data-testid: 'tax-input'), overtime hours per week (data-testid: 'overtime-hours-input'), and overtime rate per hour (data-testid: 'overtime-rate-input'). Upon clicking the 'Calculate Salary' button (data-testid: 'calculate-button'), the system should compute the hourly salary, daily salary, monthly gross salary, tax deduction, monthly net salary, yearly net salary, total overtime earnings, and total earnings (including overtime). These results should be displayed in the results section with respective data-testids: 'hourly-salary', 'daily-salary', 'monthly-gross-salary', 'tax-deduction', 'monthly-net-salary', 'yearly-net-salary', 'overtime-earnings', and 'total-earnings'. The 'Clear' button (data-testid: 'clear-button') should reset the form and clear all displayed results. The system should handle edge cases such as zero overtime hours and ensure all calculations are accurate and formatted to two decimal places."
            },
            "test_cases": [
                {
                    "test_case": [
                        "Feature: Calculate and Display Total Earnings\n  The system should calculate the total earnings by adding the yearly net salary and total overtime earnings, and display it in the results section.\n\n\n  Scenario: [Normal] Calculate total earnings with valid inputs\n    Given the \"Salary Calculator\" page is loaded\n    And the user enters \"Software Engineer\" into the job field with data-testid \"job-input\"\n    And the user enters \"8\" into the hours per day field with data-testid \"work-hour-input\"\n    And the user enters \"5\" into the workdays per week field with data-testid \"work-week-input\"\n    And the user enters \"5000\" into the gross monthly salary field with data-testid \"gross-salary-input\"\n    And the user enters \"20\" into the tax percentage field with data-testid \"tax-input\"\n    And the user enters \"10\" into the overtime hours per week field with data-testid \"overtime-hours-input\"\n    And the user enters \"20\" into the overtime rate per hour field with data-testid \"overtime-rate-input\"\n    When the user clicks the calculate button with data-testid \"calculate-button\"\n    Then the total earnings displayed in the results section with data-testid \"total-earnings\" should be \"$48800.00\"\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the \"Salary Calculator\" page is loaded')\ndef step_impl(context):\n    context.driver = webdriver.Chrome()  # Initialize the WebDriver\n    context.driver.get(f\"file://index.html\")\n    context.driver.maximize_window()\n    WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='salary-form']\"))\n    )\n    time.sleep(1)  # Allow the page to fully load\n\n@given('the user enters \"{job}\" into the job field with data-testid \"job-input\"')\ndef step_impl(context, job):\n    job_input = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='job-input']\"))\n    )\n    job_input.clear()\n    job_input.send_keys(job)\n    time.sleep(1)\n\n@given('the user enters \"{hours_per_day}\" into the hours per day field with data-testid \"work-hour-input\"')\ndef step_impl(context, hours_per_day):\n    hours_input = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='work-hour-input']\"))\n    )\n    hours_input.clear()\n    hours_input.send_keys(hours_per_day)\n    time.sleep(1)\n\n@given('the user enters \"{workdays_per_week}\" into the workdays per week field with data-testid \"work-week-input\"')\ndef step_impl(context, workdays_per_week):\n    workdays_input = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='work-week-input']\"))\n    )\n    workdays_input.clear()\n    workdays_input.send_keys(workdays_per_week)\n    time.sleep(1)\n\n@given('the user enters \"{gross_salary}\" into the gross monthly salary field with data-testid \"gross-salary-input\"')\ndef step_impl(context, gross_salary):\n    gross_salary_input = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='gross-salary-input']\"))\n    )\n    gross_salary_input.clear()\n    gross_salary_input.send_keys(gross_salary)\n    time.sleep(1)\n\n@given('the user enters \"{tax_percentage}\" into the tax percentage field with data-testid \"tax-input\"')\ndef step_impl(context, tax_percentage):\n    tax_input = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='tax-input']\"))\n    )\n    tax_input.clear()\n    tax_input.send_keys(tax_percentage)\n    time.sleep(1)\n\n@given('the user enters \"{overtime_hours}\" into the overtime hours per week field with data-testid \"overtime-hours-input\"')\ndef step_impl(context, overtime_hours):\n    overtime_hours_input = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='overtime-hours-input']\"))\n    )\n    overtime_hours_input.clear()\n    overtime_hours_input.send_keys(overtime_hours)\n    time.sleep(1)\n\n@given('the user enters \"{overtime_rate}\" into the overtime rate per hour field with data-testid \"overtime-rate-input\"')\ndef step_impl(context, overtime_rate):\n    overtime_rate_input = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='overtime-rate-input']\"))\n    )\n    overtime_rate_input.clear()\n    overtime_rate_input.send_keys(overtime_rate)\n    time.sleep(1)\n\n@when('the user clicks the calculate button with data-testid \"calculate-button\"')\ndef step_impl(context):\n    calculate_button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='calculate-button']\"))\n    )\n    calculate_button.click()\n    time.sleep(1)\n\n@then('the total earnings displayed in the results section with data-testid \"total-earnings\" should be \"{expected_total_earnings}\"')\ndef step_impl(context, expected_total_earnings):\n    total_earnings_element = WebDriverWait(context.driver, 10).until(\n        EC.presence_of_element_located((By.CSS_SELECTOR, \"[data-testid='total-earnings']\"))\n    )\n    actual_total_earnings = total_earnings_element.text.strip()\n    assert actual_total_earnings == expected_total_earnings, f\"Expected '{expected_total_earnings}', but got '{actual_total_earnings}'\"\n\ndef after_scenario(context, scenario):\n    context.driver.quit()  # Ensure the browser is closed after each scenario"
                },
                {
                    "test_case": [
                        "Feature: Calculate and Display Total Earnings\n  The system should calculate the total earnings by adding the yearly net salary and total overtime earnings, and display it in the results section.\n\n\n  Scenario: [Edge] Calculate total earnings with zero overtime hours\n    Given the \"Salary Calculator\" page is loaded\n    And the user enters \"Software Engineer\" into the job field with data-testid \"job-input\"\n    And the user enters \"8\" into the hours per day field with data-testid \"work-hour-input\"\n    And the user enters \"5\" into the workdays per week field with data-testid \"work-week-input\"\n    And the user enters \"5000\" into the gross monthly salary field with data-testid \"gross-salary-input\"\n    And the user enters \"20\" into the tax percentage field with data-testid \"tax-input\"\n    And the user enters \"0\" into the overtime hours per week field with data-testid \"overtime-hours-input\"\n    And the user enters \"20\" into the overtime rate per hour field with data-testid \"overtime-rate-input\"\n    When the user clicks the calculate button with data-testid \"calculate-button\"\n    Then the total earnings displayed in the results section with data-testid \"total-earnings\" should be \"$48000.00\"\n"
                    ],
                    "step_code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport time\n\nfile_path = \"index.html\"\n\n@given('the \"Salary Calculator\" page is loaded')\ndef step_impl(context):\n    context.driver = webdriver.Chrome()\n    context.driver.get(f\"file://index.html\")\n    time.sleep(1)\n\n@given('the user enters \"Software Engineer\" into the job field with data-testid \"job-input\"')\ndef step_impl(context):\n    job_input = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='job-input']\"))\n    )\n    job_input.clear()\n    job_input.send_keys(\"Software Engineer\")\n    time.sleep(1)\n\n@given('the user enters \"8\" into the hours per day field with data-testid \"work-hour-input\"')\ndef step_impl(context):\n    work_hour_input = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='work-hour-input']\"))\n    )\n    work_hour_input.clear()\n    work_hour_input.send_keys(\"8\")\n    time.sleep(1)\n\n@given('the user enters \"5\" into the workdays per week field with data-testid \"work-week-input\"')\ndef step_impl(context):\n    work_week_input = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='work-week-input']\"))\n    )\n    work_week_input.clear()\n    work_week_input.send_keys(\"5\")\n    time.sleep(1)\n\n@given('the user enters \"5000\" into the gross monthly salary field with data-testid \"gross-salary-input\"')\ndef step_impl(context):\n    gross_salary_input = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='gross-salary-input']\"))\n    )\n    gross_salary_input.clear()\n    gross_salary_input.send_keys(\"5000\")\n    time.sleep(1)\n\n@given('the user enters \"20\" into the tax percentage field with data-testid \"tax-input\"')\ndef step_impl(context):\n    tax_input = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='tax-input']\"))\n    )\n    tax_input.clear()\n    tax_input.send_keys(\"20\")\n    time.sleep(1)\n\n@given('the user enters \"0\" into the overtime hours per week field with data-testid \"overtime-hours-input\"')\ndef step_impl(context):\n    overtime_hours_input = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='overtime-hours-input']\"))\n    )\n    overtime_hours_input.clear()\n    overtime_hours_input.send_keys(\"0\")\n    time.sleep(1)\n\n@given('the user enters \"20\" into the overtime rate per hour field with data-testid \"overtime-rate-input\"')\ndef step_impl(context):\n    overtime_rate_input = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='overtime-rate-input']\"))\n    )\n    overtime_rate_input.clear()\n    overtime_rate_input.send_keys(\"20\")\n    time.sleep(1)\n\n@when('the user clicks the calculate button with data-testid \"calculate-button\"')\ndef step_impl(context):\n    calculate_button = WebDriverWait(context.driver, 10).until(\n        EC.element_to_be_clickable((By.CSS_SELECTOR, \"[data-testid='calculate-button']\"))\n    )\n    calculate_button.click()\n    time.sleep(1)\n\n@then('the total earnings displayed in the results section with data-testid \"total-earnings\" should be \"$48000.00\"')\ndef step_impl(context):\n    total_earnings = WebDriverWait(context.driver, 10).until(\n        EC.visibility_of_element_located((By.CSS_SELECTOR, \"[data-testid='total-earnings']\"))\n    )\n    assert total_earnings.text.strip() == \"$48000.00\", f\"Expected '$48000.00', but got '{total_earnings.text.strip()}'\"\n    context.driver.quit()"
                }
            ]
        }
    }
}