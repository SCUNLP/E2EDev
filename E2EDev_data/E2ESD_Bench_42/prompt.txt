
    You are tasked with implementing a complete web application using HTML, JavaScript, and CSS. Your implementation must strictly follow the specifications described below.
    SUMMARY:
    {
    "overview": "The Salary Calculator application allows users to input job details, work hours, salary, tax percentage, and overtime details to calculate and display various salary metrics, including hourly, daily, monthly, and yearly earnings, as well as tax deductions and overtime earnings.",
    "predefined_options": "Default values are set for empty input fields: '______' for job title and '0' for numeric fields such as work hours, salary, tax percentage, overtime hours, and overtime rate.",
    "external_resources": "External resources include Bootstrap CSS for styling (https://cdn.jsdelivr.net/npm/bootstrap@4.6.2/dist/css/bootstrap.min.css) and a custom stylesheet (styles.css).",
    "external_js_libraries": "No external JavaScript libraries are explicitly mentioned in the provided code."
}
    ## Functional Requirements
    Implement the following features as described. For each requirement, make sure the HTML structure, JavaScript behavior, and CSS styles match the specifications exactly.
    REQUIREMENTS:
    - Requirement 1: 
The web application must provide a 'Salary Calculator' form that allows users to input job details and salary parameters. The form should include fields for job title (data-testid='job-input'), hours per day (data-testid='work-hour-input'), workdays per week (data-testid='work-week-input'), gross monthly salary (data-testid='gross-salary-input'), tax percentage (data-testid='tax-input'), overtime hours per week (data-testid='overtime-hours-input'), and overtime rate per hour (data-testid='overtime-rate-input'). Upon clicking the 'Calculate Salary' button (data-testid='calculate-button'), the system must retrieve and validate these inputs, defaulting to zero for any missing numeric values. It should then calculate the hourly salary, daily salary, monthly gross salary, tax deduction, monthly net salary, yearly net salary, overtime earnings, and total earnings. These results must be displayed in the results section with the following data-testids: job-title, hourly-salary, daily-salary, monthly-gross-salary, tax-deduction, monthly-net-salary, yearly-net-salary, overtime-earnings, and total-earnings. The 'Clear' button (data-testid='clear-button') should reset the form and results to their default states. The application should handle edge cases such as zero overtime hours and missing gross salary input, ensuring accurate calculations and updates to the results section.
- Requirement 2: 
The Salary Calculator web application must provide a 'Clear' button with the data-testid 'clear-button' that, when clicked, resets all input fields within the form identified by data-testid 'salary-form' to their default empty state. This includes fields for job title, hours per day, workdays per week, gross monthly salary, tax percentage, overtime hours per week, and overtime rate per hour. Additionally, the results section, identified by data-testid 'results-section', must be cleared, setting the job title display (data-testid 'job-title') to '______', and all salary-related fields (hourly, daily, monthly gross, tax deduction, monthly net, yearly net, overtime earnings, and total earnings) to '$0'. This functionality should work regardless of whether the fields have been previously populated or not, ensuring a consistent reset experience for the user.
- Requirement 3: 
The system must provide a 'Job' input field with the attribute data-testid='job-input' where users can enter a job title. Upon clicking the 'Calculate Salary' button (data-testid='calculate-button'), the entered job title should be displayed in the 'Salary Overview for' section under the element with data-testid='salary-overview-title' and data-testid='job-title'. If the 'Job' input field is left empty, the default value '______' must be displayed in both the title and job title elements. The system must handle edge cases such as very long job titles and special characters, ensuring they are displayed correctly without truncation or formatting issues.
- Requirement 4: 
The Salary Calculator web application must enable users to input numeric values into the following fields: 'Hours per Day' (data-testid='work-hour-input'), 'Workdays per Week' (data-testid='work-week-input'), 'Gross Monthly Salary' (data-testid='gross-salary-input'), 'Tax Percentage' (data-testid='tax-input'), 'Overtime Hours per Week' (data-testid='overtime-hours-input'), and 'Overtime Rate per Hour' (data-testid='overtime-rate-input'). Each field should accept valid numeric input, and if any field is left empty, the system should automatically assign a default value of '0' for calculation purposes. Upon clicking the 'Calculate Salary' button (data-testid='calculate-button'), the application should compute and display the following results in the 'results-section' (data-testid='results-section'): 'Hourly Salary' (data-testid='hourly-salary'), 'Daily Salary' (data-testid='daily-salary'), 'Monthly Gross Salary' (data-testid='monthly-gross-salary'), 'Tax Deduction' (data-testid='tax-deduction'), 'Monthly Net Salary' (data-testid='monthly-net-salary'), 'Yearly Net Salary' (data-testid='yearly-net-salary'), 'Total Overtime Earnings' (data-testid='overtime-earnings'), and 'Total Earnings (Including Overtime)' (data-testid='total-earnings'). The 'Clear' button (data-testid='clear-button') should reset all input fields and result displays to their default states, ensuring the 'job-title' (data-testid='job-title') is reset to '______' and all salary-related fields are reset to '$0'.
- Requirement 5: 
The system must calculate the monthly tax deduction based on the gross monthly salary and the specified tax percentage. The tax deduction should be displayed as a negative value in the results section. The calculation should handle various scenarios, including normal cases, zero values, and negative inputs. Specifically, when the user inputs a gross salary and tax percentage into the fields with data-testid 'gross-salary-input' and 'tax-input' respectively, and clicks the 'Calculate Salary' button with data-testid 'calculate-button', the system should compute the tax deduction as (grossSalary * tax / 100). The result should be displayed in the element with data-testid 'tax-deduction'. If the gross salary is zero, the tax deduction should be displayed as '-$0.00'. If the tax percentage is zero, the tax deduction should also be '-$0.00'. Negative tax percentages should not affect the calculation, and the tax deduction should remain '-$0.00'.
- Requirement 6: 
The system must calculate and display a detailed salary breakdown in the results section based on user inputs. The calculation should include the following: (1) Net monthly salary, derived by subtracting the monthly tax deduction (calculated as a percentage of the gross monthly salary) from the gross monthly salary. (2) Hourly salary, calculated based on the net monthly salary, work hours per day, and workdays per week. (3) Daily salary, derived from the hourly salary and work hours per day. (4) Yearly net salary, calculated as the net monthly salary multiplied by 12. (5) Overtime earnings, calculated based on overtime hours per week, overtime rate per hour, and the number of weeks in a month (assumed as 4). (6) Total earnings, which include yearly net salary and overtime earnings. The system must handle the following scenarios: (a) Normal cases with valid inputs, (b) Edge cases such as zero tax percentage, and (c) Error cases such as negative gross salary, where the net monthly salary and related calculations should default to $0.00. The UI must include the following elements with specified attributes: (1) Input fields for job title (data-testid='job-input'), hours per day (data-testid='work-hour-input'), workdays per week (data-testid='work-week-input'), gross monthly salary (data-testid='gross-salary-input'), tax percentage (data-testid='tax-input'), overtime hours per week (data-testid='overtime-hours-input'), and overtime rate per hour (data-testid='overtime-rate-input'). (2) Buttons for calculating (data-testid='calculate-button') and clearing (data-testid='clear-button') the form. (3) A results section (data-testid='results-section') displaying the calculated values with specific data-testid attributes for each result (e.g., 'monthly-net-salary', 'hourly-salary', 'daily-salary', etc.). The system must reset all input fields and results to their default state when the clear button is clicked. All calculations must handle invalid or missing inputs gracefully by defaulting to zero or placeholder values as appropriate.
- Requirement 7: 
The system must calculate and display the hourly salary in the results section based on the user's inputs for gross monthly salary, tax percentage, work hours per day, and workdays per week. The calculation should account for the following scenarios: normal cases with valid inputs, edge cases where work hours or workdays are zero, and cases where the tax percentage is missing or zero. The UI must include the following elements: a text input field for the job title (data-testid: 'job-input'), numeric input fields for work hours per day (data-testid: 'work-hour-input'), workdays per week (data-testid: 'work-week-input'), gross monthly salary (data-testid: 'gross-salary-input'), and tax percentage (data-testid: 'tax-input'). A button (data-testid: 'calculate-button') must trigger the calculation, and the results must be displayed in the results section with the hourly salary shown in the element with data-testid 'hourly-salary'. The system should handle invalid or missing inputs gracefully by defaulting to zero or a placeholder value ('______') where applicable, ensuring no errors occur during calculation or display.
- Requirement 8: 
The Salary Calculator web application must allow users to input their job title, work hours per day, workdays per week, gross monthly salary, tax percentage, overtime hours per week, and overtime rate per hour using designated input fields with specific data-testid attributes. Upon clicking the 'Calculate Salary' button (data-testid='calculate-button'), the system should compute the daily salary by multiplying the hourly salary (derived from the net monthly salary after tax deductions) by the work hours per day. The calculated daily salary must be displayed in the results section with data-testid='daily-salary'. The application should handle edge cases such as zero work hours, invalid inputs, and ensure that the daily salary is displayed as '$0.00' when applicable. Additionally, the 'Clear' button (data-testid='clear-button') should reset all input fields and result displays to their default states.
- Requirement 9: 
The Salary Calculator web application must allow users to input job details and salary parameters through a form with specific data-testid attributes for each field. Users should be able to enter their job title, hours worked per day, workdays per week, gross monthly salary, tax percentage, overtime hours per week, and overtime rate per hour using the respective input fields with data-testid attributes: 'job-input', 'work-hour-input', 'work-week-input', 'gross-salary-input', 'tax-input', 'overtime-hours-input', and 'overtime-rate-input'. Upon clicking the 'Calculate Salary' button with data-testid 'calculate-button', the application should compute the net monthly salary by deducting the calculated tax from the gross salary, and then calculate the yearly net salary by multiplying the net monthly salary by 12. Additionally, it should compute hourly and daily salaries based on the input work hours and workdays, as well as total overtime earnings. All calculated values, including hourly salary, daily salary, monthly gross salary, tax deduction, monthly net salary, yearly net salary, overtime earnings, and total earnings (including overtime), must be displayed in the results section with corresponding data-testid attributes: 'hourly-salary', 'daily-salary', 'monthly-gross-salary', 'tax-deduction', 'monthly-net-salary', 'yearly-net-salary', 'overtime-earnings', and 'total-earnings'. The job title should be updated in the results section with data-testid 'job-title'. The 'Clear' button with data-testid 'clear-button' should reset all input fields and result displays to their default values. The application must handle edge cases such as zero gross salary, ensuring accurate calculations and display of results.
- Requirement 10: 
The Salary Calculator web application must accurately compute and display total overtime earnings in the results section. The calculation involves multiplying the overtime hours per week (input field with data-testid 'overtime-hours-input') by the overtime rate per hour (input field with data-testid 'overtime-rate-input'), and then by 4 (representing weeks per month). The calculation should handle normal, edge, and error scenarios: 1) Normal: Valid positive inputs for both overtime hours and rate should yield correct earnings. 2) Edge: Zero values for either overtime hours or rate should result in $0.00 earnings. 3) Error: Negative values for overtime hours or rate should also result in $0.00 earnings. Upon clicking the 'Calculate Salary' button (data-testid 'calculate-button'), the computed total overtime earnings should be displayed in the designated field (data-testid 'overtime-earnings') with a dollar sign and two decimal places, ensuring clarity and precision in the output.
- Requirement 11: 
The web application should provide a 'Salary Calculator' form that allows users to input job details and calculate total earnings. The form should include fields for job title (data-testid: 'job-input'), hours per day (data-testid: 'work-hour-input'), workdays per week (data-testid: 'work-week-input'), gross monthly salary (data-testid: 'gross-salary-input'), tax percentage (data-testid: 'tax-input'), overtime hours per week (data-testid: 'overtime-hours-input'), and overtime rate per hour (data-testid: 'overtime-rate-input'). Upon clicking the 'Calculate Salary' button (data-testid: 'calculate-button'), the system should compute the hourly salary, daily salary, monthly gross salary, tax deduction, monthly net salary, yearly net salary, total overtime earnings, and total earnings (including overtime). These results should be displayed in the results section with respective data-testids: 'hourly-salary', 'daily-salary', 'monthly-gross-salary', 'tax-deduction', 'monthly-net-salary', 'yearly-net-salary', 'overtime-earnings', and 'total-earnings'. The 'Clear' button (data-testid: 'clear-button') should reset the form and clear all displayed results. The system should handle edge cases such as zero overtime hours and ensure all calculations are accurate and formatted to two decimal places.

    
    ## Output Format
    Provide a clean and complete implementation including:
    1. HTML structure (including necessary `data-testid`, `id`, and `class` values).
    2. JavaScript functionality that matches the behavior described.
    3. CSS for styling according to BEM and required class names.
    4. Ensure that the text content in the components is exactly as specified in the requirements.
    Do not include any extra components or libraries not listed above. Keep your code concise, semantic, and standards-compliant.
    